OBJECT Codeunit 50026 Altreklamationen Check
{
  OBJECT-PROPERTIES
  {
    Date=03.06.15;
    Time=12:49:54;
    Modified=Yes;
    Version List=GOB,HME4306;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Altreklamationen@1000000000 : Record 50041;
      AltreklamationenPrÅfungslog@1000000005 : Record 50042;
      SalesOrder@1000000001 : Record 36;
      SalesOrderLine@1000000010 : Record 37;
      ArchSalesOrder@1000000002 : Record 5107;
      ArchSalesOrderLine@1000000011 : Record 5108;
      Item@1000000008 : Record 27;
      IsSalesOrder@1000000003 : Boolean;
      IsArchSalesOrder@1000000004 : Boolean;
      EntryNo@1000000006 : Integer;
      Text001@1000000007 : TextConst 'DEU=Der Auftrag/archivierte Auftrag konnte nicht gefunden werden.';
      Text002@1000000009 : TextConst 'DEU=Artikel %1 existiert in NAV nicht.';
      Text003@1000000012 : TextConst 'DEU=Der Artikel %1 ist nicht im Auftrag vorhanden.';
      Text004@1000000013 : TextConst 'DEU=Der Artikel %1 ist nicht im archivierten Auftrag vorhanden.';
      Text005@1000000014 : TextConst 'DEU=Der Artikel %1 mÅsste mindestens in der Menge %2 vorhanden sein. Die Menge ist jedoch %3 im Auftrag.';
      Text006@1000000015 : TextConst 'DEU=Der Artikel %1 mÅsste mindestens in der Menge %2 vorhanden sein. Die Menge ist jedoch %3 im archivierten Auftrag.';
      Text007@1000000016 : TextConst 'DEU=Der Artikel %1 soll storniert werden. Es existiert jedoch keine nicht gelieferte Zeile fÅr diesen Artikel im Auftrag.';
      Text008@1000000017 : TextConst 'DEU=Der Artikel %1 soll storniert werden. Es existiert jedoch keine nicht gelieferte Zeile fÅr diesen Artikel im archivierten Auftrag.';
      Text009@1000000018 : TextConst 'DEU=Der Artikel %1 wurde bereits in dieser Menge im Auftrag storniert.';
      Text010@1000000019 : TextConst 'DEU=Der Betrag der erstattet werden soll passt nicht zum Betrag in den Auftragszeilen. Artikel %1, Betrag Auftrag %2, Betrag Altreklamation: %3.';
      Text011@1000000020 : TextConst 'DEU=Der Betrag der erstattet werden soll passt nicht zum Betrag in den archivierten Auftragszeilen. Artikel %1, Betrag arch. Auftrag %2, Betrag Altreklamation: %3.';
      Window@1000000021 : Dialog;
      ZÑhler@1000000022 : Integer;
      Anzahl@1000000023 : Integer;
      Text012@1000000025 : TextConst 'DEU=Der Artikel %1 soll retourniert werden. Es existiert jedoch keine gelieferte Zeile fÅr diesen Artikel im Auftrag.';
      Text013@1000000024 : TextConst 'DEU=Der Artikel %1 soll retourniert werden. Es existiert jedoch keine gelieferte Zeile fÅr diesen Artikel im archivierten Auftrag.';
      Text014@1000000027 : TextConst 'DEU=Der Betrag (Kulanz, Rabatt) der erstattet werden soll ist grî·er als der Auftragsbetrag. Artikel %1, Betrag Auftrag %2, Betrag Altreklamation: %3.';
      Text015@1000000026 : TextConst 'DEU=Der Betrag (Kulanz, Rabatt) der erstattet werden soll ist grî·er als der arch. Auftragsbetrag. Artikel %1, Betrag arch. Auftrag %2, Betrag Altreklamation: %3.';
      Text016@1000000028 : TextConst 'DEU=Der Auftrag ist bereits archiviert und abgeschlossen und kann daher nicht mehr storniert werden.';
      Abfragefenster@1000000029 : Dialog;
      IsStartChecks@1000000030 : Boolean;
      FPCManagement@1000000031 : Codeunit 50003;
      ClearSalesOrderLine@1000000032 : Record 37;
      ClearArchSalesOrderLine@1000000033 : Record 5108;
      Text017@1000000034 : TextConst 'DEU=Der Artikel %1 wurde bereits in dieser Menge im archivierten Auftrag storniert.';
      Text018@1000000035 : TextConst 'DEU=Es ist nicht mîglich in der angegeben Menge den Artikel zu stornieren. Menge Altreklamationen: %1, Menge Auftrag: %2.';
      AltreklamationPrÅfungslogTEMP@1000000036 : TEMPORARY Record 50042;
      DummyDate@1000000037 : Date;

    PROCEDURE StartAltReklamationen@1000000035(Parameter@1000000000 : Integer;DateOfCreation@1000000001 : Text[30]);
    BEGIN
      CLEAR(ZÑhler);
      CLEAR(Anzahl);

      CASE Parameter OF
         1: StartChecks();
         2: FehlerLoeschenBereitsStorniert();
         3: CheckGroupon();
         4: Einkaufscode22000Auftraege();
         5: LiefernAuftragszeilen();
         6: SetStornoToRetoure();
         7: VorbereitungKulanzenRabatte();
         8: DurchfÅhrenKulanzenRabatte();
         9: BuchenErstellteReklamationen(DateOfCreation);
        10: PruefeBetragErneut();
        11: VorbereitungRetourenStornos();
        12: DurchfÅhrenRetourenStornos();
        13: BuchenRetouren(DateOfCreation);
        14: Fehlercode8Verarbeitet();
        15: VorbereitenFehlercode9();
        16: DurchfÅhrenFehlercode9();
        17: BuchenRetouren(DateOfCreation);
        18: Fehlercode9Loeschen();
        19: StornoAufRetoure();
        20: VorbereitenStornoAufRetoure();
        21: DurchfÅhrenStornoAufRetoure();
        22: BuchenStornoAufRetouren(DateOfCreation);
        23: Fehlercode589Loeschen();
      END;
    END;

    PROCEDURE StartChecks@1000000009();
    BEGIN
      IF AltreklamationenPrÅfungslog.FINDLAST THEN
        EntryNo := AltreklamationenPrÅfungslog."Lfd. Nr.";

      Window.OPEN('PrÅfungen - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');
      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        Checks();

      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE Checks@1000000018();
    BEGIN
      IsSalesOrder := FALSE;
      IsArchSalesOrder := FALSE;
      SalesOrder.RESET;
      SalesOrderLine.RESET;
      ArchSalesOrder.RESET;
      ArchSalesOrderLine.RESET;
      CheckSalesOrderExists;
      CheckItemExists;
      CheckItemInSalesOrder;
      CheckQuantity;
      CheckRetour;
      CheckCancel;
      CheckAlreadyRetoured;
      CheckAlreadyCanceled;
      CheckAmount;

      IF IsSalesOrder THEN
        Altreklamationen.Auftragstyp := Altreklamationen.Auftragstyp::Auftrag
      ELSE
        Altreklamationen.Auftragstyp := Altreklamationen.Auftragstyp:: "Archiv. Auftrag";
      Altreklamationen.MODIFY;
    END;

    PROCEDURE CheckSalesOrderExists@1000000000();
    BEGIN
      // PrÅft ob der importierte Auftrag Åberhaupt in NAV existiert (als Auftrag oder arch. Auftrag)
      SalesOrder.SETRANGE("Document Type",SalesOrder."Document Type"::Order);
      SalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
      IF SalesOrder.FINDFIRST THEN
        IsSalesOrder := TRUE;

      IF NOT IsSalesOrder THEN BEGIN
        ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
        ArchSalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
        IF ArchSalesOrder.FINDLAST THEN
          IsArchSalesOrder := TRUE;
      END;

      IF NOT IsSalesOrder AND NOT IsArchSalesOrder THEN
        SetErrorText(Text001,1);
    END;

    PROCEDURE CheckItemExists@1000000001();
    BEGIN
      // PrÅft ob der Artikel in NAV existiert
      IF NOT Item.GET(Altreklamationen."Artikelnr.") THEN
        SetErrorText(STRSUBSTNO(Text002,Altreklamationen."Artikelnr."),2);
    END;

    PROCEDURE CheckItemInSalesOrder@1000000002();
    BEGIN
      // PrÅft ob der Artikel im Auftrag in NAV existiert
      IF IsSalesOrder THEN BEGIN
        SalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
        SalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
        SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::Item);
        SalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
        IF SalesOrderLine.ISEMPTY THEN
          SetErrorText(STRSUBSTNO(Text003,Altreklamationen."Artikelnr."),3);
      END;

      IF IsArchSalesOrder THEN BEGIN
        ArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrder."Document Type");
        ArchSalesOrderLine.SETRANGE("Document No.",ArchSalesOrder."No.");
        ArchSalesOrderLine.SETRANGE(Type,ArchSalesOrderLine.Type::Item);
        ArchSalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
        IF ArchSalesOrderLine.ISEMPTY THEN
          SetErrorText(STRSUBSTNO(Text004,Altreklamationen."Artikelnr."),3);
      END;
    END;

    PROCEDURE CheckQuantity@1000000003();
    VAR
      Menge@1000000000 : Decimal;
    BEGIN
      // PrÅft ob die importierten Mengen mit denen des Auftrags in NAV Åbereinstimmen
      IF IsSalesOrder THEN BEGIN
        IF SalesOrderLine.FINDSET THEN REPEAT
          Menge += SalesOrderLine.Quantity;
        UNTIL SalesOrderLine.NEXT = 0;

        IF Menge < Altreklamationen.Menge THEN
          SetErrorText(STRSUBSTNO(Text005,Altreklamationen."Artikelnr.",Altreklamationen.Menge,SalesOrderLine.Quantity),4);
      END;

      IF IsArchSalesOrder THEN BEGIN
        IF ArchSalesOrderLine.FINDSET THEN REPEAT
          Menge += ArchSalesOrderLine.Quantity;
        UNTIL ArchSalesOrderLine.NEXT = 0;

        IF Menge < Altreklamationen.Menge THEN
          SetErrorText(STRSUBSTNO(Text006,Altreklamationen."Artikelnr.",Altreklamationen.Menge,ArchSalesOrderLine.Quantity),4);
      END;
    END;

    PROCEDURE CheckRetour@1000000004();
    BEGIN
      // PrÅft ob die Auftragszeile in NAV bereits geliefert wurde
      IF Altreklamationen.Reklamationsgrund IN ['STORNO','TEILSTORNO'] THEN BEGIN
        IF IsSalesOrder THEN BEGIN
          SalesOrderLine.SETRANGE("Quantity Shipped",0);
          IF SalesOrderLine.ISEMPTY THEN
            SetErrorText(STRSUBSTNO(Text007,Altreklamationen."Artikelnr."),5);
        END;

        IF IsArchSalesOrder THEN BEGIN
          ArchSalesOrderLine.SETRANGE("Quantity Shipped",0);
          IF ArchSalesOrderLine.ISEMPTY THEN
            SetErrorText(STRSUBSTNO(Text008,Altreklamationen."Artikelnr."),5);
        END;
      END;
    END;

    PROCEDURE CheckCancel@1000000005();
    BEGIN
      // PrÅft ob die Auftragszeile in NAV noch nicht geliefert wurde
      IF Altreklamationen.Reklamationsgrund = 'RETOURE' THEN BEGIN
        IF IsSalesOrder THEN BEGIN
          SalesOrderLine.SETFILTER("Quantity Shipped",'<>%1',0);
          IF SalesOrderLine.ISEMPTY THEN
            SetErrorText(STRSUBSTNO(Text012,Altreklamationen."Artikelnr."),6);
        END;
        {
        IF IsArchSalesOrder THEN BEGIN
          ArchSalesOrderLine.SETFILTER("Quantity Shipped",'<>%1',0);
          IF ArchSalesOrderLine.ISEMPTY THEN
            SetErrorText(STRSUBSTNO(Text013,Altreklamationen."Artikelnr."),6);
        END;
        }
      END;
    END;

    PROCEDURE CheckAlreadyRetoured@1000000007();
    BEGIN
      // PrÅft ob die Auftragszeile in NAV bereits retourniert wurde

      // kann man das Åberhaupt prÅfen?
    END;

    PROCEDURE CheckAlreadyCanceled@1000000006();
    BEGIN
      // PrÅft ob die Auftragszeile in NAV bereits storniert wurde
      IF Altreklamationen.Reklamationsgrund IN ['STORNO','TEILSTORNO'] THEN BEGIN
        IF IsSalesOrder THEN BEGIN
          // Gibt es schon in der Menge stornierte Verkaufszeilen?
          SalesOrderLine.SETRANGE(Quantity,0);
          SalesOrderLine.SETRANGE("Line Status",'CANCELED');
          IF SalesOrderLine.COUNT >= Altreklamationen.Menge THEN BEGIN
            // Wenn ja, gibt es noch die Mîglichkeit die Artikel in der Menge noch mal zu stornieren?
            SalesOrderLine.SETFILTER(Quantity,'<>%1',0);
            SalesOrderLine.SETFILTER("Line Status",'<>%1','CANCELED');
            IF SalesOrderLine.COUNT < Altreklamationen.Menge THEN BEGIN
              // Wenn nein, dann wurde bereits storniert und ist abgehakt.-> fertig
              SetErrorText(STRSUBSTNO(Text009,Altreklamationen."Artikelnr."),7);
              Altreklamationen.Verarbeitet := TRUE;
              Altreklamationen."Verarbeitet am" := CURRENTDATETIME;
              Altreklamationen."Verarbeitet von" := 'BATCH';
              Altreklamationen.MODIFY;
            END;
          END ELSE BEGIN
            // Wenn nein,  gibt es noch die Mîglichkeit die Artikel in der Menge zu stornieren?
            SalesOrderLine.SETFILTER(Quantity,'<>%1',0);
            SalesOrderLine.SETFILTER("Line Status",'<>%1','CANCELED');
            IF SalesOrderLine.COUNT < Altreklamationen.Menge THEN BEGIN
              // Wenn nein, dann prÅfen, ob in der Menge wenigstens geliefert wurde (Storno -> Retoure)
              SalesOrderLine.SETRANGE("Quantity Shipped");
              // Wenn nein, dann Fehler, dass nicht in ausreichender Menge stornierbar
              IF SalesOrderLine.COUNT < Altreklamationen.Menge THEN
                SetErrorText(STRSUBSTNO(Text018,Altreklamationen.Menge,SalesOrderLine.COUNT),11);
            END;
          END;
        END ELSE BEGIN
          // Gibt es schon in der Menge stornierte Arch. Verkaufszeilen?
          ArchSalesOrderLine.SETRANGE(Quantity,0);
          ArchSalesOrderLine.SETRANGE("Line Status",'CANCELED');
          IF ArchSalesOrderLine.COUNT >= Altreklamationen.Menge THEN BEGIN
            // Wenn ja, dann in Ordnung -> fertig
            SetErrorText(STRSUBSTNO(Text017,Altreklamationen."Artikelnr."),7);
            Altreklamationen.Verarbeitet := TRUE;
            Altreklamationen."Verarbeitet am" := CURRENTDATETIME;
            Altreklamationen."Verarbeitet von" := 'BATCH';
            Altreklamationen.MODIFY;
          END ELSE
            // Wenn nein, dann muss aus Storno eine Retoure werden.
            SetErrorText(Text016,8);
        END;
      END;
    END;

    PROCEDURE CheckAmount@1000000008();
    VAR
      Betrag@1000000000 : Decimal;
      BetragAlt@1000000001 : Decimal;
      RessOrderLine@1000000002 : Record 37;
      RessArchOrderLine@1000000003 : Record 5108;
      ItemChargeAssgntSales@1000000004 : Record 5809;
    BEGIN
      // PrÅft ob der zu erstattende Betrag mit dem im Auftrag in NAV Åbereinstimmt
      IF IsSalesOrder THEN BEGIN
        SalesOrderLine.SETRANGE(Quantity);
        SalesOrderLine.SETRANGE("Line Status");
        SalesOrderLine.SETRANGE("Quantity Shipped");
        IF SalesOrderLine.FINDSET THEN REPEAT
          IF SalesOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
            Betrag += SalesOrderLine."Prepmt. Amt. Incl. VAT"
          ELSE
            IF SalesOrderLine."Amount Including VAT" <> 0 THEN
              Betrag += SalesOrderLine."Amount Including VAT"
            ELSE
              Betrag += SalesOrderLine."Unit Price";
        UNTIL SalesOrderLine.NEXT = 0;

        IF SalesOrderLine.COUNT <> 0 THEN
          Betrag := Betrag/SalesOrderLine.COUNT;

        IF Altreklamationen.Menge <> 0 THEN
          BetragAlt := Altreklamationen.RÅckerstattungsbetrag/Altreklamationen.Menge
        ELSE
          BetragAlt := Altreklamationen.RÅckerstattungsbetrag;

        IF (Altreklamationen.Reklamationsgrund <> 'KULANZ') AND
           (Altreklamationen.Reklamationsgrund <> 'RABATT') THEN BEGIN
          IF Betrag <> BetragAlt THEN BEGIN
            // Gibt es Zu-/AbschlÑge
            ItemChargeAssgntSales.SETRANGE("Document Type",SalesOrderLine."Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.",SalesOrderLine."Document No.");
            ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",SalesOrderLine."Document Type");
            ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",SalesOrderLine."Document No.");
            ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.", SalesOrderLine."Line No.");
            IF ItemChargeAssgntSales.FINDFIRST THEN
              Betrag += ItemChargeAssgntSales."Amount to Assign";

            IF Betrag <> BetragAlt THEN BEGIN
              // Gibt es noch Ressourcenzeilen, die addiert werden mÅssen (Gutscheine, 2MH ...)
              RessOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type");
              RessOrderLine.SETRANGE("Document No.",SalesOrderLine."Document No.");
              RessOrderLine.SETRANGE(Type,RessOrderLine.Type::Resource);
              RessOrderLine.SETFILTER("Resource Type",'%1|%2|%3',RessOrderLine."Resource Type"::"Sales Bon",
                                                                 RessOrderLine."Resource Type"::Groupon,
                                                                 RessOrderLine."Resource Type"::"Credit Bon");
              IF RessOrderLine.FINDSET THEN REPEAT
                IF RessOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                  Betrag += RessOrderLine."Prepmt. Amt. Incl. VAT"
                ELSE
                  Betrag += RessOrderLine."Unit Price";
              UNTIL RessOrderLine.NEXT = 0;
            END;
          END;

          // Wenn immer noch Betrag abweicht, andere Ressourcen noch dazu rechnen
          IF Betrag <> BetragAlt THEN BEGIN
            RessOrderLine.SETFILTER("Resource Type",'<>%1&<>%2&<>%3',RessOrderLine."Resource Type"::"Sales Bon",
                                                                     RessOrderLine."Resource Type"::Groupon,
                                                                     RessOrderLine."Resource Type"::"Credit Bon");
            RessOrderLine.SETRANGE("Parent ID",SalesOrderLine.ID);
            IF RessOrderLine.FINDSET THEN REPEAT
              IF RessOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                Betrag += RessOrderLine."Prepmt. Amt. Incl. VAT"
              ELSE
                Betrag += RessOrderLine."Unit Price";
            UNTIL RessOrderLine.NEXT = 0;
          END;

          IF Betrag <> BetragAlt THEN
            SetErrorText(STRSUBSTNO(Text010,Altreklamationen."Artikelnr.",Betrag,BetragAlt),9);
        END ELSE BEGIN
          IF Betrag < BetragAlt THEN
            SetErrorText(STRSUBSTNO(Text014,Altreklamationen."Artikelnr.",Betrag,BetragAlt),10);
        END;
      END;

      IF IsArchSalesOrder THEN BEGIN
        ArchSalesOrderLine.SETRANGE(Quantity);
        ArchSalesOrderLine.SETRANGE("Line Status");
        ArchSalesOrderLine.SETRANGE("Quantity Shipped");
        IF ArchSalesOrderLine.FINDSET THEN REPEAT
          IF ArchSalesOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
            Betrag += ArchSalesOrderLine."Prepmt. Amt. Incl. VAT"
          ELSE
            IF ArchSalesOrderLine."Amount Including VAT" <> 0 THEN
              Betrag += ArchSalesOrderLine."Amount Including VAT"
            ELSE
              Betrag += ArchSalesOrderLine."Unit Price";
        UNTIL ArchSalesOrderLine.NEXT = 0;

        IF ArchSalesOrderLine.COUNT <> 0 THEN
          Betrag := Betrag/ArchSalesOrderLine.COUNT;

        IF Altreklamationen.Menge <> 0 THEN
          BetragAlt := Altreklamationen.RÅckerstattungsbetrag/Altreklamationen.Menge
        ELSE
          BetragAlt := Altreklamationen.RÅckerstattungsbetrag;

        IF (Altreklamationen.Reklamationsgrund <> 'KULANZ') AND
           (Altreklamationen.Reklamationsgrund <> 'RABATT') THEN BEGIN
          IF Betrag <> BetragAlt THEN BEGIN
            // Gibt es noch Gutschein, der abgezogen werden muss?
            RessArchOrderLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type");
            RessArchOrderLine.SETRANGE("Document No.",ArchSalesOrderLine."Document No.");
            RessArchOrderLine.SETRANGE("Version No.",ArchSalesOrderLine."Version No.");

            RessArchOrderLine.SETRANGE(Type,RessOrderLine.Type::Resource);
            RessArchOrderLine.SETFILTER("Resource Type",'%1|%2|%3',RessArchOrderLine."Resource Type"::"Sales Bon",
                                                               RessArchOrderLine."Resource Type"::Groupon,
                                                               RessArchOrderLine."Resource Type"::"Credit Bon");
            IF RessArchOrderLine.FINDSET THEN REPEAT
              IF RessArchOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                Betrag += RessArchOrderLine."Prepmt. Amt. Incl. VAT"
              ELSE
                Betrag += RessArchOrderLine."Unit Price";
            UNTIL RessArchOrderLine.NEXT = 0;
          END;

          // Wenn immer noch Betrag abweicht, andere Ressourcen noch dazu rechnen
          IF Betrag <> BetragAlt THEN BEGIN
            RessArchOrderLine.SETFILTER("Resource Type",'<>%1&<>%2&<>%3',RessArchOrderLine."Resource Type"::"Sales Bon",
                                                                         RessArchOrderLine."Resource Type"::Groupon,
                                                                         RessArchOrderLine."Resource Type"::"Credit Bon");
            RessArchOrderLine.SETRANGE("Parent ID",ArchSalesOrderLine.ID);
            IF RessArchOrderLine.FINDSET THEN REPEAT
              IF RessArchOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                Betrag += RessArchOrderLine."Prepmt. Amt. Incl. VAT"
              ELSE
                Betrag += RessArchOrderLine."Unit Price";
            UNTIL RessArchOrderLine.NEXT = 0;
          END;

          IF Betrag <> BetragAlt THEN
            SetErrorText(STRSUBSTNO(Text011,Altreklamationen."Artikelnr.",Betrag,BetragAlt),9);
        END ELSE BEGIN
          IF Betrag < BetragAlt THEN
            SetErrorText(STRSUBSTNO(Text015,Altreklamationen."Artikelnr.",Betrag,BetragAlt),10);
        END;
      END;
    END;

    PROCEDURE SetErrorText@1000000010(Text@1000000000 : Text[250];Fehlercode@1000000001 : Integer);
    VAR
      AltreklamationenPrÅfungslog@1000000002 : Record 50042;
    BEGIN
      EntryNo += 1;

      AltreklamationenPrÅfungslog.INIT;
      AltreklamationenPrÅfungslog."Lfd. Nr." := EntryNo;
      AltreklamationenPrÅfungslog."Auftragsnr." := Altreklamationen."Auftragsnr.";
      AltreklamationenPrÅfungslog.PrÅfungsmeldung := Text;
      AltreklamationenPrÅfungslog."Lfd. Nr. Altreklamation" := Altreklamationen."Lfd. Nr.";
      AltreklamationenPrÅfungslog.Fehlercode := Fehlercode;
      AltreklamationenPrÅfungslog.INSERT;
    END;

    PROCEDURE FehlerLoeschenBereitsStorniert@1000000016();
    BEGIN
      Window.OPEN('Fehler lîschen bereits storniert - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETRANGE(Verarbeitet,TRUE);
      Altreklamationen.SETRANGE("Verarbeitet von",'BATCH');
      Anzahl := Altreklamationen.COUNT;
      IF Altreklamationen.FINDSET THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        IF NOT AltreklamationenPrÅfungslog.ISEMPTY THEN
          AltreklamationenPrÅfungslog.DELETEALL;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE SetStornoToRetoure@1000000014();
    BEGIN
      Window.OPEN('Storno auf Retoure Ñndern - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      IF AltreklamationenPrÅfungslog.FINDLAST THEN
        EntryNo := AltreklamationenPrÅfungslog."Lfd. Nr.";

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2','STORNO','TEILSTORNO');
      Anzahl := Altreklamationen.COUNT;
      IF Altreklamationen.FINDSET(TRUE,TRUE) THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        Altreklamationen.CALCFIELDS(PrÅfungsfehler);
        IF Altreklamationen.PrÅfungsfehler > 0 THEN BEGIN
          AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
          // Nur wenn einzige Fehler 5 + 8 + 11 sind, sonst nicht umstellen
          AltreklamationenPrÅfungslog.SETFILTER(Fehlercode,'<>%1&<>%2&<>%3',5,8,11);
          IF AltreklamationenPrÅfungslog.ISEMPTY THEN BEGIN
            Altreklamationen."Alter Reklamationsgrund" := Altreklamationen.Reklamationsgrund;
            Altreklamationen.Reklamationsgrund := 'RETOURE';
            Altreklamationen.MODIFY;

            AltreklamationenPrÅfungslog.SETRANGE(Fehlercode);
            AltreklamationenPrÅfungslog.DELETEALL;
            Checks();
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE CheckGroupon@1000000029();
    BEGIN
      Window.OPEN('Rausfiltern der Groupons - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETRANGE(Reklamationsgrund,'RETOURE');
      //Altreklamationen.SETFILTER("Auftragsnr.",'<>%1','1700217759');
      Anzahl := Altreklamationen.COUNT;
      IF Altreklamationen.FINDSET THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        AltreklamationenPrÅfungslog.SETRANGE(Fehlercode,6);
        // Hat Altreklamation Fehlercode 6 (nicht geliefert, aber Retoure)
        IF NOT AltreklamationenPrÅfungslog.ISEMPTY THEN BEGIN
          SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
          SalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
          SalesOrderLine.SETRANGE("Resource Type",SalesOrderLine."Resource Type"::Groupon);
          IF NOT SalesOrderLine.ISEMPTY THEN BEGIN
            Altreklamationen."nicht verarbeiten" := TRUE;
            Altreklamationen.MODIFY;
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE Einkaufscode22000Auftraege@1000000038();
    BEGIN
      Window.OPEN('Einkaufscode 22000* AuftrÑge - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER("Auftragsnr.",'22000*');
      Anzahl := Altreklamationen.COUNT;
      IF Altreklamationen.FINDSET THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
        SalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
        SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::Item);
        SalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
        SalesOrderLine.SETRANGE("Quantity Shipped",0);
        IF SalesOrderLine.FINDSET THEN REPEAT
          IF SalesOrderLine."Purchasing Code" = '' THEN BEGIN
            SalesOrderLine."Purchasing Code" := 'FRA-1';
            SalesOrderLine.MODIFY;
          END;
        UNTIL SalesOrderLine.NEXT = 0;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE LiefernAuftragszeilen@1000000017();
    VAR
      x@1000000000 : Integer;
      SalesPost@1000000001 : Codeunit 80;
      Buchen@1000000002 : Boolean;
      OrderImportLog@1000000003 : Record 50001;
      locShipmentDate@1000000004 : DateTime;
      ResLine@1000000005 : Record 37;
      SalesLine@1000000006 : Record 37;
    BEGIN
      Window.OPEN('Liefern der Auftragszeilen - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      IF AltreklamationenPrÅfungslog.FINDLAST THEN
        EntryNo := AltreklamationenPrÅfungslog."Lfd. Nr.";

      Altreklamationen.SETRANGE(Reklamationsgrund,'RETOURE');
      //Altreklamationen.SETFILTER("Auftragsnr.",'<>%1','1700217759');
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      Anzahl := Altreklamationen.COUNT;
      IF Altreklamationen.FINDSET THEN REPEAT
        Buchen := FALSE;
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        AltreklamationenPrÅfungslog.SETRANGE(Fehlercode,6);
        // Hat Altreklamation Fehlercode 6 (nicht geliefert, aber Retoure)
        IF NOT AltreklamationenPrÅfungslog.ISEMPTY THEN BEGIN
          // Ist nicht Fehlercode 4 dabei (Menge passt nicht) ... dann liefern
          AltreklamationenPrÅfungslog.SETRANGE(Fehlercode,4);
          IF AltreklamationenPrÅfungslog.ISEMPTY THEN BEGIN
            // Lieferung vorbereiten
            SalesOrderLine.RESET;
            SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
            SalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
            SalesOrderLine.SETRANGE("Quantity Shipped",0);
            // Zeilen des Auftrags zurÅcksetzen
            IF SalesOrderLine.FINDSET THEN REPEAT
              SalesOrderLine.VALIDATE("Qty. to Ship",0);
              SalesOrderLine.MODIFY;
            UNTIL SalesOrderLine.NEXT = 0;

            // Zeilen mit Menge 1 zu liefern vorbelegen
            SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::Item);
            SalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
            SalesOrderLine.SETFILTER(Quantity,'<>%1',0);
            IF SalesOrderLine.FINDSET THEN BEGIN

              //A/04.12.12/GOB-MNO
              OrderImportLog.RESET;
              OrderImportLog.SETCURRENTKEY("Order No.","Imp. Type");
              OrderImportLog.SETRANGE("Order No.",SalesOrderLine."Document No.");
              OrderImportLog.SETRANGE("Shipment Trigger",'ExcelLogistik');
              OrderImportLog.SETRANGE("Item No.",SalesOrderLine."No.");
              IF OrderImportLog.FINDFIRST THEN
                locShipmentDate := OrderImportLog."Shipment Date"
              ELSE
                locShipmentDate := Altreklamationen."Erstellt am";
              //E/04.12.12/GOB-MNO

              FOR x := 1 TO Altreklamationen.Menge DO BEGIN
                IF x > 1 THEN
                  SalesOrderLine.NEXT;
                SalesOrderLine.VALIDATE("Qty. to Ship",1);
                SalesOrderLine."Actual Delivery Date" := locShipmentDate;
                // Direktlieferung?
                IF SalesOrderLine."Drop Shipment" THEN BEGIN
                  SalesOrderLine."Drop Shipment" := FALSE;
                  SalesOrderLine."Purchase Order No." := '';
                  SalesOrderLine."Purch. Order Line No." := 0;
                END;
                Buchen := TRUE;
                SalesOrderLine.MODIFY;

                // Wenn zugehîrige Ressourcenzeile vorhanden ist, dann diese auch liefern
                ResLine.SETRANGE("Document Type",SalesOrderLine."Document Type");
                ResLine.SETRANGE("Document No.",SalesOrderLine."Document No.");
                ResLine.SETRANGE("Parent ID",SalesOrderLine.ID);
                IF ResLine.FIND('-') THEN REPEAT
                  IF ResLine."Quantity Shipped" = 0 THEN BEGIN
                    ResLine.VALIDATE("Qty. to Ship",1);
                    ResLine."Actual Delivery Date" := SalesOrderLine."Actual Delivery Date";
                    ResLine.MODIFY;
                  END;
                UNTIL ResLine.NEXT = 0;
              END;
            END;

            // Wenn es verknÅpfte Ressourcenzeilen gibt, prÅfe, ob Artikelzeile bereits geliefert. wenn ja, auch liefern.
            ResLine.SETRANGE("Document Type",SalesOrderLine."Document Type");
            ResLine.SETRANGE("Document No.",SalesOrderLine."Document No.");
            ResLine.SETFILTER("Parent ID",'<>%1',0);
            IF ResLine.FIND('-') THEN REPEAT
              IF ResLine."Quantity Shipped" = 0 THEN BEGIN
                SalesLine.SETRANGE("Document Type",SalesOrderLine."Document Type");
                SalesLine.SETRANGE("Document No.",SalesOrderLine."Document No.");
                SalesLine.SETRANGE(ID,ResLine."Parent ID");
                IF SalesLine."Quantity Shipped" <> 0 THEN BEGIN
                  ResLine.VALIDATE("Qty. to Ship",1);
                  ResLine."Actual Delivery Date" := locShipmentDate;
                  ResLine.MODIFY;
                END;
              END;
            UNTIL ResLine.NEXT = 0;

            // Wenn nur noch Ressourcenzeilen Åbrig sind, dann diese auch liefern.
            SalesOrderLine.SETRANGE("No.");
            // auf alle Artikel filtern und prÅfen, ob welche da sind, die noch nicht geliefert we/urden
            SalesOrderLine.SETRANGE("Qty. to Ship",0);
            // Wenn keine Artikel mehr da sind, die geliefert werden mÅssen: PrÅfen ob nur noch Ressourcen/Zu-/AbschlÑge da sind.
            IF SalesOrderLine.ISEMPTY THEN BEGIN
              // Wenn nur noch Ressource/Zu-/AbschlÑge da sind:
              SalesOrderLine.SETFILTER(Type,'%1|%2',SalesOrderLine.Type::Resource,SalesOrderLine.Type::"Charge (Item)");
              IF NOT SalesOrderLine.ISEMPTY THEN BEGIN
                IF SalesOrderLine.FINDSET(TRUE,TRUE) THEN REPEAT
                  SalesOrderLine.VALIDATE("Qty. to Ship",1);
                  SalesOrderLine."Actual Delivery Date" := locShipmentDate;
                  SalesOrderLine.MODIFY;
                UNTIL SalesOrderLine.NEXT = 0;
              END;
            END;

            COMMIT;

            // Lieferung buchen
            IF Buchen THEN BEGIN
              CLEAR(SalesPost);
              IF SalesOrder.GET(SalesOrder."Document Type"::Order,Altreklamationen."Auftragsnr.") THEN BEGIN
                SalesOrder."Ignore Komm. Control" := TRUE;
                SalesOrder."Cancel Without Interfaces" := TRUE;
                SalesOrder.Ship := TRUE;
                SalesOrder.Invoice := FALSE;
                SalesOrder."Posting Date" := DT2DATE(locShipmentDate);
                SalesOrder.MODIFY;
                SalesPost.RUN(SalesOrder);
              END;
            END;
            AltreklamationenPrÅfungslog.SETRANGE(Fehlercode);
            AltreklamationenPrÅfungslog.DELETEALL;
            Checks();
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE VorbereitungKulanzenRabatte@1000000011();
    VAR
      i@1000000000 : Integer;
      locResLine@1000000001 : Record 37;
      locArchResLine@1000000002 : Record 5108;
    BEGIN
      Window.OPEN('Vorbereitung: Kulanzen und Rabtte - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2','KULANZ','RABATT');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      //Altreklamationen.SETRANGE("Auftragsnr.",'1700214598');

      Anzahl := Altreklamationen.COUNT;
      IF Altreklamationen.FINDSET(TRUE,TRUE) THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        Altreklamationen.CALCFIELDS(PrÅfungsfehler);
        IF (Altreklamationen.PrÅfungsfehler = 0) OR (Altreklamationen."Verarbeitung erzwingen") THEN BEGIN
          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN BEGIN
            IF SalesOrder.GET(SalesOrder."Document Type"::Order,Altreklamationen."Auftragsnr.") THEN BEGIN
              // Auftragszeilen zurÅcksetzen
              ClearSalesOrderLine.RESET;
              ClearSalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
              ClearSalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
              IF ClearSalesOrderLine.FIND('-') THEN BEGIN
                REPEAT
                  ClearSalesOrderLine."Return Type" := ClearSalesOrderLine."Return Type"::" ";
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //ClearSalesOrderLine."Offered prevention" := ClearSalesOrderLine."Offered prevention"::"0";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  ClearSalesOrderLine."Customer Prevention" := ClearSalesOrderLine."Customer Prevention"::" ";
                  ClearSalesOrderLine."Prevention discount Amount" := 0;
                  ClearSalesOrderLine.MODIFY;
                UNTIL ClearSalesOrderLine.NEXT = 0;
              END;

              SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
              SalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
              SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::Item);
              SalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
              IF SalesOrderLine.FINDSET THEN BEGIN
                FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                  IF SalesOrderLine."Quantity Shipped" = 0 THEN BEGIN
                    SalesOrderLine."Return Type" := SalesOrderLine."Return Type"::Cancelation;
                    SalesOrderLine."Return Reason Code" := GetRetoureStornoReason('STORNO',Altreklamationen."Grund ausfÅhrlich");
                  END ELSE BEGIN
                    SalesOrderLine."Return Type" := SalesOrderLine."Return Type"::Return;
                    SalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                  END;
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //SalesOrderLine."Offered prevention" := SalesOrderLine."Offered prevention"::"1";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  SalesOrderLine."Customer Prevention" := SalesOrderLine."Customer Prevention"::"Not offered";
                  SalesOrderLine."Prevention discount Amount" := Altreklamationen.RÅckerstattungsbetrag/Altreklamationen.Menge;
                  SalesOrderLine.MODIFY;
                  IF Altreklamationen.RÅckerstattungsbetrag <> 0 THEN BEGIN
                    Altreklamationen.vorbereitet := TRUE;
                    Altreklamationen.MODIFY;
                  END ELSE BEGIN
                    Altreklamationen.vorbereitet := FALSE;
                    Altreklamationen.MODIFY;
                  END;
                  // Gibt es noch zugeordnete Ressourcenzeilen Åber Parent ID?
                  locResLine.SETRANGE("Document Type",SalesOrderLine."Document Type");
                  locResLine.SETRANGE("Document No.",SalesOrderLine."Document No.");
                  locResLine.SETRANGE("Parent ID",SalesOrderLine.ID);
                  IF locResLine.FIND('-') THEN BEGIN
                    IF locResLine."Quantity Shipped" = 0 THEN BEGIN
                      locResLine."Return Type" := locResLine."Return Type"::Cancelation;
                      locResLine."Return Reason Code" := GetRetoureStornoReason('STORNO',Altreklamationen."Grund ausfÅhrlich");
                    END ELSE BEGIN
                      locResLine."Return Type" := locResLine."Return Type"::Return;
                      locResLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                    END;
                    //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    //locResLine."Offered prevention" := SalesOrderLine."Offered prevention"::"1";
                    //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                    locResLine."Customer Prevention" := SalesOrderLine."Customer Prevention"::Offered;
                    locResLine.MODIFY;
                  END;
                  IF i <> Altreklamationen.Menge THEN
                    SalesOrderLine.NEXT;
                END;
              END;
            END;
          END;

          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::"Archiv. Auftrag" THEN BEGIN
            ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
            ArchSalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
            IF ArchSalesOrder.FINDLAST THEN BEGIN
              // Auftragszeilen zurÅcksetzen
              ClearArchSalesOrderLine.RESET;
              ClearArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrder."Document Type");
              ClearArchSalesOrderLine.SETRANGE("Document No.",ArchSalesOrder."No.");
              ClearArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
              ClearArchSalesOrderLine.SETRANGE("Doc. No. Occurrence",ArchSalesOrder."Doc. No. Occurrence");
              IF ClearArchSalesOrderLine.FIND('-') THEN BEGIN
                REPEAT
                  ClearArchSalesOrderLine."Return Type" := ClearArchSalesOrderLine."Return Type"::" ";
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //ClearArchSalesOrderLine."Offered prevention" := ClearArchSalesOrderLine."Offered prevention"::"0";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  ClearArchSalesOrderLine."Customer Prevention" := ClearArchSalesOrderLine."Customer Prevention"::" ";
                  ClearArchSalesOrderLine."Prevention discount Amount" := 0;
                  ClearArchSalesOrderLine.MODIFY;
                UNTIL ClearArchSalesOrderLine.NEXT = 0;
              END;

              ArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type"::Order);
              ArchSalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
              ArchSalesOrderLine.SETRANGE(Type,ArchSalesOrderLine.Type::Item);
              ArchSalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
              ArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
              IF ArchSalesOrderLine.FINDSET THEN BEGIN
                FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                  ArchSalesOrderLine."Return Type" := ArchSalesOrderLine."Return Type"::Return;
                  ArchSalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //ArchSalesOrderLine."Offered prevention" := ArchSalesOrderLine."Offered prevention"::"1";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  ArchSalesOrderLine."Customer Prevention" := ArchSalesOrderLine."Customer Prevention"::"Not offered";
                  ArchSalesOrderLine."Prevention discount Amount" := Altreklamationen.RÅckerstattungsbetrag/Altreklamationen.Menge;
                  ArchSalesOrderLine.MODIFY;
                  IF Altreklamationen.RÅckerstattungsbetrag <> 0 THEN BEGIN
                    Altreklamationen.vorbereitet := TRUE;
                    Altreklamationen.MODIFY;
                  END ELSE BEGIN
                    Altreklamationen.vorbereitet := FALSE;
                    Altreklamationen.MODIFY;
                  END;
                  // Gibt es noch zugeordnete Ressourcenzeilen Åber Parent ID?
                  locArchResLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type");
                  locArchResLine.SETRANGE("Document No.",ArchSalesOrderLine."Document No.");
                  locArchResLine.SETRANGE("Doc. No. Occurrence",ArchSalesOrderLine."Doc. No. Occurrence");
                  locArchResLine.SETRANGE("Version No.",ArchSalesOrderLine."Version No.");
                  locArchResLine.SETRANGE("Parent ID",ArchSalesOrderLine.ID);
                  IF locArchResLine.FIND('-') THEN BEGIN
                    IF locArchResLine."Quantity Shipped" = 0 THEN BEGIN
                      locArchResLine."Return Type" := locArchResLine."Return Type"::Cancelation;
                      locArchResLine."Return Reason Code" := GetRetoureStornoReason('STORNO',Altreklamationen."Grund ausfÅhrlich");
                    END ELSE BEGIN
                      locArchResLine."Return Type" := locArchResLine."Return Type"::Return;
                      locArchResLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                    END;
                    //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    //locArchResLine."Offered prevention" := ArchSalesOrderLine."Offered prevention"::"1";
                    locArchResLine."Customer Prevention" := ArchSalesOrderLine."Customer Prevention"::Offered;
                    //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                    locArchResLine.MODIFY;
                  END;
                  IF i <> Altreklamationen.Menge THEN
                    ArchSalesOrderLine.NEXT;
                END;
              END;
            END;

          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE DurchfÅhrenKulanzenRabatte@1000000013();
    VAR
      IsError@1000000000 : Boolean;
      AltreklaTemp@1000000001 : TEMPORARY Record 36;
      LocAltreklamationen@1000000002 : Record 50041;
    BEGIN
      Window.OPEN('DurchfÅhren: Kulanzen und Rabatte - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      //Altreklamationen.SETRANGE("Auftragsnr.",'1700218711');
      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2','KULANZ','RABATT');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);
      Altreklamationen.SETRANGE(vorbereitet,TRUE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT

        AltreklaTemp.INIT;
        IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN
          AltreklaTemp."Document Type" := AltreklaTemp."Document Type"::Order
        ELSE
          AltreklaTemp."Document Type" := AltreklaTemp."Document Type"::Invoice;   //eigentlich Arch. Order
        AltreklaTemp."No." := Altreklamationen."Auftragsnr.";
        IF AltreklaTemp.INSERT THEN;
      UNTIL Altreklamationen.NEXT = 0;


      IF AltreklaTemp.FIND('-') THEN REPEAT
        CLEAR(FPCManagement);
        CLEARLASTERROR;
        FPCManagement.SetHideValidationDialog;
        IsError := FALSE;
        ZÑhler += 1;
        Window.UPDATE(1, AltreklaTemp."No.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        //Altreklamationen.CALCFIELDS(PrÅfungsfehler);
        //IF (Altreklamationen.PrÅfungsfehler = 0) OR (Altreklamationen."Verarbeitung erzwingen") THEN BEGIN
        IF AltreklaTemp."Document Type" = AltreklaTemp."Document Type"::Order THEN BEGIN
          IF SalesOrder.GET(SalesOrder."Document Type"::Order,AltreklaTemp."No.") THEN BEGIN
            SalesOrder."Ignore Komm. Control" := TRUE;
            SalesOrder."Cancel Without Interfaces" := TRUE;
            SalesOrder.MODIFY;
            IF NOT FPCManagement.CreateReturnOrder(SalesOrder."No.",0) THEN BEGIN
              GetAndSetLastError(GETLASTERRORTEXT);
              IsError := TRUE;
            END;
          END;
        END;
        IF AltreklaTemp."Document Type" = AltreklaTemp."Document Type"::Invoice THEN BEGIN    //Archiv Order
          ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
          ArchSalesOrder.SETRANGE("No.",AltreklaTemp."No.");
          IF ArchSalesOrder.FINDLAST THEN
            IF NOT FPCManagement.CreateReturnOrder(ArchSalesOrder."No.",1) THEN BEGIN
              GetAndSetLastError(GETLASTERRORTEXT);
              IsError := TRUE;
            END;
        END;
        //END;
        IF NOT IsError THEN BEGIN
          LocAltreklamationen.SETRANGE("Auftragsnr.",AltreklaTemp."No.");
          LocAltreklamationen.SETFILTER(Reklamationsgrund,'%1|%2','KULANZ','RABATT');
          LocAltreklamationen.SETRANGE(vorbereitet,TRUE);
          IF LocAltreklamationen.FIND('-') THEN REPEAT
            LocAltreklamationen.Verarbeitet := TRUE;
            LocAltreklamationen."Verarbeitet am" := CURRENTDATETIME;
            LocAltreklamationen."Verarbeitet von" := USERID;
            LocAltreklamationen.MODIFY;
          UNTIL LocAltreklamationen.NEXT = 0;
          COMMIT;
        END;
      UNTIL AltreklaTemp.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE BuchenErstellteReklamationen@1000000021(DateOfCreation@1000000005 : Text[30]);
    VAR
      PurchaseHeader@1000000001 : Record 38;
      ApprovalMgt@1000000000 : Codeunit 439;
      ReturnOrder@1000000002 : Record 36;
      ReturnOrderLine@1000000004 : Record 37;
      SalesPost@1000000003 : Codeunit 80;
    BEGIN
      Window.OPEN('Buchen: Kulanzen und Rabatte - Reklamation: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      //Altreklamationen.SETRANGE("Auftragsnr.",'1700218711');
      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2','KULANZ','RABATT');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,TRUE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        ReturnOrder.SETRANGE("Document Type",ReturnOrder."Document Type"::"Return Order");
        ReturnOrder.SETRANGE("External Document No.",Altreklamationen."Auftragsnr.");
        ReturnOrder.SETFILTER("Date of Creation",DateOfCreation);
        IF ReturnOrder.FINDLAST THEN BEGIN
          Window.UPDATE(1, ReturnOrder."No.");
          Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

          // Zeilen fÅr Liefern und Fakturieren vorbereiten
          ReturnOrderLine.SETRANGE("Document Type",ReturnOrder."Document Type");
          ReturnOrderLine.SETRANGE("Document No.",ReturnOrder."No.");
          IF ReturnOrderLine.FINDSET THEN REPEAT
            IF ReturnOrderLine.Quantity <> 0 THEN BEGIN
              ReturnOrderLine.VALIDATE("Return Qty. to Receive",1);
              ReturnOrderLine.VALIDATE("Qty. to Invoice",1);
              ReturnOrderLine.MODIFY;
            END;
          UNTIL ReturnOrderLine.NEXT = 0;
          COMMIT;
          IF ApprovalMgt.PrePostApprovalCheck(ReturnOrder,PurchaseHeader) THEN BEGIN
            ReturnOrder.Invoice := TRUE;
            ReturnOrder.Receive := TRUE;
            ReturnOrder."Posting No. Series" := 'GU-ALTREKL';
            ReturnOrder.VALIDATE("Posting Date",DT2DATE(Altreklamationen."Erstellt am"));
            COMMIT;

            //A/GOB-MNO
            DummyDate := DT2DATE(Altreklamationen."Erstellt am");
            WORKDATE(DummyDate);
            //E/GOB-MNO

            IF NOT SalesPost.RUN(ReturnOrder) THEN
              GetAndSetLastError(GETLASTERRORTEXT);
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE PruefeBetragErneut@1000000022();
    VAR
      Betrag@1000000000 : Decimal;
      BetragAlt@1000000001 : Decimal;
      ItemChargeAssgntSales@1000000002 : Record 5809;
      RessOrderLine@1000000003 : Record 37;
      RessArchOrderLine@1000000004 : Record 5108;
      LocAltreklamationsprÅfungslog@1000000005 : Record 50042;
      DeleteTrue@1000000006 : Boolean;
    BEGIN
      IF AltreklamationenPrÅfungslog.FINDLAST THEN
        EntryNo := AltreklamationenPrÅfungslog."Lfd. Nr.";

      //AltreklamationenPrÅfungslog.SETRANGE("Auftragsnr.",'1700220172');
      AltreklamationenPrÅfungslog.SETRANGE(Fehlercode,9);

      Window.OPEN('Betrag erneut prÅfen - Auftrag: #1####################\'+
                  'Anzahl: #2############################################');

      IF AltreklamationenPrÅfungslog.FIND('-') THEN REPEAT
        Anzahl := AltreklamationenPrÅfungslog.COUNT;

        Betrag := 0;
        BetragAlt := 0;

        IF Altreklamationen.GET(AltreklamationenPrÅfungslog."Lfd. Nr. Altreklamation") THEN BEGIN
          ZÑhler += 1;
          Window.UPDATE(1, Altreklamationen."Auftragsnr.");
          //Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
          Window.UPDATE(2, Anzahl);

          IsSalesOrder := FALSE;
          IsArchSalesOrder := FALSE;
          SalesOrder.RESET;
          SalesOrderLine.RESET;
          ArchSalesOrder.RESET;
          ArchSalesOrderLine.RESET;

          CheckSalesOrderExists;

          IF IsSalesOrder THEN BEGIN
            SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
            SalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
            SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::Item);
            SalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
            IF Altreklamationen.Reklamationsgrund IN ['STORNO','TEILSTORNO'] THEN
              SalesOrderLine.SETRANGE("Quantity Shipped",0);
            IF Altreklamationen.Reklamationsgrund = 'RETOURE' THEN
              SalesOrderLine.SETRANGE("Quantity Shipped",1);

            IF SalesOrderLine.FINDSET THEN REPEAT
              IF SalesOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                Betrag += SalesOrderLine."Prepmt. Amt. Incl. VAT"
              ELSE
                IF SalesOrderLine."Amount Including VAT" <> 0 THEN
                  Betrag += SalesOrderLine."Amount Including VAT"
                ELSE
                  Betrag += SalesOrderLine."Unit Price";
            UNTIL SalesOrderLine.NEXT = 0;

            IF SalesOrderLine.COUNT <> 0 THEN
              Betrag := Betrag/SalesOrderLine.COUNT;

            IF Altreklamationen.Menge <> 0 THEN
              BetragAlt := Altreklamationen.RÅckerstattungsbetrag/Altreklamationen.Menge
            ELSE
              BetragAlt := Altreklamationen.RÅckerstattungsbetrag;

            IF (Altreklamationen.Reklamationsgrund <> 'KULANZ') AND
               (Altreklamationen.Reklamationsgrund <> 'RABATT') THEN BEGIN
              IF Betrag <> BetragAlt THEN BEGIN
                // Gibt es Zu-/AbschlÑge
                ItemChargeAssgntSales.SETRANGE("Document Type",SalesOrderLine."Document Type");
                ItemChargeAssgntSales.SETRANGE("Document No.",SalesOrderLine."Document No.");
                ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",SalesOrderLine."Document Type");
                ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",SalesOrderLine."Document No.");
                ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.", SalesOrderLine."Line No.");
                IF ItemChargeAssgntSales.FINDFIRST THEN
                  Betrag += ItemChargeAssgntSales."Amount to Assign";

                IF Betrag <> BetragAlt THEN BEGIN
                  // Gibt es noch Ressourcenzeilen, die addiert werden mÅssen (Gutscheine, 2MH ...)
                  RessOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type");
                  RessOrderLine.SETRANGE("Document No.",SalesOrderLine."Document No.");
                  RessOrderLine.SETRANGE(Type,RessOrderLine.Type::Resource);
                  RessOrderLine.SETFILTER("Resource Type",'%1|%2|%3',RessOrderLine."Resource Type"::"Sales Bon",
                                                                     RessOrderLine."Resource Type"::Groupon,
                                                                     RessOrderLine."Resource Type"::"Credit Bon");
                  IF RessOrderLine.FINDSET THEN REPEAT
                    IF RessOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                      Betrag += RessOrderLine."Prepmt. Amt. Incl. VAT"
                    ELSE
                      Betrag += RessOrderLine."Unit Price";
                  UNTIL RessOrderLine.NEXT = 0;
                END;
              END;

              // Wenn immer noch Betrag abweicht, andere Ressourcen noch dazu rechnen
              IF Betrag <> BetragAlt THEN BEGIN
                RessOrderLine.SETFILTER("Resource Type",'<>%1&<>%2&<>%3',RessOrderLine."Resource Type"::"Sales Bon",
                                                                         RessOrderLine."Resource Type"::Groupon,
                                                                         RessOrderLine."Resource Type"::"Credit Bon");
                RessOrderLine.SETRANGE("Parent ID",SalesOrderLine.ID);
                IF RessOrderLine.FINDSET THEN REPEAT
                  IF RessOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                    Betrag += RessOrderLine."Prepmt. Amt. Incl. VAT"
                  ELSE
                    Betrag += RessOrderLine."Unit Price";
                UNTIL RessOrderLine.NEXT = 0;
              END;

              IF Betrag = BetragAlt THEN BEGIN
                LocAltreklamationsprÅfungslog.GET(AltreklamationenPrÅfungslog."Lfd. Nr.");
                LocAltreklamationsprÅfungslog.DELETE;
              END ELSE BEGIN
                LocAltreklamationsprÅfungslog.GET(AltreklamationenPrÅfungslog."Lfd. Nr.");
                LocAltreklamationsprÅfungslog.DELETE;
                SetErrorTextPruefeBetragErneut(STRSUBSTNO(Text010,Altreklamationen."Artikelnr.",Betrag,BetragAlt),9);
              END;

            END ELSE BEGIN
              IF Betrag = BetragAlt THEN BEGIN
                LocAltreklamationsprÅfungslog.GET(AltreklamationenPrÅfungslog."Lfd. Nr.");
                LocAltreklamationsprÅfungslog.DELETE;
              END ELSE BEGIN
                LocAltreklamationsprÅfungslog.GET(AltreklamationenPrÅfungslog."Lfd. Nr.");
                LocAltreklamationsprÅfungslog.DELETE;
                SetErrorTextPruefeBetragErneut(STRSUBSTNO(Text014,Altreklamationen."Artikelnr.",Betrag,BetragAlt),10);
              END;
            END;
          END;

          IF IsArchSalesOrder THEN BEGIN
            ArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type"::Order);
            ArchSalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
            ArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
            ArchSalesOrderLine.SETRANGE(Type,ArchSalesOrderLine.Type::Item);
            ArchSalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
            IF ArchSalesOrderLine.FINDSET THEN REPEAT
              IF ArchSalesOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                Betrag += ArchSalesOrderLine."Prepmt. Amt. Incl. VAT"
              ELSE
                IF ArchSalesOrderLine."Amount Including VAT" <> 0 THEN
                  Betrag += ArchSalesOrderLine."Amount Including VAT"
                ELSE
                  Betrag += ArchSalesOrderLine."Unit Price";
            UNTIL ArchSalesOrderLine.NEXT = 0;

            IF ArchSalesOrderLine.COUNT <> 0 THEN
              Betrag := Betrag/ArchSalesOrderLine.COUNT;

            IF Altreklamationen.Menge <> 0 THEN
              BetragAlt := Altreklamationen.RÅckerstattungsbetrag/Altreklamationen.Menge
            ELSE
              BetragAlt := Altreklamationen.RÅckerstattungsbetrag;

            IF (Altreklamationen.Reklamationsgrund <> 'KULANZ') AND
               (Altreklamationen.Reklamationsgrund <> 'RABATT') THEN BEGIN
              IF Betrag <> BetragAlt THEN BEGIN
                // Gibt es noch Gutschein, der abgezogen werden muss?
                RessArchOrderLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type");
                RessArchOrderLine.SETRANGE("Document No.",ArchSalesOrderLine."Document No.");
                RessArchOrderLine.SETRANGE("Version No.",ArchSalesOrderLine."Version No.");

                RessArchOrderLine.SETRANGE(Type,RessOrderLine.Type::Resource);
                RessArchOrderLine.SETFILTER("Resource Type",'%1|%2|%3',RessArchOrderLine."Resource Type"::"Sales Bon",
                                                                   RessArchOrderLine."Resource Type"::Groupon,
                                                                   RessArchOrderLine."Resource Type"::"Credit Bon");
                IF RessArchOrderLine.FINDSET THEN REPEAT
                  IF RessArchOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                    Betrag += RessArchOrderLine."Prepmt. Amt. Incl. VAT"
                  ELSE
                    Betrag += RessArchOrderLine."Unit Price";
                UNTIL RessArchOrderLine.NEXT = 0;
              END;

              // Wenn immer noch Betrag abweicht, andere Ressourcen noch dazu rechnen
              IF Betrag <> BetragAlt THEN BEGIN
                RessArchOrderLine.SETFILTER("Resource Type",'<>%1&<>%2&<>%3',RessArchOrderLine."Resource Type"::"Sales Bon",
                                                                             RessArchOrderLine."Resource Type"::Groupon,
                                                                             RessArchOrderLine."Resource Type"::"Credit Bon");
                RessArchOrderLine.SETRANGE("Parent ID",ArchSalesOrderLine.ID);
                IF RessArchOrderLine.FINDSET THEN REPEAT
                  IF RessArchOrderLine."Prepmt. Amt. Incl. VAT" <> 0 THEN
                    Betrag += RessArchOrderLine."Prepmt. Amt. Incl. VAT"
                  ELSE
                    Betrag += RessArchOrderLine."Unit Price";
                UNTIL RessArchOrderLine.NEXT = 0;
              END;

              IF Betrag = BetragAlt THEN BEGIN
                LocAltreklamationsprÅfungslog.GET(AltreklamationenPrÅfungslog."Lfd. Nr.");
                LocAltreklamationsprÅfungslog.DELETE;
              END ELSE BEGIN
                LocAltreklamationsprÅfungslog.GET(AltreklamationenPrÅfungslog."Lfd. Nr.");
                LocAltreklamationsprÅfungslog.DELETE;
                SetErrorTextPruefeBetragErneut(STRSUBSTNO(Text011,Altreklamationen."Artikelnr.",Betrag,BetragAlt),9);
              END;

            END ELSE BEGIN
              IF Betrag < BetragAlt THEN BEGIN
                LocAltreklamationsprÅfungslog.GET(AltreklamationenPrÅfungslog."Lfd. Nr.");
                LocAltreklamationsprÅfungslog.DELETE;
              END ELSE BEGIN
                LocAltreklamationsprÅfungslog.GET(AltreklamationenPrÅfungslog."Lfd. Nr.");
                LocAltreklamationsprÅfungslog.DELETE;
                SetErrorTextPruefeBetragErneut(STRSUBSTNO(Text015,Altreklamationen."Artikelnr.",Betrag,BetragAlt),10);
              END;
            END;
          END;
        END;
      UNTIL AltreklamationenPrÅfungslog.NEXT = 0;

      IF AltreklamationPrÅfungslogTEMP.FIND('-') THEN REPEAT
        AltreklamationenPrÅfungslog.INIT;
        AltreklamationenPrÅfungslog.TRANSFERFIELDS(AltreklamationPrÅfungslogTEMP);
        AltreklamationenPrÅfungslog.INSERT;
      UNTIL AltreklamationPrÅfungslogTEMP.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE SetErrorTextPruefeBetragErneut@1000000023(Text@1000000000 : Text[250];Fehlercode@1000000001 : Integer);
    BEGIN
      EntryNo += 1;

      AltreklamationPrÅfungslogTEMP.INIT;
      AltreklamationPrÅfungslogTEMP."Lfd. Nr." := EntryNo;
      AltreklamationPrÅfungslogTEMP."Auftragsnr." := Altreklamationen."Auftragsnr.";
      AltreklamationPrÅfungslogTEMP.PrÅfungsmeldung := Text;
      AltreklamationPrÅfungslogTEMP."Lfd. Nr. Altreklamation" := Altreklamationen."Lfd. Nr.";
      AltreklamationPrÅfungslogTEMP.Fehlercode := Fehlercode;
      AltreklamationPrÅfungslogTEMP.INSERT;
    END;

    PROCEDURE VorbereitungRetourenStornos@1000000020();
    VAR
      i@1000000000 : Integer;
    BEGIN
      Window.OPEN('Vorbereitung: Retouren und Stornos - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2|%3','STORNO','TEILSTORNO','RETOURE');
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      //Altreklamationen.SETRANGE("Auftragsnr.",'1700265611');

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        Altreklamationen.CALCFIELDS(PrÅfungsfehler);
        IF (Altreklamationen.PrÅfungsfehler = 0) OR (Altreklamationen."Verarbeitung erzwingen") THEN BEGIN
          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN BEGIN
            IF SalesOrder.GET(SalesOrder."Document Type"::Order,Altreklamationen."Auftragsnr.") THEN BEGIN
              // Auftragszeilen zurÅcksetzen
              ClearSalesOrderLine.RESET;
              ClearSalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
              ClearSalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
              IF ClearSalesOrderLine.FIND('-') THEN BEGIN
                REPEAT
                  ClearSalesOrderLine."Return Type" := ClearSalesOrderLine."Return Type"::" ";
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //ClearSalesOrderLine."Offered prevention" := ClearSalesOrderLine."Offered prevention"::"0";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  ClearSalesOrderLine."Customer Prevention" := ClearSalesOrderLine."Customer Prevention"::" ";
                  ClearSalesOrderLine."Prevention discount Amount" := 0;
                  ClearSalesOrderLine.MODIFY;
                UNTIL ClearSalesOrderLine.NEXT = 0;
              END;
            END;
          END;

          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::"Archiv. Auftrag" THEN BEGIN
            ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
            ArchSalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
            IF ArchSalesOrder.FINDLAST THEN BEGIN

              // Auftragszeilen zurÅcksetzen
              ClearArchSalesOrderLine.RESET;
              ClearArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrder."Document Type");
              ClearArchSalesOrderLine.SETRANGE("Document No.",ArchSalesOrder."No.");
              ClearArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
              ClearArchSalesOrderLine.SETRANGE("Doc. No. Occurrence",ArchSalesOrder."Doc. No. Occurrence");
              IF ClearArchSalesOrderLine.FIND('-') THEN BEGIN
                REPEAT
                  ClearArchSalesOrderLine."Return Type" := ClearArchSalesOrderLine."Return Type"::" ";
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //ClearArchSalesOrderLine."Offered prevention" := ClearArchSalesOrderLine."Offered prevention"::"0";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  ClearArchSalesOrderLine."Customer Prevention" := ClearArchSalesOrderLine."Customer Prevention"::" ";
                  ClearArchSalesOrderLine."Prevention discount Amount" := 0;
                  ClearArchSalesOrderLine.MODIFY;
                UNTIL ClearArchSalesOrderLine.NEXT = 0;
              END;
            END;
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      ZÑhler := 0;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        Altreklamationen.CALCFIELDS(PrÅfungsfehler);
        IF (Altreklamationen.PrÅfungsfehler = 0) OR (Altreklamationen."Verarbeitung erzwingen") THEN BEGIN
          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN BEGIN
            IF SalesOrder.GET(SalesOrder."Document Type"::Order,Altreklamationen."Auftragsnr.") THEN BEGIN
              SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
              SalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
              SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::Item);
              SalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
              IF SalesOrderLine.FINDSET THEN BEGIN
                FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                  IF SalesOrderLine."Quantity Shipped" = 0 THEN BEGIN
                    SalesOrderLine."Return Type" := SalesOrderLine."Return Type"::Cancelation;
                    SalesOrderLine."Return Reason Code" := GetRetoureStornoReason('STORNO',Altreklamationen."Grund ausfÅhrlich");
                  END ELSE BEGIN
                    SalesOrderLine."Return Type" := SalesOrderLine."Return Type"::Return;
                    SalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                  END;
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //SalesOrderLine."Offered prevention" := SalesOrderLine."Offered prevention"::"1";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  SalesOrderLine."Customer Prevention" := SalesOrderLine."Customer Prevention"::Offered;
                  SalesOrderLine."Prevention discount Amount" := 0;
                  SalesOrderLine.MODIFY;
                  IF i <> Altreklamationen.Menge THEN
                    SalesOrderLine.NEXT;

                  Altreklamationen.vorbereitet := TRUE;
                  Altreklamationen.MODIFY;
                END;
              END;
            END;
          END;

          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::"Archiv. Auftrag" THEN BEGIN
            ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
            ArchSalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
            IF ArchSalesOrder.FINDLAST THEN BEGIN
              ArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type"::Order);
              ArchSalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
              ArchSalesOrderLine.SETRANGE(Type,ArchSalesOrderLine.Type::Item);
              ArchSalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
              ArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
              IF ArchSalesOrderLine.FINDSET THEN BEGIN
                FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                  ArchSalesOrderLine."Return Type" := ArchSalesOrderLine."Return Type"::Return;
                  ArchSalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //ArchSalesOrderLine."Offered prevention" := ArchSalesOrderLine."Offered prevention"::"1";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  ArchSalesOrderLine."Customer Prevention" := ArchSalesOrderLine."Customer Prevention"::Offered;
                  ArchSalesOrderLine."Prevention discount Amount" := 0;
                  ArchSalesOrderLine.MODIFY;
                  IF i <> Altreklamationen.Menge THEN
                    ArchSalesOrderLine.NEXT;

                  Altreklamationen.vorbereitet := TRUE;
                  Altreklamationen.MODIFY;
                END;
              END;
            END;
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE DurchfÅhrenRetourenStornos@1000000019();
    VAR
      AltreklaTemp@1000000000 : TEMPORARY Record 36;
      IsError@1000000001 : Boolean;
      LocAltreklamationen@1000000002 : Record 50041;
      ChannelMgt@1000000003 : Codeunit 50093;
    BEGIN
      Window.OPEN('DurchfÅren: Retouren und Stornos - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2|%3','STORNO','RETOURE','TEILSTORNO');
      Altreklamationen.SETRANGE(vorbereitet,TRUE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);   // TEMP, normalerweise FALSE
      //Altreklamationen.SETRANGE("Auftragsnr.",'1700265611');


      FPCManagement.SetHideValidationDialog;

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        AltreklaTemp.INIT;
        IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN
          AltreklaTemp."Document Type" := AltreklaTemp."Document Type"::Order
        ELSE
          AltreklaTemp."Document Type" := AltreklaTemp."Document Type"::Invoice;   //eigentlich Arch. Order
        AltreklaTemp."No." := Altreklamationen."Auftragsnr.";
        IF AltreklaTemp.INSERT THEN;
      UNTIL Altreklamationen.NEXT = 0;


      IF AltreklaTemp.FIND('-') THEN REPEAT
        ZÑhler += 1;
        IsError := FALSE;
        Window.UPDATE(1, AltreklaTemp."No.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        //Altreklamationen.CALCFIELDS(PrÅfungsfehler);
        //IF (Altreklamationen.PrÅfungsfehler = 0) OR (Altreklamationen."Verarbeitung erzwingen") THEN BEGIN

        // AuftrÑge
        IF AltreklaTemp."Document Type" = AltreklaTemp."Document Type"::Order THEN BEGIN
          IF SalesOrder.GET(SalesOrder."Document Type"::Order,AltreklaTemp."No.") THEN BEGIN
            IF SalesOrder."XML Kommissionierung" = FALSE THEN BEGIN

              // Stornos durchfÅhren
              SalesOrderLine.RESET;
              SalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
              SalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
              SalesOrderLine.SETRANGE("Return Type",SalesOrderLine."Return Type"::Cancelation);
              SalesOrderLine.SETRANGE("Customer Prevention",SalesOrderLine."Customer Prevention"::Offered);
              SalesOrderLine.SETFILTER(Quantity,'>%1',0);
              SalesOrderLine.SETFILTER("Line Status",'<>%1','CANCELED');
              IF SalesOrderLine.FINDSET THEN BEGIN
                IF NOT SalesOrder."Ignore Komm. Control" THEN BEGIN
                  SalesOrder."Ignore Komm. Control" := TRUE;
                  SalesOrder."Cancel Without Interfaces" := TRUE;
                  SalesOrder.MODIFY;
                  COMMIT;
                END;
                REPEAT
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //IF ChannelMgt.CheckIfDropShipmentOrCrossDock(SalesOrderLine,'CANCEL') = 'CANCELDROPSHIP' THEN
                  IF ChannelMgt.CheckIfDropShipmentOrCrossDock(SalesOrderLine) THEN
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                    ChannelMgt.CancelDropShipment(SalesOrderLine,FALSE)
                  ELSE
                    SalesOrderLine.MagentoCancel(FALSE,FALSE);
                UNTIL SalesOrderLine.NEXT = 0;
              END;

              // Retoure durchfÅhren
              SalesOrderLine.RESET;
              SalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
              SalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
              SalesOrderLine.SETRANGE("Return Type",SalesOrderLine."Return Type"::Return);
              SalesOrderLine.SETRANGE("Customer Prevention",SalesOrderLine."Customer Prevention"::Offered);
              SalesOrderLine.SETFILTER(Quantity,'>%1',0);
              IF NOT SalesOrderLine.ISEMPTY THEN BEGIN
                IF NOT SalesOrder."Ignore Komm. Control" THEN BEGIN
                  SalesOrder."Ignore Komm. Control" := TRUE;
                  SalesOrder."Cancel Without Interfaces" := TRUE;
                  SalesOrder.MODIFY;
                  COMMIT;
                END;
                // Reklamationslogik durchfÅhren
                IF NOT FPCManagement.CreateReturnOrder(SalesOrder."No.",0) THEN BEGIN
                  GetAndSetLastError(GETLASTERRORTEXT);
                  IsError := TRUE;
                END;
              END;
            END;
          END;
        END;

        // Archivierte AuftrÑge
        IF AltreklaTemp."Document Type" = AltreklaTemp."Document Type"::Invoice THEN BEGIN
          ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
          ArchSalesOrder.SETRANGE("No.",AltreklaTemp."No.");
          IF ArchSalesOrder.FINDLAST THEN
            IF NOT FPCManagement.CreateReturnOrder(ArchSalesOrder."No.",1) THEN BEGIN
              GetAndSetLastError(GETLASTERRORTEXT);
              IsError := TRUE;
            END;
        END;

        IF NOT IsError THEN BEGIN
          LocAltreklamationen.SETRANGE("Auftragsnr.",AltreklaTemp."No.");
          LocAltreklamationen.SETFILTER(Reklamationsgrund,'%1|%2|%3','STORNO','RETOURE','TEILSTORNO');
          LocAltreklamationen.SETRANGE(vorbereitet,TRUE);
          IF LocAltreklamationen.FIND('-') THEN REPEAT
            LocAltreklamationen.Verarbeitet := TRUE;
            LocAltreklamationen."Verarbeitet am" := CURRENTDATETIME;
            LocAltreklamationen."Verarbeitet von" := USERID;
            LocAltreklamationen.MODIFY;
          UNTIL LocAltreklamationen.NEXT = 0;
          COMMIT;
        END;

      UNTIL AltreklaTemp.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE BuchenRetouren@1000000024(DateOfCreation@1000000005 : Text[30]);
    VAR
      ReturnOrder@1000000000 : Record 36;
      ReturnOrderLine@1000000001 : Record 37;
      ApprovalMgt@1000000002 : Codeunit 439;
      SalesPost@1000000003 : Codeunit 80;
      PurchaseHeader@1000000004 : Record 38;
    BEGIN
      Window.OPEN('Buchen: Retouren und Stornos - Reklamation: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      //Altreklamationen.SETRANGE("Auftragsnr.",'1700218711');
      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2|%3','STORNO','RETOURE','TEILSTORNO');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,TRUE);
      //Altreklamationen.SETRANGE(vorbereitet,TRUE);
      //Altreklamationen.SETRANGE("Auftragsnr.",'1700265611');

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        ReturnOrder.SETRANGE("Document Type",ReturnOrder."Document Type"::"Return Order");
        ReturnOrder.SETRANGE("External Document No.",Altreklamationen."Auftragsnr.");
        ReturnOrder.SETFILTER("Date of Creation",DateOfCreation);
        IF ReturnOrder.FINDLAST THEN BEGIN
          Window.UPDATE(1, ReturnOrder."No.");
          Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

          // Zeilen fÅr Liefern und Fakturieren vorbereiten
          ReturnOrderLine.SETRANGE("Document Type",ReturnOrder."Document Type");
          ReturnOrderLine.SETRANGE("Document No.",ReturnOrder."No.");
          IF ReturnOrderLine.FINDSET THEN REPEAT
            IF ReturnOrderLine.Quantity <> 0 THEN BEGIN
              ReturnOrderLine.VALIDATE("Return Qty. to Receive",1);
              ReturnOrderLine.VALIDATE("Qty. to Invoice",1);
              ReturnOrderLine.MODIFY;
            END;
          UNTIL ReturnOrderLine.NEXT = 0;
          COMMIT;
          IF ApprovalMgt.PrePostApprovalCheck(ReturnOrder,PurchaseHeader) THEN BEGIN
            ReturnOrder.Invoice := TRUE;
            ReturnOrder.Receive := TRUE;
            ReturnOrder."Posting No. Series" := 'GU-ALTREKL';
            ReturnOrder.VALIDATE("Posting Date",DT2DATE(Altreklamationen."Erstellt am"));
            COMMIT;

            //A/GOB-MNO
            DummyDate := DT2DATE(Altreklamationen."Erstellt am");
            WORKDATE(DummyDate);
            //E/GOB-MNO

            IF NOT SalesPost.RUN(ReturnOrder) THEN
              GetAndSetLastError(GETLASTERRORTEXT);
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE Fehlercode8Verarbeitet@1000000025();
    VAR
      AltreklamationenLoc@1000000000 : Record 50041;
    BEGIN
      Window.OPEN('Altreklamation mit Fehlercode 8 auf verarbeitet setzen - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      //Altreklamationen.SETRANGE("Auftragsnr.",'1700218711');
      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2|%3','STORNO','RETOURE','TEILSTORNO');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        IF (AltreklamationenPrÅfungslog.COUNT = 1) THEN BEGIN
          AltreklamationenPrÅfungslog.FINDFIRST;
          IF AltreklamationenPrÅfungslog.Fehlercode = 8 THEN BEGIN
            AltreklamationenLoc.GET(Altreklamationen."Lfd. Nr.");
            AltreklamationenLoc.Verarbeitet := TRUE;
            AltreklamationenLoc."Verarbeitet am" := CURRENTDATETIME;
            AltreklamationenLoc."Verarbeitet von" := 'BATCH';
            AltreklamationenLoc.Fehlermeldung := 'Wurde bereits storniert.';
            AltreklamationenLoc.MODIFY;
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Altreklamationen.SETRANGE(Verarbeitet,TRUE);
      Altreklamationen.SETRANGE(Fehlermeldung,'Wurde bereits storniert.');

      Anzahl := Altreklamationen.COUNT;
      ZÑhler := 0;
      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        IF (AltreklamationenPrÅfungslog.COUNT = 1) THEN BEGIN
          AltreklamationenPrÅfungslog.FINDFIRST;
          IF AltreklamationenPrÅfungslog.Fehlercode = 8 THEN
            AltreklamationenPrÅfungslog.DELETE;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE VorbereitenFehlercode9@1000000026();
    VAR
      i@1000000000 : Integer;
    BEGIN
      Window.OPEN('Vorbereiten: Storno auf Retoure - abw. Betrag - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2|%3','STORNO','RETOURE','TEILSTORNO');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      Altreklamationen.SETFILTER(RÅckerstattungsbetrag,'<>%1',0);

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        IF AltreklamationenPrÅfungslog.COUNT = 1 THEN BEGIN
          AltreklamationenPrÅfungslog.FINDFIRST;
          IF AltreklamationenPrÅfungslog.Fehlercode = 9 THEN BEGIN // falscher Betrag

            IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN BEGIN
              IF SalesOrder.GET(SalesOrder."Document Type"::Order,Altreklamationen."Auftragsnr.") THEN BEGIN
                // Auftragszeilen zurÅcksetzen
                ClearSalesOrderLine.RESET;
                ClearSalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
                ClearSalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
                IF ClearSalesOrderLine.FIND('-') THEN BEGIN
                  REPEAT
                    ClearSalesOrderLine."Return Type" := ClearSalesOrderLine."Return Type"::" ";
                    //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    //ClearSalesOrderLine."Offered prevention" := ClearSalesOrderLine."Offered prevention"::"0";
                    //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                    ClearSalesOrderLine."Customer Prevention" := ClearSalesOrderLine."Customer Prevention"::" ";
                    ClearSalesOrderLine."Prevention discount Amount" := 0;
                    ClearSalesOrderLine.MODIFY;
                  UNTIL ClearSalesOrderLine.NEXT = 0;
                END;
              END;
            END;

            IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::"Archiv. Auftrag" THEN BEGIN
              ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
              ArchSalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
              IF ArchSalesOrder.FINDLAST THEN BEGIN

                // Auftragszeilen zurÅcksetzen
                ClearArchSalesOrderLine.RESET;
                ClearArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrder."Document Type");
                ClearArchSalesOrderLine.SETRANGE("Document No.",ArchSalesOrder."No.");
                ClearArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
                ClearArchSalesOrderLine.SETRANGE("Doc. No. Occurrence",ArchSalesOrder."Doc. No. Occurrence");
                IF ClearArchSalesOrderLine.FIND('-') THEN BEGIN
                  REPEAT
                    ClearArchSalesOrderLine."Return Type" := ClearArchSalesOrderLine."Return Type"::" ";
                    //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    //ClearArchSalesOrderLine."Offered prevention" := ClearArchSalesOrderLine."Offered prevention"::"0";
                    //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                    ClearArchSalesOrderLine."Customer Prevention" := ClearArchSalesOrderLine."Customer Prevention"::" ";
                    ClearArchSalesOrderLine."Prevention discount Amount" := 0;
                    ClearArchSalesOrderLine.MODIFY;
                  UNTIL ClearArchSalesOrderLine.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      ZÑhler := 0;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        IF AltreklamationenPrÅfungslog.COUNT = 1 THEN BEGIN
          AltreklamationenPrÅfungslog.FINDFIRST;
          IF AltreklamationenPrÅfungslog.Fehlercode = 9 THEN BEGIN // falscher Betrag
            IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN BEGIN
              IF SalesOrder.GET(SalesOrder."Document Type"::Order,Altreklamationen."Auftragsnr.") THEN BEGIN
                SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
                SalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
                SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::Item);
                SalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
                IF SalesOrderLine.FINDSET THEN BEGIN
                  FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                    IF SalesOrderLine."Quantity Shipped" = 0 THEN BEGIN
                      SalesOrderLine."Return Type" := SalesOrderLine."Return Type"::Cancelation;
                      SalesOrderLine."Return Reason Code" := GetRetoureStornoReason('STORNO',Altreklamationen."Grund ausfÅhrlich");
                    END ELSE BEGIN
                      SalesOrderLine."Return Type" := SalesOrderLine."Return Type"::Return;
                      SalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                    END;
                    //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    //SalesOrderLine."Offered prevention" := SalesOrderLine."Offered prevention"::"1";
                    //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                    SalesOrderLine."Customer Prevention" := SalesOrderLine."Customer Prevention"::Offered;
                    SalesOrderLine."Prevention discount Amount" := 0;
                    SalesOrderLine.MODIFY;
                    IF i <> Altreklamationen.Menge THEN
                      SalesOrderLine.NEXT;

                    Altreklamationen.vorbereitet := TRUE;
                    Altreklamationen.MODIFY;
                  END;
                END;
              END;
            END;

            IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::"Archiv. Auftrag" THEN BEGIN
              ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
              ArchSalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
              IF ArchSalesOrder.FINDLAST THEN BEGIN
                ArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type"::Order);
                ArchSalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
                ArchSalesOrderLine.SETRANGE(Type,ArchSalesOrderLine.Type::Item);
                ArchSalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
                ArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
                IF ArchSalesOrderLine.FINDSET THEN BEGIN
                  FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                    ArchSalesOrderLine."Return Type" := ArchSalesOrderLine."Return Type"::Return;
                    ArchSalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                    //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    //ArchSalesOrderLine."Offered prevention" := ArchSalesOrderLine."Offered prevention"::"1";
                    //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                    ArchSalesOrderLine."Customer Prevention" := ArchSalesOrderLine."Customer Prevention"::Offered;
                    ArchSalesOrderLine."Prevention discount Amount" := 0;
                    ArchSalesOrderLine.MODIFY;
                    IF i <> Altreklamationen.Menge THEN
                      ArchSalesOrderLine.NEXT;

                    Altreklamationen.vorbereitet := TRUE;
                    Altreklamationen.MODIFY;
                  END;
                END;
              END;
            END;
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE DurchfÅhrenFehlercode9@1000000028();
    VAR
      AltreklaTemp@1000000000 : TEMPORARY Record 36;
      IsError@1000000001 : Boolean;
      ChannelMgt@1000000002 : Codeunit 50093;
      LocAltreklamationen@1000000003 : Record 50041;
    BEGIN
      Window.OPEN('DurchfÅhren: Storno auf Retoure - abw. Betrag - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2|%3','STORNO','RETOURE','TEILSTORNO');
      Altreklamationen.SETRANGE(vorbereitet,TRUE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);   // TEMP, normalerweise FALSE

      FPCManagement.SetHideValidationDialog;

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        AltreklaTemp.INIT;
        IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN
          AltreklaTemp."Document Type" := AltreklaTemp."Document Type"::Order
        ELSE
          AltreklaTemp."Document Type" := AltreklaTemp."Document Type"::Invoice;   //eigentlich Arch. Order
        AltreklaTemp."No." := Altreklamationen."Auftragsnr.";
        IF AltreklaTemp.INSERT THEN;
      UNTIL Altreklamationen.NEXT = 0;


      IF AltreklaTemp.FIND('-') THEN REPEAT
        ZÑhler += 1;
        IsError := FALSE;
        Window.UPDATE(1, AltreklaTemp."No.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        //Altreklamationen.CALCFIELDS(PrÅfungsfehler);
        //IF (Altreklamationen.PrÅfungsfehler = 0) OR (Altreklamationen."Verarbeitung erzwingen") THEN BEGIN

        // AuftrÑge
        IF AltreklaTemp."Document Type" = AltreklaTemp."Document Type"::Order THEN BEGIN
          IF SalesOrder.GET(SalesOrder."Document Type"::Order,AltreklaTemp."No.") THEN BEGIN
            IF SalesOrder."XML Kommissionierung" = FALSE THEN BEGIN

              // Stornos durchfÅhren
              SalesOrderLine.RESET;
              SalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
              SalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
              SalesOrderLine.SETRANGE("Return Type",SalesOrderLine."Return Type"::Cancelation);
              SalesOrderLine.SETRANGE("Customer Prevention",SalesOrderLine."Customer Prevention"::Offered);
              SalesOrderLine.SETFILTER(Quantity,'>%1',0);
              SalesOrderLine.SETFILTER("Line Status",'<>%1','CANCELED');
              IF SalesOrderLine.FINDSET THEN BEGIN
                IF NOT SalesOrder."Ignore Komm. Control" THEN BEGIN
                  SalesOrder."Ignore Komm. Control" := TRUE;
                  SalesOrder."Cancel Without Interfaces" := TRUE;
                  SalesOrder.MODIFY;
                  COMMIT;
                END;
                REPEAT
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //IF ChannelMgt.CheckIfDropShipmentOrCrossDock(SalesOrderLine,'CANCEL') = 'CANCELDROPSHIP' THEN
                  IF ChannelMgt.CheckIfDropShipmentOrCrossDock(SalesOrderLine) THEN
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                    ChannelMgt.CancelDropShipment(SalesOrderLine,FALSE)
                  ELSE
                    SalesOrderLine.MagentoCancel(FALSE,FALSE);
                UNTIL SalesOrderLine.NEXT = 0;
              END;

              // Retoure durchfÅhren
              SalesOrderLine.RESET;
              SalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
              SalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
              SalesOrderLine.SETRANGE("Return Type",SalesOrderLine."Return Type"::Return);
              SalesOrderLine.SETRANGE("Customer Prevention",SalesOrderLine."Customer Prevention"::Offered);
              SalesOrderLine.SETFILTER(Quantity,'>%1',0);
              IF NOT SalesOrderLine.ISEMPTY THEN BEGIN
                IF NOT SalesOrder."Ignore Komm. Control" THEN BEGIN
                  SalesOrder."Ignore Komm. Control" := TRUE;
                  SalesOrder."Cancel Without Interfaces" := TRUE;
                  SalesOrder.MODIFY;
                  COMMIT;
                END;
                // Reklamationslogik durchfÅhren
                IF NOT FPCManagement.CreateReturnOrder(SalesOrder."No.",0) THEN BEGIN
                  GetAndSetLastError(GETLASTERRORTEXT);
                  IsError := TRUE;
                END;
              END;
            END;
          END;
        END;

        // Archivierte AuftrÑge
        IF AltreklaTemp."Document Type" = AltreklaTemp."Document Type"::Invoice THEN BEGIN
          ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
          ArchSalesOrder.SETRANGE("No.",AltreklaTemp."No.");
          IF ArchSalesOrder.FINDLAST THEN
            IF NOT FPCManagement.CreateReturnOrder(ArchSalesOrder."No.",1) THEN BEGIN
              GetAndSetLastError(GETLASTERRORTEXT);
              IsError := TRUE;
            END;
        END;

        IF NOT IsError THEN BEGIN
          LocAltreklamationen.SETRANGE("Auftragsnr.",AltreklaTemp."No.");
          LocAltreklamationen.SETFILTER(Reklamationsgrund,'%1|%2|%3','STORNO','RETOURE','TEILSTORNO');
          LocAltreklamationen.SETRANGE(vorbereitet,TRUE);
          IF LocAltreklamationen.FIND('-') THEN REPEAT
            LocAltreklamationen.Verarbeitet := TRUE;
            LocAltreklamationen."Verarbeitet am" := CURRENTDATETIME;
            LocAltreklamationen."Verarbeitet von" := USERID;
            LocAltreklamationen.MODIFY;
          UNTIL LocAltreklamationen.NEXT = 0;
          COMMIT;
        END;

      UNTIL AltreklaTemp.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE Fehlercode9Loeschen@1000000027();
    BEGIN
      Window.OPEN('Fehlercode9 - Lîschen: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2|%3','STORNO','RETOURE','TEILSTORNO');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,TRUE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      Altreklamationen.SETFILTER(RÅckerstattungsbetrag,'<>%1',0);

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        IF AltreklamationenPrÅfungslog.COUNT = 1 THEN BEGIN
          AltreklamationenPrÅfungslog.FINDFIRST;
          IF AltreklamationenPrÅfungslog.Fehlercode = 9 THEN // falscher Betrag
            AltreklamationenPrÅfungslog.DELETE;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE GetRetoureStornoReason@1000000012(RetoureOrStorno@1000000000 : Code[10];Text@1000000001 : Text[30]) : Code[10];
    BEGIN
      CASE RetoureOrStorno OF
        'RETOURE': BEGIN
                     CASE UPPERCASE(Text) OF
                       'ARTIKELNR.': EXIT('R-FALSCHWA');
                       'AUSLAND': EXIT('R-AUSLAND');
                       'BESCHéDIGTE WARE': EXIT('R-BESCHéDI');
                       'DUBLETTE': EXIT('R-DOUBLETT');
                       'FALSCHE WARE':EXIT('R-FALSCHWA');
                       'FALSCHE ZAHLUNGSART': EXIT('R-FALSCHZA');
                       'GUTSCHEINCODE': EXIT('R-IRRTUM');
                       'IRRTöMLICHE BESTELLUNG': EXIT('R-IRRTUM');
                       'LIEFERUNG UNVOLLSTéNDIG': EXIT('R-UNVOLL');
                       'LIEFERVERZUG': EXIT('R-VERZUG');
                       'LIEFERZEIT': EXIT('R-LIEFERZE');
                       'NICHT MEHR LIEFERBAR': EXIT('R-NICHTLIE');
                       'NICHTGEFALLEN': EXIT('R-NICHTGEF');
                       'PREIS': EXIT('R-PREIS');
                       'SONDERFALL': EXIT('SONDERFALL');
                       'TECHNISCHER FEHLER': EXIT('R-TECHFEHL');
                       '': EXIT('R-KANGABE');
                     END;
                   END;

        'STORNO' : BEGIN
                     CASE UPPERCASE(Text) OF
                       'ARTIKELNR.': EXIT('FALSCHWARE');
                       'AUSLAND': EXIT('S-AUSLAND');
                       'BESCHéDIGTE WARE': EXIT('BESCHéDIGT');
                       'DUBLETTE': EXIT('DOUBLETTE');
                       'FALSCHE WARE':EXIT('S-FALSCHWA');
                       'FALSCHE ZAHLUNGSART': EXIT('S-FALSCHZA');
                       'GUTSCHEINCODE': EXIT('S-IRRTUM');
                       'IRRTöMLICHE BESTELLUNG': EXIT('S-IRRTUM');
                       'LIEFERUNG UNVOLLSTéNDIG': EXIT('S-UNVOLL');
                       'LIEFERVERZUG': EXIT('S-VERZUG');
                       'LIEFERZEIT': EXIT('S-LIEFERZE');
                       'NICHT MEHR LIEFERBAR': EXIT('S-NICHTLIE');
                       'NICHTGEFALLEN': EXIT('NICHTGEFA');
                       'PREIS': EXIT('S-PREIS');
                       'SONDERFALL': EXIT('R-SONDERFA');
                       'TECHNISCHER FEHLER': EXIT('S-TECHFEHL');
                       '': EXIT('S-KANGABE');
                     END;
                   END;
      END;
    END;

    PROCEDURE GetAndSetLastError@1000000015(ErrorMessage@1000000000 : Text[1024]);
    BEGIN
      Altreklamationen."Fehler in Verarbeitung" := TRUE;
      Altreklamationen.Fehlermeldung := COPYSTR(ErrorMessage,1,250);
      Altreklamationen.MODIFY;
    END;

    PROCEDURE StornoAufRetoure@1000000031();
    VAR
      LocAltreklamationen@1000000000 : Record 50041;
    BEGIN
      Window.OPEN('Storno auf Retoure - abw. Betrag - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2','STORNO','TEILSTORNO');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      //Altreklamationen.SETFILTER(RÅckerstattungsbetrag,'<>%1',0);

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        AltreklamationenPrÅfungslog.SETFILTER(Fehlercode,'<>%1&<>%2&<>%3',5,8,9);
        IF AltreklamationenPrÅfungslog.ISEMPTY THEN BEGIN
          LocAltreklamationen.GET(Altreklamationen."Lfd. Nr.");
          LocAltreklamationen."Alter Reklamationsgrund" := LocAltreklamationen.Reklamationsgrund;
          LocAltreklamationen.Reklamationsgrund := 'RETOURE';
          LocAltreklamationen.MODIFY;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE VorbereitenStornoAufRetoure@1000000030();
    VAR
      i@1000000000 : Integer;
    BEGIN
      Window.OPEN('Vorbereiten: Storno auf Retoure - abw. Betrag - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1','RETOURE');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      //Altreklamationen.SETFILTER(RÅckerstattungsbetrag,'<>%1',0);

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        AltreklamationenPrÅfungslog.SETFILTER(Fehlercode,'<>%1&<>%2&<>%3',5,8,9);
        IF AltreklamationenPrÅfungslog.ISEMPTY THEN BEGIN

          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN BEGIN
            IF SalesOrder.GET(SalesOrder."Document Type"::Order,Altreklamationen."Auftragsnr.") THEN BEGIN
              // Auftragszeilen zurÅcksetzen
              ClearSalesOrderLine.RESET;
              ClearSalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
              ClearSalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
              IF ClearSalesOrderLine.FIND('-') THEN BEGIN
                REPEAT
                  ClearSalesOrderLine."Return Type" := ClearSalesOrderLine."Return Type"::" ";
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //ClearSalesOrderLine."Offered prevention" := ClearSalesOrderLine."Offered prevention"::"0";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  ClearSalesOrderLine."Customer Prevention" := ClearSalesOrderLine."Customer Prevention"::" ";
                  ClearSalesOrderLine."Prevention discount Amount" := 0;
                  ClearSalesOrderLine.MODIFY;
                UNTIL ClearSalesOrderLine.NEXT = 0;
              END;
            END;
          END;

          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::"Archiv. Auftrag" THEN BEGIN
            ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
            ArchSalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
            IF ArchSalesOrder.FINDLAST THEN BEGIN

              // Auftragszeilen zurÅcksetzen
              ClearArchSalesOrderLine.RESET;
              ClearArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrder."Document Type");
              ClearArchSalesOrderLine.SETRANGE("Document No.",ArchSalesOrder."No.");
              ClearArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
              ClearArchSalesOrderLine.SETRANGE("Doc. No. Occurrence",ArchSalesOrder."Doc. No. Occurrence");
              IF ClearArchSalesOrderLine.FIND('-') THEN BEGIN
                REPEAT
                  ClearArchSalesOrderLine."Return Type" := ClearArchSalesOrderLine."Return Type"::" ";
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //ClearArchSalesOrderLine."Offered prevention" := ClearArchSalesOrderLine."Offered prevention"::"0";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  ClearArchSalesOrderLine."Customer Prevention" := ClearArchSalesOrderLine."Customer Prevention"::" ";
                  ClearArchSalesOrderLine."Prevention discount Amount" := 0;
                  ClearArchSalesOrderLine.MODIFY;
                UNTIL ClearArchSalesOrderLine.NEXT = 0;
              END;
            END;
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      ZÑhler := 0;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        AltreklamationenPrÅfungslog.SETFILTER(Fehlercode,'<>%1&<>%2&<>%3',5,8,9);
        IF AltreklamationenPrÅfungslog.ISEMPTY THEN BEGIN
          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN BEGIN
            IF SalesOrder.GET(SalesOrder."Document Type"::Order,Altreklamationen."Auftragsnr.") THEN BEGIN
              SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
              SalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
              SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::Item);
              SalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
              IF SalesOrderLine.FINDSET THEN BEGIN
                FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                  IF SalesOrderLine."Quantity Shipped" <> 0 THEN BEGIN
                    SalesOrderLine."Return Type" := SalesOrderLine."Return Type"::Return;
                    SalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                    //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    //SalesOrderLine."Offered prevention" := SalesOrderLine."Offered prevention"::"1";
                    //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                    SalesOrderLine."Customer Prevention" := SalesOrderLine."Customer Prevention"::Offered;
                    SalesOrderLine."Prevention discount Amount" := 0;
                    SalesOrderLine.MODIFY;
                    IF i <> Altreklamationen.Menge THEN
                      SalesOrderLine.NEXT;

                    Altreklamationen.vorbereitet := TRUE;
                    Altreklamationen.Fehlermeldung := 'Retoure';
                    Altreklamationen.MODIFY;
                  END;
                END;
              END;
            END;
          END;

          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::"Archiv. Auftrag" THEN BEGIN
            ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
            ArchSalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
            IF ArchSalesOrder.FINDLAST THEN BEGIN
              ArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type"::Order);
              ArchSalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
              ArchSalesOrderLine.SETRANGE(Type,ArchSalesOrderLine.Type::Item);
              ArchSalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
              ArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
              IF ArchSalesOrderLine.FINDSET THEN BEGIN
                FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                  ArchSalesOrderLine."Return Type" := ArchSalesOrderLine."Return Type"::Return;
                  ArchSalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                  //H4306  01.06.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  //ArchSalesOrderLine."Offered prevention" := ArchSalesOrderLine."Offered prevention"::"1";
                  //H4306  01.06.15  MBY  -------------------------------------------------------------------------
                  ArchSalesOrderLine."Customer Prevention" := ArchSalesOrderLine."Customer Prevention"::Offered;
                  ArchSalesOrderLine."Prevention discount Amount" := 0;
                  ArchSalesOrderLine.MODIFY;
                  IF i <> Altreklamationen.Menge THEN
                    ArchSalesOrderLine.NEXT;

                  Altreklamationen.vorbereitet := TRUE;
                  Altreklamationen.Fehlermeldung := 'Retoure';
                  Altreklamationen.MODIFY;
                END;
              END;
            END;
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE DurchfÅhrenStornoAufRetoure@1000000032();
    VAR
      AltreklaTemp@1000000000 : TEMPORARY Record 36;
      IsError@1000000001 : Boolean;
      LocAltreklamationen@1000000002 : Record 50041;
    BEGIN
      Window.OPEN('DurchfÅren: Storno auf Retoure - abw. Betrag - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1','RETOURE');
      Altreklamationen.SETRANGE(vorbereitet,TRUE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Fehlermeldung,'Retoure');

      FPCManagement.SetHideValidationDialog;

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        AltreklaTemp.INIT;
        IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN
          AltreklaTemp."Document Type" := AltreklaTemp."Document Type"::Order
        ELSE
          AltreklaTemp."Document Type" := AltreklaTemp."Document Type"::Invoice;   //eigentlich Arch. Order
        AltreklaTemp."No." := Altreklamationen."Auftragsnr.";
        IF AltreklaTemp.INSERT THEN;
      UNTIL Altreklamationen.NEXT = 0;


      IF AltreklaTemp.FIND('-') THEN REPEAT
        ZÑhler += 1;
        IsError := FALSE;
        Window.UPDATE(1, AltreklaTemp."No.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        //Altreklamationen.CALCFIELDS(PrÅfungsfehler);
        //IF (Altreklamationen.PrÅfungsfehler = 0) OR (Altreklamationen."Verarbeitung erzwingen") THEN BEGIN

        // AuftrÑge
        IF AltreklaTemp."Document Type" = AltreklaTemp."Document Type"::Order THEN BEGIN
          IF SalesOrder.GET(SalesOrder."Document Type"::Order,AltreklaTemp."No.") THEN BEGIN
            IF SalesOrder."XML Kommissionierung" = FALSE THEN BEGIN

              // Retoure durchfÅhren
              SalesOrderLine.RESET;
              SalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
              SalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
              SalesOrderLine.SETRANGE("Return Type",SalesOrderLine."Return Type"::Return);
              SalesOrderLine.SETRANGE("Customer Prevention",SalesOrderLine."Customer Prevention"::Offered);
              SalesOrderLine.SETFILTER(Quantity,'>%1',0);
              IF NOT SalesOrderLine.ISEMPTY THEN BEGIN
                IF NOT SalesOrder."Ignore Komm. Control" THEN BEGIN
                  SalesOrder."Ignore Komm. Control" := TRUE;
                  SalesOrder."Cancel Without Interfaces" := TRUE;
                  SalesOrder.MODIFY;
                  COMMIT;
                END;
                // Reklamationslogik durchfÅhren
                IF NOT FPCManagement.CreateReturnOrder(SalesOrder."No.",0) THEN BEGIN
                  GetAndSetLastError(GETLASTERRORTEXT);
                  IsError := TRUE;
                END;
              END;
            END;
          END;
        END;

        // Archivierte AuftrÑge
        IF AltreklaTemp."Document Type" = AltreklaTemp."Document Type"::Invoice THEN BEGIN
          ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
          ArchSalesOrder.SETRANGE("No.",AltreklaTemp."No.");
          IF ArchSalesOrder.FINDLAST THEN
            IF NOT FPCManagement.CreateReturnOrder(ArchSalesOrder."No.",1) THEN BEGIN
              GetAndSetLastError(GETLASTERRORTEXT);
              IsError := TRUE;
            END;
        END;

        IF NOT IsError THEN BEGIN
          LocAltreklamationen.SETRANGE("Auftragsnr.",AltreklaTemp."No.");
          LocAltreklamationen.SETFILTER(Reklamationsgrund,'%1','RETOURE');
          LocAltreklamationen.SETRANGE(vorbereitet,TRUE);
          LocAltreklamationen.SETRANGE(Fehlermeldung,'Retoure');
          IF LocAltreklamationen.FIND('-') THEN REPEAT
            LocAltreklamationen.Verarbeitet := TRUE;
            LocAltreklamationen."Verarbeitet am" := CURRENTDATETIME;
            LocAltreklamationen."Verarbeitet von" := USERID;
            LocAltreklamationen.MODIFY;
          UNTIL LocAltreklamationen.NEXT = 0;
          COMMIT;
        END;

      UNTIL AltreklaTemp.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE BuchenStornoAufRetouren@1000000033(DateOfCreation@1000000005 : Text[30]);
    VAR
      ReturnOrder@1000000000 : Record 36;
      ReturnOrderLine@1000000001 : Record 37;
      ApprovalMgt@1000000002 : Codeunit 439;
      SalesPost@1000000003 : Codeunit 80;
      PurchaseHeader@1000000004 : Record 38;
    BEGIN
      Window.OPEN('Buchen: Storno auf Retoure - abw. Betrag - Reklamation: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      //Altreklamationen.SETRANGE("Auftragsnr.",'10104000032601');
      Altreklamationen.SETFILTER(Reklamationsgrund,'%1','RETOURE');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,TRUE);
      Altreklamationen.SETRANGE(Fehlermeldung,'Retoure');
      //Altreklamationen.SETRANGE(vorbereitet,TRUE);

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        ReturnOrder.SETRANGE("Document Type",ReturnOrder."Document Type"::"Return Order");
        ReturnOrder.SETRANGE("External Document No.",Altreklamationen."Auftragsnr.");
        ReturnOrder.SETFILTER("Date of Creation",DateOfCreation);
        IF ReturnOrder.FINDLAST THEN BEGIN
          Window.UPDATE(1, ReturnOrder."No.");
          Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));

          // Zeilen fÅr Liefern und Fakturieren vorbereiten
          ReturnOrderLine.SETRANGE("Document Type",ReturnOrder."Document Type");
          ReturnOrderLine.SETRANGE("Document No.",ReturnOrder."No.");
          IF ReturnOrderLine.FINDSET THEN REPEAT
            IF ReturnOrderLine.Quantity <> 0 THEN BEGIN
              ReturnOrderLine.VALIDATE("Return Qty. to Receive",1);
              ReturnOrderLine.VALIDATE("Qty. to Invoice",1);
              ReturnOrderLine.MODIFY;
            END;
          UNTIL ReturnOrderLine.NEXT = 0;
          COMMIT;
          IF ApprovalMgt.PrePostApprovalCheck(ReturnOrder,PurchaseHeader) THEN BEGIN
            ReturnOrder.Invoice := TRUE;
            ReturnOrder.Receive := TRUE;
            ReturnOrder."Posting No. Series" := 'GU-ALTREKL';
            ReturnOrder.VALIDATE("Posting Date",DT2DATE(Altreklamationen."Erstellt am"));
            ReturnOrder.MODIFY;
            COMMIT;

            //A/GOB-MNO
            DummyDate := DT2DATE(Altreklamationen."Erstellt am");
            WORKDATE(DummyDate);
            //E/GOB-MNO

            IF NOT SalesPost.RUN(ReturnOrder) THEN
              GetAndSetLastError(GETLASTERRORTEXT);
          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE Fehlercode589Loeschen@1000000034();
    BEGIN
      Window.OPEN('Fehlercode abw. Betrag lîschen - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1','RETOURE');
      Altreklamationen.SETRANGE(Verarbeitet,TRUE);
      Altreklamationen.SETRANGE("nicht verarbeiten",FALSE);
      Altreklamationen.SETRANGE(Fehlermeldung,'Retoure');
      //Altreklamationen.SETFILTER(RÅckerstattungsbetrag,'<>%1',0);

      Anzahl := Altreklamationen.COUNT;

      IF Altreklamationen.FIND('-') THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
        AltreklamationenPrÅfungslog.RESET;
        AltreklamationenPrÅfungslog.SETRANGE("Lfd. Nr. Altreklamation",Altreklamationen."Lfd. Nr.");
        AltreklamationenPrÅfungslog.SETFILTER(Fehlercode,'<>%1&<>%2&<>%3',5,8,9);
        IF AltreklamationenPrÅfungslog.ISEMPTY THEN BEGIN
          AltreklamationenPrÅfungslog.SETRANGE(Fehlercode);
          AltreklamationenPrÅfungslog.DELETEALL;
        END;
      UNTIL Altreklamationen.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE ErstellenGutschriften@1000000036();
    VAR
      CrMemoHeader@1000000000 : Record 36;
      CrMemoLine@1000000001 : Record 37;
      FPCGeneralSetup@1000000002 : Record 50055;
      locNewItemChargeAssign@1000000003 : Record 5809;
    BEGIN
      {
      Window.OPEN('Erstelle Gutschriften fÅr Kulanzen und Rabatte - Auftrag: #1####################\'+
                  '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      Altreklamationen.SETFILTER(Reklamationsgrund,'%1|%2','KULANZ','RABATT');
      //Altreklamationen.SETRANGE(Verarbeitet,TRUE);   // TEMP, normalerweise FALSE
      Altreklamationen.SETRANGE(Verarbeitet,FALSE);
      //Altreklamationen.SETRANGE("Auftragsnr.",'1700214598');
      FPCGeneralSetup.GET();

      Anzahl := Altreklamationen.COUNT;
      IF Altreklamationen.FINDSET(TRUE,TRUE) THEN REPEAT
        ZÑhler += 1;
        Window.UPDATE(1, Altreklamationen."Auftragsnr.");
        Window.UPDATE(2, ROUND(ZÑhler / Anzahl * 10000,1));
          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::Auftrag THEN BEGIN
            IF SalesOrder.GET(SalesOrder."Document Type"::Order,Altreklamationen."Auftragsnr.") THEN BEGIN

              CrMemoHeader.INIT;
              CrMemoHeader."No." := '';
              CrMemoHeader."Document Type" := CrMemoHeader."Document Type"::"Credit Memo";
              CrMemoHeader.INSERT(TRUE);
              CrMemoHeader.VALIDATE("Sell-to Customer No.",SalesOrder."Sell-to Customer No.");
              CrMemoHeader.VALIDATE("Bill-to Customer No.",SalesOrder."Bill-to Customer No.");
              CrMemoHeader."Sell-to Customer Name" := SalesOrder."Ship-to Name";
              CrMemoHeader."Sell-to Customer Name 2" := SalesOrder."Ship-to Name 2";
              CrMemoHeader."Sell-to Address" := SalesOrder."Ship-to Address";
              CrMemoHeader."Sell-to Address 2" := SalesOrder."Ship-to Address 2";
              CrMemoHeader."Sell-to City" := SalesOrder."Ship-to City";
              CrMemoHeader."Sell-to Contact" := SalesOrder."Ship-to Contact";
              CrMemoHeader."Sell-to Post Code" := SalesOrder."Ship-to Post Code";
              CrMemoHeader."Sell-to Country/Region Code" := SalesOrder."Ship-to Country/Region Code";
              CrMemoHeader."Ship-to Code" := SalesOrder."Ship-to Code";
              CrMemoHeader."Ship-to Name" := SalesOrder."Ship-to Name";
              CrMemoHeader."Ship-to Name 2" := SalesOrder."Ship-to Name 2";
              CrMemoHeader."Ship-to Address" := SalesOrder."Ship-to Address";
              CrMemoHeader."Ship-to Address 2" := SalesOrder."Ship-to Address 2";
              CrMemoHeader."Ship-to City" := SalesOrder."Ship-to City";
              CrMemoHeader."Posting Date" := DT2DATE(Altreklamationen."Erstellt am");
              CrMemoHeader."Account Holder" := SalesOrder."Account Holder";
              CrMemoHeader."Account No." := SalesOrder."Account No.";
              CrMemoHeader."Account BLZ" := SalesOrder."Account BLZ";
              CrMemoHeader."Payment Method Code" := SalesOrder."Payment Method Code";
              CrMemoHeader.VALIDATE("Location Code",FPCGeneralSetup."Return Location Code");
              CrMemoHeader."Prices Including VAT" := SalesOrder."Prices Including VAT";
              CrMemoHeader."Gen. Bus. Posting Group" := SalesOrder."Gen. Bus. Posting Group";
              CrMemoHeader."VAT Bus. Posting Group" := SalesOrder."VAT Bus. Posting Group";

              CrMemoHeader."Return Type" := CrMemoHeader."Return Type"::Return;
              IF SalesOrder."External Document No." = '' THEN
                CrMemoHeader."External Document No." := SalesOrder."No."
              ELSE
                CrMemoHeader."External Document No." := SalesOrder."External Document No.";

              CrMemoHeader."Shipping No." := SalesOrder."Shipping No.";
              IF CrMemoHeader."Return Type" = CrMemoHeader."Return Type"::Change THEN
                CrMemoHeader."On Hold" := 'UM';
              CrMemoHeader."Website No." := SalesOrder."Website No.";

              CrMemoHeader.MODIFY;

              SalesOrderLine.SETRANGE("Document Type",SalesOrder."Document Type");
              SalesOrderLine.SETRANGE("Document No.",SalesOrder."No.");
              SalesOrderLine.SETRANGE("Document Type",SalesOrderLine.Type::Item);
              SalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
              IF SalesOrderLine.FINDFIRST THEN BEGIN

                // Artikelzeile anlegen
                CrMemoLine.INIT;
                CrMemoLine."Document Type" := CrMemoHeader."Document Type";
                CrMemoLine."Document No." := CrMemoHeader."No.";
                CrMemoLine."Line No." := 10000;
                CrMemoLine.INSERT(TRUE);
                CrMemoLine.VALIDATE("Sell-to Customer No.",SalesOrderLine."Sell-to Customer No.");
                CrMemoLine.VALIDATE(Type,CrMemoLine.Type::Item);
                CrMemoLine.VALIDATE("No.",Altreklamationen."Artikelnr.");
                CrMemoLine.VALIDATE("Location Code",CrMemoHeader."Location Code");
                CrMemoLine.VALIDATE(Quantity,0);
                CrMemoLine.VALIDATE("Unit Price",SalesOrderLine."Unit Price");
                CrMemoLine."Gen. Bus. Posting Group" := SalesOrderLine."Gen. Bus. Posting Group";
                CrMemoLine."VAT Bus. Posting Group" := SalesOrderLine."VAT Bus. Posting Group";
                CrMemoLine."Return Type" := SalesOrderLine."Return Type";
                CrMemoLine."Return Reason Code" := SalesOrderLine."Return Reason Code";
                CrMemoLine."Transp. Type" := SalesOrderLine."Transp. Type";
                CrMemoLine.MODIFY;

                CopyFromSalesDocDimToLine(CrMemoLine,SalesOrderLine);

                // Zu/Abschlag anlegen
                CrMemoLine.INIT;
                CrMemoLine."Document Type" := CrMemoHeader."Document Type";
                CrMemoLine."Document No." := CrMemoHeader."No.";
                CrMemoLine."Line No." := 20000;
                CrMemoLine.VALIDATE(Type,CrMemoLine.Type::"Charge (Item)");
                CrMemoLine.VALIDATE("No.",Altreklamationen.Reklamationsgrund);
                CrMemoLine.VALIDATE(Quantity,1);
                CrMemoLine.VALIDATE("Unit Price",-ABS(Altreklamationen.RÅckerstattungsbetrag));
                CrMemoLine.INSERT;

                locNewItemChargeAssign.INIT;
                locNewItemChargeAssign."Document Type" := CrMemoLine."Document Type";
                locNewItemChargeAssign."Document No." := CrMemoLine."Document No.";
                locNewItemChargeAssign."Document Line No." := 20000;
                locNewItemChargeAssign."Line No." := 10000;
                locNewItemChargeAssign."Item Charge No." := CrMemoLine."No.";
                locNewItemChargeAssign."Item No." := Altreklamationen."Artikelnr.";
                locNewItemChargeAssign.Description := CrMemoLine.Description;
                locNewItemChargeAssign."Unit Cost" := CrMemoLine."Unit Price";
                locNewItemChargeAssign."Qty. to Assign" := 1;
                locNewItemChargeAssign."Amount to Assign" := CrMemoLine."Unit Price";

                locSalesShipmentLine.RESET;
                locSalesShipmentLine.SETCURRENTKEY("Order No.","Order Line No.","Posting Date");
                locSalesShipmentLine.SETRANGE("Order No.",parSalesLine."Document No.");
                locSalesShipmentLine.SETRANGE(Type,locSalesShipmentLine.Type::Item);
                locSalesShipmentLine.SETFILTER(Quantity,'<>0');
                IF locSalesShipmentLine.FINDFIRST THEN BEGIN
                  locNewItemChargeAssign."Applies-to Doc. Type" := locNewItemChargeAssign."Applies-to Doc. Type"::Shipment;
                  locNewItemChargeAssign."Applies-to Doc. No." := locSalesShipmentLine."Document No.";
                  locNewItemChargeAssign."Applies-to Doc. Line No." := locSalesShipmentLine."Line No.";
                END ELSE BEGIN
            locSalesShipmentLine.RESET;
            //locSalesShipmentLine.SETRANGE(locSalesShipmentLine."Document No.",locSalesHeader."Shipping No.");
            locSalesShipmentLine.SETRANGE(Type,locSalesShipmentLine.Type::Item);
            locSalesShipmentLine.SETFILTER(Quantity,'<>0');
            IF locSalesShipmentLine.FINDFIRST THEN BEGIN
              locNewItemChargeAssign."Applies-to Doc. Type" := locNewItemChargeAssign."Applies-to Doc. Type"::Shipment;
              locNewItemChargeAssign."Applies-to Doc. No." := locSalesShipmentLine."Document No.";
              locNewItemChargeAssign."Applies-to Doc. Line No." := locSalesShipmentLine."Line No.";
            END;
          END;
          locNewItemChargeAssign.INSERT;

          //InsertItemChargeDimension(CrMemoLine,parSalesLine);
          CrMemoLine.UpdateItemChargeAssgnt;
        UNTIL locSalesLine.NEXT = 0;

              END;






                FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                  IF SalesOrderLine."Quantity Shipped" = 0 THEN BEGIN
                    SalesOrderLine."Return Type" := SalesOrderLine."Return Type"::Cancelation;
                    SalesOrderLine."Return Reason Code" := GetRetoureStornoReason('STORNO',Altreklamationen."Grund ausfÅhrlich");
                  END ELSE BEGIN
                    SalesOrderLine."Return Type" := SalesOrderLine."Return Type"::Return;
                    SalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                  END;
                  SalesOrderLine."Offered prevention" := SalesOrderLine."Offered prevention"::ja;
                  SalesOrderLine."Prevention accepted" := SalesOrderLine."Prevention accepted"::ja;
                  SalesOrderLine."Prevention discount Amount" := Altreklamationen.RÅckerstattungsbetrag/Altreklamationen.Menge;
                  SalesOrderLine.MODIFY;
                  IF Altreklamationen.RÅckerstattungsbetrag <> 0 THEN BEGIN
                    Altreklamationen.vorbereitet := TRUE;
                    Altreklamationen.MODIFY;
                  END ELSE BEGIN
                    Altreklamationen.vorbereitet := FALSE;
                    Altreklamationen.MODIFY;
                  END;
                  // Gibt es noch zugeordnete Ressourcenzeilen Åber Parent ID?
                  locResLine.SETRANGE("Document Type",SalesOrderLine."Document Type");
                  locResLine.SETRANGE("Document No.",SalesOrderLine."Document No.");
                  locResLine.SETRANGE("Parent ID",SalesOrderLine.ID);
                  IF locResLine.FIND('-') THEN BEGIN
                    IF locResLine."Quantity Shipped" = 0 THEN BEGIN
                      locResLine."Return Type" := locResLine."Return Type"::Cancelation;
                      locResLine."Return Reason Code" := GetRetoureStornoReason('STORNO',Altreklamationen."Grund ausfÅhrlich");
                    END ELSE BEGIN
                      locResLine."Return Type" := locResLine."Return Type"::Return;
                      locResLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                    END;
                    locResLine."Offered prevention" := SalesOrderLine."Offered prevention"::ja;
                    locResLine."Prevention accepted" := SalesOrderLine."Prevention accepted"::nein;
                    locResLine.MODIFY;
                  END;
                  IF i <> Altreklamationen.Menge THEN
                    SalesOrderLine.NEXT;
                END;
              END;
            END;
          END;

          IF Altreklamationen.Auftragstyp = Altreklamationen.Auftragstyp::"Archiv. Auftrag" THEN BEGIN
            ArchSalesOrder.SETRANGE("Document Type",ArchSalesOrder."Document Type"::Order);
            ArchSalesOrder.SETRANGE("No.",Altreklamationen."Auftragsnr.");
            IF ArchSalesOrder.FINDLAST THEN BEGIN
              ArchSalesOrderLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type"::Order);
              ArchSalesOrderLine.SETRANGE("Document No.",Altreklamationen."Auftragsnr.");
              ArchSalesOrderLine.SETRANGE(Type,ArchSalesOrderLine.Type::Item);
              ArchSalesOrderLine.SETRANGE("No.",Altreklamationen."Artikelnr.");
              ArchSalesOrderLine.SETRANGE("Version No.",ArchSalesOrder."Version No.");
              IF ArchSalesOrderLine.FINDSET THEN BEGIN
                FOR i := 1 TO Altreklamationen.Menge DO BEGIN
                  ArchSalesOrderLine."Return Type" := ArchSalesOrderLine."Return Type"::Return;
                  ArchSalesOrderLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                  ArchSalesOrderLine."Offered prevention" := ArchSalesOrderLine."Offered prevention"::ja;
                  ArchSalesOrderLine."Prevention accepted" := ArchSalesOrderLine."Prevention accepted"::ja;
                  ArchSalesOrderLine."Prevention discount Amount" := Altreklamationen.RÅckerstattungsbetrag/Altreklamationen.Menge;
                  ArchSalesOrderLine.MODIFY;
                  IF Altreklamationen.RÅckerstattungsbetrag <> 0 THEN BEGIN
                    Altreklamationen.vorbereitet := TRUE;
                    Altreklamationen.MODIFY;
                  END ELSE BEGIN
                    Altreklamationen.vorbereitet := FALSE;
                    Altreklamationen.MODIFY;
                  END;
                  // Gibt es noch zugeordnete Ressourcenzeilen Åber Parent ID?
                  locArchResLine.SETRANGE("Document Type",ArchSalesOrderLine."Document Type");
                  locArchResLine.SETRANGE("Document No.",ArchSalesOrderLine."Document No.");
                  locArchResLine.SETRANGE("Doc. No. Occurrence",ArchSalesOrderLine."Doc. No. Occurrence");
                  locArchResLine.SETRANGE("Version No.",ArchSalesOrderLine."Version No.");
                  locArchResLine.SETRANGE("Parent ID",ArchSalesOrderLine.ID);
                  IF locArchResLine.FIND('-') THEN BEGIN
                    IF locArchResLine."Quantity Shipped" = 0 THEN BEGIN
                      locArchResLine."Return Type" := locArchResLine."Return Type"::Cancelation;
                      locArchResLine."Return Reason Code" := GetRetoureStornoReason('STORNO',Altreklamationen."Grund ausfÅhrlich");
                    END ELSE BEGIN
                      locArchResLine."Return Type" := locArchResLine."Return Type"::Return;
                      locArchResLine."Return Reason Code" := GetRetoureStornoReason('RETOURE',Altreklamationen."Grund ausfÅhrlich");
                    END;
                    locArchResLine."Offered prevention" := ArchSalesOrderLine."Offered prevention"::ja;
                    locArchResLine."Prevention accepted" := ArchSalesOrderLine."Prevention accepted"::nein;
                    locArchResLine.MODIFY;
                  END;
                  IF i <> Altreklamationen.Menge THEN
                    ArchSalesOrderLine.NEXT;
                END;
              END;
            END;

          END;
        END;
      UNTIL Altreklamationen.NEXT = 0;
      }
    END;

    PROCEDURE BuchenGutschriften@1000000037();
    BEGIN
    END;

    LOCAL PROCEDURE CopyFromSalesDocDimToLine@6(VAR ToSalesLine@1002 : Record 37;VAR FromSalesLine@1003 : Record 37);
    VAR
      DocDim@1001 : Record 357;
      FromDocDim@1000 : Record 357;
    BEGIN
        DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
        DocDim.SETRANGE("Document Type",ToSalesLine."Document Type");
        DocDim.SETRANGE("Document No.",ToSalesLine."Document No.");
        DocDim.SETRANGE("Line No.",ToSalesLine."Line No.");
        DocDim.DELETEALL;
        ToSalesLine."Shortcut Dimension 1 Code" := FromSalesLine."Shortcut Dimension 1 Code";
        ToSalesLine."Shortcut Dimension 2 Code" := FromSalesLine."Shortcut Dimension 2 Code";
        FromDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
        FromDocDim.SETRANGE("Document Type",FromSalesLine."Document Type");
        FromDocDim.SETRANGE("Document No.",FromSalesLine."Document No.");
        FromDocDim.SETRANGE("Line No.",FromSalesLine."Line No.");
        IF FromDocDim.FIND('-') THEN BEGIN
          REPEAT
            DocDim.INIT;
            DocDim."Table ID" := DATABASE::"Sales Line";
            DocDim."Document Type" := ToSalesLine."Document Type";
            DocDim."Document No." := ToSalesLine."Document No.";
            DocDim."Line No." := ToSalesLine."Line No.";
            DocDim."Dimension Code" := FromDocDim."Dimension Code";
            DocDim."Dimension Value Code" := FromDocDim."Dimension Value Code";
            DocDim.INSERT;
          UNTIL FromDocDim.NEXT = 0;
        END;
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________
      H4306       01.06.15 MBY       Solve all compilation errors in NAV2009
    }
    END.
  }
}

