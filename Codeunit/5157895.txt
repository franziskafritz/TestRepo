OBJECT Codeunit 5157895 Create XMW File
{
  OBJECT-PROPERTIES
  {
    Date=20.05.13;
    Time=12:00:00;
    Version List=OPP7.02 AZV;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            xmwCreate();
          END;

  }
  CODE
  {
    VAR
      Text1001@5157833 : TextConst 'DEU=Die Datei %1 wurde erzeugt.;ENU=The File %1 has been created.';
      BundesbankCountry@5157826 : Record 5157904;
      CompanyInf@5157851 : Record 79;
      PmtSetup@5157827 : Record 5157892;
      awvSetup@5157831 : Record 5157906;
      awvHead@5157832 : Record 5157896;
      awvLine@5157835 : Record 5157903;
      AWVLine2@5157828 : Record 5157903;
      FileMgt@5157819 : Codeunit 419;
      PmtTools@5157818 : Codeunit 5157892;
      Types@5157834 : ARRAY [8] OF Code[10];
      MaxTypes@5157837 : Integer;
      ix04@5157843 : Integer;
      ix08@5157844 : Integer;
      ix10@5157845 : Integer;
      ix11@5157846 : Integer;
      ix12@5157848 : Integer;
      ix13@5157847 : Integer;
      ix14@5157850 : Integer;
      ix15@5157849 : Integer;
      secABSENDER@5157808 : Text[1024];
      secERSTELLER@5157812 : Text[1024];
      secMELDEPFLICHTIGER@5157813 : Text[1024];
      "*** File Handling ***"@5157817 : Integer;
      OutFile@5157816 : File;
      StreamVar@5157815 : OutStream;
      FileName@5157811 : Text[1024];
      ServerFileName@5157810 : Text[1024];
      MessageFileName@5157809 : Text[250];
      Global_Option_LineFeed@5157806 : Boolean;
      CRLF@5157804 : Text[2];
      Text1002@5157814 : TextConst 'DEU=Keine Meldes„tze vorhanden.;ENU=Nothing to report.';
      Text1003@5157836 : TextConst 'DEU=%1 muss 8 oder 9 Ziffern lang sein.;ENU=%1 must have 8 or 9 digits.';
      Type_04@5157821 : TextConst 'DEU=VDR_04';
      Type_08@5157822 : TextConst 'DEU=VDR_08';
      Type_10@5157830 : TextConst 'DEU=VDR_10';
      Type_11@5157838 : TextConst 'DEU=VDR_11';
      Type_12@5157839 : TextConst 'DEU=VDR_12';
      Type_13@5157840 : TextConst 'DEU=VDR_13';
      Type_14@5157841 : TextConst 'DEU=VDR_14';
      Type_15@5157842 : TextConst 'DEU=VDR_15';
      "*** request options ***"@5157803 : 'Test,Produktion';
      request_Test@5157805 : 'Test,Produktion';
      request_Date@5157820 : Date;
      "*** future use ***"@5157853 : Integer;
      abweichender_ersteller@5157852 : Boolean;
      Indent@5157802 : Integer;
      ERROR_NAME@5157807 : TextConst 'DEU=Interner Fehler in Prozedur "%1": "%2" ist nicht definiert.;ENU=Internal Error in procedure "%1": "%2" is not defined.';
      "*** debug ***"@5157823 : Integer;
      debug@5157824 : Boolean;
      debugfile@5157825 : Text[255];

    PROCEDURE xmwCreate@5157820();
    BEGIN
      XMW(TRUE);
    END;

    PROCEDURE xmwRepeat@5157821();
    BEGIN
      XMW(FALSE);
    END;

    PROCEDURE XMW@5157804(New@5157802 : Boolean);
    VAR
      found@5157803 : Integer;
    BEGIN
      debug := FALSE;
      IF debug THEN BEGIN
        request_Date := TODAY;
        debugfile := 'c:\temp\xmw2.xml'
      END;

      found := 0;
      awvLine.RESET;

      awvLine.SETRANGE("Gen. Journal Template",'N.A.');
      awvLine.SETRANGE("Gen. Journal Batch",'N.A.');
      awvLine.SETRANGE("Gen. Journal Line",0);
      awvLine.SETRANGE("Gen. Journal Line",0);

      AWVLine2.COPYFILTER("Posting Date",awvLine."Posting Date");

      // todo: awvLine.Setrange(ReportingStatus,ReportingStatus::open);
      IF awvLine.FIND('-') THEN BEGIN
        found += 1;
        xmwFile(New,found);
        IF request_Test = request_Test::Produktion THEN BEGIN
          // todo: awvLine.modifyall(ReportingStatus,ReportingStatus::reported,false);
        END;
      END;

      xmwFile(New,0);

      IF found = 0 THEN
        MESSAGE(Text1002)
    END;

    PROCEDURE Precheck@5157813(file@5157802 : Boolean);
    BEGIN
      CompanyInf.GET;
      awvSetup.GET;

      IF file THEN BEGIN
        CompanyInf.TESTFIELD(Name);
        awvSetup.TESTFIELD("Company No.");
        IF (STRLEN(awvSetup."Company No.") < 8) OR (STRLEN(awvSetup."Company No.") > 9) THEN
          ERROR(Text1003,awvSetup.FIELDCAPTION("Company No."));
        awvSetup.TESTFIELD(awvSetup.Contact);
        CompanyInf.TESTFIELD("Phone No.");
        CompanyInf.TESTFIELD("E-Mail");

        secABSENDER := push('ABSENDER');
        secABSENDER += myText('FIRMENNR', awvSetup."Company No.");
        secABSENDER += myText('NAME', CompanyInf.Name);
        secABSENDER += myText('STRASSE', CompanyInf.Address);
        secABSENDER += myText('PLZ', CompanyInf."Post Code");
        secABSENDER += myText('ORT', CompanyInf.City);
        secABSENDER += myText('LAND', CompanyInf."Country/Region Code");
        secABSENDER += push('KONTAKT');
        // secABSENDER += myText('ANREDE', ABSENDER_KONTAKT_ANREDE);
        // secABSENDER += myText('VORNAME', ABSENDER_KONTAKT_VORNAME);
        secABSENDER += myText('ZUNAME', awvSetup.Contact);
        // secABSENDER += myText('ABTEILUNG', ABSENDER_KONTAKT_ABTEILUNG);
        secABSENDER += myText('TELEFON', CompanyInf."Phone No.");
        // secABSENDER += myPhone('FAX', ABSENDER_KONTAKT_FAX);
        secABSENDER += myText('EMAIL', CompanyInf."E-Mail");
        // secABSENDER += myText('ABTEILUNG', ABSENDER_KONTAKT_ABTEILUNG);
        // secABSENDER += myExtranet('EXTRANET-ID',ABSENDER_KONTAKT_EXTRANET-ID);
        secABSENDER += pop('KONTAKT');
        secABSENDER += pop('ABSENDER');

        IF abweichender_ersteller THEN BEGIN
          // dasselbe mit secErsteller
        END;

      END ELSE BEGIN
        CompanyInf.TESTFIELD(Name);
        awvSetup.TESTFIELD("Company No.");
        IF (STRLEN(awvSetup."Company No.") < 8) OR (STRLEN(awvSetup."Company No.") > 9) THEN
          ERROR(Text1003,awvSetup.FIELDCAPTION("Company No."));
        awvSetup.TESTFIELD(awvSetup.Contact);
        CompanyInf.TESTFIELD("Phone No.");
        CompanyInf.TESTFIELD("E-Mail");

        secMELDEPFLICHTIGER := push('MELDEPFLICHTIGER');
        secMELDEPFLICHTIGER += myText('FIRMENNR', awvSetup."Company No.");
        secMELDEPFLICHTIGER += myText('NAME', CompanyInf.Name);
        secMELDEPFLICHTIGER += myText('STRASSE', CompanyInf.Address);
        secMELDEPFLICHTIGER += myText('PLZ', CompanyInf."Post Code");
        secMELDEPFLICHTIGER += myText('ORT', CompanyInf.City);
        secMELDEPFLICHTIGER += push('KONTAKT');
        // secMELDEPFLICHTIGER += myText('ANREDE', MELDEPFLICHTIGER_KONTAKT_ANREDE);
        // secMELDEPFLICHTIGER += myText('VORNAME', MELDEPFLICHTIGER_KONTAKT_VORNAME);
        secMELDEPFLICHTIGER += myText('ZUNAME', awvSetup.Contact);
        // secMELDEPFLICHTIGER += myText('ABTEILUNG', MELDEPFLICHTIGER_KONTAKT_ABTEILUNG);
        secMELDEPFLICHTIGER += myText('TELEFON', CompanyInf."Phone No.");
        // secMELDEPFLICHTIGER += myPhone('FAX', MELDEPFLICHTIGER_KONTAKT_FAX);
        secMELDEPFLICHTIGER += myText('EMAIL', CompanyInf."E-Mail");
        // secMELDEPFLICHTIGER += myText('ABTEILUNG', MELDEPFLICHTIGER_KONTAKT_ABTEILUNG);
        // secMELDEPFLICHTIGER += myExtranet('EXTRANET-ID',MELDEPFLICHTIGER_KONTAKT_EXTRANET-ID);
        secMELDEPFLICHTIGER += pop('KONTAKT');
        secMELDEPFLICHTIGER += pop('MELDEPFLICHTIGER');
      END;
    END;

    PROCEDURE Set_Global_Options@1000000019();
    BEGIN
      request_Test := request_Test::Produktion;
      abweichender_ersteller := FALSE;

      CRLF[1] := 13;
      CRLF[2] := 10;
      Global_Option_LineFeed := TRUE;

      // Vordruck-Typen
      MaxTypes := 8;
      ix04 := 1;
      ix08 := 2;
      ix10 := 3;
      ix11 := 4;
      ix12 := 5;
      ix13 := 6;
      ix14 := 7;
      ix15 := 8;
      Types[ix04] := Type_04;
      Types[ix08] := Type_08;
      Types[ix10] := Type_10;
      Types[ix11] := Type_11;
      Types[ix12] := Type_12;
      Types[ix13] := Type_13;
      Types[ix14] := Type_14;
      Types[ix15] := Type_15;
    END;

    PROCEDURE StreamToFile@1000000018(TextPara@1000000000 : Text[1024]);
    BEGIN
      IF Global_Option_LineFeed THEN
        TextPara += CRLF;
      StreamVar.WRITETEXT(TextPara);
    END;

    PROCEDURE xmwFile@5157806(New@5157807 : Boolean;Loop@5157805 : Integer) : Boolean;
    VAR
      xmlSection@5157804 : Text[30];
      myLine@5157802 : Text[1024];
    BEGIN
      IF Loop = 1 THEN BEGIN
        Set_Global_Options();
        Precheck(TRUE);

        // todo: Add path to Setup
        IF debug THEN
          FileName := debugfile
        ELSE
          FileName := makeFileName(0,PmtSetup."Pmt. Advice File Path" + awvSetup."Company No.");
        MessageFileName := PmtTools.ExtractFilename(FileName);
        IF NOT ISSERVICETIER THEN BEGIN
          OutFile.QUERYREPLACE(FALSE);
          ServerFileName := FileName;
        END ELSE
          ServerFileName := FileMgt.ServerTempFileName('','txt');

        OutFile.CREATE(ServerFileName);
        OutFile.CREATEOUTSTREAM(StreamVar);

        myLine := '<?xml version="1.0" encoding="iso-8859-1"?>';
        StreamToFile(myLine);

        myLine :=
        '<LIEFERUNG-AWZEL xmlns="http://www.bundesbank.de/xmw/2003-01-01"' +
          ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
          ' xsi:schemaLocation="http://www.bundesbank.de/xmw/2003-01-01 BbkXmwAwzel.xsd"' +
          ' version="1.0"' +
          ' erstellzeit="' + makeISODateTime(TODAY) + '"' +
          ' stufe="' + FORMAT(request_Test) + '"' +
          ' bereich="Statistik"' +'>';
        StreamToFile(myLine);

        Precheck(FALSE);
        StreamToFile := secABSENDER;
        IF abweichender_ersteller THEN
          StreamToFile := secERSTELLER;
        // optional: ADRESSAT
        // optional: KOMMENTAR
        xmlSection := 'MELDUNG';
        StreamToFile := pushAttrib(xmlSection);
          StreamToFile := secMELDEPFLICHTIGER;
          // optional: KOMMENTAR
          xmlSection := 'MELDETERMIN';
          StreamToFile := push(xmlSection) + FORMAT(request_Date,0,'<year4,4>-<month,2>') + pop(xmlSection);
          // optional, Todo no-series-reporting
          // xmlSection := 'MELDUNGSREF';
          // StreamToFile := push(xmlSection) +  ref + pop(xmlSection);
      END;

      IF Loop > 0 THEN BEGIN
        IF Loop = 1 THEN BEGIN
          xmlSection := Types[ix04];
          StreamToFile := push(xmlSection);
        END;
        REPEAT
          StreamToFile(xmwLine);
        UNTIL awvLine.NEXT=0;
      END;

      IF Loop = 0 THEN BEGIN
        StreamToFile(pop(Types[ix04]));
        StreamToFile(pop('MELDUNG'));
        StreamToFile(pop('LIEFERUNG-AWZEL'));
        OutFile.CLOSE;
        CLEAR(StreamVar);
        CLEAR(OutFile);

        IF ISSERVICETIER THEN
          FileMgt.DownloadToFile(ServerFileName,FileName);

        // todo:
        // awvHead.MODIFYALL("Reported",TRUE,FALSE);
        MESSAGE(Text1001,MessageFileName);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE xmwMessage@5157807();
    VAR
      xmlSection@5157803 : Text[30];
      i@5157802 : Integer;
    BEGIN
      // This loop for future extension Z08 .. Z15
      // etc.
      IF awvLine.FIND('-') THEN BEGIN
        xmlSection := 'MELDUNG';
        // Meldepflichtiger etc.
        FOR i := 1 TO MaxTypes DO BEGIN
          // awvLine.SetRange(Type,types[i]);
          IF awvLine.FIND('-') THEN BEGIN
            REPEAT
              // etc.
              xmwLine();
            UNTIL awvLine.NEXT = 0;
          END;
          // awvLine.SetRange(Type);
        END;
        pop(xmlSection);
      END;
    END;

    PROCEDURE xmwLine@5157808() Result : Text[1024];
    VAR
      RecType@5157802 : Code[10];
      myAmount@5157811 : Text[30];
      Stueck@5157814 : Integer;
    BEGIN
      // replace for future release
      RecType := Types[ix04];
      Stueck := 0;
      // eof replace

      // todo:
      // if awvLine.Storno then
      //  myAmount := '-'
      // else
      myAmount := '';
      IF debug AND (awvLine."Reported Amount" < 1000) THEN
        myAmount += FORMAT(5555555.55/1000,0,'<INTEGER>')
      ELSE
        myAmount += FORMAT(ABS(awvLine."Reported Amount"/1000),0,'<INTEGER>');

      CASE RecType OF
        Types[ix04] :
        BEGIN
          CASE awvLine."Trading Type" OF
            awvLine."Trading Type"::Capital :
            BEGIN
              Result := pushAttrib('DIKAPPOSTEN') +
                pushAttrib('BETRAG_Z04') +
                myAmount +
                pop('BETRAG') +
                pop('DIKAPPOSTEN');
            END;
            awvLine."Trading Type"::Service :
            BEGIN
              Result := pushAttrib('DIKAPPOSTEN') +
                pushAttrib('BETRAG_Z04') +
                myAmount +
                pop('BETRAG') +
                pop('DIKAPPOSTEN');
            END;
            awvLine."Trading Type"::Transit :
            BEGIN
              Result := pushAttrib('TRANSITPOSTEN') +
                pushAttrib('TRANSIT') +
                pushAttrib('BETRAG_Z04') +
                myAmount +
                pop('BETRAG') +
                pop('TRANSIT') +
                pop('TRANSITPOSTEN');
            END;
            // for future release
            ELSE BEGIN
              Result := pushAttrib('DIRINVPOSTEN') +
                pushAttrib('WERTPAPIER') +
                myNumber('STUECK', Stueck) +
                pushAttrib('BETRAG_Z04') +
                myAmount +
                pop('BETRAG') +
                pop('WERTPAPIER') +
                pop('DIRINVPOSTEN');
            END;
          END;
        END;

        // for future release
        Types[ix08] :
        BEGIN
          Result := pushAttrib('POSTEN') +
            pushAttrib('BETRAG_Z08') +
            myAmount +
            pop('BETRAG') +
            pop('POSTEN');
        END;

        Types[ix10] :
        BEGIN
          Result := pushAttrib('POSTEN') +
            pushAttrib('WERTPAPIER') +
            pushAttrib('NOMINAL_STUECK') +
            pushAttrib('BETRAG_Z10') +
            myAmount +
            pop('BETRAG') +
            pop('WERTPAPIER') +
            pop('POSTEN');
        END;

        Types[ix11], Types[ix12] :
        BEGIN
          Result := pushAttrib('POSTEN') +
            pushAttrib('BETRAG_Z11') +
            myAmount +
            pop('BETRAG') +
            pop('POSTEN');
        END;

        Types[ix13] :
        BEGIN
          Result := pushAttrib('POSTEN') +
            pushAttrib('BETRAG_Z13') +
            myAmount +
            pop('BETRAG') +
            pop('POSTEN');
        END;

        Types[ix14], Types[ix15] :
        BEGIN
          Result := pushAttrib('BETRAG_Z14') +
           myAmount +
           pop('BETRAG');
        END;
      END;
    END;

    PROCEDURE awvText@5157818(Textpara@1000 : Text[250]) Result : Text[250];
    VAR
      Max@1003 : Integer;
      i@1002 : Integer;
      Test@5157802 : Text[30];
    BEGIN
      Textpara := PmtTools.Ascii2Ansi(Textpara);
      Max := STRLEN(Textpara);

      Result := '';
      FOR i := 1 TO Max DO BEGIN
        Test := COPYSTR(Textpara,i,1);
        IF Test IN ['>','<','&'] THEN BEGIN
          IF Test = '>' THEN
            Result += '&gt;'
          ELSE IF Test = '<' THEN
            Result += '&lt;'
          ELSE IF Test = '&' THEN
            Result += '&amp;'
        END ELSE
          Result += Test;
      END;

      EXIT(Result)
    END;

    PROCEDURE pushAttrib@5157830(Name@5157805 : Text[30]) Result : Text[1024];
    VAR
      Income@5157807 : Boolean;
      para1@5157806 : Text[80];
      para2@5157804 : Text[80];
      para3@5157803 : Text[80];
      para4@5157802 : Text[80];
      _land@5157808 : Code[10];
      _landname@5157809 : Text[30];
    BEGIN
      // IF para1 + para2 + para3 + para4 = '' THEN
      //   EXIT;

      Income := awvLine."Account Type" = awvLine."Account Type"::Customer;

      CLEAR(para1);
      CLEAR(para2);
      CLEAR(para3);
      CLEAR(para4);
      CLEAR(_land);
      CLEAR(_landname);

      Name := UPPERCASE(Name);
      Result := '<' + Name + ' ';

      CASE Name OF

       'BETRAG_Z04':
        BEGIN

          IF BundesbankCountry.GET(awvLine."Country/Region Code") THEN BEGIN
            _landname := awvText(BundesbankCountry.Shortcut);
            _land := BundesbankCountry."ISO-AZV";
          END;

          para1 := awvLine."Country/Region Code";
          // kill subtype
          Result := COPYSTR(Result,1,STRPOS(Result,'_')-1) + ' ';
          Result += 'land="' + para1;
          // Rest optional
          IF _landname <> '' THEN
            Result += '" landname="' + _landname;
          // + para2 +'" betragsref="' + para3 + '" verrkz ="' + para4;
        END;

        // the rest of BETRAGs wonït  in this version
        'BETRAG_Z08','BETRAG_Z11','BETRAG_Z12', 'BETRAG_Z14', 'BETRAG_Z15':
        BEGIN
          Result := COPYSTR(Result,1,STRPOS(Result,'_')-1) + ' ';
          Result += 'land="' + para1 + '" landname="' + para2 + '" betragsref="' + para3;
        END;

        'BETRAG_Z10' :
        BEGIN
          Result := COPYSTR(Result,1,STRPOS(Result,'_')-1) + ' ';
          Result += 'land="' + para1 + '" landname="' + para2 + '" wrg="' + para3 + '" betragsref="' + para4;
        END;

        'BETRAG_Z13' :
        BEGIN
          Result := COPYSTR(Result,1,STRPOS(Result,'_')-1) + ' ';
          Result += 'wrg="' + para1 + '" betragsref="' + para2;
        END;

        'DIKAPPOSTEN':
        BEGIN
          IF awvLine."Trading Type" = awvLine."Trading Type"::Capital THEN BEGIN
            IF Income THEN
              para1 := '3'
            ELSE
              para1 := '4';
          END ELSE IF awvLine."Trading Type" = awvLine."Trading Type"::Service THEN BEGIN
            IF Income THEN
              para1 := '1'
            ELSE
              para1 := '2';
          END;
          para2 := awvLine."Service No.";
          para3 := awvText(awvLine."Service Description");
          Result += 'belegart="' + para1 + '" kennzahl="' + para2 + '" zahlungszweck="' + para3;
        END;

        // 'DIRINVPOSTEN':
        //  Result += 'belegart="' + para1 + '" kennzahl="' + para2;

        'MELDUNG' :
          Result += 'erstellzeit="' + makeISODateTime(TODAY);

        // 'NOMINAL_STUECK':
        //  Result +=  's-oder-n="' + para1;

        'TRANSIT' :
        BEGIN
          awvLine.TESTFIELD("Chapter No. Goods");
          awvLine.TESTFIELD("Itemname Goods");
          para1 := awvLine."Chapter No. Goods";
          para2 := awvText(awvLine."Itemname Goods");
          Result += 'warencode="' + para1 + '" warenbez="' + para2;
        END;

        'TRANSITPOSTEN':
        BEGIN
          IF Income THEN
            para1 := '5'
          ELSE
            para1 := '6';
          para2 := '003'; // fix
          Result += 'belegart="' + para1 + '" kennzahl="' + para2;

        END;

        // 'WERTPAPIER':
        //  Result += 'isin="' + para1 + '" bezeichnung="' + para2;

        ELSE
          ERROR(ERROR_NAME, 'pushAttrib', Name);
        END;

      Result += '">';

      IF Global_Option_LineFeed THEN
        Result += CRLF;
      EXIT(Result);
    END;

    PROCEDURE push@5157823(Name@5157802 : Text[30]) : Text[30];
    BEGIN
      Indent += 1;
      Name := UPPERCASE(Name);
      IF Global_Option_LineFeed THEN
        EXIT('<' + Name + '>' + CRLF)
      ELSE
        EXIT('<' + Name + '>');
    END;

    PROCEDURE pop@5157805(Name@5157802 : Text[30]) : Text[30];
    BEGIN
      Indent -= 1;
      Name := UPPERCASE(Name);
      IF Global_Option_LineFeed THEN
        EXIT('</' + Name + '>' + CRLF)
      ELSE
        EXIT('</' + Name + '>');
    END;

    PROCEDURE myText@5157824(Name@5157802 : Text[30];Value@5157803 : Text[255]) Result : Text[255];
    BEGIN
      IF Value = '' THEN
        EXIT('');
      Name := UPPERCASE(Name);
      Result := '<' + Name + '>' + awvText(Value) + '</' + Name + '>';
      IF Global_Option_LineFeed THEN
        Result += CRLF;
      EXIT(Result);
    END;

    PROCEDURE myPhone@5157827(Name@5157802 : Text[30];Value@5157803 : Text[255]) Result : Text[255];
    VAR
      i@5157804 : Integer;
      Max@5157805 : Integer;
    BEGIN
      Max := STRLEN(Value);
      IF Max = 0 THEN
        EXIT('');
      Name := UPPERCASE(Name);
      Result := '<' + Name + '>';
      FOR i := 1 TO Max DO BEGIN
        IF COPYSTR(Value,i,1) IN ['0'..'9','(',')',' ','-'] THEN
          Result += COPYSTR(Value,i,1);
      END;
        Result += '</' + Name + '>';
      IF Global_Option_LineFeed THEN
        Result += CRLF;
      EXIT(Result);
    END;

    PROCEDURE myExtranet@5157828(Name@5157802 : Text[30];Value@5157803 : Text[255]) Result : Text[255];
    BEGIN
      IF Value = '' THEN
        EXIT('');
      Result += '<' + Name + '>' + Value + '</' + Name + '>';
      IF Global_Option_LineFeed THEN
        Result += CRLF;
      EXIT(Result);
    END;

    PROCEDURE myNumber@5157814(Name@5157803 : Text[30];Value@5157802 : Integer) Result : Text[30];
    BEGIN
      IF Value = 0 THEN
        EXIT('');
      Name := UPPERCASE(Name);
      Result += '<' + Name + '>' + FORMAT(Value) + '</' + Name + '>';
      IF Global_Option_LineFeed THEN
        Result += CRLF;
      EXIT(Result);
    END;

    PROCEDURE makeISODateTime@5157817(Date@5157802 : Date) : Text[40];
    BEGIN
      // Beispiel: 2008-07-21T08:35:30
      EXIT(CONVERTSTR(FORMAT(Date,0,'<year4,4>-<month,2>-<day,2>') +
       FORMAT(TIME,0,'T<Hours24,2>:<Minutes,2>:<Seconds,2>'),' ','0'));
    END;

    PROCEDURE makeFileName@5157809(Counter@5157802 : Integer;Id@5157803 : Code[10]) Result : Text[30];
    BEGIN
      Result := 'awzel_' + FORMAT(TODAY,0,'<year4,4><month,2>') + '_' + Id;
      IF Counter > 0 THEN
        Result += '_' + FORMAT(Counter);
      Result += '.xml';
    END;

    PROCEDURE SetDateFilter@5157802(FilterText@5157802 : Text[250]);
    BEGIN
      AWVLine2.SETFILTER("Posting Date",FilterText);
    END;

    BEGIN
    {
      -----------------------------------------------------
      (c) gbedv, OPplus, All rights reserved

      No.  Date       changed
      -----------------------------------------------------
      XMW  17.05.13   OPplus AZV Payment
                      - Object created
      -----------------------------------------------------
    }
    END.
  }
}

