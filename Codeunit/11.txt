OBJECT Codeunit 11 Gen. Jnl.-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=25.07.13;
    Time=09:19:13;
    Modified=Yes;
    Version List=NAVW16.00.01,OPP7.02.03.GOB1.02;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 252=rimd;
    OnRun=VAR
            TempJnlLineDim@1000 : TEMPORARY Record 356;
          BEGIN
            GLSetup.GET;
            // gbedv TAX ------------------------------------------------- BEGIN
            SetupOPplus();
            // gbedv TAX ------------------------------------------------- END
            IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
              TempJnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
              TempJnlLineDim."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim."Journal Line No." := "Line No.";
              TempJnlLineDim."Dimension Code" := GLSetup."Global Dimension 1 Code";
              TempJnlLineDim."Dimension Value Code" := "Shortcut Dimension 1 Code";
              TempJnlLineDim.INSERT;
            END;
            IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
              TempJnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
              TempJnlLineDim."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim."Journal Line No." := "Line No.";
              TempJnlLineDim."Dimension Code" := GLSetup."Global Dimension 2 Code";
              TempJnlLineDim."Dimension Value Code" := "Shortcut Dimension 2 Code";
              TempJnlLineDim.INSERT;
            END;
            RunCheck(Rec,TempJnlLineDim);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=kann nur ein Ultimodatum sein fÅr Sachposten;ENU=can only be a closing date for G/L entries';
      Text001@1001 : TextConst 'DEU=liegt nicht innerhalb des zugelassenen Buchungszeitraums.;ENU=is not within your range of allowed posting dates';
      Text002@1002 : TextConst 'DEU=%1 oder %2 muss Sach- oder Bankkonto sein.;ENU=%1 or %2 must be G/L Account or Bank Account.';
      Text003@1003 : TextConst 'DEU=muss dasselbe Vorzeichen haben wie %1;ENU=must have the same sign as %1';
      Text004@1004 : TextConst 'DEU=Sie dÅrfen nicht %1 angeben, wenn %2 %3 ist.;ENU=You must not specify %1 when %2 is %3.';
      Text005@1005 : TextConst 'DEU=%1 + %2 muss %3 sein.;ENU=%1 + %2 must be %3.';
      Text006@1006 : TextConst 'DEU=%1 + %2 muss -%3 sein.;ENU=%1 + %2 must be -%3.';
      Text007@1007 : TextConst 'DEU=muss positiv sein;ENU=must be positive';
      Text008@1008 : TextConst 'DEU=muss negativ sein;ENU=must be negative';
      Text009@1009 : TextConst 'DEU=muss ein anderes Vorzeichen als %1 haben;ENU=must have a different sign than %1';
      Text010@1010 : TextConst 'DEU=Die %1 %2 und die %3 %4 sind nicht zulÑssig.;ENU=%1 %2 and %3 %4 is not allowed.';
      Text011@1011 : TextConst 'DEU=Die Kombination der im %1 %2, %3, %4 verwendeten Dimensionen ist gesperrt. %5;ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5';
      Text012@1012 : TextConst 'DEU=Eine im %1 %2, %3, %4 verwendete Dimension hat einen Fehler hervorgerufen. %5;ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5';
      AccountingPeriod@1013 : Record 50;
      GLSetup@1014 : Record 98;
      UserSetup@1015 : Record 91;
      GenJnlTemplate@1020 : Record 80;
      FAJnlCheckLine@1016 : Codeunit 5631;
      DimMgt@1017 : Codeunit 408;
      AllowPostingFrom@1018 : Date;
      AllowPostingTo@1019 : Date;
      GenJnlTemplateFound@1021 : Boolean;
      OverrideDimErr@1022 : Boolean;
      "+++ OPplus +++"@5157802 : Integer;
      OPplusAnalysisSetup@5157805 : Record 5157882;
      OPplusSetup@5157804 : Record 5157802;
      OPPLicenseInfo@5157807 : Codeunit 5158000;
      EnableVATCorrection@5157806 : Boolean;
      OPplusSetupRead@5157808 : Boolean;
      OPplusEnabled@5157809 : Boolean;
      Text5157802@1000000000 : TextConst 'DEU=%1 bei %2 %3 in %4 %5 muss mit %6 identisch sein.;ENU=%1 in %2 %3 in %4 %5 must be identical with %6.';
      "***gob"@1000000001 : Integer;
      Sachkto@1000000002 : Record 15;

    PROCEDURE RunCheck@4(VAR GenJnlLine@1000 : Record 81;VAR JnlLineDim@1001 : Record 356);
    VAR
      PaymentTerms@1004 : Record 3;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
      Cust@1005 : Record 18;
      Vendor@1006 : Record 23;
      ICPartner@1007 : Record 413;
      ICGLAcount@1008 : Record 410;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN
          EXIT;
        // gbedv TAX ------------------------------------------------- BEGIN
        SetupOPplus();
        // gbedv TAX ------------------------------------------------- END
        IF NOT GenJnlTemplateFound THEN BEGIN
          IF GenJnlTemplate.GET("Journal Template Name") THEN;
          GenJnlTemplateFound := TRUE;
        END;

        TESTFIELD("Posting Date");
        IF "Posting Date" <> NORMALDATE("Posting Date") THEN BEGIN
          IF ("Account Type" <> "Account Type"::"G/L Account") OR
             ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
          THEN
            FIELDERROR("Posting Date",Text000);
          AccountingPeriod.GET(NORMALDATE("Posting Date") + 1);
          AccountingPeriod.TESTFIELD("New Fiscal Year",TRUE);
          AccountingPeriod.TESTFIELD("Date Locked",TRUE);
        END;

        IF DateNotAllowed("Posting Date") THEN
      //    FIELDERROR("Posting Date",Text001);
          ERROR(FORMAT("Posting Date"));

        IF ("Document Date" <> 0D) THEN
          IF ("Document Date" <> NORMALDATE("Document Date")) AND
             (("Account Type" <> "Account Type"::"G/L Account") OR
              ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account"))
          THEN
            FIELDERROR("Document Date",Text000);

        //A/gob-bth/09.11.2012/P0484/Buchungsdatum prÅfen
        IF GenJnlLine.Darlehen <> '' THEN
          PrÅfenDatumsangaben(GenJnlLine);
        //E/gob-bth/09.11.2012/P0484/Buchungsdatum prÅfen
        TESTFIELD("Document No.");

        IF ("Account Type" IN
            ["Account Type"::Customer,
             "Account Type"::Vendor,
             "Account Type"::"Fixed Asset",
             "Account Type"::"IC Partner"]) AND
           ("Bal. Account Type" IN
            ["Bal. Account Type"::Customer,
             "Bal. Account Type"::Vendor,
             "Bal. Account Type"::"Fixed Asset",
             "Bal. Account Type"::"IC Partner"])
        THEN
          ERROR(
            Text002,
            FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));

        IF "Bal. Account No." = '' THEN
          TESTFIELD("Account No.");

        // gbedv EA -------------------------------------------------- BEGIN
        IF OPplusEnabled THEN BEGIN
          IF Payback THEN
            TESTFIELD("Payback Processed",TRUE);
          IF "Applies-to ID" = OPplusSetup.GetExtendedText() THEN BEGIN
            CALCFIELDS("Allocated Application Amount","Allocated Appln. Amount (LCY)");  // PMT CC
            IF "Applied Account Type" IN ["Applied Account Type"::"G/L Account","Applied Account Type"::"Bank Account"] THEN BEGIN
              IF ABS("Amount (LCY)") <> ABS("Allocated Appln. Amount (LCY)") THEN // PMT CC
                ERROR(
                  Text5157802,
                  FIELDCAPTION(Amount),
                  FIELDCAPTION("Document No."),"Document No.",
                  FIELDCAPTION("Line No."),"Line No.",
                  FIELDCAPTION("Allocated Application Amount"));
            END ELSE BEGIN
              IF ABS(Amount) <> ABS("Allocated Application Amount") THEN
                ERROR(
                  Text5157802,
                  FIELDCAPTION(Amount),
                  FIELDCAPTION("Document No."),"Document No.",
                  FIELDCAPTION("Line No."),"Line No.",
                  FIELDCAPTION("Allocated Application Amount"));
            END;
          END;
        END;
        // gbedv EA -------------------------------------------------- END
        // gbedv TAX ------------------------------------------------- BEGIN
        IF EnableVATCorrection THEN BEGIN
          IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
             ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"])
          THEN
            TESTFIELD("Invoice Entrance Date");
        END;
        // gbedv TAX ------------------------------------------------- END

        IF Amount * "Amount (LCY)" < 0 THEN
          FIELDERROR("Amount (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));

        IF ("Account Type" = "Account Type"::"G/L Account") AND
           ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")
        THEN
          // gbedv GLOE -------------------------------------------------- BEGIN
          IF "Applied Account No." = '' THEN
          // gbedv GLOE -------------------------------------------------- END
          TESTFIELD("Applies-to Doc. No.",'');

        IF ("Recurring Method" IN
            ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
           ("Currency Code" <> '')
        THEN
          ERROR(
            Text004,
            FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

        IF "Account No." <> '' THEN
          CASE "Account Type" OF
            "Account Type"::"G/L Account":
              BEGIN
                IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
                   ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
                THEN
                  TESTFIELD("Gen. Posting Type");
                IF ("Gen. Posting Type" <> "Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "VAT Amount" + "VAT Base Amount" <> Amount THEN
                    ERROR(
                      Text005,FIELDCAPTION("VAT Amount"),FIELDCAPTION("VAT Base Amount"),
                      FIELDCAPTION(Amount));
                  IF "Currency Code" <> '' THEN
                    IF "VAT Amount (LCY)" + "VAT Base Amount (LCY)" <> "Amount (LCY)" THEN
                      ERROR(
                        Text005,FIELDCAPTION("VAT Amount (LCY)"),
                        FIELDCAPTION("VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
                END;
                //A/gob-bth/06082012/P0138
                Sachkto.GET("Account No.");
                IF Sachkto."IC Partner Check" THEN
                  TESTFIELD(GenJnlLine."IC Partner Code");
                //E/gob-bth/06082012/P0138
              END;
            "Account Type"::Customer,"Account Type"::Vendor:
              BEGIN
                TESTFIELD("Gen. Posting Type",0);
                TESTFIELD("Gen. Bus. Posting Group",'');
                TESTFIELD("Gen. Prod. Posting Group",'');
                TESTFIELD("VAT Bus. Posting Group",'');
                TESTFIELD("VAT Prod. Posting Group",'');

                IF (("Account Type" = "Account Type"::Customer) AND
                   ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase)) OR
                   (("Account Type" = "Account Type"::Vendor) AND
                   ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Sale))
                THEN
                  ERROR(
                    STRSUBSTNO(
                      Text010,
                      FIELDCAPTION("Account Type"),"Account Type",
                      FIELDCAPTION("Bal. Gen. Posting Type"),"Bal. Gen. Posting Type"));

                IF "Document Type" <> 0 THEN
                  IF "Account Type" = "Account Type"::Customer THEN
                    CASE "Document Type" OF
                      "Document Type"::"Credit Memo":
                        ErrorIfPositiveAmt(GenJnlLine);
                      "Document Type"::Payment:
                        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
                           ("Applies-to Doc. No." <> '')
                        THEN
                          ErrorIfNegativeAmt(GenJnlLine)
                        ELSE
                          ErrorIfPositiveAmt(GenJnlLine);
                      ELSE
                        ErrorIfNegativeAmt(GenJnlLine);
                    END
                  ELSE
                    CASE "Document Type" OF
                      "Document Type"::"Credit Memo":
                        ErrorIfNegativeAmt(GenJnlLine);
                      "Document Type"::Payment:
                        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
                           ("Applies-to Doc. No." <> '')
                        THEN
                          ErrorIfPositiveAmt(GenJnlLine)
                        ELSE
                          ErrorIfNegativeAmt(GenJnlLine);
                      ELSE
                        ErrorIfPositiveAmt(GenJnlLine);
                    END;
                IF NOT "System-Created Entry" AND (Amount * "Sales/Purch. (LCY)" < 0) THEN
                  FIELDERROR(
                    "Sales/Purch. (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));
                TESTFIELD("Job No.",'');
                IF "Account Type" = "Account Type"::Customer THEN BEGIN
                  IF Cust.GET("Account No.") THEN BEGIN
                    Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
                    IF (Cust."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       (ICPartner.GET(Cust."IC Partner Code"))
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                  END;
                END ELSE BEGIN
                  IF Vendor.GET("Account No.") THEN BEGIN
                    Vendor.CheckBlockedVendOnJnls(Vendor,"Document Type",TRUE);
                    IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       (ICPartner.GET(Vendor."IC Partner Code"))
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                  END;
                END;
              END;
            "Account Type"::"Bank Account":
              BEGIN
                TESTFIELD("Gen. Posting Type",0);
                TESTFIELD("Gen. Bus. Posting Group",'');
                TESTFIELD("Gen. Prod. Posting Group",'');
                TESTFIELD("VAT Bus. Posting Group",'');
                TESTFIELD("VAT Prod. Posting Group",'');
                TESTFIELD("Job No.",'');
                IF (Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  TESTFIELD("Check Printed",TRUE);
              END;
            "Account Type"::"IC Partner":
              BEGIN
                ICPartner.GET("Account No.");
                ICPartner.CheckICPartner;
                IF "Journal Template Name" <> '' THEN
                  IF (GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany) THEN
                    FIELDERROR("Account Type");
              END;
          END;

        IF "Bal. Account No." <> '' THEN
          CASE "Bal. Account Type" OF
            "Bal. Account Type"::"G/L Account":
              BEGIN
                IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
                   ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
                THEN
                  TESTFIELD("Bal. Gen. Posting Type");
                IF ("Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "Bal. VAT Amount" + "Bal. VAT Base Amount" <> -Amount THEN
                    ERROR(
                      Text006,FIELDCAPTION("Bal. VAT Amount"),FIELDCAPTION("Bal. VAT Base Amount"),
                      FIELDCAPTION(Amount));
                  IF "Currency Code" <> '' THEN
                    IF "Bal. VAT Amount (LCY)" + "Bal. VAT Base Amount (LCY)" <> -"Amount (LCY)" THEN
                      ERROR(
                        Text006,FIELDCAPTION("Bal. VAT Amount (LCY)"),
                        FIELDCAPTION("Bal. VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
                END;
                //A/gob-bth/06082012/P0138
                Sachkto.GET("Bal. Account No.");
                IF Sachkto."IC Partner Check" THEN
                  TESTFIELD(GenJnlLine."IC Partner Code");
                //E/gob-bth/06082012/P0138

              END;
            "Bal. Account Type"::Customer,"Bal. Account Type"::Vendor:
              BEGIN
                TESTFIELD("Bal. Gen. Posting Type",0);
                TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                TESTFIELD("Bal. VAT Bus. Posting Group",'');
                TESTFIELD("Bal. VAT Prod. Posting Group",'');

                IF (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                   ("Gen. Posting Type" = "Gen. Posting Type"::Purchase)) OR
                   (("Bal. Account Type" = "Bal. Account Type"::Vendor) AND
                   ("Gen. Posting Type" = "Gen. Posting Type"::Sale))
                THEN
                  ERROR(
                    STRSUBSTNO(
                      Text010,
                      FIELDCAPTION("Bal. Account Type"),"Bal. Account Type",
                      FIELDCAPTION("Gen. Posting Type"),"Gen. Posting Type"));

                // gbedv EA -------------------------------------------------- BEGIN
                IF (NOT (GenJnlTemplate."Application Method" = GenJnlTemplate."Application Method"::Extended) OR
                   (GenJnlLine."ID Applied-Entry" = 0)) AND NOT (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment)
                THEN
                // gbedv EA -------------------------------------------------- END
                IF "Document Type" <> 0 THEN BEGIN
                  IF ("Bal. Account Type" = "Bal. Account Type"::Customer) =
                     ("Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"])
                  THEN BEGIN
                    IF Amount < 0 THEN
                      FIELDERROR(Amount,Text007);
                  END ELSE
                    IF Amount > 0 THEN
                      FIELDERROR(Amount,Text008);
                END;
                IF Amount * "Sales/Purch. (LCY)" > 0 THEN
                  FIELDERROR(
                    "Sales/Purch. (LCY)",
                    STRSUBSTNO(Text009,FIELDCAPTION(Amount)));
                TESTFIELD("Job No.",'');
                IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN BEGIN
                  IF Cust.GET("Bal. Account No.") THEN BEGIN
                    Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
                    IF (Cust."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       (ICPartner.GET(Cust."IC Partner Code"))
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                  END
                END ELSE BEGIN
                  IF Vendor.GET("Bal. Account No.") THEN BEGIN
                    Vendor.CheckBlockedVendOnJnls(Vendor,"Document Type",TRUE);
                    IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       (ICPartner.GET(Vendor."IC Partner Code"))
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                  END;
                END;
              END;
            "Bal. Account Type"::"Bank Account":
              BEGIN
                TESTFIELD("Bal. Gen. Posting Type",0);
                TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                TESTFIELD("Bal. VAT Bus. Posting Group",'');
                TESTFIELD("Bal. VAT Prod. Posting Group",'');
                TESTFIELD("Job No.",'');
                IF (Amount > 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  TESTFIELD("Check Printed",TRUE);
              END;
            "Bal. Account Type"::"IC Partner":
              BEGIN
                ICPartner.GET("Bal. Account No.");
                ICPartner.CheckICPartner;
                IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                  FIELDERROR("Bal. Account Type");
              END;
          END;

        IF (GenJnlLine."IC Partner G/L Acc. No." <> '') THEN
          IF (ICGLAcount.GET(GenJnlLine."IC Partner G/L Acc. No.")) THEN
            ICGLAcount.TESTFIELD(Blocked,FALSE);

        IF NOT PaymentTerms.GET(GenJnlLine."Payment Terms Code") THEN
          CLEAR(PaymentTerms);
        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           (("Document Type" <> "Document Type"::Invoice) AND
            (NOT
             (("Document Type" = "Document Type"::"Credit Memo") AND
              (PaymentTerms."Calc. Pmt. Disc. on Cr. Memos"))))
        THEN BEGIN
          TESTFIELD("Pmt. Discount Date",0D);
          TESTFIELD("Payment Discount %",0);
        END;

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           ("Applies-to Doc. No." <> '')
        THEN
          // gbedv GLOE -------------------------------------------------- BEGIN
          IF "Applied Account No." = '' THEN
          // gbedv GLOE -------------------------------------------------- END
          TESTFIELD("Applies-to ID",'');

        IF ("Account Type" <> "Account Type"::"Bank Account") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
        THEN
          TESTFIELD("Bank Payment Type","Bank Payment Type"::" ");

        IF ("Account Type" = "Account Type"::"Fixed Asset") OR
           ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
        THEN
          FAJnlCheckLine.RUN(GenJnlLine);

        IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
        THEN BEGIN
          TESTFIELD("Depreciation Book Code",'');
          TESTFIELD("FA Posting Type",0);
        END;

        IF OverrideDimErr THEN
          EXIT;

        IF NOT DimMgt.CheckJnlLineDimComb(JnlLineDim) THEN
          ERROR(
            Text011,
            TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
            DimMgt.GetDimCombErr);

        // gbedv EA -------------------------------------------------- BEGIN
        IF ExtApplyCheckDimValuePosting(GenJnlLine) THEN
          EXIT;
        // gbedv EA -------------------------------------------------- END
        TableID[1] := DimMgt.TypeToTableID1("Account Type");
        No[1] := "Account No.";
        TableID[2] := DimMgt.TypeToTableID1("Bal. Account Type");
        No[2] := "Bal. Account No.";
        TableID[3] := DATABASE::Job;
        No[3] := "Job No.";
        TableID[4] := DATABASE::"Salesperson/Purchaser";
        No[4] := "Salespers./Purch. Code";
        TableID[5] := DATABASE::Campaign;
        No[5] := "Campaign No.";
        // begin/23.11.2012/GOB-CPE/1.02
        IF "Posting Date" >= 010113D THEN
        // end/23.11.2012/GOB-CPE/1.02
          IF NOT DimMgt.CheckJnlLineDimValuePosting(JnlLineDim,TableID,No) THEN
            IF "Line No." <> 0 THEN
              ERROR(
                Text012,
                TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
                DimMgt.GetDimValuePostingErr)
            ELSE
              ERROR(DimMgt.GetDimValuePostingErr);
      END;
    END;

    PROCEDURE DateNotAllowed@1(PostingDate@1000 : Date) : Boolean;
    BEGIN
      IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
        IF USERID <> '' THEN
          IF UserSetup.GET(USERID) THEN BEGIN
            AllowPostingFrom := UserSetup."Allow Posting From";
            AllowPostingTo := UserSetup."Allow Posting To";
          END;
        IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
          GLSetup.GET;
          AllowPostingFrom := GLSetup."Allow Posting From";
          AllowPostingTo := GLSetup."Allow Posting To";
        END;
        IF AllowPostingTo = 0D THEN
          AllowPostingTo := 31129999D;
      END;
      EXIT((PostingDate < AllowPostingFrom) OR (PostingDate > AllowPostingTo));
    END;

    PROCEDURE ErrorIfPositiveAmt@2(GenJnlLine@1000 : Record 81);
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      IF (GenJnlTemplate."Application Method" = GenJnlTemplate."Application Method"::Extended) OR
         (GenJnlLine."ID Applied-Entry" <> 0)
      THEN
        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment) THEN
          EXIT;
      // gbedv EA -------------------------------------------------- END
      IF GenJnlLine.Amount > 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text008);
    END;

    PROCEDURE ErrorIfNegativeAmt@3(GenJnlLine@1000 : Record 81);
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      IF (GenJnlTemplate."Application Method" = GenJnlTemplate."Application Method"::Extended) OR
         (GenJnlLine."ID Applied-Entry" <> 0)
      THEN
        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment) THEN
          EXIT;
      // gbedv EA -------------------------------------------------- END
      IF GenJnlLine.Amount < 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text007);
    END;

    PROCEDURE SetOverDimErr@5();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    PROCEDURE "++++ OPplus ++++"@5157802();
    BEGIN
    END;

    LOCAL PROCEDURE SetupOPplus@5157810();
    BEGIN
      IF OPplusSetupRead THEN
        EXIT;
      // gbedv EA -------------------------------------------------- BEGIN
      OPplusEnabled := OPPLicenseInfo.IsBasics;
      IF OPplusEnabled THEN
        OPplusSetup.GET;
      // gbedv EA -------------------------------------------------- END
      // gbedv TAX ------------------------------------------------- BEGIN
      EnableVATCorrection := FALSE;
      IF OPPLicenseInfo.IsAnalysis THEN
        IF OPplusAnalysisSetup.GET THEN
          EnableVATCorrection := OPplusAnalysisSetup."Enable VAT Correction";
      // gbedv TAX ------------------------------------------------- END
      OPplusSetupRead := TRUE;
    END;

    LOCAL PROCEDURE ExtApplyCheckDimValuePosting@5157811(GenJnlLine2@5157803 : Record 81) : Boolean;
    VAR
      ApplyLineDetail@5157802 : Record 5157804;
      GLEntry@5157805 : Record 17;
      CustLedgEntry@5157806 : Record 21;
      VendLedgEntry@5157807 : Record 25;
      BankAccLedgEntry@5157808 : Record 271;
      TempLedgEntryDim@5157810 : TEMPORARY Record 355;
      LedgEntryDim2@5157804 : Record 355;
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      SetupOPplus;
      IF NOT OPplusEnabled THEN
        EXIT(FALSE);
      TempLedgEntryDim.RESET;
      TempLedgEntryDim.DELETEALL;
      IF OPplusSetup."Dim. for Apply Line Details" = OPplusSetup."Dim. for Apply Line Details"::"Gen. Jnl. Line" THEN
        EXIT(FALSE);
      ApplyLineDetail.SETRANGE("Journal Template Name",GenJnlLine2."Journal Template Name");
      ApplyLineDetail.SETRANGE("Journal Batch Name",GenJnlLine2."Journal Batch Name");
      ApplyLineDetail.SETRANGE("Line No.", GenJnlLine2."Line No.");
      IF ApplyLineDetail.FINDSET THEN BEGIN
        REPEAT
          LedgEntryDim2.RESET;
          CASE ApplyLineDetail."Account Type" OF
            ApplyLineDetail."Account Type"::"G/L Account":
              BEGIN
                GLEntry.GET(ApplyLineDetail."ID Applied-Entry");
                GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account";;
                GenJnlLine2."Account No." := GLEntry."G/L Account No.";
                GenJnlLine2."Bal. Account No." := GLEntry."Bal. Account No.";
                GenJnlLine2."Job No." := GLEntry."Job No.";
                GenJnlLine2."Salespers./Purch. Code" := '';
                GenJnlLine2."Campaign No." := '';
                LedgEntryDim2.SETRANGE("Table ID",DATABASE::"G/L Entry");
              END;
            ApplyLineDetail."Account Type"::Customer:
              BEGIN
                CustLedgEntry.GET(ApplyLineDetail."ID Applied-Entry");
                GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::Customer;
                GenJnlLine2."Account No." := CustLedgEntry."Customer No.";
                GenJnlLine2."Bal. Account No." := CustLedgEntry."Bal. Account No.";
                GenJnlLine2."Job No." := '';
                GenJnlLine2."Salespers./Purch. Code" := CustLedgEntry."Salesperson Code";
                GenJnlLine2."Campaign No." := '';
                LedgEntryDim2.RESET;
                LedgEntryDim2.SETRANGE("Table ID",DATABASE::"Cust. Ledger Entry");
              END;
            ApplyLineDetail."Account Type"::Vendor:
              BEGIN
                VendLedgEntry.GET(ApplyLineDetail."ID Applied-Entry");
                GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::Vendor;
                GenJnlLine2."Account No." := VendLedgEntry."Vendor No.";
                GenJnlLine2."Bal. Account No." := VendLedgEntry."Bal. Account No.";
                GenJnlLine2."Job No." := '';
                GenJnlLine2."Salespers./Purch. Code" := VendLedgEntry."Purchaser Code";
                GenJnlLine2."Campaign No." := '';
                LedgEntryDim2.RESET;
                LedgEntryDim2.SETRANGE("Table ID",DATABASE::"Vendor Ledger Entry");
              END;
            ApplyLineDetail."Account Type"::"Bank Account":
              BEGIN
                BankAccLedgEntry.GET(ApplyLineDetail."ID Applied-Entry");
                GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"Bank Account";
                GenJnlLine2."Account No." := BankAccLedgEntry."Bank Account No.";
                GenJnlLine2."Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
                GenJnlLine2."Job No." := '';
                GenJnlLine2."Salespers./Purch. Code" := '';
                GenJnlLine2."Campaign No." := '';
                LedgEntryDim2.RESET;
                LedgEntryDim2.SETRANGE("Table ID",DATABASE::"Bank Account Ledger Entry");
              END;
          END;
          LedgEntryDim2.SETRANGE("Entry No.",ApplyLineDetail."ID Applied-Entry");
          IF LedgEntryDim2.FINDSET THEN
            REPEAT
              TempLedgEntryDim := LedgEntryDim2;
              TempLedgEntryDim.INSERT;
            UNTIL LedgEntryDim2.NEXT = 0;
          CheckDimValue(GenJnlLine2,TempLedgEntryDim);
        UNTIL ApplyLineDetail.NEXT = 0;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
      // gbedv EA -------------------------------------------------- END
    END;

    PROCEDURE CheckDimValue@5157812(GenJnlLine2@5157802 : Record 81;VAR TempLedgEntryDim@5157803 : Record 355);
    VAR
      TableID@5157804 : ARRAY [10] OF Integer;
      No@5157805 : ARRAY [10] OF Code[20];
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      WITH GenJnlLine2 DO BEGIN
        TableID[1] := DimMgt.TypeToTableID1("Account Type");
        No[1] := "Account No.";
        TableID[2] := DimMgt.TypeToTableID1("Bal. Account Type");
        No[2] := "Bal. Account No.";
        TableID[3] := DATABASE::Job;
        No[3] := "Job No.";
        TableID[4] := DATABASE::"Salesperson/Purchaser";
        No[4] := "Salespers./Purch. Code";
        TableID[5] := DATABASE::Campaign;
        No[5] := "Campaign No.";
        // begin/24.04.2013/GOB-CZI/1.02
        IF "Posting Date" >= 010113D THEN
        // end/24.04.2013/GOB-CZI/1.02
        IF NOT DimMgt.CheckLedgEntryDimValuePosting(TempLedgEntryDim,TableID,No) THEN
          IF "Line No." <> 0 THEN
            ERROR(
              Text012,
              TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
              DimMgt.GetDimValuePostingErr)
          ELSE
            ERROR(DimMgt.GetDimValuePostingErr);
      END;
      // gbedv EA -------------------------------------------------- END
    END;

    PROCEDURE "*****gob"@1000000000();
    BEGIN
    END;

    PROCEDURE PrÅfenDatumsangaben@1000000001(GenJnlLineDarl@1000000000 : Record 81);
    VAR
      Darlehen@1000000001 : Record 50080;
      Text64000@1000000002 : TextConst 'DEU=PrÅfen Sie das Buchungsdatum. Es sind bereits Zinsen berechnet.;ENU=Check the posting date. Interests are calculated yet.';
      Text64001@1000000003 : TextConst 'DEU=PrÅfen Sie das Buchungsdatum. Das Datum des Vertrages ist frÅher.;ENU=Check the posting date. The date of the contract is earlier.';
      Text64002@1000000004 : TextConst 'DEU=Es hat noch keine Auszahlung gegeben.;ENU=The payment ist not posted.';
      Text64003@1000000005 : TextConst 'DEU=Lassen Sie vor der Zahlung die Zinsberechnung laufen.;ENU=Calc interests till payment date.';
      Text64004@1000000006 : TextConst 'DEU=Lassen Sie die Zinsberechnung bis zum Vortag der Zahlung laufen.;ENU=Calc interests till payment date.';
      Text64005@1000000007 : TextConst;
    BEGIN
      //A/gob-bth/09.11.2012/P0484
      IF GenJnlLineDarl.Darlehen <> '' THEN BEGIN
        Darlehen.GET(GenJnlLineDarl.Darlehen);
        IF GenJnlLineDarl."Document Type" = GenJnlLineDarl."Document Type"::Payment THEN BEGIN
          IF  GenJnlLineDarl."Posting Date" < Darlehen."Letztes Zinsberechnungsdatum" THEN
            ERROR(Text64000);
          IF  (Darlehen."Letztes Zinsberechnungsdatum"  = 0D) THEN
            ERROR(Text64003);
          IF GenJnlLineDarl."Posting Date" - Darlehen."Letztes Zinsberechnungsdatum" > 1 THEN
            ERROR(Text64004);
          IF GenJnlLineDarl.Zinsen THEN BEGIN
            IF GenJnlLineDarl."Posting Date" < Darlehen."Datum Darlehensvertrag" THEN
             ERROR(Text64001);

            IF NOT Darlehen."Auszahlung veranlasst" THEN
              ERROR(Text64002);
          END;
        END;
      END;

      //E/gob-bth/09.11.2012/P0484
    END;

    BEGIN
    {
      -----------------------------------------------------
      (c) gbedv, OPplus, All rights reserved

      No.  Date       changed
      -----------------------------------------------------
      EA   01.11.08   Extended Application
      GLOE 01.11.08   Gen. Ledger Open Entries
      TAX  01.11.08   Tax and Balance
      -----------------------------------------------------

      +----------------------------------------------+
      | Copyright GOB Software & Systeme             |
      +----------------------------------------------+
      | Allgemeine Programmierung                    |
      +----------------------------------------------+

      Version    Datum       Berater    PSP-Code   Bemerkung
      ---------------------------------------------------------------------------
      V1.00      06.08.12    gob-bth    P0138      PrÅfung "IC Partner Code" vorhanden wenn Konto gekennzeichnet ist
      V1.01      09.11.12    gob-bth    P0484      PrÅfungen Buchungsdatum bei Darlehen
      V1.02      23.11.12    gob-cpe    P0607      DimensionsprÅfung erst ab Buchungsdatum 2013
      V1.03      23.04.13    gob-czi    H0316      ErgÑnzung DimensionsprÅfung
    }
    END.
  }
}

