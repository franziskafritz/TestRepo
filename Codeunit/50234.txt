OBJECT Codeunit 50234 DataMigration SalLineField I
{
  OBJECT-PROPERTIES
  {
    Date=20.05.14;
    Time=20:44:46;
    Modified=Yes;
    Version List=HME0584;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CommitEveryXthRecord := 1000;
            UpdateStatusEveryXthRecord := 1000;
            OpenStatusWindow();
            {
            CLEAR(SalesLineBuffer);
            IF NOT SalesLineBuffer.ISEMPTY THEN BEGIN
              SalesLineBuffer.DELETEALL;
              COMMIT;
            END;
            }

            {
            // Header tables
            BufferTable(36);   // Sales Header
            BufferTable(5107); // Sales Header Archive
            BufferTable(110);  // Sales Shipment Header
            BufferTable(112); // Sales Invoice Header
            BufferTable(114); // Sales Cr.Memo Header

            // Line tables
            BufferTable(37);   // Sales Line
            BufferTable(5108); // Sales Line Archive
            BufferTable(111);  // Sales Shipment Line
            BufferTable(113); // Sales Invoice Line
            BufferTable(115); // Sales Cr.Memo Line

            // Reset Fields
            COMMIT;
            }

            {
            // Line tables
            ResetTableField(37);
            ResetTableField(5108);
            ResetTableField(111);
            ResetTableField(113);
            ResetTableField(115);


            // DeleteTableKeys(TableNo,KeyNo);
            //DeleteTableKey(37,23);  // Return Order No.
            //DeleteTableKey(5108,10);  // Return Order No.

            COMMIT;
            }

            // DeleteTableField(TableNo,FieldNo);
            DeleteTableField(37,50060);  // Discount Reason Code
            DeleteTableField(37,50060);  // Discount Reason Code
            DeleteTableField(37,50061);  // Show Discount Reason
            DeleteTableField(37,75314);  // Offered Prevention
            DeleteTableField(37,75323);  // Goodwill Discount %
            DeleteTableField(37,75324);  // Goodwill Discount Amount
            DeleteTableField(37,75319);  // Return Order No.
            DeleteTableField(37,75320);  // Return Order Line No.
            DeleteTableField(37,75344);  // Return Order existing

            DeleteTableField(5108,50060);  // Discount Reason Code
            DeleteTableField(5108,75314);  // Offered Prevention
            DeleteTableField(5108,75323);  // Goodwill Discount %
            DeleteTableField(5108,75324);  // Goodwill Discount Amount
            DeleteTableField(5108,75319);  // Return Order No.
            DeleteTableField(5108,75320);  // Return Order Line No.
            DeleteTableField(5108,75344);  // Return Order existing

            DeleteTableField(111,75314);  // Offered Prevention
            DeleteTableField(113,75314);  // Offered Prevention
            DeleteTableField(115,75314);  // Offered Prevention

            CloseStatusWindow();
          END;

  }
  CODE
  {
    VAR
      Company@1000000000 : Record 2000000006;
      SysField@1000000034 : Record 2000000041;
      SysKey@1000000042 : Record 2000000063;
      SalesHeader@1000000016 : Record 36;
      SalesHeader2@1000000017 : Record 36;
      SalesLine@1000000001 : Record 37;
      SalesLine2@1000000008 : Record 37;
      SalesHeaderArchive@1000000018 : Record 5107;
      SalesHeaderArchive2@1000000019 : Record 5107;
      SalesLineArchive@1000000007 : Record 5108;
      SalesLineArchive2@1000000009 : Record 5108;
      SalesLineBuffer@1000000003 : Record 50216;
      SalesCrMemoHeader@1000000020 : Record 114;
      SalesCrMemoHeader2@1000000021 : Record 114;
      SalesCrMemoLine@1000000014 : Record 115;
      SalesCrMemoLine2@1000000015 : Record 115;
      SalesInvoiceHeader@1000000022 : Record 112;
      SalesInvoiceHeader2@1000000023 : Record 112;
      SalesInvoiceLine@1000000012 : Record 113;
      SalesInvoiceLine2@1000000013 : Record 113;
      SalesShipmentHeader@1000000024 : Record 110;
      SalesShipmentHeader2@1000000025 : Record 110;
      SalesShipmentLine@1000000010 : Record 111;
      SalesShipmentLine2@1000000011 : Record 111;
      ModifyOnSalesHeaderLineTables@1000000033 : Codeunit 50248;
      DoInsertModify@1000000002 : Boolean;
      StartingDateTime@1000000029 : DateTime;
      RunTime@1000000030 : Duration;
      StatusWindow@1000000026 : Dialog;
      CommitEveryXthRecord@1000000006 : Integer;
      UpdateStatusEveryXthRecord@1000000028 : Integer;
      CounterRecordsChecked@1000000005 : Integer;
      CounterRecordsProcessed@1000000052 : Integer;
      NextEntryNo@1000000004 : Integer;
      ProgressIndicator@1000000043 : Integer;
      TableNo@1000000027 : Integer;
      TotalNoOfRecordsCurrentTable@1000000044 : Integer;
      CurrentProcess@1000000035 : Text[30];
      TextHME005@1000000038 : TextConst 'ENU=Buffer TableFields';
      TextHME006@1000000039 : TextConst 'ENU=Reset TableFields';
      TextHME007@1000000040 : TextConst 'ENU=Delete TableFields';
      TextHME008@1000000041 : TextConst 'ENU=Delete TableKey';
      TextHME010@1000000045 : TextConst 'ENU=Ongoing process                    #1######################\';
      TextHME011@1000000046 : TextConst 'ENU=...currently processing Table      #2######################\';
      TextHME012@1000000047 : TextConst 'ENU=Total no. of records current Table #3######################\';
      TextHME013@1000000048 : TextConst 'ENU=No. of records processed sofar     #4######################\';
      TextHME014@1000000049 : TextConst 'ENU="                                   @5@@@@@@@@@@@@@@@@@@@@@@\\"';
      TextHME015@1000000050 : TextConst 'ENU=Starting time                      #6######################\';
      TextHME016@1000000051 : TextConst 'ENU=Run time                           #7######################';

    PROCEDURE BufferTable@1000000001(FromTableNoV@1000000000 : Integer);
    BEGIN
      // BufferTable
      CurrentProcess := TextHME005;
      TableNo := FromTableNoV;
      StatusWindow.UPDATE(1,CurrentProcess);
      StatusWindow.UPDATE(2,TableNo);

      CLEAR(Company);
      IF Company.FIND('-') THEN BEGIN
        REPEAT
          CounterRecordsChecked := 0;
          CounterRecordsProcessed := 0;
          TotalNoOfRecordsCurrentTable := 0;
          DoCommitUpdateStatusWindow();
          CLEAR(SalesLineBuffer);
          SalesLineBuffer.SETCURRENTKEY("Entry No.");
          IF SalesLineBuffer.FINDLAST THEN BEGIN
            NextEntryNo := SalesLineBuffer."Entry No.";
          END ELSE BEGIN
            NextEntryNo := 0;
          END;

          CASE FromTableNoV OF

            DATABASE::"Sales Header":
              BEGIN
                CLEAR(SalesHeader);
                SalesHeader.CHANGECOMPANY(Company.Name);
                SalesHeader.SETCURRENTKEY("Document Type","No.");
                TotalNoOfRecordsCurrentTable := SalesHeader.COUNT;
                IF SalesHeader.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesHeader."Return Type" <> SalesHeader."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify :=
                        (SalesHeader."Status Return Order" <> SalesHeader."Status Return Order"::" ");
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document Type" := SalesHeader."Document Type";
                      SalesLineBuffer."Document No." := SalesHeader."No.";
                      SalesLineBuffer."Return Type" :=  SalesHeader."Return Type";
                      SalesLineBuffer."Status Return Order" := SalesHeader."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;
                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesHeader.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Header": BEGIN

            DATABASE::"Sales Line":
              BEGIN
                CLEAR(SalesLine);
                SalesLine.CHANGECOMPANY(Company.Name);
                SalesLine.SETCURRENTKEY("Document Type","Document No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesLine.COUNT;
                IF SalesLine.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesLine."Return Type" <> SalesLine."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLine."Status Return Order" <> SalesLine."Status Return Order"::" ");
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLine."Discount Reason Code" <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLine."Whse. Return Reason Code" <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLine."Goodwill discount %" <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLine."Goodwill discount Amount" <> 0);
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLine."Return Order No." <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLine."Return Order Line No." <> 0);
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document Type" := SalesLine."Document Type";
                      SalesLineBuffer."Document No." := SalesLine."Document No.";
                      SalesLineBuffer."Line No." := SalesLine."Line No.";
                      SalesLineBuffer."Discount Reason Code" := SalesLine."Discount Reason Code";
                      SalesLineBuffer."Whse. Return Reason Code" := SalesLine."Whse. Return Reason Code";
                      SalesLineBuffer."Offered prevention" := SalesLine."Offered prevention";
                      SalesLineBuffer."Prevention accepted" := SalesLine."Customer Prevention";
                      SalesLineBuffer."Return Type" := SalesLine."Return Type";
                      SalesLineBuffer."Return Order No." := SalesLine."Return Order No.";
                      SalesLineBuffer."Return Order Line No." := SalesLine."Return Order Line No.";
                      SalesLineBuffer."Goodwill discount %" := SalesLine."Goodwill discount %";
                      SalesLineBuffer."Goodwill discount Amount" := SalesLine."Goodwill discount Amount";
                      SalesLineBuffer."Status Return Order" := SalesLine."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;

                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesLine.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Line": BEGIN

            DATABASE::"Sales Header Archive":
              BEGIN
                CLEAR(SalesHeaderArchive);
                SalesHeaderArchive.CHANGECOMPANY(Company.Name);
                SalesHeaderArchive.SETCURRENTKEY("Document Type","No.","Doc. No. Occurrence","Version No.");
                TotalNoOfRecordsCurrentTable := SalesHeaderArchive.COUNT;
                IF SalesHeaderArchive.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesHeaderArchive."Return Type" <> SalesHeaderArchive."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify :=
                        (SalesHeaderArchive."Status Return Order" <> SalesHeaderArchive."Status Return Order"::" ");
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document Type" := SalesHeaderArchive."Document Type";
                      SalesLineBuffer."Document No." := SalesHeaderArchive."No.";
                      SalesLineBuffer."Doc. No. Occurrence" := SalesHeaderArchive."Doc. No. Occurrence";
                      SalesLineBuffer."Version No." := SalesHeaderArchive."Version No.";
                      SalesLineBuffer."Return Type" := SalesHeaderArchive."Return Type";
                      SalesLineBuffer."Status Return Order" := SalesHeaderArchive."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;

                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesHeaderArchive.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Header Archive": BEGIN

            DATABASE::"Sales Line Archive":
              BEGIN
                CLEAR(SalesLineArchive);
                SalesLineArchive.CHANGECOMPANY(Company.Name);
                SalesLineArchive.SETCURRENTKEY("Document Type","Document No.","Doc. No. Occurrence",
                                               "Version No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesLineArchive.COUNT;
                IF SalesLineArchive.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesLineArchive."Return Type" <> SalesLineArchive."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLineArchive."Status Return Order" <> SalesLineArchive."Status Return Order"::" ");
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLineArchive."Discount Reason Code" <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLineArchive."Whse. Return Reason Code" <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLineArchive."Goodwill discount %" <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLineArchive."Goodwill discount Amount" <> 0);
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLineArchive."Return Order No." <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesLineArchive."Return Order Line No." <> 0);
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document Type" := SalesLineArchive."Document Type";
                      SalesLineBuffer."Document No." := SalesLineArchive."Document No.";
                      SalesLineBuffer."Line No." := SalesLineArchive."Line No.";
                      SalesLineBuffer."Doc. No. Occurrence" := SalesLineArchive."Doc. No. Occurrence";
                      SalesLineBuffer."Version No." := SalesLineArchive."Version No.";
                      SalesLineBuffer."Discount Reason Code" := SalesLineArchive."Discount Reason Code";
                      SalesLineBuffer."Whse. Return Reason Code" := SalesLineArchive."Whse. Return Reason Code";
                      SalesLineBuffer."Offered prevention" := SalesLineArchive."Offered prevention";
                      SalesLineBuffer."Prevention accepted" := SalesLineArchive."Customer Prevention";
                      SalesLineBuffer."Return Type" := SalesLineArchive."Return Type";
                      SalesLineBuffer."Return Order No." := SalesLineArchive."Return Order No.";
                      SalesLineBuffer."Return Order Line No." := SalesLineArchive."Return Order Line No.";
                      SalesLineBuffer."Goodwill discount %" := SalesLineArchive."Goodwill discount %";
                      SalesLineBuffer."Goodwill discount Amount" := SalesLineArchive."Goodwill discount Amount";
                      SalesLineBuffer."Status Return Order" := SalesLineArchive."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;

                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesLineArchive.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Line Archive":

            DATABASE::"Sales Shipment Header":
              BEGIN
                CLEAR(SalesShipmentHeader);
                SalesShipmentHeader.CHANGECOMPANY(Company.Name);
                SalesShipmentHeader.SETCURRENTKEY("No.");
                TotalNoOfRecordsCurrentTable := SalesShipmentHeader.COUNT;
                IF SalesShipmentHeader.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesShipmentHeader."Return Type" <> SalesShipmentHeader."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify :=
                        (SalesShipmentHeader."Status Return Order" <> SalesShipmentHeader."Status Return Order"::" ");
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document No." := SalesShipmentHeader."No.";
                      SalesLineBuffer."Return Type" :=  SalesShipmentHeader."Return Type";
                      SalesLineBuffer."Status Return Order" := SalesShipmentHeader."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;

                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesShipmentHeader.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Shipment Header": BEGIN

            DATABASE::"Sales Shipment Line":
              BEGIN
                CLEAR(SalesShipmentLine);
                SalesShipmentLine.CHANGECOMPANY(Company.Name);
                SalesShipmentLine.SETCURRENTKEY("Document No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesShipmentLine.COUNT;
                IF SalesShipmentLine.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesShipmentLine."Return Type" <> SalesShipmentLine."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify :=
                        (SalesShipmentLine."Status Return Order" <> SalesShipmentLine."Status Return Order"::" ");
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesShipmentLine."Return Order No." <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesShipmentLine."Return Order Line No." <> 0);
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document No." := SalesShipmentLine."Document No.";
                      SalesLineBuffer."Line No." := SalesShipmentLine."Line No.";
                      SalesLineBuffer."Offered prevention" := SalesShipmentLine."Offered prevention";
                      SalesLineBuffer."Prevention accepted" := SalesShipmentLine."Customer Prevention";
                      SalesLineBuffer."Return Type" := SalesShipmentLine."Return Type";
                      SalesLineBuffer."Status Return Order" := SalesShipmentLine."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;

                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesShipmentLine.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Shipment Line":

            DATABASE::"Sales Invoice Header":
              BEGIN
                CLEAR(SalesInvoiceHeader);
                SalesInvoiceHeader.CHANGECOMPANY(Company.Name);
                SalesInvoiceHeader.SETCURRENTKEY("No.");
                TotalNoOfRecordsCurrentTable := SalesInvoiceHeader.COUNT;
                IF SalesInvoiceHeader.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesInvoiceHeader."Return Type" <> SalesInvoiceHeader."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify :=
                        (SalesInvoiceHeader."Status Return Order" <> SalesInvoiceHeader."Status Return Order"::" ");
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document No." := SalesInvoiceHeader."No.";
                      SalesLineBuffer."Return Type" :=  SalesInvoiceHeader."Return Type";
                      SalesLineBuffer."Status Return Order" := SalesInvoiceHeader."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;

                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesInvoiceHeader.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Invoice Header": BEGIN

            DATABASE::"Sales Invoice Line":
              BEGIN
                CLEAR(SalesInvoiceLine);
                SalesInvoiceLine.CHANGECOMPANY(Company.Name);
                SalesInvoiceLine.SETCURRENTKEY("Document No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesInvoiceLine.COUNT;
                IF SalesInvoiceLine.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesInvoiceLine."Return Type" <> SalesInvoiceLine."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesInvoiceLine."Status Return Order" <> SalesInvoiceLine."Status Return Order"::" ");
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesInvoiceLine."Return Order No." <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesInvoiceLine."Return Order Line No." <> 0);
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document No." := SalesInvoiceLine."Document No.";
                      SalesLineBuffer."Line No." := SalesInvoiceLine."Line No.";
                      SalesLineBuffer."Offered prevention" := SalesInvoiceLine."Offered prevention";
                      SalesLineBuffer."Prevention accepted" := SalesInvoiceLine."Customer Prevention";
                      SalesLineBuffer."Return Type" := SalesInvoiceLine."Return Type";
                      SalesLineBuffer."Status Return Order" := SalesInvoiceLine."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;

                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesInvoiceLine.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Invoice Line":

            DATABASE::"Sales Cr.Memo Header":
              BEGIN
                CLEAR(SalesCrMemoHeader);
                SalesCrMemoHeader.CHANGECOMPANY(Company.Name);
                SalesCrMemoHeader.SETCURRENTKEY("No.");
                TotalNoOfRecordsCurrentTable := SalesCrMemoHeader.COUNT;
                IF SalesCrMemoHeader.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesCrMemoHeader."Return Type" <> SalesCrMemoHeader."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify :=
                        (SalesCrMemoHeader."Status Return Order" <> SalesCrMemoHeader."Status Return Order"::" ");
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document No." := SalesCrMemoHeader."No.";
                      SalesLineBuffer."Return Type" :=  SalesCrMemoHeader."Return Type";
                      SalesLineBuffer."Status Return Order" := SalesCrMemoHeader."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;

                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesCrMemoHeader.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Cr.Memo Header": BEGIN

            DATABASE::"Sales Cr.Memo Line":
              BEGIN
                CLEAR(SalesCrMemoLine);
                SalesCrMemoLine.CHANGECOMPANY(Company.Name);
                SalesCrMemoLine.SETCURRENTKEY("Document No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesCrMemoLine.COUNT;
                IF SalesCrMemoLine.FIND('-') THEN BEGIN
                  REPEAT
                    CounterRecordsChecked += 1;
                    DoInsertModify := (SalesCrMemoLine."Return Type" <> SalesCrMemoLine."Return Type"::" ");

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify :=
                        (SalesCrMemoLine."Status Return Order" <> SalesCrMemoLine."Status Return Order"::" ");
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesCrMemoLine."Return Order No." <> '');
                    END;

                    IF NOT DoInsertModify THEN BEGIN
                      DoInsertModify := (SalesCrMemoLine."Return Order Line No." <> 0);
                    END;

                    IF DoInsertModify THEN BEGIN
                      CounterRecordsProcessed += 1;
                      NextEntryNo += 1;
                      SalesLineBuffer.INIT;
                      SalesLineBuffer."Entry No." := NextEntryNo;
                      SalesLineBuffer.TableNo := FromTableNoV;
                      SalesLineBuffer.CompanyName := Company.Name;
                      SalesLineBuffer."Document No." := SalesCrMemoLine."Document No.";
                      SalesLineBuffer."Line No." := SalesCrMemoLine."Line No.";
                      SalesLineBuffer."Offered prevention" := SalesCrMemoLine."Offered prevention";
                      SalesLineBuffer."Prevention accepted" := SalesCrMemoLine."Customer Prevention";
                      SalesLineBuffer."Return Type" := SalesCrMemoLine."Return Type";
                      SalesLineBuffer."Status Return Order" := SalesCrMemoLine."Status Return Order";
                      IF NOT SalesLineBuffer.INSERT THEN BEGIN
                        SalesLineBuffer.MODIFY;
                      END;

                      DoCommitUpdateStatusWindow();
                    END;
                  UNTIL SalesCrMemoLine.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Cr.Memo Line":

            ELSE BEGIN
            END;
          END;  // CASE FromTableNoV OF
        UNTIL Company.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteTableKey@1000000000(TableNoV@1000000001 : Integer;KeyNoV@1000000000 : Integer);
    BEGIN
      // DeleteTableKey
      CurrentProcess := TextHME008;
      StatusWindow.UPDATE(1,CurrentProcess);
      StatusWindow.UPDATE(2,TableNoV);

      CLEAR(SysKey);
      IF SysKey.GET(TableNoV,KeyNoV) THEN BEGIN
        SysKey.DELETE;
      END;
    END;

    PROCEDURE DeleteTableField@1000000003(TableNoV@1000000001 : Integer;FieldNoV@1000000000 : Integer);
    BEGIN
      // DeleteTableField
      TotalNoOfRecordsCurrentTable := 0;
      CounterRecordsProcessed := 0;
      ProgressIndicator := 0;

      CurrentProcess := TextHME007;
      StatusWindow.UPDATE(1,CurrentProcess);
      StatusWindow.UPDATE(2,TableNoV);
      StatusWindow.UPDATE(3,TotalNoOfRecordsCurrentTable);
      StatusWindow.UPDATE(4,CounterRecordsProcessed);
      StatusWindow.UPDATE(5,ProgressIndicator);

      CLEAR(SysField);
      IF SysField.GET(TableNoV,FieldNoV) THEN BEGIN
        SysField.DELETE;
      END;
    END;

    PROCEDURE ResetTableField@1000000004(FromTableNoV@1000000000 : Integer);
    BEGIN
      // ResetTableField
      CurrentProcess := TextHME006;
      TableNo := FromTableNoV;
      StatusWindow.UPDATE(1,CurrentProcess);
      StatusWindow.UPDATE(2,TableNo);

      CLEAR(Company);
      IF Company.FIND('-') THEN BEGIN
        REPEAT
          CASE FromTableNoV OF

            DATABASE::"Sales Line":
              BEGIN
                CounterRecordsChecked := 0;
                CLEAR(SalesLine);
                SalesLine.CHANGECOMPANY(Company.Name);
                SalesLine2.CHANGECOMPANY(Company.Name);
                SalesLine.SETCURRENTKEY("Document Type","Document No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesLine.COUNT;
                IF SalesLine.FIND('-') THEN BEGIN
                  REPEAT
                    IF (SalesLine."Discount Reason Code" <> '') OR
                       (SalesLine."Goodwill discount %" <> '') OR
                       (SalesLine."Goodwill discount Amount" <> 0) OR
                       (SalesLine."Return Order No." <> '') OR
                       (SalesLine."Return Order Line No." <> 0) OR
                       (SalesLine."Status Return Order" <> SalesLine."Status Return Order"::" ") OR
                       (SalesLine."Return Type" <> SalesLine."Return Type"::" ") OR
                       (SalesLine."Offered prevention" <> SalesLine."Offered prevention"::"0")
                    THEN BEGIN
                      CounterRecordsProcessed +=1;
                      SalesLine2 := SalesLine;
                      SalesLine2."Discount Reason Code" := '';
                      SalesLine2."Return Order No." := '';
                      SalesLine2."Return Order Line No." := 0;
                      SalesLine2."Goodwill discount %" := '';
                      SalesLine2."Goodwill discount Amount" := 0;
                      SalesLine2."Offered prevention" := SalesLine2."Offered prevention"::"0";
                      SalesLine2.MODIFY;
                    END;
                    DoCommitUpdateStatusWindow();
                  UNTIL SalesLine.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Line": BEGIN


            DATABASE::"Sales Line Archive":
              BEGIN
                CounterRecordsChecked := 0;
                CLEAR(SalesLineArchive);
                SalesLineArchive.CHANGECOMPANY(Company.Name);
                SalesLineArchive2.CHANGECOMPANY(Company.Name);
                SalesLineArchive.SETCURRENTKEY("Document Type","Document No.","Doc. No. Occurrence",
                                               "Version No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesLineArchive.COUNT;
                IF SalesLineArchive.FIND('-') THEN BEGIN
                  REPEAT
                    IF (SalesLineArchive."Discount Reason Code" <> '') OR
                       (SalesLineArchive."Whse. Return Reason Code" <> '') OR
                       (SalesLineArchive."Goodwill discount %" <> '') OR
                       (SalesLineArchive."Goodwill discount Amount" <> 0) OR
                       (SalesLineArchive."Return Order No." <> '') OR
                       (SalesLineArchive."Return Order Line No." <> 0) OR
                       (SalesLineArchive."Offered prevention" <> SalesLineArchive."Offered prevention"::"0")
                    THEN BEGIN
                      CounterRecordsProcessed +=1;
                      SalesLineArchive2 := SalesLineArchive;
                      SalesLineArchive2."Discount Reason Code" := '';
                      SalesLineArchive2."Whse. Return Reason Code" := '';
                      SalesLineArchive2."Return Order No." := '';
                      SalesLineArchive2."Return Order Line No." := 0;
                      SalesLineArchive2."Goodwill discount %" := '';
                      SalesLineArchive2."Goodwill discount Amount" := 0;
                      SalesLineArchive2."Offered prevention" := SalesLineArchive2."Offered prevention"::"0";
                      SalesLineArchive2.MODIFY;
                    END;
                    DoCommitUpdateStatusWindow();
                  UNTIL SalesLineArchive.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Line Archive": BEGIN


            DATABASE::"Sales Shipment Line":
              BEGIN
                CounterRecordsChecked := 0;
                CLEAR(SalesShipmentLine);
                SalesShipmentLine.CHANGECOMPANY(Company.Name);
                SalesShipmentLine2.CHANGECOMPANY(Company.Name);
                SalesShipmentLine.SETCURRENTKEY("Document No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesShipmentLine.COUNT;
                IF SalesShipmentLine.FIND('-') THEN BEGIN
                  REPEAT
                    IF (SalesShipmentLine."Return Order No." <> '') OR
                       (SalesShipmentLine."Return Order Line No." <> 0) OR
                       (SalesShipmentLine."Offered prevention" <> SalesShipmentLine."Offered prevention"::"0")
                    THEN BEGIN
                      CounterRecordsProcessed +=1;
                      SalesShipmentLine2 := SalesShipmentLine;
                      SalesShipmentLine2."Return Order No." := '';
                      SalesShipmentLine2."Return Order Line No." := 0;
                      SalesShipmentLine2."Offered prevention" := SalesShipmentLine2."Offered prevention"::"0";
                      ModifyOnSalesHeaderLineTables.ModifySalesShipmentLine(SalesShipmentLine2,FALSE);
                    END;
                    DoCommitUpdateStatusWindow();
                  UNTIL SalesShipmentLine.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Shipment Line": BEGIN


            DATABASE::"Sales Invoice Line":
              BEGIN
                CounterRecordsChecked := 0;
                CLEAR(SalesInvoiceLine);
                SalesInvoiceLine.CHANGECOMPANY(Company.Name);
                SalesInvoiceLine2.CHANGECOMPANY(Company.Name);
                SalesInvoiceLine.SETCURRENTKEY("Document No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesInvoiceLine.COUNT;
                IF SalesInvoiceLine.FIND('-') THEN BEGIN
                  REPEAT
                    IF (SalesInvoiceLine."Return Order No." <> '') OR
                       (SalesInvoiceLine."Return Order Line No." <> 0) OR
                       (SalesInvoiceLine."Offered prevention" <> SalesInvoiceLine."Offered prevention"::"0")
                    THEN BEGIN
                      CounterRecordsProcessed +=1;
                      SalesInvoiceLine2 := SalesInvoiceLine;
                      SalesInvoiceLine2."Return Order No." := '';
                      SalesInvoiceLine2."Return Order Line No." := 0;
                      SalesInvoiceLine2."Offered prevention" := SalesInvoiceLine2."Offered prevention"::"0";
                      ModifyOnSalesHeaderLineTables.ModifySalesInvoiceLine(SalesInvoiceLine2,FALSE);
                    END;
                    DoCommitUpdateStatusWindow();
                  UNTIL SalesInvoiceLine.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Invoice Line": BEGIN


            DATABASE::"Sales Cr.Memo Line":
              BEGIN
                CounterRecordsChecked := 0;
                CLEAR(SalesCrMemoLine);
                SalesCrMemoLine.CHANGECOMPANY(Company.Name);
                SalesCrMemoLine2.CHANGECOMPANY(Company.Name);
                SalesCrMemoLine.SETCURRENTKEY("Document No.","Line No.");
                TotalNoOfRecordsCurrentTable := SalesCrMemoLine.COUNT;
                IF SalesCrMemoLine.FIND('-') THEN BEGIN
                  REPEAT
                    IF (SalesCrMemoLine."Return Order No." <> '') OR
                       (SalesCrMemoLine."Return Order Line No." <> 0) OR
                       (SalesCrMemoLine."Offered prevention" <> SalesCrMemoLine."Offered prevention"::"0")
                    THEN BEGIN
                      CounterRecordsProcessed +=1;
                      SalesCrMemoLine2 := SalesCrMemoLine;
                      SalesCrMemoLine2."Return Order No." := '';
                      SalesCrMemoLine2."Return Order Line No." := 0;
                      SalesCrMemoLine2."Offered prevention" := SalesCrMemoLine2."Offered prevention"::"0";
                      ModifyOnSalesHeaderLineTables.ModifySalesCrMemoLine(SalesCrMemoLine2,FALSE);
                    END;
                    DoCommitUpdateStatusWindow();
                  UNTIL SalesCrMemoLine.NEXT = 0;
                END;
              END;  // DATABASE::"Sales Cr.Memo Line": BEGIN

            ELSE BEGIN
            END;
          END;  // CASE FromTableNoV OF
        UNTIL Company.NEXT = 0;
      END;
      COMMIT;
    END;

    PROCEDURE CloseStatusWindow@1000000010();
    BEGIN
      // CloseStatusWindow
      IF CONFIRM('Execution completed. Do you wish to close the Status Window ?',FALSE) THEN BEGIN
        SLEEP(2000);
        StatusWindow.CLOSE;
      END;
    END;

    PROCEDURE OpenStatusWindow@1000000002();
    BEGIN
      // OpenStatusWindow
      StartingDateTime := CURRENTDATETIME;
      StatusWindow.OPEN(
        //TextHME010: 'Ongoing process                    #1######################\'+
        //TextHME011: '...currently processing Table      #2######################\'+
        //TextHME012: 'Total no. of records current Table #3######################\'+
        //TextHME013: 'No. of records processed sofar     #4######################\'+
        //TextHME014: '                                   @5@@@@@@@@@@@@@@@@@@@@@@\\'+
        //TextHME015: 'Starting time                      #6######################\'+
        //TextHME016: 'Run time                           #7######################',
        TextHME010+TextHME011+TextHME012+TextHME013+TextHME014+TextHME015+TextHME016,
        CurrentProcess,
        TableNo,
        TotalNoOfRecordsCurrentTable,
        CounterRecordsProcessed,
        ProgressIndicator,
        StartingDateTime,
        RunTime);
      StatusWindow.UPDATE(6,StartingDateTime);
    END;

    PROCEDURE DoCommitUpdateStatusWindow@1000000006();
    BEGIN
      // DoCommitUpdateStatusWindow
      IF (CounterRecordsProcessed MOD CommitEveryXthRecord = 0) THEN BEGIN
        COMMIT;
      END;

      IF (CounterRecordsProcessed MOD UpdateStatusEveryXthRecord = 0) THEN BEGIN
        StatusWindow.UPDATE(3,TotalNoOfRecordsCurrentTable);
        StatusWindow.UPDATE(4,CounterRecordsProcessed);
        IF (TotalNoOfRecordsCurrentTable <> 0) THEN BEGIN
          ProgressIndicator := ROUND(CounterRecordsChecked/TotalNoOfRecordsCurrentTable*10000,1);
        END ELSE BEGIN
          ProgressIndicator := 0;
        END;
        StatusWindow.UPDATE(5,ProgressIndicator);
        RunTime := CURRENTDATETIME - StartingDateTime;
        StatusWindow.UPDATE(7,RunTime);
      END;
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________

      H0584       27.02.14  HCN       Object created

      //H0584 27.02.14 HCN +++++++++++++++++++++++++++++
      //H0584 27.02.14 HCN ----------------------------- .
    }
    END.
  }
}

