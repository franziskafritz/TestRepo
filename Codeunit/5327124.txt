OBJECT Codeunit 5327124 ACF Import/Export
{
  OBJECT-PROPERTIES
  {
    Date=17.01.13;
    Time=00:00:00;
    Version List=ACF3.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Setup@1000000027 : Record 5327160;
      tmpMenu@1000000024 : TEMPORARY Record 5327130;
      RecRefArray@1000000002 : ARRAY [50] OF RecordRef;
      Toolbox@1000000034 : Codeunit 5327123;
      DialogMgmt@1000000006 : Codeunit 412;
      ImportExportOptions@1000000015 : Form 5327184;
      ExportType@1000000008 : Code[20];
      XMLDoc@1000000004 : Codeunit 5327129;
      Text001@1000000007 : TextConst 'DEU=Datei wÑhlen;ENU=Choose File';
      Text002@1000000001 : TextConst 'DEU=Speichern unter;ENU=Save as';
      Text003@1000000009 : TextConst 'DEU="Diese gewÑhlte Importdatei kann fÅr diesen Importtyp nicht verwendet werden. ";ENU=The selected file cannot be used for this type of import.';
      Text004@1000000010 : TextConst 'DEU=Der Webbenutzer %1 kann nicht importiert werden, da die Rolle %2 im Zielsystem nicht existiert.\Klicken Sie Ja um den Webbenutzer zu Åberspringen, Nein um den Import abzubrechen.;ENU=The Web User %1 cannot be imported because the Web Role %2 is missing in the traget system.\Click YES to skip this Web User and NO to abort the import.';
      Text005@1000000011 : TextConst 'DEU=Der Import wurde abgebrochen.;ENU=The Import was aborted.';
      Text006@1000000012 : TextConst 'DEU=Der Mandant %1 existiert im Zielsystem nicht.;ENU=The company %1 doesn''t exist in the target system.';
      Text007@1000000013 : TextConst 'DEU=Import abgeschlossen.;ENU=Import complete.';
      Text008@1000000014 : TextConst 'DEU=Bitte Webbenutzerrechte synchronisieren und KonsistenzprÅfung starten.;ENU=Synchronize Web User Rights and start Consistency Check.';
      IncludeWebPages@1000000021 : Boolean;
      IncludeWebUsers@1000000020 : Boolean;
      IncludeMLStrings@1000000019 : Boolean;
      IncludeMainMenus@1000000018 : Boolean;
      IncludeWebRoles@1000000017 : Boolean;
      IncludeWebPageTableFieldRel@1000000016 : Boolean;
      IncludeWebDeskSetup@1000000022 : Boolean;
      IncludeIcons@1000000023 : Boolean;
      Text009@1000000025 : TextConst 'DEU=Export abgeschlossen.;ENU=Export complete.';
      Text010@1000000026 : TextConst 'DEU=%1 ist schon vorhanden.\Mîchten Sie sie ersetzen?;ENU=%1 already exists.\Do you want to replace it?';
      IncludeMenuTemplates@1000000029 : Boolean;
      Text011@1000000030 : TextConst 'DEU=Exportiere:;ENU=Exporting:';
      IncludeVirtualTables@5326062 : Boolean;
      IncludeRelationCodes@5326063 : Boolean;
      IncludeFunctionCodes@5326064 : Boolean;
      FileDialog@1000000028 : Dialog;
      ProgressDialog@1000000031 : Dialog;
      Text012@1000000032 : TextConst 'DEU=Importiere:;ENU=Importing:';
      Text013@1000000033 : TextConst 'DEU=Status:;ENU=Status:';
      Text014@1000000035 : TextConst 'DEU=Achtung!\\Der Import Åberschreibt ggf. bestehende Daten mit gleichem Identifikator. Mîchten Sie fortfahren?;ENU=Attention!\\This import replaces data with same identificator. Do you wish to continue?';

    PROCEDURE ExportCompleteWDData@1000000000();
    VAR
      WebPage@1000000000 : Record 5327100;
      WebPageElement@1000000001 : Record 5327101;
      WebPageElementTab@1000000003 : Record 5327102;
      WebPageElementField@1000000005 : Record 5327103;
      WebPageTableFieldRel@1000000006 : Record 5327161;
      WebPageElementMenu@1000000004 : Record 5327104;
      Menu@1000000007 : Record 5327130;
      MLString@1000000013 : Record 5327162;
      Setup@1000000008 : Record 5327160;
      WebUser@1000000009 : Record 5327140;
      WebRole@1000000014 : Record 5327141;
      WebUserRole@1000000010 : Record 5327142;
      Rights@1000000011 : Record 5327143;
      Icon@1000000012 : Record 5327163;
      VirtualTable@5326062 : Record 5327180;
      VirtualField@5326063 : Record 5327181;
      FunctionCode@5326064 : Record 5327133;
      RelationCode@5326065 : Record 5327132;
      RecRef@1000000002 : RecordRef;
    BEGIN
      ExportType := 'COMPLETE';

      CLEAR(ImportExportOptions);
      ImportExportOptions.LOOKUPMODE(TRUE);
      IF ImportExportOptions.RUNMODAL = ACTION::LookupCancel THEN
        EXIT
      ELSE
        ImportExportOptions.GetValues(IncludeWebPages,
                                      IncludeWebUsers,
                                      IncludeMLStrings,
                                      IncludeMainMenus,
                                      IncludeWebRoles,
                                      IncludeWebPageTableFieldRel,
                                      IncludeWebDeskSetup,
                                      IncludeIcons,
                                      IncludeMenuTemplates,
                                      IncludeVirtualTables,
                                      IncludeFunctionCodes,
                                      IncludeRelationCodes);

      //Important: Web Role has to be added before Web User (Web User Import checks if assigned Web Roles exist)
      //Menu has to be added before WebPageElementMenu (CM001)
      CLEAR(RecRefArray);

      //Web Pages and sub elements
      RecRef.GETTABLE(WebPage);
      AddRecRef(RecRef);
      RecRef.GETTABLE(WebPageElement);
      AddRecRef(RecRef);
      RecRef.GETTABLE(WebPageElementTab);
      AddRecRef(RecRef);
      RecRef.GETTABLE(WebPageElementField);
      AddRecRef(RecRef);
      RecRef.GETTABLE(Menu);
      AddRecRef(RecRef);
      RecRef.GETTABLE(WebPageElementMenu);
      AddRecRef(RecRef);

      //Setup
      RecRef.GETTABLE(WebPageTableFieldRel);
      AddRecRef(RecRef);
      RecRef.GETTABLE(Setup);
      AddRecRef(RecRef);

      //User and Rights
      RecRef.GETTABLE(WebRole);
      AddRecRef(RecRef);
      RecRef.GETTABLE(Rights);
      AddRecRef(RecRef);
      RecRef.GETTABLE(WebUser);
      AddRecRef(RecRef);
      RecRef.GETTABLE(WebUserRole);
      AddRecRef(RecRef);

      //Other
      RecRef.GETTABLE(Icon);
      AddRecRef(RecRef);
      RecRef.GETTABLE(MLString);
      AddRecRef(RecRef);
      RecRef.GETTABLE(VirtualTable);
      AddRecRef(RecRef);
      RecRef.GETTABLE(VirtualField);
      AddRecRef(RecRef);
      RecRef.GETTABLE(FunctionCode);
      AddRecRef(RecRef);
      RecRef.GETTABLE(RelationCode);
      AddRecRef(RecRef);


      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportCompleteWDData@1000000029();
    BEGIN
      ExportType := 'COMPLETE';

      CLEAR(ImportExportOptions);
      ImportExportOptions.LOOKUPMODE(TRUE);
      IF ImportExportOptions.RUNMODAL = ACTION::LookupCancel THEN
        EXIT
      ELSE
        ImportExportOptions.GetValues(IncludeWebPages,
                                      IncludeWebUsers,
                                      IncludeMLStrings,
                                      IncludeMainMenus,
                                      IncludeWebRoles,
                                      IncludeWebPageTableFieldRel,
                                      IncludeWebDeskSetup,
                                      IncludeIcons,
                                      IncludeMenuTemplates,
                                      IncludeVirtualTables,
                                      IncludeFunctionCodes,
                                      IncludeRelationCodes);


      //CM001+
      tmpMenu.RESET;
      tmpMenu.DELETEALL;
      //CM001-

      ImportTableData();

      MESSAGE(Text008);
    END;

    PROCEDURE ExportWebPages@1000000007(VAR WebPage@1000000000 : Record 5327100);
    VAR
      WebPageElement@1000000005 : Record 5327101;
      WebPageElementTab@1000000004 : Record 5327102;
      WebPageElementField@1000000003 : Record 5327103;
      WebPageElementMenu@1000000002 : Record 5327104;
      RecRef@1000000001 : RecordRef;
    BEGIN
      Toolbox.""('ExportWebPages', 'BEGIN');
      ExportType := 'WEBPAGE';

      IF WebPage.FINDSET THEN REPEAT
        WebPageElement.SETRANGE("Web Page Code", WebPage.Code);
        IF WebPageElement.FINDSET THEN REPEAT
          WebPageElement.MARK(TRUE);
        UNTIL WebPageElement.NEXT = 0;

        WebPageElementTab.SETRANGE("Web Page Code", WebPage.Code);
        IF WebPageElementTab.FINDSET THEN REPEAT
          WebPageElementTab.MARK(TRUE);
        UNTIL WebPageElementTab.NEXT = 0;

        WebPageElementField.SETRANGE("Web Page Code", WebPage.Code);
        IF WebPageElementField.FINDSET THEN REPEAT
          WebPageElementField.MARK(TRUE);
        UNTIL WebPageElementField.NEXT = 0;

        WebPageElementMenu.SETRANGE("Web Page Code", WebPage.Code);
        IF WebPageElementMenu.FINDSET THEN REPEAT
          WebPageElementMenu.MARK(TRUE);
        UNTIL WebPageElementMenu.NEXT = 0;

      UNTIL WebPage.NEXT = 0;

      CLEAR(RecRefArray);
      RecRef.GETTABLE(WebPage);
      AddRecRef(RecRef);
      WebPageElement.SETRANGE("Web Page Code");
      WebPageElement.MARKEDONLY(TRUE);
      RecRef.GETTABLE(WebPageElement);
      AddRecRef(RecRef);
      WebPageElementTab.SETRANGE("Web Page Code");
      WebPageElementTab.MARKEDONLY(TRUE);
      RecRef.GETTABLE(WebPageElementTab);
      AddRecRef(RecRef);
      WebPageElementField.SETRANGE("Web Page Code");
      WebPageElementField.MARKEDONLY(TRUE);
      RecRef.GETTABLE(WebPageElementField);
      AddRecRef(RecRef);
      WebPageElementMenu.SETRANGE("Web Page Code");
      WebPageElementMenu.MARKEDONLY(TRUE);
      RecRef.GETTABLE(WebPageElementMenu);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);

      Toolbox.""('ExportWebPages', 'END');
    END;

    PROCEDURE ImportWebPages@1000000027();
    BEGIN
      ExportType := 'WEBPAGE';

      ImportTableData();
    END;

    PROCEDURE ExportMLString@1000000010(VAR MLString@1000000000 : Record 5327162);
    VAR
      RecRef@1000000001 : RecordRef;
    BEGIN
      ExportType := 'MLSTRING';

      CLEAR(RecRefArray);
      RecRef.GETTABLE(MLString);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportMLString@1000000011();
    BEGIN
      ExportType := 'MLSTRING';

      ImportTableData();
    END;

    PROCEDURE ExportWebUser@1000000015(VAR WebUser@1000000000 : Record 5327140);
    VAR
      WebUserRole@1000000001 : Record 5327142;
      Rights@1000000002 : Record 5327143;
      RecRef@1000000003 : RecordRef;
    BEGIN
      ExportType := 'WEBUSER';

      IF WebUser.FINDSET THEN REPEAT
        WebUserRole.SETRANGE("User ID", WebUser."Web User");
        IF WebUserRole.FINDSET THEN REPEAT
          WebUserRole.MARK(TRUE);
        UNTIL WebUserRole.NEXT = 0;
        Rights.SETRANGE(Type, Rights.Type::"User Definition");
        Rights.SETRANGE(Code, WebUser."Web User");
        IF Rights.FINDSET THEN REPEAT
          Rights.MARK(TRUE);
        UNTIL Rights.NEXT = 0;
      UNTIL WebUser.NEXT = 0;

      CLEAR(RecRefArray);
      RecRef.GETTABLE(WebUser);
      AddRecRef(RecRef);
      WebUserRole.SETRANGE("User ID");
      WebUserRole.MARKEDONLY(TRUE);
      RecRef.GETTABLE(WebUserRole);
      AddRecRef(RecRef);
      Rights.SETRANGE(Type);
      Rights.MARKEDONLY(TRUE);
      RecRef.GETTABLE(Rights);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportWebUser@1000000016();
    BEGIN
      ExportType := 'WEBUSER';

      ImportTableData();

      MESSAGE(Text008);
    END;

    PROCEDURE ExportMenu@1000000008(VAR Menu@1000000000 : Record 5327130);
    VAR
      WebPageElementMenu@1000000002 : Record 5327104;
      RecRef@1000000001 : RecordRef;
    BEGIN
      ExportType := 'MENU';

      IF Menu.FINDSET THEN REPEAT
        WebPageElementMenu.SETRANGE("Web Page Code", '');
        WebPageElementMenu.SETRANGE("Web Page Element Line No.", Menu."Entry No.");
        IF WebPageElementMenu.FINDSET THEN REPEAT
          WebPageElementMenu.MARK(TRUE);
        UNTIL WebPageElementMenu.NEXT = 0;
      UNTIL Menu.NEXT = 0;

      CLEAR(RecRefArray);
      RecRef.GETTABLE(Menu);
      AddRecRef(RecRef);
      WebPageElementMenu.SETRANGE("Web Page Element Line No.");
      WebPageElementMenu.MARKEDONLY(TRUE);
      RecRef.GETTABLE(WebPageElementMenu);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportMenu@1000000009();
    BEGIN
      //Also handles Menu Templates

      ExportType := 'MENU';
      //CM001
      tmpMenu.RESET;
      tmpMenu.DELETEALL;
      //CM001
      ImportTableData();
    END;

    PROCEDURE ExportWebRoles@1000000012(VAR WebRole@1000000000 : Record 5327141);
    VAR
      Rights@1000000002 : Record 5327143;
      RecRef@1000000001 : RecordRef;
    BEGIN
      ExportType := 'WEBROLE';

      IF WebRole.FINDSET THEN REPEAT
        Rights.SETRANGE(Type, Rights.Type::"Role Definition");
        Rights.SETRANGE(Code, WebRole.Code);
        IF Rights.FINDSET THEN REPEAT
          Rights.MARK(TRUE);
        UNTIL Rights.NEXT = 0;
      UNTIL WebRole.NEXT = 0;

      CLEAR(RecRefArray);
      RecRef.GETTABLE(WebRole);
      AddRecRef(RecRef);
      Rights.SETRANGE(Code);
      Rights.MARKEDONLY(TRUE);
      RecRef.GETTABLE(Rights);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportWebRoles@1000000013();
    BEGIN
      ExportType := 'WEBROLE';

      ImportTableData();
    END;

    PROCEDURE ExportWebPageTableFieldRel@1000000024(VAR WebPageTableFieldRel@1000000000 : Record 5327161);
    VAR
      RecRef@1000000001 : RecordRef;
    BEGIN
      ExportType := 'TABLEFIELDREL';

      CLEAR(RecRefArray);
      RecRef.GETTABLE(WebPageTableFieldRel);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportWebPageTableFieldRel@1000000025();
    BEGIN
      ExportType := 'TABLEFIELDREL';

      ImportTableData();
    END;

    PROCEDURE ExportWebDeskSetup@1000000005();
    VAR
      WebDeskSetup@1000000000 : Record 5327160;
      RecRef@1000000001 : RecordRef;
    BEGIN
      ExportType := 'SETUP';

      CLEAR(RecRefArray);
      RecRef.GETTABLE(WebDeskSetup);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportWebDeskSetup@1000000006();
    BEGIN
      ExportType := 'SETUP';

      ImportTableData();
    END;

    PROCEDURE ExportIcons@1000000014();
    VAR
      Icon@1000000001 : Record 5327163;
      RecRef@1000000000 : RecordRef;
    BEGIN
      ExportType := 'ICONS';

      CLEAR(RecRefArray);
      RecRef.GETTABLE(Icon);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportIcons@1000000017();
    BEGIN
      ExportType := 'ICONS';

      ImportTableData();
    END;

    PROCEDURE ExportVirtualTables@5326062(VAR VirtualTable@5326063 : Record 5327180);
    VAR
      VirtualField@5326064 : Record 5327181;
      RecRef@5326062 : RecordRef;
    BEGIN
      ExportType := 'VIRTUALTABLE';

      IF VirtualTable.FINDSET THEN REPEAT
        VirtualField.SETRANGE("Virtual Table Code", VirtualTable.Code);
        IF VirtualField.FINDSET THEN REPEAT
          VirtualField.MARK(TRUE);
        UNTIL VirtualField.NEXT = 0;
      UNTIL VirtualTable.NEXT = 0;
      VirtualField.SETRANGE("Virtual Table Code");
      VirtualField.MARKEDONLY(TRUE);

      CLEAR(RecRefArray);
      RecRef.GETTABLE(VirtualTable);
      AddRecRef(RecRef);
      RecRef.GETTABLE(VirtualField);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportVirtualTables@5326063();
    BEGIN
      ExportType := 'VIRTUALTABLE';

      ImportTableData();
    END;

    PROCEDURE ExportFunctionCodes@5326065(VAR FunctionCode@5326062 : Record 5327133);
    VAR
      RecRef@5326063 : RecordRef;
    BEGIN
      ExportType := 'FUNCTIONCODE';

      CLEAR(RecRefArray);
      RecRef.GETTABLE(FunctionCode);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportFunctionCodes@5326064();
    BEGIN
      ExportType := 'FUNCTIONCODE';

      ImportTableData();
    END;

    PROCEDURE ExportRelationCodes@5326067(VAR RelationCode@5326062 : Record 5327132);
    VAR
      RecRef@5326063 : RecordRef;
    BEGIN
      ExportType := 'RELATIONCODE';

      CLEAR(RecRefArray);
      RecRef.GETTABLE(RelationCode);
      AddRecRef(RecRef);

      IF ExportTableData() THEN MESSAGE(Text009);
    END;

    PROCEDURE ImportRelationCodes@5326066();
    BEGIN
      ExportType := 'RELATIONCODE';

      ImportTableData();
    END;

    LOCAL PROCEDURE ExportTableData@1000000018() Exported : Boolean;
    VAR
      WDMultilanguage@1000000004 : Record 5327131;
      RecRef@1000000012 : RecordRef;
      FldRef@1000000000 : FieldRef;
      XMLCurrNode@1000000003 : Codeunit 5327130;
      XMLNewNode@1000000001 : Codeunit 5327130;
      ExportFilePath@1000000005 : Text[260];
      ToFile@1000000010 : Text[250];
      tmpFileName@1000000013 : Text[250];
      i@1000000002 : Integer;
      j@1000000007 : Integer;
      k@1000000016 : Integer;
      RecRefCount@1000000015 : Integer;
      ReturnValue@1000000011 : Boolean;
      OutStr@1000000008 : OutStream;
      InStr@1000000006 : InStream;
      TempFile@1000000009 : File;
      Path@1000000014 : Text[250];
      SkipUpdate@5326062 : Integer;
    BEGIN
      Toolbox.""('ExportTableData', 'BEGIN');
      IF NOT ISSERVICETIER THEN BEGIN
        //V2.01.03+
        Setup.GET;
        IF Setup."Do not use NAV Dialog Mgt." THEN BEGIN
          FileDialog.OPEN(Text001+'  #1##############################', ExportFilePath);
          IF FileDialog.INPUT(1,ExportFilePath) = 0 THEN EXIT;
          FileDialog.CLOSE;
        END ELSE
          ExportFilePath := DialogMgmt.OpenFile(Text002, '', 5, '', 1);
        //V2.01.03-

        IF ExportFilePath = '' THEN
          EXIT(FALSE);

        IF FILE.EXISTS(ExportFilePath) THEN
          IF NOT CONFIRM(Text010, FALSE, ExportFilePath) THEN
            EXIT(FALSE);
      END;


      Toolbox.""('ExportTableData', 'Creating Document...');
      XMLDoc.CreateDoc();

      XMLDoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      XMLDoc.CreateElement(XMLCurrNode, 'Export');
      XMLCurrNode.AddAttribute('ExportType', ExportType);
      XMLDoc.AppendChild(XMLCurrNode);

      ProgressDialog.OPEN(Text011 + '\#1###############################\'+ Text013 + '\@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      FOR i := 1 TO GetArrayElementsCount DO BEGIN
        RecRef := RecRefArray[i];
        ProgressDialog.UPDATE(1, FORMAT(RecRef.NAME));
        Toolbox.""('ExportTableData', 'Exporting %1...',FORMAT(RecRef.NAME));
        XMLDoc.CreateElement(XMLNewNode,'Table');
        XMLNewNode.AddAttribute( 'TableNo', FORMAT(RecRef.NUMBER));
        XMLCurrNode.AppendAndSetChild(XMLNewNode);
        RecRefCount := RecRef.COUNT;
        CLEAR(k);
        IF RecRef.FINDSET THEN REPEAT
          k += 1;
          //V3.00 NP+
          SkipUpdate := SkipUpdate + 1;
          IF SkipUpdate = 10 THEN BEGIN
            SkipUpdate := 0;
          //V3.00 NP+
            IF RecRefCount > 0 THEN
              //V3.00 NP+
              //ProgressDialog.UPDATE(2, (10000 DIV RecRefCount)*k)
              ProgressDialog.UPDATE(2, (10000*k) DIV RecRefCount)
              //V3.00 NP-
            ELSE
              ProgressDialog.UPDATE(2, 10000);
          END;
          IF NOT CheckSkipRecordExport(RecRef) THEN BEGIN
            XMLDoc.CreateElement(XMLNewNode,'Record');
            XMLCurrNode.AppendAndSetChild(XMLNewNode);
            FOR j := 1 TO RecRef.FIELDCOUNT DO BEGIN
              FldRef := RecRef.FIELDINDEX(j);
              //Toolbox.Log1('ExportTableData', 'Exporting Field %1...',FORMAT(FldRef.NAME));
              IF NOT CheckSkipFieldExport(RecRef, FldRef) THEN BEGIN
                //Toolbox.Log('ExportTableData', 'Step 1');
                XMLDoc.CreateElement(XMLNewNode,'Field');
                XMLNewNode.AddAttribute( 'FieldNo', FORMAT(FldRef.NUMBER));
                //Toolbox.Log('ExportTableData', 'Step 2');
                IF Toolbox.""(RecRef, FldRef.NUMBER, FALSE) THEN
                  XMLNewNode.AddAttribute( 'IsPKField', 'true')
                ELSE
                  XMLNewNode.AddAttribute( 'IsPKField', 'false');
                //Toolbox.Log('ExportTableData', 'Step 3');
                XMLCurrNode.AppendAndSetChild(XMLNewNode);
                XMLDoc.CreateElement(XMLNewNode,'Value');
                XMLNewNode.SetText(Toolbox.""(FldRef, TRUE));
                XMLCurrNode.AppendChild(XMLNewNode);
                WDMultilanguage.SETRANGE("Record ID", RecRef.RECORDID);
                WDMultilanguage.SETRANGE("Field ID", FldRef.NUMBER);
                //Toolbox.Log('ExportTableData', 'Step 4');
                IF WDMultilanguage.FINDSET THEN REPEAT
                  XMLDoc.CreateElement(XMLNewNode,'Language');
                  XMLNewNode.AddAttribute( 'Code', WDMultilanguage.Language);
                  XMLNewNode.SetText(WDMultilanguage.Value);
                  XMLCurrNode.AppendChild(XMLNewNode);
                UNTIL WDMultilanguage.NEXT = 0;
                //Toolbox.Log('ExportTableData', 'Step 5');
                XMLCurrNode.ParentNode(XMLCurrNode);
              END;
            END;
            IF ExportTableSpecificInfos(RecRef, XMLNewNode) THEN
              XMLCurrNode.AppendChild(XMLNewNode);
            XMLCurrNode.ParentNode(XMLCurrNode);
          END;
        UNTIL RecRef.NEXT = 0;
        XMLCurrNode.ParentNode(XMLCurrNode);
      END;

      ProgressDialog.CLOSE;

      IF ISSERVICETIER THEN BEGIN
        TempFile.CREATETEMPFILE();
        tmpFileName := TempFile.NAME;
        TempFile.CLOSE;
        XMLDoc.SaveFilename(tmpFileName);

        Path := 'Export.xml';

        ReturnValue := DOWNLOAD(tmpFileName,'','','XML file(*.xml)|*.xml',Path);

        CLEAR(XMLDoc);
        Toolbox.""('ExportTableData', 'END');
        EXIT(ReturnValue);
      END
      ELSE BEGIN
        XMLDoc.SaveFilename(ExportFilePath);
        CLEAR(XMLDoc);
        Toolbox.""('ExportTableData', 'END');
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ImportTableData@1000000020();
    VAR
      WDMultilanguage@1000000020 : Record 5327131;
      RecRef@1000000002 : RecordRef;
      FldRef@1000000003 : FieldRef;
      XMLRoot@1000000021 : Codeunit 5327130;
      XMLAttributeNode@5326062 : Codeunit 5327130;
      XMLCurrTableNode@1000000006 : Codeunit 5327130;
      XMLCurrFieldNode@1000000005 : Codeunit 5327130;
      XMLCurrRecordNode@1000000013 : Codeunit 5327130;
      XMLCurrFieldValueNode@1000000016 : Codeunit 5327130;
      XMLCurrLanguageNode@1000000018 : Codeunit 5327130;
      XMLTableNodeList@1000000009 : Codeunit 5327131;
      XMLFieldNodeList@1000000008 : Codeunit 5327131;
      XMLPKFieldNodeList@1000000017 : Codeunit 5327131;
      XMLRecordNodeList@1000000012 : Codeunit 5327131;
      XMLLanguageNodeList@1000000015 : Codeunit 5327131;
      XMLAttributes@1000000007 : Codeunit 5327133;
      ImportFilePath@1000000000 : Text[260];
      i@1000000001 : Integer;
      j@1000000010 : Integer;
      k@1000000014 : Integer;
      l@1000000019 : Integer;
      TableNo@1000000004 : Integer;
      FieldNo@1000000011 : Integer;
      SkipRecord@1000000022 : Boolean;
      SkipField@1000000023 : Boolean;
      ClientFileName@1000000026 : Text[1024];
    BEGIN
      IF NOT CONFIRM(Text014, FALSE) THEN
        ERROR('');

      Toolbox.""('ImportTableData', 'BEGIN');


      IF ISSERVICETIER THEN BEGIN
        IF NOT UPLOAD(Text001, '', 'XML *.xml| *.xml', ClientFileName, ImportFilePath) THEN
          EXIT;
      END
      ELSE BEGIN
        //V2.01.03+
        Setup.GET;
        IF Setup."Do not use NAV Dialog Mgt." THEN BEGIN
          FileDialog.OPEN(Text001+'  #1##############################', ImportFilePath);
          IF FileDialog.INPUT(1,ImportFilePath) = 0 THEN EXIT;
          FileDialog.CLOSE;
        END ELSE
          ImportFilePath := DialogMgmt.OpenFile(Text001, '', 5, '', 0);
        //V2.01.03-
        IF ImportFilePath = '' THEN
          EXIT;
      END;

      ProgressDialog.OPEN(Text012 + '\#1###############################\' + Text013 + '\@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

      XMLDoc.CreateDoc();
      XMLDoc.LoadFileName(ImportFilePath);
      XMLDoc.SelectSingleNode(XMLRoot, './/Export');
      XMLRoot.Attributes(XMLAttributes);
      XMLAttributes.GetNamedItem(XMLAttributeNode, 'ExportType');
      IF NOT (ExportType = XMLAttributeNode.GetText) THEN
        ERROR(Text003);

      Toolbox.""('ImportTableData', 'Getting tables');
      XMLDoc.GetElementsByTagName(XMLTableNodeList, 'Table');
      FOR i := 1 TO XMLTableNodeList.GetLength() DO BEGIN
        Toolbox.""('ImportTableData', '---New Table---');
        XMLTableNodeList.Item(XMLCurrTableNode, i-1);
        XMLCurrTableNode.Attributes(XMLAttributes);
        XMLAttributes.GetNamedItem(XMLAttributeNode, 'TableNo');
        EVALUATE(TableNo, XMLAttributeNode.GetText);
        RecRef.OPEN(TableNo);
        ProgressDialog.UPDATE(1, RecRef.NAME);
        XMLCurrTableNode.ChildNodes(XMLRecordNodeList);
        FOR j := 1 TO XMLRecordNodeList.GetLength DO BEGIN
          Toolbox.""('ImportTableData', '--New Record--');
          //V3.00 NP+
          //ProgressDialog.UPDATE(2, (10000 DIV XMLRecordNodeList.GetLength)*j);
          ProgressDialog.UPDATE(2, (10000*j) DIV XMLRecordNodeList.GetLength);
          //V3.00 NP-
          XMLRecordNodeList.Item(XMLCurrRecordNode, j-1);
          XMLCurrRecordNode.SelectNodes(XMLPKFieldNodeList, './/Field [@IsPKField = ''true'']');
          XMLCurrRecordNode.SelectNodes(XMLFieldNodeList, './/Field [@IsPKField = ''false'']');
          FOR k := 1 TO XMLPKFieldNodeList.GetLength DO BEGIN
            Toolbox.""('ImportTableData', '-New PK Field-');
            XMLPKFieldNodeList.Item(XMLCurrFieldNode, k-1);
            XMLCurrFieldNode.Attributes(XMLAttributes);
            XMLAttributes.GetNamedItem(XMLAttributeNode, 'FieldNo');
            EVALUATE(FieldNo, XMLAttributeNode.GetText);
            Toolbox.""('ImportTableData', 'Calling CheckFieldExists');
            IF CheckFieldExists(RecRef, FieldNo) THEN BEGIN
              FldRef := RecRef.FIELD(FieldNo);
              XMLCurrFieldNode.FirstChild(XMLCurrFieldValueNode);
              Toolbox.""('ImportTableData', 'Calling Text2FldRef');
              Toolbox.""(XMLCurrFieldValueNode.GetText, FldRef);
              Toolbox.""('ImportTableData', 'Text2FldRef finished.');
              Toolbox.""('ImportTableData', 'Calling OnAfterSetFieldValue');
              OnAfterSetFieldValue(RecRef, FldRef);
              Toolbox.""('ImportTableData', 'OnAfterSetFieldValue finished.');
            END;
          END;
          Toolbox.""('ImportTableData', 'Calling OnBeforeInsertRecord');
          SkipRecord := OnBeforeInsertRecord(RecRef);
          Toolbox.""('ImportTableData', 'OnBeforeInsertRecord finished.');
          IF NOT SkipRecord THEN BEGIN
            Toolbox.""('ImportTableData', 'Insert/Modify Record');
            IF NOT RecRef.INSERT THEN
              RecRef.MODIFY;
            Toolbox.""('ImportTableData', 'Record inserted/modified');
            FOR k := 1 TO XMLFieldNodeList.GetLength DO BEGIN
              Toolbox.""('ImportTableData', '-New Field-');
              XMLFieldNodeList.Item(XMLCurrFieldNode, k-1);
              XMLCurrFieldNode.Attributes(XMLAttributes);
              XMLAttributes.GetNamedItem(XMLAttributeNode, 'FieldNo');
              EVALUATE(FieldNo, XMLAttributeNode.GetText);
              IF CheckFieldExists(RecRef, FieldNo) THEN BEGIN
                FldRef := RecRef.FIELD(FieldNo);
                XMLCurrFieldNode.FirstChild(XMLCurrFieldValueNode);
                Toolbox.""(XMLCurrFieldValueNode.GetText, FldRef);
                OnAfterSetFieldValue(RecRef, FldRef);
                XMLCurrFieldNode.SelectNodes(XMLLanguageNodeList, './/Language');
                FOR l := 1 TO XMLLanguageNodeList.GetLength DO BEGIN
                  Toolbox.""('ImportTableData', 'New Language');
                  XMLLanguageNodeList.Item(XMLCurrLanguageNode, l-1);
                  XMLCurrLanguageNode.Attributes(XMLAttributes);
                  XMLAttributes.GetNamedItem(XMLAttributeNode, 'Code');
                  WDMultilanguage."Record ID" := RecRef.RECORDID;
                  WDMultilanguage."Field ID" := FieldNo;
                  WDMultilanguage.Language := XMLAttributeNode.GetText;
                  WDMultilanguage.Value := XMLCurrLanguageNode.GetText;
                  IF NOT WDMultilanguage.INSERT THEN
                    WDMultilanguage.MODIFY;
                END;
              END;
            END;
            ImportTableSpecificInfos(RecRef, XMLCurrRecordNode);
            RecRef.MODIFY;
          END;
        END;
        RecRef.CLOSE();
      END;
      CLEAR(XMLDoc);

      ProgressDialog.CLOSE();

      MESSAGE(Text007);
      Toolbox.""('ImportTableData', 'END.');
    END;

    LOCAL PROCEDURE AddRecRef@1000000004(VAR NewRecRef@1000000001 : RecordRef);
    VAR
      LocalRecRef@1000000000 : RecordRef;
    BEGIN
      LocalRecRef := NewRecRef.DUPLICATE;
      RecRefArray[GetArrayElementsCount() + 1] := LocalRecRef;
    END;

    LOCAL PROCEDURE GetArrayElementsCount@1000000001() : Decimal;
    VAR
      TestRecRef@1000000002 : RecordRef;
      i@1000000000 : Integer;
      LastElementFound@1000000001 : Boolean;
    BEGIN
      i := 1;
      WHILE ((i <= ARRAYLEN(RecRefArray)) AND (NOT LastElementFound)) DO BEGIN
        TestRecRef := RecRefArray[i];
        LastElementFound := (TestRecRef.NUMBER = 0) OR (i = ARRAYLEN(RecRefArray));
        IF NOT LastElementFound THEN
          i += 1;
      END;

      EXIT(i - 1);
    END;

    LOCAL PROCEDURE OnBeforeInsertRecord@1000000019(RecRef@1000000000 : RecordRef) SkipRecord : Boolean;
    VAR
      WebPage@1000000001 : Record 5327100;
      WebUserRole@1000000003 : Record 5327142;
      WebRole@1000000002 : Record 5327141;
      WebUser@1000000004 : Record 5327140;
      Company@1000000005 : Record 2000000006;
      WebPageElementMenu@1000000006 : Record 5327104;
      Rights@1000000007 : Record 5327143;
      Menu@1000000008 : Record 5327130;
      Menu2@1000000009 : Record 5327130;
    BEGIN
      Toolbox.""('OnBeforeInsertRecord', 'BEGIN');
      IF ExportType = 'COMPLETE' THEN BEGIN
        CASE RecRef.NUMBER OF
          DATABASE::"ACF Web Page": SkipRecord := NOT IncludeWebPages;
          DATABASE::"ACF Web Page Element": SkipRecord := NOT IncludeWebPages;
          DATABASE::"ACF Web Page Element Tab": SkipRecord := NOT IncludeWebPages;
          DATABASE::"ACF Web Page Element Field": SkipRecord := NOT IncludeWebPages;
          DATABASE::"ACF Web Page Element Menu":
            BEGIN
              RecRef.SETTABLE(WebPageElementMenu);
              SkipRecord := NOT ((IncludeWebPages AND (WebPageElementMenu."Web Page Code" <> '')) OR
                    (IncludeMainMenus AND WebPageElementMenu.IsMainMenuEntry) OR
                    (IncludeMenuTemplates AND WebPageElementMenu.IsMenuTemplateEntry));
            END;
          DATABASE::"ACF Web Page Table Field Rel.": SkipRecord := NOT IncludeWebPageTableFieldRel;
          DATABASE::"ACF Menu":
            BEGIN
              RecRef.SETTABLE(Menu);
              SkipRecord := NOT ((IncludeMainMenus AND (Menu.Type = Menu.Type::"Main Menu")) OR
                                 (IncludeMenuTemplates AND (Menu.Type = Menu.Type::"Menu Template")));
            END;
          DATABASE::"ACF Web User": SkipRecord := NOT IncludeWebUsers;
          DATABASE::"ACF Web Role": SkipRecord := NOT IncludeWebRoles;
          DATABASE::"ACF Web User Role": SkipRecord := NOT IncludeWebUsers;
          DATABASE::"ACF Setup": SkipRecord := NOT IncludeWebDeskSetup;
          DATABASE::"ACF Rights":
            BEGIN
              RecRef.SETTABLE(Rights);
              SkipRecord := NOT ((IncludeWebRoles AND (Rights.Type = Rights.Type::"Role Definition")) OR
                    (IncludeWebUsers AND (Rights.Type = Rights.Type::"User Definition")));
            END;
          DATABASE::"ACF Icon": SkipRecord := NOT IncludeIcons;
          DATABASE::"ACF Text Constant": SkipRecord := NOT IncludeMLStrings;
          DATABASE::"ACF Virtual Table": SkipRecord := NOT IncludeVirtualTables;
          DATABASE::"ACF Virtual Field": SkipRecord := NOT IncludeVirtualTables;
          DATABASE::"ACF Relation Code": SkipRecord := NOT IncludeRelationCodes;
          DATABASE::"ACF Function Code": SkipRecord := NOT IncludeFunctionCodes;
        END;
        IF SkipRecord THEN BEGIN
          Toolbox.""('OnBeforeInsertRecord', 'END. Record skipped');
          EXIT(SkipRecord);
        END;
      END;


      IF ExportType IN ['WEBPAGE', 'COMPLETE'] THEN BEGIN
        IF RecRef.NUMBER = DATABASE::"ACF Web Page" THEN BEGIN
          IF RecRef.GET(RecRef.RECORDID) THEN BEGIN
            RecRef.SETTABLE(WebPage);
            WebPage.LOCKTABLE();
            WebPage.SetDeleteCalledFromImport(TRUE);
            WebPage.VALIDATE(Published, FALSE);
            Toolbox.""('OnBeforeInsertRecord', 'Modify Web Page');
            WebPage.MODIFY;
            Toolbox.""('OnBeforeInsertRecord', 'Web Page modified');
            Toolbox.""('OnBeforeInsertRecord', 'Delete WebPage');
            WebPage.DELETE(TRUE);
            Toolbox.""('OnBeforeInsertRecord', 'Web Page Deleted');
          END;
        END;
      END;


      IF ExportType IN ['WEBUSER', 'COMPLETE'] THEN BEGIN
        IF RecRef.NUMBER = DATABASE::"ACF Web User Role" THEN BEGIN
          RecRef.SETTABLE(WebUserRole);
          //IF NOT Company.GET(WebUserRole.Company) THEN
          //  ERROR(STRSUBSTNO(Text006, WebUserRole.Company));
          IF NOT WebRole.GET(WebUserRole."Web Role") THEN BEGIN
            IF CONFIRM(STRSUBSTNO(Text004, WebUserRole."User ID", WebUserRole."Web Role")) THEN BEGIN
              SkipRecord := TRUE;
              IF WebUser.GET(WebUserRole."User ID") THEN
                WebUser.DELETE(TRUE);
            END
            ELSE
              ERROR(Text005);
          END;
        END;
      END;
      IF ExportType IN ['MENU', 'COMPLETE'] THEN BEGIN
        IF (RecRef.NUMBER = DATABASE::"ACF Menu") THEN BEGIN
          RecRef.SETTABLE(Menu);
          IF Menu2.GET(Menu.Type, Menu.Code) THEN
            Menu2.DELETE(TRUE);
        END;
      END;
      Toolbox.""('OnBeforeInsertRecord', 'END.');
    END;

    LOCAL PROCEDURE OnAfterSetFieldValue@1000000021(VAR RecRef@1000000002 : RecordRef;VAR FldRef@1000000000 : FieldRef);
    VAR
      Menu@1000000001 : Record 5327130;
      Menu2@1000000004 : Record 5327130;
      WebPageElementMenu@1000000003 : Record 5327104;
    BEGIN
      CASE ExportType OF
        'WEBPAGE':
          BEGIN
            IF RecRef.NUMBER = DATABASE::"ACF Web Page Element Field" THEN BEGIN
              IF FldRef.NUMBER = 5 THEN
                ;//FldRef.VALIDATE();
            END;
          END;
        'MENU', 'COMPLETE':
          BEGIN
            IF (RecRef.NUMBER = DATABASE::"ACF Menu") AND (FldRef.NUMBER = 5) THEN BEGIN
              RecRef.SETTABLE(Menu);
              //get new Entry No.
              tmpMenu.Type := tmpMenu.Type::"Main Menu";
              tmpMenu.Code := FORMAT(FldRef.VALUE); //Store old Entry No.
              Menu2.SETCURRENTKEY("Entry No.");
              IF Menu2.FINDLAST THEN
                FldRef.VALUE := Menu2."Entry No." + 1
              ELSE
                FldRef.VALUE := 0;
              tmpMenu."Entry No." := FldRef.VALUE;  //Store new Entry No.
              tmpMenu.INSERT;
            END;
            IF (RecRef.NUMBER = DATABASE::"ACF Web Page Element Menu") AND (FldRef.NUMBER = 2) THEN BEGIN
              RecRef.SETTABLE(WebPageElementMenu);
              IF WebPageElementMenu."Web Page Code" = '' THEN BEGIN
                IF tmpMenu.GET(tmpMenu.Type::"Main Menu", FORMAT(FldRef.VALUE)) THEN
                  FldRef.VALUE := tmpMenu."Entry No."; //Set new Entry No. in Web Page Element Menu
              END;
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckSkipRecordExport@1000000023(RecRef@1000000000 : RecordRef) SkipRecord : Boolean;
    VAR
      WebPageElementMenu@1000000001 : Record 5327104;
      Rights@1000000002 : Record 5327143;
      Menu@1000000003 : Record 5327130;
    BEGIN
      CASE ExportType OF
        'COMPLETE':
          BEGIN
            CASE RecRef.NUMBER OF
              DATABASE::"ACF Web Page": EXIT(NOT IncludeWebPages);
              DATABASE::"ACF Web Page Element": EXIT(NOT IncludeWebPages);
              DATABASE::"ACF Web Page Element Tab": EXIT(NOT IncludeWebPages);
              DATABASE::"ACF Web Page Element Field": EXIT(NOT IncludeWebPages);
              DATABASE::"ACF Web Page Element Menu":
                BEGIN
                  RecRef.SETTABLE(WebPageElementMenu);
                  EXIT(NOT ((IncludeWebPages AND (WebPageElementMenu."Web Page Code" <> '')) OR
                        (IncludeMainMenus AND WebPageElementMenu.IsMainMenuEntry) OR
                        (IncludeMenuTemplates AND WebPageElementMenu.IsMenuTemplateEntry)));
                END;
              DATABASE::"ACF Web Page Table Field Rel.": EXIT(NOT IncludeWebPageTableFieldRel);
              DATABASE::"ACF Menu":
                BEGIN
                  RecRef.SETTABLE(Menu);
                  EXIT(NOT ((IncludeMainMenus AND (Menu.Type = Menu.Type::"Main Menu")) OR
                            (IncludeMenuTemplates AND (Menu.Type = Menu.Type::"Menu Template"))));
                END;
              DATABASE::"ACF Web User": EXIT(NOT IncludeWebUsers);
              DATABASE::"ACF Web Role": EXIT(NOT IncludeWebRoles);
              DATABASE::"ACF Web User Role": EXIT(NOT IncludeWebUsers);
              DATABASE::"ACF Setup": EXIT(NOT IncludeWebDeskSetup);
              DATABASE::"ACF Rights":
                BEGIN
                  RecRef.SETTABLE(Rights);
                  EXIT(NOT ((IncludeWebRoles AND (Rights.Type = Rights.Type::"Role Definition")) OR
                        (IncludeWebUsers AND (Rights.Type = Rights.Type::"User Definition"))));
                END;
              DATABASE::"ACF Icon": EXIT(NOT IncludeIcons);
              DATABASE::"ACF Text Constant": EXIT(NOT IncludeMLStrings);
              DATABASE::"ACF Virtual Table": EXIT(NOT IncludeVirtualTables);
              DATABASE::"ACF Virtual Field": EXIT(NOT IncludeVirtualTables);
              DATABASE::"ACF Function Code": EXIT(NOT IncludeFunctionCodes);
              DATABASE::"ACF Relation Code": EXIT(NOT IncludeRelationCodes);
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckSkipFieldExport@1000000026(VAR RecRef@1000000000 : RecordRef;VAR FldRef@1000000001 : FieldRef) : Boolean;
    BEGIN
    END;

    LOCAL PROCEDURE CheckFieldExists@1000000002(VAR RecRef@1000000000 : RecordRef;FieldNo@1000000001 : Integer) : Boolean;
    VAR
      Field@1000000002 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE("No.", FieldNo);
      EXIT(NOT Field.ISEMPTY);
    END;

    PROCEDURE ExportTableSpecificInfos@1000000030(RecRef@1000000000 : RecordRef;VAR XMLNewNode@1000000001 : Codeunit 5327130) AppendNode : Boolean;
    VAR
      Multilanguage@1000000003 : Record 5327131;
      InStr@1000000004 : InStream;
      Text1024@1000000005 : Text[1024];
      XMLCDATA@1000000006 : Codeunit 5327132;
      XMLNode@1000000002 : Codeunit 5327130;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"ACF Web Page Element": BEGIN
          XMLDoc.CreateElement(XMLNewNode,'HTMLTemplates');
          Multilanguage.SETRANGE("Record ID", RecRef.RECORDID);
          Multilanguage.SETRANGE("Field ID", -1);
          IF Multilanguage.FINDSET THEN REPEAT
            Multilanguage.CALCFIELDS("Blob Value");
            IF Multilanguage."Blob Value".HASVALUE THEN BEGIN
              AppendNode := TRUE;
              XMLDoc.CreateElement(XMLNode, 'Template');
              XMLNode.AddAttribute('Language', Multilanguage.Language);
              Multilanguage."Blob Value".CREATEINSTREAM(InStr);
              InStr.READTEXT(Text1024);
              XMLDoc.CreateCDataSection(XMLCDATA, Text1024);
              XMLNode.AppendCDATANode(XMLCDATA);
              CLEAR(InStr);
              CLEAR(Text1024);
              XMLNewNode.AppendChild(XMLNode);
            END;
          UNTIL Multilanguage.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ImportTableSpecificInfos@1000000022(VAR RecRef@1000000001 : RecordRef;VAR XMLCurrRecordNode@1000000000 : Codeunit 5327130);
    VAR
      Multilanguage@1000000006 : Record 5327131;
      OutStr@1000000005 : OutStream;
      XMLCDATA@1000000003 : Codeunit 5327132;
      XMLTemplateNodeList@1000000002 : Codeunit 5327131;
      XMLTemplateNode@1000000008 : Codeunit 5327130;
      XMLAttributeNode@5326062 : Codeunit 5327130;
      XMLAttributes@1000000007 : Codeunit 5327133;
      i@1000000004 : Integer;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"ACF Web Page Element": BEGIN
          XMLCurrRecordNode.SelectNodes(XMLTemplateNodeList, './/HTMLTemplates/Template');
          FOR i := 1 TO XMLTemplateNodeList.GetLength() DO BEGIN
            XMLTemplateNodeList.Item(XMLTemplateNode, i-1);
            Multilanguage.INIT;
            Multilanguage."Record ID" := RecRef.RECORDID;
            Multilanguage."Field ID" := -1;
            XMLTemplateNode.Attributes(XMLAttributes);
            XMLAttributes.GetNamedItem(XMLAttributeNode, 'Language');
            Multilanguage.Language := XMLAttributeNode.GetText;
            CLEAR(Multilanguage."Blob Value");
            Multilanguage."Blob Value".CREATEOUTSTREAM(OutStr);
            OutStr.WRITETEXT(XMLTemplateNode.GetText);
            IF NOT Multilanguage.INSERT(TRUE) THEN
              Multilanguage.MODIFY(TRUE);
            CLEAR(OutStr);
          END;
        END;
      END;
    END;

    BEGIN
    {
      CM001 Use a temporary WD Menu table to store Entry No. while importing Menus
    }
    END.
  }
}

