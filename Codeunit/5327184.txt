OBJECT Codeunit 5327184 ACF Events Warehouse
{
  OBJECT-PROPERTIES
  {
    Date=04.04.13;
    Time=00:00:00;
    Version List=ACF3.02.03;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Events@5326063 : Codeunit 5327180;
      Mgt@1000000009 : Codeunit 5327126;
      Text001@1000000026 : TextConst 'DEU=Die individuelle Web Page Tabellenrelation %1 existiert nicht.;ENU=Custom Web Page Table relation %1 does not exist.';
      Text002@1000000002 : TextConst 'DEU=Der Datensatz wurde gespeichert.;ENU=Data saved.';
      Text003@1000000033 : TextConst 'DEU=Der Zieldatensatz wurde in der CustomWebPageRelation nicht ge”ffnet;ENU=Destination Record was not opened in CustomWebPageRelation.';
      Text004@1000000025 : TextConst 'DEU=Der Funktionscode %1 existiert nicht.;ENU=Function Code %1 does not exist.';
      Text006@1000000011 : TextConst 'DEU=M”chten Sie den Datensatz %1 %2 l”schen?;ENU=Do you want to delete record %1 %2?';
      Text007@1000000010 : TextConst 'DEU=M”chten Sie den Datensatz "%1" in "%2" umbenennen?;ENU=Do you want to rename the record "%1" in "%2?';
      Text008@1000000008 : TextConst 'DEU=M”chten Sie den Datensatz umbenennen?;ENU=Do you want to rename this record?';
      Style@5326068 : Codeunit 5327125;
      RecordFilter@5326069 : Codeunit 5327128;
      SecurityMgt@5326071 : Codeunit 5327120;
      WebPageElement@5326088 : Record 5327101;
      WebPageElementField@5326087 : Record 5327103;
      RecRef@5326086 : RecordRef;
      FldRef@5326085 : FieldRef;
      FldNo@5326065 : Integer;
      xRecRef@5326084 : RecordRef;
      xFldRef@5326083 : FieldRef;
      xFldNo@5326064 : Integer;
      WindowRecRef@5326082 : RecordRef;
      DestWebPageElement@5326081 : Record 5327101;
      DestRecRef@5326080 : RecordRef;
      CustomTableRelationRecRef@5326079 : RecordRef;
      FunctionCode@5326078 : Code[20];
      RelationCode@5326077 : Code[20];
      FieldName@5326076 : Text[50];
      TableNumber@5326074 : Integer;
      ClosedByNAV@5326066 : Boolean;
      "Field#1"@5326073 : Integer;
      "Field#2"@5326072 : Integer;
      CSS@5326070 : Text[1024];
      WebUser@5326062 : Record 5327140;
      RecRefOriginal@5326067 : RecordRef;

    PROCEDURE GetModuleName@1000000001() ModuleName : Text[30];
    BEGIN
      EXIT('Warehouse');
    END;

    LOCAL PROCEDURE "-- Events"@5326091();
    BEGIN
    END;

    PROCEDURE OnBeforeLoad@1000000003();
    BEGIN
      // Called before loading data for a Web Page Element
      // This event is synchronious call, Web Mangement messages cannot be used here.
      // Attention: Filter set here get lost on reload on Web Pages of type list. Use CustomWebPageRelation instead.

      // Main Events
      SetValuesToMainEvents();
      Events.OnBeforeLoad();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnAfterGetField@1000000013() ShowValue : Boolean;
    BEGIN
      // This event is called after a field is loaded from (temporary) record.
      // It can be modified here before sending it to the user.
      // Useful for:
      // - Getting data not saved in phys. record but from table functions (eg. "Contact Profile Anweser".Question)
      // - Change of Style (Anveo Web Desk) like colors and other field attributes
      // - Enabling/Disabling fields to change the layout (Anveo Mobile lists)

      // **** Definition of layout
      // ** Anveo Web Desk
      // Define a CSS style for a dynamic definition of the field layout.
      // * STYLE-SYNTAX *
      // 1. Set Condition (boolean)
      //    Style.SetCondition(CONDITION (boolean));
      // 2. Set attribute(s)
      //    If CONDITION is TRUE, first value is taken for attributes, otherwise second:
      //    Style.FontWeight('bold', 'normal');
      //     -> Text is bold, if CONDITION is TRUE; text is normal, if FALSE

      // ** Anveo Mobile
      // Layout of lists can be changed by defining more than one field in Web Page Field definition based on same field in table
      // but with different Web Page Field-attributes (eg. colors)
      // Then set one of the Web Page Fields identified by FieldName invisible by returning ShowValue := TRUE/FALSE
      // The Style object is not used by Anveo Mobile because of performance optimization.

      // Default
      ShowValue := TRUE;

      // Duplicate the RecRef because RecRef.SETTABLE deletes the current key (NAV bug)
      RecRefOriginal := RecRef.DUPLICATE;

      // Table based
      CASE RecRef.NUMBER OF
        DATABASE::Item:                           ShowValue := OAGetField_ITEM();
        DATABASE::"Bin Content":                  ShowValue := OAGetField_BIN_CONTENT();
        DATABASE::"Stockkeeping Unit":            ShowValue := OAGetField_STOCKKEEPING_UNIT();
        DATABASE::"Transfer Header":              ShowValue := OAGetField_TRANSFER_HEADER();
      END;

      // Web Page based
      CASE WebPageElement."Web Page Code" OF
        //'YOURWEBPAGE':                           ShowValue := OAGetField_YOURFUNCTION();
      END;

      // Main Events
      SetValuesToMainEvents();
      ShowValue := ShowValue AND Events.OnAfterGetField();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnAfterGetRecord@1000000019();
    BEGIN
      // Record is loaded and is ready for transport to GUI.
      // Changes of records cannot be made here because record is already processed for GUI representation.
      // Use OnAfterGetField instead.

      // Main Events
      SetValuesToMainEvents();
      Events.OnAfterGetRecord();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnAfterLoad@1000000014();
    BEGIN
      // Called after loading data for a Web Page Element
      // This event is synchronious call, Web Mangement messages cannot be used here.

      // Main Events
      SetValuesToMainEvents();
      Events.OnAfterLoad();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnInit@1000000007();
    BEGIN
      // OnInit is called if a new record is initialized.
      // Default values can be set here

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;

      // Main Events
      SetValuesToMainEvents();
      Events.OnInit();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnBeforeValidate@1000000010() DoValidation : Boolean;
    BEGIN
      // A value is set to a record, but validation is not done yet. Validation can be cancelled here by return value false.
      // Use input of FlowFields for transportation of input values from GUI to NAV

      // Default
      DoValidation := TRUE;

      IF FORMAT(FldRef.CLASS) = 'FlowField' THEN BEGIN
        //Example:
        Mgt.MESSAGE1('FlowField Input: %1. Do not validate field.',FldRef.VALUE);
        EXIT(FALSE);
      END;

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;

      // Save xRec and CurrFieldNo for usage of Mgt.GetxRec in table triggers
      Mgt.SetxRec(xRecRef,FldRef.NUMBER);

      // Main Events
      SetValuesToMainEvents();
      DoValidation := DoValidation AND Events.OnBeforeValidate();
      GetValuesFromMainEvents();

      EXIT(DoValidation);
    END;

    PROCEDURE OnValidate@1000000000();
    BEGIN
      // OnValidate is called on every input made in the GUI
      // Complete reload of web page is done after validating fields.

      // Example for testing OnValidateTrigger
      //IF FldRef.NUMBER <> 0 THEN BEGIN
      //  Mgt.MESSAGE4(Text008,FldRef.VALUE,RecRef.CAPTION, FldRef.CAPTION, xFldRef.VALUE));
      //END;

      // Main Events
      SetValuesToMainEvents();
      Events.OnValidate();
      GetValuesFromMainEvents();
    END;

    PROCEDURE CallOnInsertTrigger@1000000016() CallTableOnInsertTrigger : Boolean;
    BEGIN
      // OnInsert trigger is called when data is saved back to SQL-Server
      // Return value CallTableOnInsertTrigger (boolean) sets whether to call default OnInsert-trigger of table afterwards.
      // Default value is true, always call OnInsert-Trigger of tables
      CallTableOnInsertTrigger:=TRUE;

      // Main Events
      SetValuesToMainEvents();
      CallTableOnInsertTrigger := CallTableOnInsertTrigger AND Events.CallOnInsertTrigger();
      GetValuesFromMainEvents();
    END;

    PROCEDURE CallOnModifyTrigger@1000000015() CallTableOnModifyTrigger : Boolean;
    BEGIN
      // OnModify trigger is called when data is saved back to SQL-Server
      // Return value CallTableOnModifyTrigger (boolean) sets whether to call default OnModify-trigger of table afterwards.
      // Default value is true, always call OnModify-Trigger of tables
      CallTableOnModifyTrigger:=TRUE;

      // Set xRec
      Mgt.SetxRec(xRecRef,0);

      // Main Events
      SetValuesToMainEvents();
      CallTableOnModifyTrigger := CallTableOnModifyTrigger AND Events.CallOnModifyTrigger();
      GetValuesFromMainEvents();
    END;

    PROCEDURE CallOnDeleteTrigger@1000000033() CallTableOnDeleteTrigger : Boolean;
    BEGIN
      // CallOnDeleteTrigger is called when data is saved back to SQL-Server
      // Return value CallTableOnDeleteTrigger (boolean) sets whether to call default OnDelete-trigger of table afterwards.
      // Default value is true, always call OnDelete-Trigger of tables
      CallTableOnDeleteTrigger:=TRUE;

      // Main Events
      SetValuesToMainEvents();
      CallTableOnDeleteTrigger := CallTableOnDeleteTrigger AND Events.CallOnDeleteTrigger();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnInsertRecord@1000000025() DoInsert : Boolean;
    BEGIN
      // A record is inserted. Return value decides if record is inserted.
      // Table OnInsert()-Trigger is called afterwards.
      // On return value FALSE does not insert record.

      // Default
      DoInsert := TRUE;

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;

      // Main Events
      SetValuesToMainEvents();
      DoInsert := DoInsert AND Events.OnInsertRecord();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnModifyRecord@1000000027() DoModify : Boolean;
    BEGIN
      // A record is modified. Return value decides if record is modified.
      // Table OnModify()-Trigger is called afterwards.
      // On return value FALSE does not modify record.

      // Default
      DoModify := TRUE;

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;

      // Main Events
      SetValuesToMainEvents();
      DoModify := DoModify AND Events.OnModifyRecord();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnRenameRecord@1000000011() DoRename : Boolean;
    BEGIN
      // A record is renamed. Return value decides if record is renamed.
      // OnBeforeValidate and OnValidate is called before.
      // Table OnRename()-Trigger is called afterwards.
      // On return value FALSE does not rename record.

      // Default
      DoRename := TRUE;

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;

      // Rename Dialog: Long version with primary key fields
      //EXIT(Mgt.CONFIRM2(Text007,FALSE,xRecRef.GETFILTERS,RecRef.GETFILTERS));
      // Short version
      //EXIT(Mgt.CONFIRM(Text008));

      // Main Events
      SetValuesToMainEvents();
      DoRename := DoRename AND Events.OnRenameRecord();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnDeleteRecord@1000000009() DoDelete : Boolean;
    BEGIN
      // OnDeleteRecord is called if a record is to be deleted.
      // It is not called if a new, unsaved record is deleted.

      // Default
      DoDelete := TRUE;

      CASE RecRef.NUMBER OF
        // Example: Do not show Delete-Confirm-Message
        //DATABASE::<TableName> THEN EXIT(TRUE);
      END;

      // Default message:
      //EXIT(Mgt.CONFIRM2(Text006, FALSE,RecRef.CAPTION, RecRef.GETFILTERS));

      // Main Events
      SetValuesToMainEvents();
      DoDelete := DoDelete AND Events.OnDeleteRecord();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnAfterInsertRecord@1000000028();
    BEGIN
      // Called after a record was successfully inserted.

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;

      // Main Events
      SetValuesToMainEvents();
      Events.OnAfterInsertRecord();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnAfterModifyRecord@1000000029();
    BEGIN
      // Called after a record was successfully modified.

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;

      // Main Events
      SetValuesToMainEvents();
      Events.OnAfterModifyRecord();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnAfterRenameRecord@1000000030();
    BEGIN
      //Called after a record was successfully renamed.

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;

      // Main Events
      SetValuesToMainEvents();
      Events.OnAfterRenameRecord();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnAfterDeleteRecord@1000000031();
    BEGIN
      //Called after a record was successfully deleted.

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;

      // Main Events
      SetValuesToMainEvents();
      Events.OnAfterDeleteRecord();
      GetValuesFromMainEvents();
    END;

    PROCEDURE OnAction@1000000026() CloseWindow : Boolean;
    BEGIN
      // OnAction is called when a button in main menu, web page menu or beside a field is pushed.
      // Or in case of a double click event with a function code defined.
      // Default FunctionCodes see Main Events codeunit. Insert them here to overwrite if required.

      IF FunctionCode = '' THEN EXIT;

      // Based on Table
      CASE RecRef.NUMBER OF
        //DATABASE::TableName:      OnAction_YOURACTION();
      END;

      // Based on Function Code
      CASE FunctionCode OF

        // Reports
        'RPT_INVENTORYTOP10':       OnAction_RPT_INVENTORYTOP10();
        'RPT_INV_PURCH_ORDERS':     OnAction_RPT_INV_PURCH_ORDERS();
        'RPT_INVENTORY_LIST':       OnAction_RPT_INVENTORY_LIST();
        'RPT_INV_AVAILABILITY':     OnAction_RPT_INV_AVAILABILITY();
        'RPT_INV_COST_PRI_LST':     OnAction_RPT_INV_COST_PRI_LST();

        //'YOURACTIONCODE':         OnAction_YOURACTION();

        ELSE BEGIN
          Mgt.Log('OnAction','No FunctionCode found. Asking Main Events codeunit...');
          SetValuesToMainEvents();
          CloseWindow := CloseWindow OR Events.OnAction();
          GetValuesFromMainEvents();
        END;
      END;
    END;

    PROCEDURE OnBeforeCloseWebPage@1000000004() CloseWindow : Boolean;
    BEGIN
      // OnCloseWebPage is called before a Web Page is closed.
      // The return value CloseWindow (boolean) decides whether the web page is closed or not.
      // ClosedByNAV indicates whether the user (=FALSE) or Mgt.CloseWebPage() (=TRUE) closed the window.

      // Default
      CloseWindow := TRUE;

      CASE RecRef.NUMBER OF
        //DATABASE::TableName: <YourCode>
      END;
      //Mgt.ReloadWebPagesTableNo(RecRef.NUMBER,2); //0 = all cards, 1 = all Lists, 2 all

      // Main Events
      SetValuesToMainEvents();
      CloseWindow := CloseWindow AND Events.OnBeforeCloseWebPage();
      GetValuesFromMainEvents();
    END;

    PROCEDURE IsWriteBack@1000000018() WriteRecord : Boolean;
    VAR
      xFldRef@1000000010 : FieldRef;
    BEGIN
      // IsWriteBack
      // Usage for return value WriteRecord:
      //  Web Page WriteBehaviour is ...
      //   * Direct      - IsWriteBack is ignored. Data is always written back to SQL-Server
      //   * Delayed     - IsWriteBack is ignored. Data is written back to SQL-Server on close web page/modify other record/logout/...
      //   * Defined     - IsWriteBack is used for decision whether to write data back to SQL-Server.
      //   * Primary Key - IsWriteBack is ignored. Data is written back to SQL-Server if non-primay key field is validated.
      // Complete reload of web page is done after validating fields.

      // Default
      WriteRecord := FALSE;

      IF xFldNo<>0 THEN xFldRef := xRecRef.FIELD(xFldNo);

      CASE xRecRef.NUMBER OF
        // Example: Write Record if other value than Customer No. is set.
        // The automatic WriteBehaviour "Primary Key" gives same behaviour.
        //DATABASE::Customer: BEGIN
        //  EXIT(NOT(xFldNo IN [0,1]));
        //END;
      END;

      // Main Events
      SetValuesToMainEvents();
      WriteRecord := WriteRecord OR Events.IsWriteBack();
      GetValuesFromMainEvents();
    END;

    PROCEDURE CustomWebPageRelation@1000000005();
    BEGIN
      // Sets custom relations between two Web Pages, Web Page Elements or for DropDown-Lists defined by function code

      // Optional:
      // Test source of Custom Table Relation
      //CASE CustomTableRelationRecRef.NUMBER OF
      //  DATABASE::"ACF Web Page Element": ;       //Web Page Element: Call from Web Page to Web Page
      //  DATABASE::"ACF Web Page Element Menu": ;  //Web Page Element Menu: Call from Menu
      //  DATABASE::"ACF Web Page Element Field": ; //Web Page Element Field: Call from Field
      //END;

      CASE RelationCode OF
        //'YOURRELATIONCODE':          CTR_YOURRELATION();

      ELSE BEGIN
          Mgt.Log('CustomWebPageRelation','No CustomWebPageRelation found. Asking Main Events codeunit...');
          SetValuesToMainEvents();
          Events.CustomWebPageRelation();
          GetValuesFromMainEvents();
        END;
      END;

      // Test, if destination record ref is found.
      IF DestRecRef.NUMBER=0 THEN ERROR(Text003);
      // Log actual filter value
      Mgt.Log('CustomWebPageRelation',DestRecRef.GETVIEW);
    END;

    PROCEDURE DropDownFieldDefinition@1000000002();
    BEGIN
      // DropDown Field Definition
      // Defaults for this module only

      {
      CASE TableNumber OF
        DATABASE::TableNumber: BEGIN
          "Field#1" := Record.FIELDNO(FieldName1);
          "Field#2" := Record.FIELDNO(FieldName2);
          EXIT;
        END;
      END;
      }

      // If not defined by this module, load defaults from Main Events codeunit or definition of Web Page Element Field
      SetValuesToMainEvents();
      Events.DropDownFieldDefinition();
      GetValuesFromMainEvents();
    END;

    LOCAL PROCEDURE "-- OnAction-Functions"@5326063();
    BEGIN
    END;

    PROCEDURE OnAction_RPT_INVENTORYTOP10@5326064();
    VAR
      Record@5326065 : Record 27;
      Report@5326064 : Report 711;
      ReportOptions@5326063 : Codeunit 5327127;
      FileName@5326062 : Text[1024];
    BEGIN
      // Check Report Rights
      SecurityMgt.TestRightReport(711);

      // Get Customer Filter and apply to Report
      RecordFilter.GetVT_Item('ITEM_FILTER',Record);
      Report.SETTABLEVIEW(Record);

      // Set Report options
      ReportOptions.OPEN('REPORT_OPT_INVTOP10');
      //Report.SetParameters(ReportOptions.getBoolean('PRINTALSOIFZERO'),
      //  ReportOptions.getInteger('QUANTITY'),
      //  ReportOptions.getInteger('SHOW_MIN/MAX'),
      //  ReportOptions.getInteger('SHOW_SALES/INV'));

      // Print Report as PDF
      FileName := Mgt.GetTempFileName('pdf');
      Report.SAVEASPDF(FileName);

      // Send Report to User
      IF EXISTS(FileName) THEN Mgt.OpenFileDownloadDialogWin(FileName,TRUE);
    END;

    PROCEDURE OnAction_RPT_INV_PURCH_ORDERS@5326070();
    VAR
      Item@5326065 : Record 27;
      PurchaseLine@5326066 : Record 39;
      Report@5326064 : Report 709;
      ReportOptions@5326063 : Codeunit 5327127;
      FileName@5326062 : Text[1024];
    BEGIN
      // Check Report Rights
      SecurityMgt.TestRightReport(709);

      // Get Customer Filter and apply to Report
      RecordFilter.GetVT_Item('ITEM_FILTER',Item);
      RecordFilter.GetVT_PurchaseLine('PURCHASE_LINE_FILTER',PurchaseLine);
      Report.SETTABLEVIEW(Item);
      Report.SETTABLEVIEW(PurchaseLine);

      // Print Report as PDF
      FileName := Mgt.GetTempFileName('pdf');
      Report.SAVEASPDF(FileName);

      // Send Report to User
      IF EXISTS(FileName) THEN Mgt.OpenFileDownloadDialogWin(FileName,TRUE);
    END;

    PROCEDURE OnAction_RPT_INVENTORY_LIST@5326073();
    VAR
      Record@5326065 : Record 27;
      Report@5326064 : Report 701;
      ReportOptions@5326063 : Codeunit 5327127;
      FileName@5326062 : Text[1024];
    BEGIN
      // Check Report Rights
      SecurityMgt.TestRightReport(701);

      // Get Customer Filter and apply to Report
      RecordFilter.GetVT_Item('ITEM_FILTER',Record);
      Report.SETTABLEVIEW(Record);

      // Print Report as PDF
      FileName := Mgt.GetTempFileName('pdf');
      Report.SAVEASPDF(FileName);

      // Send Report to User
      IF EXISTS(FileName) THEN Mgt.OpenFileDownloadDialogWin(FileName,TRUE);
    END;

    PROCEDURE OnAction_RPT_INV_AVAILABILITY@5326076();
    VAR
      Record@5326065 : Record 27;
      Report@5326064 : Report 705;
      ReportOptions@5326063 : Codeunit 5327127;
      FileName@5326062 : Text[1024];
    BEGIN
      // Check Report Rights
      SecurityMgt.TestRightReport(705);

      // Get Customer Filter and apply to Report
      RecordFilter.GetVT_Item('ITEM_FILTER',Record);
      Report.SETTABLEVIEW(Record);

      // Print Report as PDF
      FileName := Mgt.GetTempFileName('pdf');
      Report.SAVEASPDF(FileName);

      // Send Report to User
      IF EXISTS(FileName) THEN Mgt.OpenFileDownloadDialogWin(FileName,TRUE);
    END;

    PROCEDURE OnAction_RPT_INV_COST_PRI_LST@5326074();
    VAR
      Record@5326065 : Record 27;
      Report@5326064 : Report 716;
      ReportOptions@5326063 : Codeunit 5327127;
      FileName@5326062 : Text[1024];
    BEGIN
      // Check Report Rights
      SecurityMgt.TestRightReport(716);

      // Get Customer Filter and apply to Report
      RecordFilter.GetVT_Item('ITEM_FILTER',Record);
      Report.SETTABLEVIEW(Record);

      // Print Report as PDF
      FileName := Mgt.GetTempFileName('pdf');
      Report.SAVEASPDF(FileName);

      // Send Report to User
      IF EXISTS(FileName) THEN Mgt.OpenFileDownloadDialogWin(FileName,TRUE);
    END;

    LOCAL PROCEDURE "-- CustomTableRelation-Func."@5326062();
    BEGIN
    END;

    PROCEDURE CTR_YOURRELATION@5326065();
    BEGIN
      //Mgt.LOG('OnAction_YOURRELATION', 'BEGIN');

      // 1. Set table reference
      //RecRef.SETTABLE(Record);

      // 2. Filter
      //DestRecord.SETFILTER(Field,Record.Field);

      // 3. Copy Filters to DestRecRef
      //DestRecRef.SETVIEW(DestRecord.GETVIEW);

      //Mgt.LOG('OnAction_YOURRELATION', 'END');
    END;

    LOCAL PROCEDURE "--Web Page Element Field-Func."@5326080();
    BEGIN
    END;

    PROCEDURE OAGetField_ITEM@5326066() ShowValue : Boolean;
    VAR
      Item@5326062 : Record 27;
    BEGIN
      ShowValue := TRUE;
      RecRef.SETTABLE(Item);

      IF NOT Mgt.IsMobile THEN BEGIN
        //Anveo Web Desk
        IF WebPageElement."Element Type" = WebPageElement."Element Type"::List THEN BEGIN
          Style.SetCondition(TRUE);
          // Set background color to green, if Inventory>=Qty. on Sales Order
          //                  ... to orange
          IF FldRef.NUMBER IN [Item.FIELDNO(Inventory), Item.FIELDNO("Qty. on Purch. Order"),
            Item.FIELDNO("Qty. on Sales Order")] THEN BEGIN
            Item.CALCFIELDS(Inventory, "Qty. on Purch. Order", "Qty. on Sales Order");
            IF Item."Qty. on Sales Order" = 0 THEN
              Style.BackgroundColor('white','')
            ELSE IF Item."Qty. on Sales Order" <= Item.Inventory THEN
              Style.BackgroundColor('#DDFFDD','')  // light green
            ELSE IF Item."Qty. on Sales Order" <= (Item.Inventory+Item."Qty. on Purch. Order") THEN
              Style.BackgroundColor('#FFDD99','')  // light orange
            ELSE
              Style.BackgroundColor('#FFDDDD','')  // light red
          END;
          // Set
          IF FldRef.NUMBER = Item.FIELDNO(Description) THEN
            Style.FontWeight('bold','');
          Style.SetCondition(Item.Blocked);
          Style.TextColor('#AAAAAA','black');
          Style.BackgroundColor('#FFEEEE','');  // light red
        END;
      END ELSE BEGIN
        //Anveo Mobile
        IF WebPageElement."Element Type" = WebPageElement."Element Type"::"List Mobile" THEN BEGIN
          CASE FieldName OF
            '68': ShowValue := (FORMAT(FldRef.VALUE) <> '0');
            '1000068': ShowValue := (FORMAT(FldRef.VALUE) = '0');
          END;
        END;
      END;
    END;

    PROCEDURE OAGetField_STOCKKEEPING_UNIT@5326068() ShowValue : Boolean;
    VAR
      StockkeepingUnit@5326068 : Record 5700;
    BEGIN
      ShowValue := TRUE;
      RecRef.SETTABLE(StockkeepingUnit);

      //Anveo Web Desk
      IF NOT Mgt.IsMobile THEN BEGIN
        IF WebPageElement."Element Type" = WebPageElement."Element Type"::List THEN BEGIN
          Style.SetCondition(TRUE);
          StockkeepingUnit.CALCFIELDS(Inventory);
          IF FldRef.NUMBER IN [StockkeepingUnit.FIELDNO(Inventory),StockkeepingUnit.FIELDNO("Reorder Point"),
            StockkeepingUnit.FIELDNO("Reorder Quantity"),StockkeepingUnit.FIELDNO("Maximum Inventory")] THEN BEGIN
              IF StockkeepingUnit.Inventory = 0 THEN
                Style.BackgroundColor('#FFDDDD','')
              ELSE IF ((StockkeepingUnit.Inventory > 0) AND (StockkeepingUnit.Inventory < StockkeepingUnit."Reorder Point")) THEN
                Style.BackgroundColor('#FFDD99','')
              ELSE
                Style.BackgroundColor('#DDFFDD','');
          END;

          IF FldRef.NUMBER = StockkeepingUnit.FIELDNO("Location Code") THEN BEGIN
            CASE StockkeepingUnit."Location Code" OF
              'BLUE':    Style.BackgroundColor('#DDDDFF','');
              'GREEN':   Style.BackgroundColor('#DDFFDD','');
              'RED':     Style.BackgroundColor('#FFDDDD','');
              'SILVER':  Style.BackgroundColor('#D0D0D0','');
              'WHITE':   Style.BackgroundColor('#FFFFFF','');
              'YELLOW':  Style.BackgroundColor('#FFFFDD','');
            END;
          END;
        END;

        IF FldRef.NUMBER = StockkeepingUnit.FIELDNO(Description) THEN
          Style.FontWeight('bold','');
      END;
    END;

    PROCEDURE OAGetField_BIN_CONTENT@5326067() ShowValue : Boolean;
    VAR
      BinContent@5326068 : Record 7302;
    BEGIN
      ShowValue := TRUE;
      RecRef.SETTABLE(BinContent);

      //Anveo Web Desk
      IF NOT Mgt.IsMobile THEN BEGIN
        IF WebPageElement."Element Type" = WebPageElement."Element Type"::List THEN BEGIN
          BinContent.CALCFIELDS(Quantity);
          Style.SetCondition(TRUE);
          IF FldRef.NUMBER IN [BinContent.FIELDNO(Quantity),BinContent.FIELDNO("Quantity (Base)"),
            BinContent.FIELDNO("Min. Qty."),BinContent.FIELDNO("Max. Qty.")] THEN BEGIN
              IF BinContent.Quantity = 0 THEN
                Style.BackgroundColor('#FFDDDD','')
              ELSE IF ((BinContent.Quantity > 0) AND (BinContent.Quantity < BinContent."Min. Qty.")) THEN
                Style.BackgroundColor('#FFDD99','')
              ELSE
                Style.BackgroundColor('#DDFFDD','');
          END;
          IF FldRef.NUMBER = BinContent.FIELDNO("Location Code") THEN BEGIN
            CASE BinContent."Location Code" OF
              'BLUE':    Style.BackgroundColor('#DDDDFF','');
              'GREEN':   Style.BackgroundColor('#DDFFDD','');
              'RED':     Style.BackgroundColor('#FFDDDD','');
              'SILVER':  Style.BackgroundColor('#D0D0D0','');
              'WHITE':   Style.BackgroundColor('#FFFFFF','');
              'YELLOW':  Style.BackgroundColor('#FFFFDD','');
            END;
          END;
        END;
      END;
    END;

    PROCEDURE OAGetField_TRANSFER_HEADER@5326069() ShowValue : Boolean;
    VAR
      TransferHeader@5326068 : Record 5740;
    BEGIN
      ShowValue := TRUE;
      RecRef.SETTABLE(TransferHeader);

      //Anveo Web Desk
      IF NOT Mgt.IsMobile THEN BEGIN
        IF WebPageElement."Element Type" = WebPageElement."Element Type"::List THEN BEGIN
          Style.SetCondition(TransferHeader.Status = TransferHeader.Status::Released);
          Style.BackgroundColor('#DDFFDD','white');
        END;
      END;
    END;

    LOCAL PROCEDURE "-- SET/GET FUNCTIONS --"@5326072();
    BEGIN
    END;

    PROCEDURE SETVALUES1@5326088(pWebPageElement@5326081 : Record 5327101;pWebPageElementField@5326080 : Record 5327103;VAR pRecRef@5326079 : RecordRef;pFldRef@5326078 : FieldRef;pFldNo@5326062 : Integer;pxRecRef@5326077 : RecordRef;pxFldRef@5326076 : FieldRef;pxFldNo@5326063 : Integer;pWindowRecRef@5326075 : RecordRef;pDestWebPageElement@5326074 : Record 5327101;pDestRecRef@5326073 : RecordRef;pCustomTableRelationRecRef@5326072 : RecordRef;pFunctionCode@5326071 : Code[20];pRelationCode@5326070 : Code[20];pFieldName@5326069 : Text[50];pTableNumber@5326067 : Integer);
    BEGIN
      // Set global variables
      WebPageElement := pWebPageElement;
      WebPageElementField := pWebPageElementField;
      RecRef := pRecRef;
      FldRef := pFldRef;
      FldNo := pFldNo;
      xRecRef := pxRecRef;
      xFldRef := pxFldRef;
      xFldNo := pxFldNo;
      WindowRecRef := pWindowRecRef;
      DestWebPageElement := pDestWebPageElement;
      DestRecRef := pDestRecRef;
      CustomTableRelationRecRef := pCustomTableRelationRecRef;
      FunctionCode := pFunctionCode;
      RelationCode := pRelationCode;
      FieldName := pFieldName;
      TableNumber := pTableNumber;

      IF pFldNo<>0 THEN FldRef := RecRef.FIELD(pFldNo);
      IF pxFldNo<>0 THEN xFldRef := xRecRef.FIELD(pxFldNo);

      WebUser.GET(Mgt.GetACFUser);
    END;

    PROCEDURE SETVALUES2@5326085(pClosedByNAV@5326062 : Boolean;pInitStyle@5326066 : Boolean);
    BEGIN
      // Set global variables
      ClosedByNAV := pClosedByNAV;
      IF pInitStyle THEN
        Style.Init(WebPageElement);
    END;

    PROCEDURE GETVALUES@5326089(VAR pRecRef@5326079 : RecordRef;VAR pFldRef@5326078 : FieldRef;VAR pDestRecRef@5326073 : RecordRef;VAR "pField#1"@5326065 : Integer;VAR "pField#2"@5326064 : Integer;VAR CSS@5326062 : Text[1024]);
    BEGIN
      // Return global variables
      pRecRef := RecRef;
      pFldRef := FldRef;
      pDestRecRef := DestRecRef;
      "pField#1" := "Field#1";
      "pField#2" := "Field#2";
      IF Style.IsInit THEN
        CSS := Style.GetStyle;
    END;

    PROCEDURE SetValuesToMainEvents@5326086();
    BEGIN
      Events.SETVALUES1(WebPageElement,WebPageElementField,RecRef,FldRef,FldNo, xRecRef,xFldRef,xFldNo,WindowRecRef,
       DestWebPageElement,DestRecRef,CustomTableRelationRecRef,FunctionCode,RelationCode,FieldName,TableNumber);
      Events.SETVALUES2(ClosedByNAV, FALSE);
    END;

    PROCEDURE GetValuesFromMainEvents@5326092();
    BEGIN
      Events.GETVALUES(RecRef,FldRef,DestRecRef,"Field#1","Field#2", CSS);
    END;

    LOCAL PROCEDURE "-- Other Functions"@5326071();
    BEGIN
    END;

    BEGIN
    {
      ** Events-Codeunit is the main interface between GUI-events and individual C/AL-Code.
      Online documentation: www.NAVwebclient.com/anveo-help-codeunit-acf-events

      Web Page related event-code can be grouped by a module. See codeunit "ACF Module Mapping" for creating a new module.
      Online documentation for module concept: www.NAVwebclient.com/anveo-help-modules
      Events that can be used in a module are marked with a "M".

      ************************************************************************************************************************************
      *** Module for WAREHOUSE ***********************************************************************************************************
      ************************************************************************************************************************************

      Events-Overview
      ---------------
      * User session
        OnLogin                   Called on user login. Login can be cancelled here.
        OnLogout                  Called on user logout or on browser refresh or close.
        OnLoadEnvironment         Called on browser refresh without new login or after login
        GetLanguageFilter         Defines a filter on Language table for user selection.

      * Security
        ReadSecurityFilter        Sets read filters, called by every Web Page Element and DropDown-Lists
        CheckPassword             Tests password quality. Returns TRUE, if password is ok.
        TestPassword              Uses CheckPassword to test password quality. Calls an ERROR, if password is not ok.

      * Loading data (no asynchronious call, Mgt.-functions like Anveo-MESSAGE etc. is not processed by GUI)
        OnBeforeLoad          (M) Called on loading data once per Web Page Element, Filter to Records is set
        OnAfterGetField       (M) Called once per Web Page Element, Record and Field
        OnAfterGetRecord      (M) Called once per Web Page Element and Record
        OnAfterLoad           (M) Called on loading data once per Web Page Element

      * Data modification
        OnInit                (M) A new record is initialized. Default values can be set here.
        OnBeforeValidate      (M) A value is set to a record, but validation is not done yet. Validation can be cancelled here.
        OnValidate            (M) A value is set to a record and validation is done, if OnBeforeValidate returned true.
        CallOnInsertTrigger   (M) A new record is inserted. Return value decides whether to call INSERT(TRUE) or INSERT(FALSE).
        CallOnModifyTrigger   (M) A record is modified. Return value decides whether to call MODIFY(TRUE) or MODIFY(FALSE).
        CallOnDeleteTrigger   (M) A record is deleted. Return value decides whether to call DELETE(TRUE) or DELETE(FALSE).
        OnInsertRecord        (M) A record is inserted. Return value decides whether record is inserted.
        OnModifyRecord        (M) A record is modified. Return value decides whether record is modified.
        OnRenameRecord        (M) A record is renamed. Return value decides whether record is renamed.
        OnDeleteRecord        (M) A record is deleted. OnAction with Function code "DELETE_RECORD()" is also called.
        OnAfterInsertRecord   (M) Called after a record was successfully inserted.
        OnAfterModifyRecord   (M) Called after a record was successfully modified.
        OnAfterRenameRecord   (M) Called after a record was successfully renamed.
        OnAfterDeleteRecord   (M) Called after a record was successfully deleted.
        IsWriteBack           (M) In case of write behaviour "Defined" IsWriteBack defines if record is physically saved or stays tempor.

      * User events
        OnAction              (M) Button in menu or beside a field is pressed, or double click event on list web page.
                                 "Function Code" identifies C/AL-Code to run.
        OnBeforeCloseWebPage  (M) A Web Page is closed. It can be cancelled with return value false.

      * Relations
        CustomWebPageRelation (M) Defines a custom relation between Web Pages / Web Page Elements

      * Reports
        Create a OnAction-Function for each report. See examples.

      * Other
        DropDownFieldDefinition (M) Defines field Nos in DropDown lists.
    }
    END.
  }
}

