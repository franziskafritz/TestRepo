OBJECT Codeunit 5157892 Payment Tools
{
  OBJECT-PROPERTIES
  {
    Date=13.07.13;
    Time=12:00:00;
    Version List=OPP7.02.03,6.0;
  }
  PROPERTIES
  {
    Permissions=TableData 21=r,
                TableData 25=r,
                TableData 5157896=rm,
                TableData 5157900=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@5157803 : TextConst 'DEU=EINZUG;ENU=EINZUG';
      Text002@5157804 : TextConst 'DEU=ABBUCHUNG;ENU=ABBUCHUNG';
      Text003@5157805 : TextConst 'DEU=DTAUS;ENU=DTAUS';
      Text004@5157806 : TextConst 'DEU=SEPA;ENU=SEPA';
      Text005@5157810 : TextConst 'DEU=Bankeinzug per DTAUS (TX 05);ENU=Debit via DTAUS (TX 05)';
      Text006@5157809 : TextConst 'DEU=Abbuchung per DTAUS (TX 04);ENU=Collect via DTAUS (TX 04)';
      Text007@5157808 : TextConst 'DEU=öberweisung per DTAUS (TX 51);ENU=Payment via DTAUS (TX 51)';
      Text008@5157807 : TextConst 'DEU=SEPA Zahlung;ENU=SEPA Payment';
      OPplusPaymentSetup@5157813 : Record 5157892;
      Text009@5157816 : TextConst 'DEU=SCHECK;ENU=SCHECK';
      Text010@5157817 : TextConst 'DEU=Zahlung per Scheck;ENU=Payment via Check';
      Text011@5157818 : TextConst 'DEU=GESPERRT;ENU=GESPERRT';
      Text012@5157819 : TextConst 'DEU=Zahlung ist gesperrt;ENU=Payment is blocked';
      Text013@5157825 : TextConst 'DEU=ZAHL-VOR;ENU=PMT-PROP';
      Text014@5157824 : TextConst 'DEU=ZAHL-DAT;ENU=PMT-FILE';
      Text015@5157823 : TextConst 'DEU=Zahlungsvorschlag;ENU=Payment Proposal';
      Text016@5157822 : TextConst 'DEU=Zahldatei;ENU=Payment File';
      Text017@5157821 : TextConst 'DEU=ZV000000;ENU=PP000000';
      Text018@5157820 : TextConst 'DEU=Z000000;ENU=P000000';
      Customer@5157802 : Record 18;
      Vendor@5157811 : Record 23;
      Text019@5157814 : TextConst 'DEU=EUR;ENU=EUR';
      Text020@5157826 : TextConst 'DEU=AUSGL. 1;ENU=AUSGL. 1';
      Text021@5157827 : TextConst 'DEU=AUSGL. 2;ENU=AUSGL. 2';
      Text022@5157829 : TextConst 'DEU=Ausgleich in MW;ENU=Application in LCY';
      Text023@5157828 : TextConst 'DEU=Ausgleich in PostenwÑhrung;ENU=Application in Currency';
      Text024@5157830 : TextConst 'DEU=SEPA-LS;ENU=SEPA-LS';
      Text025@5157831 : TextConst 'DEU=SEPA-Lastschrift (Core);ENU=SEPA-Direct Debit (Core)';
      Text026@5157837 : TextConst 'DEU=SEPA B2B;ENU=SEPA B2B';
      Text027@5157836 : TextConst 'DEU=SEPA-Firmenlastschrift;ENU="SEPA Dir. Deb. B2B "';
      Text030@5157835 : TextConst 'DEU=MANDATE-ID;ENU=MANDATE-ID';
      Text031@5157834 : TextConst 'DEU=Lastschrift-Mandate;ENU=Direct Debit Mandates';
      Text032@5157833 : TextConst 'DEU=LS-000000000;ENU=DD-000000000';
      Text033@5157832 : TextConst 'DEU=Wollen Sie wirklich eine neue Mandatsnummer zuweisen?\Alle Angaben zum alten Mandat wÅrden gelîscht.;ENU=A new mandate ID will be assigned. Are you sure?\All details concering the old mandate will be deleted.';
      Text034@5157838 : TextConst 'DEU=MT103;ENU=MT103';
      Text035@5157839 : TextConst 'DEU=MT103-öberweisung;ENU=MT103 Transmission';
      Text036@5157841 : TextConst 'DEU=MT101;ENU=MT101';
      Text037@5157840 : TextConst 'DEU=MT101-öberweisung;ENU=MT101 Transmission';
      Text038@5157847 : TextConst 'DEU=EUR SCHECK;ENU=EUR SCHECK';
      Text039@5157846 : TextConst 'DEU=EUR Zahlung per Scheck;ENU=EUR Payment via Check';
      Text040@5157815 : TextConst 'DEU=MT104;ENU=MT104';
      Text041@5157812 : TextConst 'DEU=MT104-Lastschrift;ENU=MT104 Direct Debit';
      Text10000@5157843 : TextConst 'DEU=Die Einrichtungsdaten wurden erstellt.;ENU=The setup data have been created.';

    PROCEDURE PmtSetup@5157802();
    VAR
      Text000@5157815 : TextConst 'DEU=Angelegt;ENU=Created';
      Text1000@5157802 : TextConst 'DEU=ZA-ERW;ENU=ZA-ERW';
      Text1001@5157803 : TextConst 'DEU=Erw. Zahlungsausgang;ENU=Ext. Payments';
      SourceCode@5157805 : Record 230;
      GenJnlTemplate@5157804 : Record 80;
      NoSeries@5157808 : Record 308;
      NoSeriesLine@5157809 : Record 309;
      PmtType@5157806 : Record 5157893;
      Text1002@5157811 : TextConst 'DEU=D;ENU=D';
      Text1003@5157810 : TextConst 'DEU=K;ENU=C';
      Text1004@5157812 : TextConst 'DEU=.DTA;ENU=C';
      Text1005@5157813 : TextConst 'DEU=.XML;ENU=.XML';
      Text1006@1000000000 : TextConst 'DEU=SEPA;ENU=SEPA';
      Text1007@1000000001 : TextConst 'DEU=B2B;ENU=B2B';
      Text1008@1000000002 : TextConst 'DEU=CORE;ENU=CORE';
      Text1009@5157814 : TextConst 'DEU=.TXT;ENU=.TXT';
      CustBankAccount@5157816 : Record 287;
      VendBankAccount@5157817 : Record 288;
      OPPLicenseInfo@5157818 : Codeunit 5158000;
    BEGIN
      IF NOT OPplusPaymentSetup.GET THEN BEGIN
        OPplusPaymentSetup.INIT;
        OPplusPaymentSetup."Update Version" := '5.06';
        OPplusPaymentSetup.INSERT;
      END;

      IF OPplusPaymentSetup."Max. Lines in HTML Avis" = 0 THEN BEGIN
        OPplusPaymentSetup."Max. Lines in HTML Avis" := 40;
        OPplusPaymentSetup.MODIFY;
      END;
      IF OPplusPaymentSetup."Pmt. Suggestion No. Series" = '' THEN BEGIN
        OPplusPaymentSetup."Pmt. Suggestion No. Series" := Text013;
        OPplusPaymentSetup.MODIFY;
        NoSeries.Code := Text013;
        NoSeries.Description := Text015;
        NoSeries."Default Nos." := TRUE;
        IF NoSeries.INSERT THEN BEGIN
          NoSeriesLine."Series Code" := Text013;
          NoSeriesLine."Line No." := 10000;
          NoSeriesLine."Starting No." := Text017;
          NoSeriesLine."Last No. Used" := Text017;
          NoSeriesLine.Open := TRUE;
          NoSeriesLine."Increment-by No." := 1;
          IF NoSeriesLine.INSERT THEN;
        END;
      END;
      IF OPplusPaymentSetup."Pmt. File No. Series" = '' THEN BEGIN
        OPplusPaymentSetup."Pmt. File No. Series" := Text014;
        OPplusPaymentSetup.MODIFY;
        NoSeries.Code := Text014;
        NoSeries.Description := Text016;
        NoSeries."Default Nos." := TRUE;
        IF NoSeries.INSERT THEN BEGIN
          NoSeriesLine."Series Code" := Text014;
          NoSeriesLine."Line No." := 10000;
          NoSeriesLine."Starting No." := Text018;
          NoSeriesLine."Last No. Used" := Text018;
          NoSeriesLine.Open := TRUE;
          NoSeriesLine."Increment-by No." := 1;
          IF NoSeriesLine.INSERT THEN;
        END;
      END;
      IF OPplusPaymentSetup."Mandate ID No. Series" = '' THEN BEGIN
        OPplusPaymentSetup."Mandate ID No. Series" := Text030;
        OPplusPaymentSetup.MODIFY;
        NoSeries.Code := Text030;
        NoSeries.Description := Text031;
        NoSeries."Default Nos." := TRUE;
        IF NoSeries.INSERT THEN BEGIN
          NoSeriesLine."Series Code" := Text030;
          NoSeriesLine."Line No." := 10000;
          NoSeriesLine."Starting No." := Text032;
          NoSeriesLine."Last No. Used" := Text032;
          NoSeriesLine.Open := TRUE;
          NoSeriesLine."Increment-by No." := 1;
          IF NoSeriesLine.INSERT THEN;
        END;
      END;

      IF OPplusPaymentSetup."Color Applied Entry" = 0 THEN BEGIN
        OPplusPaymentSetup."Color Applied Entry" := 255;
        OPplusPaymentSetup."Color Local Application" := 32768;
        OPplusPaymentSetup."Color Partial Application" := 16711680;
        OPplusPaymentSetup.MODIFY;
      END;
      IF OPplusPaymentSetup."Update Version" = '' THEN BEGIN
        OPplusPaymentSetup."Update Version" := '5.06';
        IF PmtType.GET(Text001) THEN BEGIN
          PmtType."Pmt. File Path" := OPplusPaymentSetup."Pmt. File Path";
          PmtType."File Supplement" := OPplusPaymentSetup."File Supplement DTAUS";
          PmtType.MODIFY;
        END;
        IF PmtType.GET(Text002) THEN BEGIN
          PmtType."Pmt. File Path" := OPplusPaymentSetup."Pmt. File Path";
          PmtType."File Supplement" := OPplusPaymentSetup."File Supplement DTAUS";
          PmtType.MODIFY;
        END;
        IF PmtType.GET(Text003) THEN BEGIN
          PmtType."Pmt. File Path" := OPplusPaymentSetup."Pmt. File Path";
          PmtType."File Supplement" := OPplusPaymentSetup."File Supplement DTAUS";
          PmtType.MODIFY;
        END;
        IF PmtType.GET(Text004) THEN BEGIN
          PmtType."Pmt. File Path" := OPplusPaymentSetup."Pmt. File Path SEPA";
          PmtType."File Supplement" := OPplusPaymentSetup."File Supplement SEPA";
          PmtType.MODIFY;
        END;
        IF PmtType.GET(Text024) THEN BEGIN
          PmtType."Pmt. File Path" := OPplusPaymentSetup."Pmt. File Path SEPA";
          PmtType."File Supplement" := OPplusPaymentSetup."File Supplement SEPA DD";
          PmtType.MODIFY;
        END;
        IF PmtType.GET(Text026) THEN BEGIN
          PmtType."Pmt. File Path" := OPplusPaymentSetup."Pmt. File Path SEPA";
          PmtType."File Supplement" := OPplusPaymentSetup."File Supplement SEPA DD";
          PmtType.MODIFY;
        END;
        OPplusPaymentSetup."Pmt. File Path SEPA" := '';
        OPplusPaymentSetup."File Supplement DTAUS" := '';
        OPplusPaymentSetup."File Supplement SEPA" := '';
        OPplusPaymentSetup."File Supplement SEPA DD" := '';

        OPplusPaymentSetup."Adj. DD CORE one-off payment" := 6;
        OPplusPaymentSetup."Adj. DD CORE first payment":= 6;
        OPplusPaymentSetup."Adj. DD CORE recurrent payment":= 3;
        OPplusPaymentSetup."Adj. DD B2B" := 2;
        OPplusPaymentSetup."Create Warning for missing BC" := TRUE;
        OPplusPaymentSetup."SEPA Bank Due over Target" := TRUE;
        OPplusPaymentSetup."Payment Avis Report ID" := 5157893;
        OPplusPaymentSetup."Check Report ID" := 5157897;

        OPplusPaymentSetup.MODIFY;

        CustBankAccount.SETFILTER(Address,'%1',Text000 + '*');
        CustBankAccount.MODIFYALL("Inserted by Bank Import",TRUE);
        VendBankAccount.SETFILTER(Address,'%1',Text000 + '*');
        VendBankAccount.MODIFYALL("Inserted by Bank Import",TRUE);

      END;

      IF OPplusPaymentSetup."Update Version" <> '7.02' THEN BEGIN
        CustBankAccount.RESET;
        CustBankAccount.SETFILTER("Mandate ID",'<> %1','');
        IF CustBankAccount.FIND('-') THEN
          REPEAT
            CustBankAccount.MODIFY(TRUE);
          UNTIL CustBankAccount.NEXT = 0;
        VendBankAccount.RESET;
        VendBankAccount.SETFILTER("Mandate ID",'<> %1','');
        IF VendBankAccount.FIND('-') THEN
          REPEAT
            VendBankAccount.MODIFY(TRUE);
          UNTIL VendBankAccount.NEXT = 0;

        OPplusPaymentSetup."Update Version" := '7.02';
        OPplusPaymentSetup.MODIFY;
      END;

      GenJnlTemplate.INIT;
      IF OPPLicenseInfo.IsBasics THEN
        GenJnlTemplate."Application Method" := GenJnlTemplate."Application Method"::Extended
      ELSE
        GenJnlTemplate."Application Method" := GenJnlTemplate."Application Method"::Standard;
      GenJnlTemplate.Name := Text1000;
      GenJnlTemplate.Description := Text1001;
      GenJnlTemplate."Form ID" := FORM::"Ext. Payment Journal";
      GenJnlTemplate.Type := GenJnlTemplate.Type::Payments;
      GenJnlTemplate."Force Doc. Balance" := TRUE;
      GenJnlTemplate."Source Code" := Text1000;
      IF OPPLicenseInfo.IsBasics THEN
        GenJnlTemplate."Test Report ID" := REPORT::"Ext. General Journal - Test"
      ELSE
        GenJnlTemplate."Test Report ID" := REPORT::"General Journal - Test";
      GenJnlTemplate."Posting Report ID" := 3;
      GenJnlTemplate.VALIDATE("Form ID");
      GenJnlTemplate.VALIDATE("Test Report ID");
      GenJnlTemplate.VALIDATE("Posting Report ID");
      IF GenJnlTemplate.INSERT THEN;

      SourceCode.INIT;
      SourceCode.Code := Text1000;
      SourceCode.Description := Text1001;
      IF SourceCode.INSERT THEN;

      // Einzug
      IF NOT PmtType.GET(Text001) THEN
        PmtType.INIT;
      PmtType.Code := Text001;
      PmtType.Description := Text005;
      PmtType."Bank Branch Code required" := TRUE;
      PmtType."Bank Account No. required" := TRUE;
      PmtType."Bank Branch Code Min. Length" := 8;
      PmtType."Bank Branch Code Max. Length" := 8;
      PmtType."Bank Account No. Min. Length" := 2;
      PmtType."Bank Account No. Max. Length" := 10;
      PmtType."BIC Code required" := FALSE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := FALSE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Incoming;
      PmtType."Separate Currency" := FALSE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := TRUE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := Text019;
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := TRUE;
      PmtType."Four Purposes" := FALSE;
      PmtType."SWIFT Code required" := FALSE;
      PmtType."Limit Lines per Head" := 0;
      PmtType."Purposes Lines" := 14;
      PmtType."Purposes Width" := 27;
      IF PmtType."File Supplement" = '' THEN
        PmtType."File Supplement" := Text1004;
      IF PmtType."File Prefix" = '' THEN
        PmtType."File Prefix" := Text1002;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // Abbuchung
      IF NOT PmtType.GET(Text002) THEN
        PmtType.INIT;
      PmtType.Code := Text002;
      PmtType.Description := Text006;
      PmtType."Bank Branch Code required" := TRUE;
      PmtType."Bank Account No. required" := TRUE;
      PmtType."Bank Branch Code Min. Length" := 8;
      PmtType."Bank Branch Code Max. Length" := 8;
      PmtType."Bank Account No. Min. Length" := 2;
      PmtType."Bank Account No. Max. Length" := 10;
      PmtType."BIC Code required" := FALSE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := FALSE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Incoming;
      PmtType."Separate Currency" := FALSE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := TRUE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := Text019;
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := TRUE;
      PmtType."Four Purposes" := FALSE;
      PmtType."SWIFT Code required" := FALSE;
      PmtType."Limit Lines per Head" := 0;
      PmtType."Purposes Lines" := 14;
      PmtType."Purposes Width" := 27;
      IF PmtType."File Supplement" = '' THEN
        PmtType."File Supplement" := Text1004;
      IF PmtType."File Prefix" = '' THEN
        PmtType."File Prefix" := Text1002;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // DTAUS
      IF NOT PmtType.GET(Text003) THEN
        PmtType.INIT;
      PmtType.Code := Text003;
      PmtType.Description := Text007;
      PmtType."Bank Branch Code required" := TRUE;
      PmtType."Bank Account No. required" := TRUE;
      PmtType."Bank Branch Code Min. Length" := 8;
      PmtType."Bank Branch Code Max. Length" := 8;
      PmtType."Bank Account No. Min. Length" := 2;
      PmtType."Bank Account No. Max. Length" := 10;
      PmtType."BIC Code required" := FALSE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := FALSE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Outgoing;
      PmtType."Separate Currency" := FALSE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := TRUE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := Text019;
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := TRUE;
      PmtType."Four Purposes" := FALSE;
      PmtType."SWIFT Code required" := FALSE;
      PmtType."Limit Lines per Head" := 0;
      PmtType."Purposes Lines" := 14;
      PmtType."Purposes Width" := 27;
      IF PmtType."File Supplement" = '' THEN
        PmtType."File Supplement" := Text1004;
      IF PmtType."File Prefix" = '' THEN
        PmtType."File Prefix" := Text1003;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // SEPA
      IF NOT PmtType.GET(Text004) THEN
        PmtType.INIT;
      PmtType.Code := Text004;
      PmtType.Description := Text008;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := TRUE;
      PmtType."IBAN required" := TRUE;
      PmtType."Country/Region Code required" := TRUE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Outgoing;
      PmtType."Separate Currency" := FALSE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := TRUE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := Text019;
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := TRUE;
      PmtType."Four Purposes" := TRUE;
      PmtType."SWIFT Code required" := TRUE;
      PmtType."Limit Lines per Head" := 0;
      PmtType."Purposes Lines" := 4;
      PmtType."Purposes Width" := 35;
      IF PmtType."File Supplement" = '' THEN
        PmtType."File Supplement" := Text1005;
      IF PmtType."File Prefix" = '' THEN
        PmtType."File Prefix" := Text1006;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // SEPA-LS
      IF NOT PmtType.GET(Text024) THEN
        PmtType.INIT;
      PmtType.Code := Text024;
      PmtType.Description := Text025;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := TRUE;
      PmtType."IBAN required" := TRUE;
      PmtType."Country/Region Code required" := TRUE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Incoming;
      PmtType."Separate Currency" := FALSE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := TRUE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := Text019;
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := TRUE;
      PmtType."Four Purposes" := TRUE;
      PmtType."SWIFT Code required" := TRUE;
      PmtType."Limit Lines per Head" := 0;
      PmtType."Purposes Lines" := 4;
      PmtType."Purposes Width" := 35;
      IF PmtType."File Supplement" = '' THEN
        PmtType."File Supplement" := Text1005;
      IF PmtType."File Prefix" = '' THEN
        PmtType."File Prefix" := Text1008;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // SEPA-B2B
      IF NOT PmtType.GET(Text026) THEN
        PmtType.INIT;
      PmtType.Code := Text026;
      PmtType.Description := Text027;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := TRUE;
      PmtType."IBAN required" := TRUE;
      PmtType."Country/Region Code required" := TRUE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Incoming;
      PmtType."Separate Currency" := FALSE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := TRUE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := Text019;
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := TRUE;
      PmtType."Four Purposes" := TRUE;
      PmtType."SWIFT Code required" := TRUE;
      PmtType."Limit Lines per Head" := 0;
      PmtType."Purposes Lines" := 4;
      PmtType."Purposes Width" := 35;
      IF PmtType."File Supplement" = '' THEN
        PmtType."File Supplement" := Text1005;
      IF PmtType."File Prefix" = '' THEN
        PmtType."File Prefix" := Text1007;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // SCHECK
      IF NOT PmtType.GET(Text009) THEN
        PmtType.INIT;
      PmtType.Code := Text009;
      PmtType.Description := Text010;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := FALSE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := FALSE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Outgoing;
      PmtType."Separate Currency" := TRUE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := FALSE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := '';
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := FALSE;
      PmtType."Four Purposes" := FALSE;
      PmtType."SWIFT Code required" := FALSE;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // EUR SCHECK
      IF NOT PmtType.GET(Text038) THEN
        PmtType.INIT;
      PmtType.Code := Text038;
      PmtType.Description := Text039;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := FALSE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := FALSE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Outgoing;
      PmtType."Separate Currency" := FALSE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := TRUE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := Text019;
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := FALSE;
      PmtType."Four Purposes" := FALSE;
      PmtType."SWIFT Code required" := FALSE;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // GESPERRT
      IF NOT PmtType.GET(Text011) THEN
        PmtType.INIT;
      PmtType.Code := Text011;
      PmtType.Description := Text012;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := FALSE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := FALSE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Both;
      PmtType."Application only" := FALSE;
      PmtType."Separate Currency" := FALSE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := FALSE;
      PmtType."Fixed Currency Code" := '';
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := FALSE;
      PmtType."Four Purposes" := FALSE;
      PmtType."SWIFT Code required" := FALSE;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // AUSGL.1
      IF NOT PmtType.GET(Text020) THEN
        PmtType.INIT;
      PmtType.Code := Text020;
      PmtType.Description := Text022;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := FALSE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := FALSE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Both;
      PmtType."Separate Currency" := FALSE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := FALSE;
      PmtType."Application only" := TRUE;
      PmtType."Fixed Currency Code" := '';
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := FALSE;
      PmtType."Four Purposes" := FALSE;
      PmtType."SWIFT Code required" := FALSE;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // AUSGL.2
      IF NOT PmtType.GET(Text021) THEN
        PmtType.INIT;
      PmtType.Code := Text021;
      PmtType.Description := Text023;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := FALSE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := FALSE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Both;
      PmtType."Separate Currency" := TRUE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := FALSE;
      PmtType."Application only" := TRUE;
      PmtType."Fixed Currency Code" := '';
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := FALSE;
      PmtType."Four Purposes" := FALSE;
      PmtType."SWIFT Code required" := FALSE;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // MT104:
      IF NOT PmtType.GET(Text040) THEN
        PmtType.INIT;
      PmtType.Code := Text040;
      PmtType.Description := Text041;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := TRUE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := TRUE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Incoming;
      PmtType."Separate Currency" := TRUE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := FALSE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := '';
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := TRUE;
      PmtType."Four Purposes" := TRUE;
      PmtType."SWIFT Code required" := FALSE;
      PmtType."Limit Lines per Head" := 0;
      PmtType."Purposes Lines" := 4;
      PmtType."Purposes Width" := 35;
      IF PmtType."File Supplement" = '' THEN
        PmtType."File Supplement" := Text1009;
      IF PmtType."File Prefix" = '' THEN
        PmtType."File Prefix" := Text040;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // MT103:
      IF NOT PmtType.GET(Text034) THEN
        PmtType.INIT;
      PmtType.Code := Text034;
      PmtType.Description := Text035;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := TRUE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := TRUE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Outgoing;
      PmtType."Separate Currency" := TRUE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := FALSE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := '';
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := TRUE;
      PmtType."Four Purposes" := TRUE;
      PmtType."SWIFT Code required" := FALSE;
      PmtType."Limit Lines per Head" := 0;
      PmtType."Purposes Lines" := 4;
      PmtType."Purposes Width" := 35;
      IF PmtType."File Supplement" = '' THEN
        PmtType."File Supplement" := Text1009;
      IF PmtType."File Prefix" = '' THEN
        PmtType."File Prefix" := Text034;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;

      // MT101:
      IF NOT PmtType.GET(Text036) THEN
        PmtType.INIT;
      PmtType.Code := Text036;
      PmtType.Description := Text037;
      PmtType."Bank Branch Code required" := FALSE;
      PmtType."Bank Account No. required" := FALSE;
      PmtType."Bank Branch Code Min. Length" := 0;
      PmtType."Bank Branch Code Max. Length" := 0;
      PmtType."Bank Account No. Min. Length" := 0;
      PmtType."Bank Account No. Max. Length" := 0;
      PmtType."BIC Code required" := TRUE;
      PmtType."IBAN required" := FALSE;
      PmtType."Country/Region Code required" := TRUE;
      PmtType."Payment Direction" := PmtType."Payment Direction"::Outgoing;
      PmtType."Separate Currency" := TRUE;
      PmtType."Fees allowed" := FALSE;
      PmtType."EUR Payment" := FALSE;
      PmtType."Application only" := FALSE;
      PmtType."Fixed Currency Code" := '';
      PmtType."Country/Region Code" := '';
      PmtType."No Settling" := FALSE;
      PmtType."Create File" := TRUE;
      PmtType."Four Purposes" := TRUE;
      PmtType."SWIFT Code required" := FALSE;
      PmtType."Limit Lines per Head" := 0;
      PmtType."Purposes Lines" := 4;
      PmtType."Purposes Width" := 35;
      IF PmtType."File Supplement" = '' THEN
        PmtType."File Supplement" := Text1009;
      IF PmtType."File Prefix" = '' THEN
        PmtType."File Prefix" := Text036;
      IF NOT PmtType.INSERT THEN
        PmtType.MODIFY;


      MESSAGE(Text10000);
    END;

    PROCEDURE OnDrillDownPmtLines@5157803(VAR PmtHeader@5157802 : Record 5157895;Filtercode@5157804 : Text[30]);
    VAR
      PaymentProposalLine@5157803 : Record 5157896;
      Lookup@5157805 : Form 5157895;
      ModifyPaymentSuggestions@5157807 : Form 5157896;
    BEGIN
      PaymentProposalLine.RESET;
      PaymentProposalLine.SETRANGE("Gen. Journal Template",PmtHeader."Journal Template Name");
      PaymentProposalLine.SETRANGE("Gen. Journal Batch",PmtHeader."Journal Batch Name");
      IF Filtercode = '#' THEN
        PaymentProposalLine.SETFILTER("Payment Type Code",'')
      ELSE
        PaymentProposalLine.SETFILTER("Payment Type Code",Filtercode);

      Lookup.SETTABLEVIEW(PaymentProposalLine);
      Lookup.SETRECORD(PaymentProposalLine);
      Lookup.LOOKUPMODE(TRUE);
      IF Lookup.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Lookup.GETRECORD(PaymentProposalLine);
        ModifyPaymentSuggestions.SETTABLEVIEW(PaymentProposalLine);
        ModifyPaymentSuggestions.SETRECORD(PaymentProposalLine);
        ModifyPaymentSuggestions.RUNMODAL;
      END;
      CLEAR(Lookup);
    END;

    PROCEDURE GetBlocked@5157804() : Code[10];
    BEGIN
      EXIT(Text011);
    END;

    PROCEDURE GetSepa@5157805() : Code[10];
    BEGIN
      EXIT(Text004);
    END;

    PROCEDURE GetSepaDD@5157823() : Code[10];
    BEGIN
      EXIT(Text024);
    END;

    PROCEDURE GetSepaB2B@1000000003() : Code[10];
    BEGIN
      EXIT(Text026);
    END;

    PROCEDURE GetTX04@5157806() : Code[10];
    BEGIN
      EXIT(Text002);
    END;

    PROCEDURE GetTX05@5157808() : Code[10];
    BEGIN
      EXIT(Text001);
    END;

    PROCEDURE GetTX51@5157807() : Code[10];
    BEGIN
      EXIT(Text003);
    END;

    PROCEDURE GetCheck@5157809() : Code[10];
    BEGIN
      EXIT(Text009);
    END;

    PROCEDURE GetEURCheck@5157834() : Code[10];
    BEGIN
      EXIT(Text038);
    END;

    PROCEDURE GetApplic1@5157818() : Code[10];
    BEGIN
      EXIT(Text020);
    END;

    PROCEDURE GetApplic2@5157819() : Code[10];
    BEGIN
      EXIT(Text021);
    END;

    PROCEDURE GetMT101@5157828() : Code[10];
    BEGIN
      EXIT(Text036);
    END;

    PROCEDURE GetMT103@5157826() : Code[10];
    BEGIN
      EXIT(Text034);
    END;

    PROCEDURE GetMT104@5157843() : Code[10];
    BEGIN
      EXIT(Text040);
    END;

    PROCEDURE FillZeroBeforeText@15(Text@1000 : Text[50];Length@1001 : Integer) : Text[50];
    BEGIN
      IF STRLEN(Text) > Length THEN
        EXIT(Text);
      EXIT(COPYSTR('000000000000000000000000000000000000000000000000000',1,Length - STRLEN(Text)) + Text);
    END;

    PROCEDURE Left_String@1000000000(Text@5157803 : Text[50];Length@5157802 : Integer) OutStr : Text[50];
    BEGIN
      IF Length >= STRLEN(Text) THEN BEGIN
        OutStr := Text;
        EXIT(OutStr);
      END;
      OutStr := COPYSTR(Text,STRLEN(Text) - Length + 1);
    END;

    PROCEDURE DTAUS_String@13(InStr@1000 : Text[250];TargetLength@5157803 : Integer) OutStr : Text[250];
    VAR
      Length@1003 : Integer;
      n@1002 : Integer;
      Dummy@5157802 : Text[30];
    BEGIN
      // UngÅltige DTAUS Zeichen werden durch Blank ersetzt!
      OutStr := '';
      InStr := CONVERTSTR(InStr,'Ü†ÖÉÇäà°çå¢ïì£óñµ∑∂èê‘“÷ﬁ◊‡„‚ÈÎÍ','aaaaeeeiiiooouuuAAAAEEEIIIOOOUUU');
      Length := STRLEN(InStr);

      FOR n := 1 TO Length DO BEGIN
        Dummy := COPYSTR(InStr,n,1);
        IF STRPOS(' 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,-+*%/&$',Dummy) > 0 THEN
          OutStr := OutStr + Dummy
        ELSE IF STRPOS('é',Dummy) > 0 THEN
          OutStr := OutStr + 'AE'
        ELSE IF STRPOS('Ñ',Dummy) > 0 THEN
          OutStr := OutStr + 'ae'
        ELSE IF STRPOS('ô',Dummy) > 0 THEN
          OutStr := OutStr + 'OE'
        ELSE IF STRPOS('î',Dummy) > 0 THEN
          OutStr := OutStr + 'oe'
        ELSE IF STRPOS('ö',Dummy) > 0 THEN
          OutStr := OutStr + 'UE'
        ELSE IF STRPOS('Å',Dummy) > 0 THEN
          OutStr := OutStr + 'ue'
        ELSE IF STRPOS('·',Dummy) > 0 THEN
          OutStr := OutStr + 'ss'
        ELSE
          OutStr := OutStr + ' ';
      END;
      OutStr := UPPERCASE(PADSTR(OutStr,TargetLength));
      EXIT(OutStr)
    END;

    PROCEDURE Clean_Number@14(InStr@1001 : Code[50]) OutStr@1000 : Code[50];
    VAR
      Length@1004 : Integer;
      n@1003 : Integer;
    BEGIN
      OutStr := '';
      Length := STRLEN(InStr);
      FOR n := 1 TO Length DO
        IF STRPOS('0123456789',COPYSTR(InStr,n,1)) > 0 THEN
          OutStr := OutStr + COPYSTR(InStr,n,1);
      EXIT(OutStr)
    END;

    PROCEDURE SEPA_String@5157813(InStr@1000 : Text[250]) OutStr : Text[250];
    VAR
      Length@1003 : Integer;
      n@1002 : Integer;
      Dummy@5157802 : Text[30];
    BEGIN
      // UngÅltige SEPA Zeichen werden durch Blank ersetzt!
      OutStr := '';
      InStr := CONVERTSTR(InStr,'Ü†ÖÉÇäà°çå¢ïì£óñµ∑∂èê‘“÷ﬁ◊‡„‚ÈÎÍ','aaaaeeeiiiooouuuAAAAEEEIIIOOOUUU');
      Length := STRLEN(InStr);

      FOR n := 1 TO Length DO BEGIN
        Dummy := COPYSTR(InStr,n,1);
        IF STRPOS(' 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz/-?().,+',Dummy) > 0 THEN
          OutStr := OutStr + Dummy
        ELSE IF STRPOS('é',Dummy) > 0 THEN
          OutStr := OutStr + 'AE'
        ELSE IF STRPOS('Ñ',Dummy) > 0 THEN
          OutStr := OutStr + 'ae'
        ELSE IF STRPOS('ô',Dummy) > 0 THEN
          OutStr := OutStr + 'OE'
        ELSE IF STRPOS('î',Dummy) > 0 THEN
          OutStr := OutStr + 'oe'
        ELSE IF STRPOS('ö',Dummy) > 0 THEN
          OutStr := OutStr + 'UE'
        ELSE IF STRPOS('Å',Dummy) > 0 THEN
          OutStr := OutStr + 'ue'
        ELSE IF STRPOS('·',Dummy) > 0 THEN
          OutStr := OutStr + 'ss'
        ELSE
          OutStr := OutStr + ' ';
      END;

      EXIT(OutStr)
    END;

    PROCEDURE PostPmtExtended@5157812(VAR GenJnlLine@5157802 : Record 81;NextEntryNo@1000000000 : Integer;NextTransactionNo@1000000002 : Integer);
    VAR
      PmtProposal@5157803 : Record 5157895;
      BankAccount@5157804 : Record 270;
      PIPEntry@1000000001 : Record 5157914;
      CurrExchRate@5157805 : Record 330;
      PaymentLine@5157808 : Record 5157897;
      AppLineDetail@5157807 : Record 5157804;
      OPPLicenseInfo@5157806 : Codeunit 5158000;
    BEGIN
      IF GenJnlLine."Payment in Process" THEN BEGIN
        PmtProposal.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
        IF (GenJnlLine."PIP Account Type" > 0) AND
           (PmtProposal."Bal. Account Type" = PmtProposal."Bal. Account Type"::"Bank Account")
        THEN BEGIN
          BankAccount.GET(PmtProposal."Bal. Account No.");
          PIPEntry.INIT;
          PIPEntry."Entry No." := NextEntryNo;
          PIPEntry."Transaction No." := NextTransactionNo;
          PIPEntry."Bank Account No." := PmtProposal."Bal. Account No.";
          PIPEntry."Posting Date" := GenJnlLine."Posting Date";
          PIPEntry."Document Type" := GenJnlLine."Document Type";
          PIPEntry."Document No." := GenJnlLine."Document No.";
          PIPEntry.Description := GenJnlLine.Description;
          PIPEntry."Currency Code" := GenJnlLine."Currency Code";
          PIPEntry."Bank Currency Code" := BankAccount."Currency Code";
          IF GenJnlLine."PIP Account Type" = GenJnlLine."PIP Account Type"::Account THEN BEGIN
            PIPEntry."Account Type" := GenJnlLine."Account Type";
            PIPEntry."Account No." := GenJnlLine."Account No.";
            PIPEntry.Amount := GenJnlLine.Amount;
            PIPEntry."Additional-Currency Amount" := 0;
            PIPEntry."Amount (LCY)" := GenJnlLine."Amount (LCY)";
          END ELSE BEGIN
            PIPEntry."Account Type" := GenJnlLine."Bal. Account Type";
            PIPEntry."Account No." := GenJnlLine."Bal. Account No.";
            PIPEntry.Amount := -GenJnlLine.Amount;
            PIPEntry."Additional-Currency Amount" := 0;
            PIPEntry."Amount (LCY)" := -GenJnlLine."Amount (LCY)";
          END;
          PIPEntry."Bank Amount" := CurrExchRate.ExchangeAmtFCYToFCY(GenJnlLine."Posting Date",
            PIPEntry."Currency Code",PIPEntry."Bank Currency Code",PIPEntry.Amount);
          PIPEntry."User ID" := USERID;
          PIPEntry.Open := TRUE;
          PIPEntry.Positive := PIPEntry.Amount > 0;
          PIPEntry."Reason Code" := GenJnlLine."Reason Code";
          PIPEntry."Document Date" := GenJnlLine."Document Date";
          PIPEntry."Gen. Journal Template" := GenJnlLine."Journal Template Name";
          PIPEntry."Gen. Journal Batch" := GenJnlLine."Journal Batch Name";
          PIPEntry.INSERT;
        END;
      END;

      IF PmtProposal.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name") THEN
        IF PmtProposal.Status <> PmtProposal.Status::Posted THEN BEGIN
          PmtProposal.Status := PmtProposal.Status::Posted;
          PmtProposal.MODIFY(TRUE);
          IF OPPLicenseInfo.IsBasics THEN BEGIN
            AppLineDetail.RESET;
            AppLineDetail.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
            AppLineDetail.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
            IF NOT AppLineDetail.ISEMPTY THEN
              AppLineDetail.DELETEALL;
          END;

          PaymentLine.RESET;
          PaymentLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
          PaymentLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
          PaymentLine.SETRANGE("Posting Payment Discount",0);
          PaymentLine.SETRANGE("Posting Applied Amount",0);
          IF NOT PaymentLine.ISEMPTY THEN
            PaymentLine.DELETEALL;
        END;
    END;

    PROCEDURE UpdateGenJnlLine@5157842(VAR GenJnlLine@5157802 : Record 81;PmtMethodCode@5157803 : Code[10];PmtBankCode@5157804 : Code[10]);
    BEGIN
      GenJnlLine."Payment Method Code" := PmtMethodCode;
      GenJnlLine."Payment Bank Code" := PmtBankCode;
    END;

    PROCEDURE UpdateCLEntry@5157814(VAR CLEntry@5157803 : Record 21;GenJnlLine@5157802 : Record 81);
    VAR
      CurrExchRate@5157806 : Record 330;
      SinglePmtBankAccount@5157805 : Record 5157900;
      SinglePmtBankAccount2@5157804 : Record 5157900;
    BEGIN
      CLEntry."Original Pmt. Discount %" := GenJnlLine."Payment Discount %";
      IF CLEntry."Currency Code" = '' THEN
        CLEntry."Orig. Pmt. Disc.Possible (LCY)" := CLEntry."Original Pmt. Disc. Possible"
      ELSE
        CLEntry."Orig. Pmt. Disc.Possible (LCY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              CLEntry."Posting Date",CLEntry."Currency Code",CLEntry."Original Pmt. Disc. Possible",
              CurrExchRate.ExchangeRate(CLEntry."Posting Date",CLEntry."Currency Code")));
      CLEntry."Payment Method Code" := GenJnlLine."Payment Method Code";
      CLEntry."Payment Bank Code" := GenJnlLine."Payment Bank Code";
      CLEntry."Mandate ID" := GenJnlLine."Mandate ID";
      IF SinglePmtBankAccount.GET(SinglePmtBankAccount."Account Type"::Customer,0,
        GenJnlLine."Journal Template Name",
        GenJnlLine."Journal Batch Name",
        GenJnlLine."Line No.",
        GenJnlLine."Document Type",
        GenJnlLine."Document No.")
      THEN BEGIN
        SinglePmtBankAccount2 := SinglePmtBankAccount;
        SinglePmtBankAccount.DELETE;
        SinglePmtBankAccount2.VALIDATE("Entry No.",CLEntry."Entry No.");
        SinglePmtBankAccount2."Journal Template Name" := '';
        SinglePmtBankAccount2."Journal Batch Name" := '';
        SinglePmtBankAccount2."Line No." := 0;
        SinglePmtBankAccount2.INSERT;
      END;
    END;

    PROCEDURE UpdateVLEntry@5157815(VAR VLEntry@5157803 : Record 25;GenJnlLine@5157802 : Record 81);
    VAR
      CurrExchRate@5157806 : Record 330;
      SinglePmtBankAccount@5157805 : Record 5157900;
      SinglePmtBankAccount2@5157804 : Record 5157900;
    BEGIN
      VLEntry."Original Pmt. Discount %" := GenJnlLine."Payment Discount %";
      IF VLEntry."Currency Code" = '' THEN
        VLEntry."Orig. Pmt. Disc.Possible (LCY)" := VLEntry."Original Pmt. Disc. Possible"
      ELSE
        VLEntry."Orig. Pmt. Disc.Possible (LCY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              VLEntry."Posting Date",VLEntry."Currency Code",VLEntry."Original Pmt. Disc. Possible",
              CurrExchRate.ExchangeRate(VLEntry."Posting Date",VLEntry."Currency Code")));
      VLEntry."Payment Method Code" := GenJnlLine."Payment Method Code";
      VLEntry."Payment Bank Code" := GenJnlLine."Payment Bank Code";
      VLEntry."Mandate ID" := GenJnlLine."Mandate ID";
      IF SinglePmtBankAccount.GET(SinglePmtBankAccount."Account Type"::Vendor,0,
        GenJnlLine."Journal Template Name",
        GenJnlLine."Journal Batch Name",
        GenJnlLine."Line No.",
        GenJnlLine."Document Type",
        GenJnlLine."Document No.")
      THEN BEGIN
        SinglePmtBankAccount2 := SinglePmtBankAccount;
        SinglePmtBankAccount.DELETE;
        SinglePmtBankAccount2.VALIDATE("Entry No.",VLEntry."Entry No.");
        SinglePmtBankAccount2."Journal Template Name" := '';
        SinglePmtBankAccount2."Journal Batch Name" := '';
        SinglePmtBankAccount2."Line No." := 0;
        SinglePmtBankAccount2.INSERT;
      END;
    END;

    PROCEDURE UpdateGenJnlLineFromSales@5157810(VAR GenJnlLine@5157802 : Record 81;SalesHeader@5157803 : Record 36);
    BEGIN
      GenJnlLine."Payment Method Code" := SalesHeader."Payment Method Code";
      GenJnlLine."Payment Bank Code" := SalesHeader."Payment Bank Code";
      GenJnlLine."Mandate ID" := SalesHeader."Mandate ID";
    END;

    PROCEDURE UpdateGenJnlLineFromPurchase@5157811(VAR GenJnlLine@5157802 : Record 81;PurchaseHeader@5157803 : Record 38);
    BEGIN
      GenJnlLine."Payment Method Code" := PurchaseHeader."Payment Method Code";
      GenJnlLine."Payment Bank Code" := PurchaseHeader."Payment Bank Code";
      GenJnlLine."Mandate ID" := PurchaseHeader."Mandate ID";
    END;

    PROCEDURE UpdateGenJnlLineFromService@5157845(VAR GenJnlLine@5157802 : Record 81;ServiceHeader@5157803 : Record 5900);
    BEGIN
      GenJnlLine."Payment Method Code" := ServiceHeader."Payment Method Code";
      GenJnlLine."Payment Bank Code" := ServiceHeader."Payment Bank Code";
      GenJnlLine."Mandate ID" := ServiceHeader."Mandate ID";
    END;

    PROCEDURE UpdateSalesHeader@5157817(SalesHeader@5157803 : Record 36;GenJnlLine@5157802 : Record 81;EverythingInvoiced@5157806 : Boolean);
    VAR
      SinglePmtBankAccount@5157805 : Record 5157900;
      SinglePmtBankAccount2@5157804 : Record 5157900;
    BEGIN
      IF SinglePmtBankAccount.GET(SinglePmtBankAccount."Account Type"::Customer,0,'','',0,
        SalesHeader."Document Type",
        SalesHeader."No.")
      THEN BEGIN
        SinglePmtBankAccount2 := SinglePmtBankAccount;
        IF EverythingInvoiced THEN
          SinglePmtBankAccount.DELETE;
        SinglePmtBankAccount2."Document No." := GenJnlLine."Document No.";
        SinglePmtBankAccount2."Document Type" := GenJnlLine."Document Type";
        IF SinglePmtBankAccount2.INSERT THEN;
      END;
    END;

    PROCEDURE UpdatePurchHeader@5157816(PurchHeader@5157803 : Record 38;GenJnlLine@5157802 : Record 81;EverythingInvoiced@5157806 : Boolean);
    VAR
      SinglePmtBankAccount@5157805 : Record 5157900;
      SinglePmtBankAccount2@5157804 : Record 5157900;
    BEGIN
      IF SinglePmtBankAccount.GET(SinglePmtBankAccount."Account Type"::Vendor,0,'','',0,
        PurchHeader."Document Type",
        PurchHeader."No.")
      THEN BEGIN
        SinglePmtBankAccount2 := SinglePmtBankAccount;
        IF EverythingInvoiced THEN
          SinglePmtBankAccount.DELETE;
        SinglePmtBankAccount2."Document No." := GenJnlLine."Document No.";
        SinglePmtBankAccount2."Document Type" := GenJnlLine."Document Type";
        IF SinglePmtBankAccount2.INSERT THEN;
      END;
    END;

    PROCEDURE GetSinglePmtFromJnlLine@5157892(GenJnlLine@5157894 : Record 81);
    VAR
      SinglePmtBankAccount@5157893 : Record 5157900;
      SinglePmt@5157892 : Form 5157904;
      Text001@5157803 : TextConst 'DEU=%1 oder %2 muss Debitor oder Kreditor sein.;ENU=The %1 or %2 must be Customer or Vendor.';
      Text002@5157802 : TextConst 'DEU=Wollen Sie fÅr %1 %2 %3 %4 eine %5 anlegen?;ENU=Do you want to create a %3 for %1 %2?';
    BEGIN
      SinglePmtBankAccount.RESET;

      IF GenJnlLine."Applied Account Type" = GenJnlLine."Applied Account Type"::Customer THEN BEGIN
        IF Customer."No." <> GenJnlLine."Applied Account No." THEN
          Customer.GET(GenJnlLine."Applied Account No.");
      END ELSE IF GenJnlLine."Applied Account Type" = GenJnlLine."Applied Account Type"::Vendor THEN BEGIN
        IF Vendor."No." <> GenJnlLine."Applied Account No." THEN
          Vendor.GET(GenJnlLine."Applied Account No.");
      END ELSE
        ERROR(Text001,GenJnlLine.FIELDCAPTION("Account Type"),GenJnlLine.FIELDCAPTION("Bal. Account Type"));

      IF NOT SinglePmtBankAccount.GET(
        GenJnlLine."Applied Account Type",0,
        GenJnlLine."Journal Template Name",
        GenJnlLine."Journal Batch Name",
        GenJnlLine."Line No.",
        GenJnlLine."Document Type",
        GenJnlLine."Document No.")
      THEN BEGIN
        IF NOT CONFIRM(Text002,FALSE,
          GenJnlLine."Account Type",
          GenJnlLine."Account No.",
          GenJnlLine."Document Type",
          GenJnlLine."Document No.",
          SinglePmtBankAccount.TABLECAPTION)
        THEN
          EXIT;
        SinglePmtBankAccount.INIT;
        SinglePmtBankAccount."Account Type" := GenJnlLine."Applied Account Type";
        SinglePmtBankAccount."Entry No." := 0;
        SinglePmtBankAccount."Journal Template Name" := GenJnlLine."Journal Template Name";
        SinglePmtBankAccount."Journal Batch Name" := GenJnlLine."Journal Batch Name";
        IF GenJnlLine."Applied Account Type" = GenJnlLine."Applied Account Type"::Customer THEN BEGIN
          SinglePmtBankAccount.Name := Customer.Name;
          SinglePmtBankAccount."Name 2" := Customer."Name 2";
          SinglePmtBankAccount.Address := Customer.Address;
          SinglePmtBankAccount."Address 2" := Customer."Address 2";
          SinglePmtBankAccount.City := Customer.City;
          SinglePmtBankAccount."Post Code" := Customer."Post Code";
          SinglePmtBankAccount."Country/Region Code" := Customer."Country/Region Code";
        END ELSE IF GenJnlLine."Applied Account Type" = GenJnlLine."Applied Account Type"::Vendor THEN BEGIN
          SinglePmtBankAccount.Name := Vendor.Name;
          SinglePmtBankAccount."Name 2" := Vendor."Name 2";
          SinglePmtBankAccount.Address := Vendor.Address;
          SinglePmtBankAccount."Address 2" := Vendor."Address 2";
          SinglePmtBankAccount.City := Vendor.City;
          SinglePmtBankAccount."Post Code" := Vendor."Post Code";
          SinglePmtBankAccount."Country/Region Code" := Vendor."Country/Region Code";
        END;
        SinglePmtBankAccount."Line No." := GenJnlLine."Line No.";
        SinglePmtBankAccount."Account No." := GenJnlLine."Applied Account No.";
        SinglePmtBankAccount."Posting Date" := GenJnlLine."Posting Date";
        SinglePmtBankAccount."Document Type" := GenJnlLine."Document Type";
        SinglePmtBankAccount."Document No." := GenJnlLine."Document No.";
        SinglePmtBankAccount.INSERT;
        COMMIT;
      END;

      SinglePmtBankAccount.SETRECFILTER;
      SinglePmt.SETTABLEVIEW(SinglePmtBankAccount);
      SinglePmt.RUNMODAL;
      CLEAR(SinglePmt);
    END;

    PROCEDURE GetSinglePmtFromCustEntry@5157893(CustEntry@5157892 : Record 21);
    VAR
      SinglePmtBankAccount@5157895 : Record 5157900;
      SinglePmt@5157894 : Form 5157904;
      Text001@5157896 : TextConst 'DEU=Wollen Sie fÅr %1 %2 eine %3 anlegen?;ENU=Do you want to create a %3 for %1 %2?';
    BEGIN
      CustEntry.TESTFIELD(Open,TRUE);
      SinglePmtBankAccount.RESET;
      IF Customer."No." <> CustEntry."Customer No." THEN
        Customer.GET(CustEntry."Customer No.");
      IF NOT SinglePmtBankAccount.GET(
        SinglePmtBankAccount."Account Type"::Customer,
        CustEntry."Entry No.",'','',0,
        CustEntry."Document Type",CustEntry."Document No.")
      THEN
        IF NOT CONFIRM(Text001,FALSE,CustEntry.TABLECAPTION,CustEntry."Entry No.",SinglePmtBankAccount.TABLECAPTION) THEN
          EXIT
        ELSE BEGIN
          SinglePmtBankAccount.INIT;
          SinglePmtBankAccount."Account Type" := SinglePmtBankAccount."Account Type"::Customer;
          SinglePmtBankAccount."Entry No." := CustEntry."Entry No.";
          SinglePmtBankAccount."Account No." := CustEntry."Customer No.";
          SinglePmtBankAccount."Posting Date" := CustEntry."Posting Date";
          SinglePmtBankAccount."Document Type" := CustEntry."Document Type";
          SinglePmtBankAccount."Document No." := CustEntry."Document No.";
          SinglePmtBankAccount.Name := Customer.Name;
          SinglePmtBankAccount."Name 2" := Customer."Name 2";
          SinglePmtBankAccount.Address := Customer.Address;
          SinglePmtBankAccount."Address 2" := Customer."Address 2";
          SinglePmtBankAccount.City := Customer.City;
          SinglePmtBankAccount."Post Code" := Customer."Post Code";
          SinglePmtBankAccount."Country/Region Code" := Customer."Country/Region Code";
          SinglePmtBankAccount.INSERT;
          COMMIT;
        END;

      SinglePmtBankAccount.SETRECFILTER;
      SinglePmt.SETTABLEVIEW(SinglePmtBankAccount);
      SinglePmt.RUNMODAL;
      CLEAR(SinglePmt);
    END;

    PROCEDURE GetSinglePmtFromVendEntry@5157894(VendEntry@5157892 : Record 25);
    VAR
      SinglePmtBankAccount@5157895 : Record 5157900;
      SinglePmt@5157894 : Form 5157904;
      Text001@5157896 : TextConst 'DEU=Wollen Sie fÅr %1 %2 eine %3 anlegen?;ENU=Do you want to create a %3 for %1 %2?';
    BEGIN
      VendEntry.TESTFIELD(Open,TRUE);
      SinglePmtBankAccount.RESET;
      IF Vendor."No." <> VendEntry."Vendor No." THEN
        Vendor.GET(VendEntry."Vendor No.");
      IF NOT SinglePmtBankAccount.GET(
        SinglePmtBankAccount."Account Type"::Vendor,VendEntry."Entry No.",'','',0,
        VendEntry."Document Type",VendEntry."Document No.")
      THEN
        IF NOT CONFIRM(Text001,FALSE,VendEntry.TABLECAPTION,VendEntry."Entry No.",SinglePmtBankAccount.TABLECAPTION) THEN
          EXIT
        ELSE BEGIN
          SinglePmtBankAccount.INIT;
          SinglePmtBankAccount."Account Type" := SinglePmtBankAccount."Account Type"::Vendor;
          SinglePmtBankAccount."Entry No." := VendEntry."Entry No.";
          SinglePmtBankAccount."Account No." := VendEntry."Vendor No.";
          SinglePmtBankAccount."Posting Date" := VendEntry."Posting Date";
          SinglePmtBankAccount."Document Type" := VendEntry."Document Type";
          SinglePmtBankAccount."Document No." := VendEntry."Document No.";
          SinglePmtBankAccount.Name := Vendor.Name;
          SinglePmtBankAccount."Name 2" := Vendor."Name 2";
          SinglePmtBankAccount.Address := Vendor.Address;
          SinglePmtBankAccount."Address 2" := Vendor."Address 2";
          SinglePmtBankAccount.City := Vendor.City;
          SinglePmtBankAccount."Post Code" := Vendor."Post Code";
          SinglePmtBankAccount."Country/Region Code" := Vendor."Country/Region Code";
          SinglePmtBankAccount.INSERT;
          COMMIT;
        END;

      SinglePmtBankAccount.SETRECFILTER;
      SinglePmt.SETTABLEVIEW(SinglePmtBankAccount);
      SinglePmt.RUNMODAL;
      CLEAR(SinglePmt);
    END;

    PROCEDURE GetSinglePmtFromSalesHeader@5157820(SalesHeader@5157892 : Record 36);
    VAR
      SinglePmtBankAccount@5157895 : Record 5157900;
      SinglePmt@5157894 : Form 5157904;
      Text001@5157896 : TextConst 'DEU=Wollen Sie fÅr %1 %2 %3 eine %4 anlegen?;ENU=Do you want to create a %4 for %1 %2 %3?';
    BEGIN
      SinglePmtBankAccount.RESET;
      IF NOT SinglePmtBankAccount.GET(
        SinglePmtBankAccount."Account Type"::Customer,0,'','',0,
        SalesHeader."Document Type",SalesHeader."No.")
      THEN
        IF NOT CONFIRM(Text001,FALSE,SalesHeader.TABLECAPTION,
          SalesHeader."Document Type",SalesHeader."No.",SinglePmtBankAccount.TABLECAPTION)
        THEN
          EXIT
        ELSE BEGIN
          SinglePmtBankAccount.INIT;
          SinglePmtBankAccount."Account Type" := SinglePmtBankAccount."Account Type"::Customer;
          SinglePmtBankAccount."Entry No." := 0;
          SinglePmtBankAccount."Account No." := SalesHeader."Bill-to Customer No.";
          SinglePmtBankAccount."Posting Date" := SalesHeader."Posting Date";
          SinglePmtBankAccount."Document Type" := SalesHeader."Document Type";
          SinglePmtBankAccount."Document No." := SalesHeader."No.";
          SinglePmtBankAccount.Name := SalesHeader."Bill-to Name";
          SinglePmtBankAccount."Name 2" := SalesHeader."Bill-to Name 2";
          SinglePmtBankAccount.Address := SalesHeader."Bill-to Address";
          SinglePmtBankAccount."Address 2" := SalesHeader."Bill-to Address 2";
          SinglePmtBankAccount.City := SalesHeader."Bill-to City";
          SinglePmtBankAccount."Post Code" := SalesHeader."Bill-to Post Code";
          SinglePmtBankAccount."Country/Region Code" := SalesHeader."Bill-to Country/Region Code";
          SinglePmtBankAccount.INSERT;
          COMMIT;
        END;

      SinglePmtBankAccount.SETRECFILTER;
      SinglePmt.SETTABLEVIEW(SinglePmtBankAccount);
      SinglePmt.RUNMODAL;
      CLEAR(SinglePmt);
    END;

    PROCEDURE GetSinglePmtFromPurchHeader@5157821(PurchHeader@5157892 : Record 38);
    VAR
      SinglePmtBankAccount@5157895 : Record 5157900;
      SinglePmt@5157894 : Form 5157904;
      Text001@5157802 : TextConst 'DEU=Wollen Sie fÅr %1 %2 %3 eine %4 anlegen?;ENU=Do you want to create a %4 for %1 %2 %3?';
    BEGIN
      SinglePmtBankAccount.RESET;
      IF NOT SinglePmtBankAccount.GET(
        SinglePmtBankAccount."Account Type"::Vendor,0,'','',0,
        PurchHeader."Document Type",PurchHeader."No.")
      THEN
        IF NOT CONFIRM(Text001,FALSE,PurchHeader.TABLECAPTION,
          PurchHeader."Document Type",PurchHeader."No.",SinglePmtBankAccount.TABLECAPTION)
        THEN
          EXIT
        ELSE BEGIN
          SinglePmtBankAccount.INIT;
          SinglePmtBankAccount."Account Type" := SinglePmtBankAccount."Account Type"::Vendor;
          SinglePmtBankAccount."Entry No." := 0;
          SinglePmtBankAccount."Account No." := PurchHeader."Pay-to Vendor No.";
          SinglePmtBankAccount."Posting Date" := PurchHeader."Posting Date";
          SinglePmtBankAccount."Document Type" := PurchHeader."Document Type";
          SinglePmtBankAccount."Document No." := PurchHeader."No.";
          SinglePmtBankAccount.Name := PurchHeader."Pay-to Name";
          SinglePmtBankAccount."Name 2" := PurchHeader."Pay-to Name 2";
          SinglePmtBankAccount.Address := PurchHeader."Pay-to Address";
          SinglePmtBankAccount."Address 2" := PurchHeader."Pay-to Address 2";
          SinglePmtBankAccount.City := PurchHeader."Pay-to City";
          SinglePmtBankAccount."Post Code" := PurchHeader."Pay-to Post Code";
          SinglePmtBankAccount."Country/Region Code" := PurchHeader."Pay-to Country/Region Code";
          SinglePmtBankAccount.INSERT;
          COMMIT;
        END;

      SinglePmtBankAccount.SETRECFILTER;
      SinglePmt.SETTABLEVIEW(SinglePmtBankAccount);
      SinglePmt.RUNMODAL;
      CLEAR(SinglePmt);
    END;

    PROCEDURE CopySinglePmtSales@5157837(FromDocNo@5157892 : Code[20];ToSalesHeader@5157802 : Record 36);
    VAR
      SinglePmtBankAccount@5157895 : Record 5157900;
      SinglePmtBankAccount2@5157804 : Record 5157900;
      CustLedgEntry@5157803 : Record 21;
    BEGIN
      CustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
      CustLedgEntry.SETRANGE("Document No.",FromDocNo);
      CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
      CustLedgEntry.SETRANGE("Customer No.",ToSalesHeader."Bill-to Customer No.");
      IF CustLedgEntry.FINDFIRST THEN
        IF SinglePmtBankAccount.GET(
          SinglePmtBankAccount."Account Type"::Customer,
          CustLedgEntry."Entry No.",'','',0,
          CustLedgEntry."Document Type",CustLedgEntry."Document No.")
        THEN BEGIN
          SinglePmtBankAccount2.INIT;
          SinglePmtBankAccount2 := SinglePmtBankAccount;
          SinglePmtBankAccount2."Account Type" := SinglePmtBankAccount2."Account Type"::Customer;
          SinglePmtBankAccount2."Entry No." := 0;
          SinglePmtBankAccount2."Account No." := ToSalesHeader."Bill-to Customer No.";
          SinglePmtBankAccount2."Posting Date" := ToSalesHeader."Posting Date";
          SinglePmtBankAccount2."Document Type" := ToSalesHeader."Document Type";
          SinglePmtBankAccount2."Document No." := ToSalesHeader."No.";
          SinglePmtBankAccount2.Name := ToSalesHeader."Bill-to Name";
          SinglePmtBankAccount2."Name 2" := ToSalesHeader."Bill-to Name 2";
          SinglePmtBankAccount2.Address := ToSalesHeader."Bill-to Address";
          SinglePmtBankAccount2."Address 2" := ToSalesHeader."Bill-to Address 2";
          SinglePmtBankAccount2.City := ToSalesHeader."Bill-to City";
          SinglePmtBankAccount2."Post Code" := ToSalesHeader."Bill-to Post Code";
          SinglePmtBankAccount2."Country/Region Code" := ToSalesHeader."Bill-to Country/Region Code";
          SinglePmtBankAccount2.INSERT;
        END;
    END;

    PROCEDURE CopySinglePmtPurch@5157836(FromDocNo@5157802 : Code[20];ToPurchHeader@5157803 : Record 38);
    VAR
      SinglePmtBankAccount@5157895 : Record 5157900;
      SinglePmtBankAccount2@5157805 : Record 5157900;
      VendLedgEntry@5157804 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
      VendLedgEntry.SETRANGE("Document No.",FromDocNo);
      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
      VendLedgEntry.SETRANGE("Vendor No.",ToPurchHeader."Pay-to Vendor No.");
      IF VendLedgEntry.FINDFIRST THEN
        IF SinglePmtBankAccount.GET(
          SinglePmtBankAccount."Account Type"::Vendor,
          VendLedgEntry."Entry No.",'','',0,
          VendLedgEntry."Document Type",VendLedgEntry."Document No.")
        THEN BEGIN
          SinglePmtBankAccount2.INIT;
          SinglePmtBankAccount2 := SinglePmtBankAccount;
          SinglePmtBankAccount2."Account Type" := SinglePmtBankAccount2."Account Type"::Vendor;
          SinglePmtBankAccount2."Entry No." := 0;
          SinglePmtBankAccount2."Account No." := ToPurchHeader."Pay-to Vendor No.";
          SinglePmtBankAccount2."Posting Date" := ToPurchHeader."Posting Date";
          SinglePmtBankAccount2."Document Type" := ToPurchHeader."Document Type";
          SinglePmtBankAccount2."Document No." := ToPurchHeader."No.";
          SinglePmtBankAccount2.Name := ToPurchHeader."Pay-to Name";
          SinglePmtBankAccount2."Name 2" := ToPurchHeader."Pay-to Name 2";
          SinglePmtBankAccount2.Address := ToPurchHeader."Pay-to Address";
          SinglePmtBankAccount2."Address 2" := ToPurchHeader."Pay-to Address 2";
          SinglePmtBankAccount2.City := ToPurchHeader."Pay-to City";
          SinglePmtBankAccount2."Post Code" := ToPurchHeader."Pay-to Post Code";
          SinglePmtBankAccount2."Country/Region Code" := ToPurchHeader."Pay-to Country/Region Code";
          SinglePmtBankAccount2.INSERT;
        END;
    END;

    PROCEDURE GetFileName@5157829(BankAcc@5157802 : Record 270;PmtType@5157803 : Record 5157893;Batch@1000000001 : Code[10];AddPrefix@1000000000 : Code[10]) FileName : Text[1024];
    BEGIN
      OPplusPaymentSetup.GET;
      BankAcc.TESTFIELD("No.");
      PmtType.TESTFIELD(Code);
      PmtType.TESTFIELD("File Supplement");
      IF (PmtType."Pmt. File Path" = '')  AND (BankAcc."Payment File Path" = '') THEN
        OPplusPaymentSetup.TESTFIELD("Pmt. File Path");

      IF BankAcc."Payment File Path" <> '' THEN
        PmtType."Pmt. File Path" := BankAcc."Payment File Path";
      IF PmtType."Pmt. File Path" = '' THEN
        PmtType."Pmt. File Path" := OPplusPaymentSetup."Pmt. File Path";

      IF COPYSTR(PmtType."File Supplement",1,1) <> '.' THEN
        PmtType."File Supplement" := '.' + PmtType."File Supplement";
      FileName := PmtType."Pmt. File Path";
      IF COPYSTR(FileName,STRLEN(FileName),1) <> '\' THEN
        FileName += '\';
      IF BankAcc."Payment File Prefix" <> '' THEN
        FileName += BankAcc."Payment File Prefix";
      FileName += PmtType."File Prefix";
      FileName += AddPrefix;
      FileName += Batch;
      FileName += PmtType."File Supplement";
    END;

    PROCEDURE CheckModify@5157895(VAR Rec@5157893 : Record 81;VAR xRec@5157892 : Record 81);
    BEGIN
      IF (Rec."Posting Date" <> xRec."Posting Date") OR
         (Rec."Document Date" <> xRec."Document Date") OR
         (Rec.Amount <> xRec.Amount) OR
         (Rec."Amount (LCY)" <> xRec."Amount (LCY)") OR
         (Rec.Correction <> xRec.Correction) OR
         (Rec."Currency Code" <> xRec."Currency Code") OR
         (Rec."Document No." <> xRec."Document No.") OR
         (Rec."Account No." <> xRec."Account No.") OR
         (Rec."Bal. Account No." <> xRec."Bal. Account No.")
      THEN
        Rec.TESTFIELD("Payment in Process",FALSE);
    END;

    PROCEDURE CheckCI@5157822(CI@5157802 : Code[40]) : Boolean;
    BEGIN
      // RC OPP6.00: neue, internationale Fassung

      // Aufbau: 1-2_ ISO-LÑndercode
      //         3-4  PrÅfziffer nach mod97 (ohne Cred. Bus. Code)
      //         5-7  Creditor Business Code (alphanum)
      //         8ff. Nationale Nummer (max. 28 N, Stelle 1 in D immer 0, + 10 Stellen)
      CI := DELCHR(CI);
      IF STRLEN(CI) > 35 THEN
        EXIT(FALSE);
      IF NOT (CI[1] IN ['A'..'Z']) THEN
        EXIT(FALSE);
      IF NOT (CI[2] IN ['A'..'Z']) THEN
        EXIT(FALSE);
      IF NOT (CI[3] IN ['0'..'9']) THEN
        EXIT(FALSE);
      IF NOT (CI[4] IN ['0'..'9']) THEN
        EXIT(FALSE);
      CI := COPYSTR(CI,8);
      CI := DELCHR(CI,'=','0123456789');
      IF STRLEN(CI) > 0 THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE CheckMandateID@5157825(TestID@1000000000 : Text[35];Caption@1000000003 : Text[30]);
    VAR
      Text1000@1000000001 : TextConst 'DEU=%1 enthÑlt ungÅltige Zeichen. Erlaubt sind %2.;ENU=Illegal characters in %1. You may use %2.';
      Legal@1000000002 : Text[120];
      Text2000@1000000004 : TextConst 'DEU="""A..Z, a..z, 0..9"" sowie "". , : ? / + - ( )""";ENU="""A..Z, a..z, 0..9"", and "". , : ? / + - ( )"""';
      Text3000@1000000005 : TextConst 'DEU=%1 darf max. 35 Stellen lang sein.;ENU=Max. length of %1 is 35.';
    BEGIN
      Legal := 'abcdefghijklmnopqrstuvwxyz';
      Legal += UPPERCASE(Legal);
      Legal += '0123456789';
      Legal += '.,():?/+-';
      TestID := DELCHR(TestID);
      IF STRLEN(TestID) > 35 THEN
        ERROR(Text3000,Caption);
      TestID := DELCHR(TestID,'=',Legal);
      IF STRLEN(TestID) <> 0 THEN
        ERROR(Text1000,Caption,Text2000);
    END;

    PROCEDURE NewMandate@5157824(OldMandate@1000000001 : Text[35]) NewID : Text[35];
    VAR
      NoSeriesMgt@1000000000 : Codeunit 396;
    BEGIN
      IF OldMandate <> '' THEN
        IF NOT CONFIRM(Text033) THEN
          EXIT('');
      OPplusPaymentSetup.GET;
      NewID := NoSeriesMgt.GetNextNo(OPplusPaymentSetup."Mandate ID No. Series",TODAY,TRUE);
    END;

    PROCEDURE MakeIBAN@5157827(CountryCode@5157802 : Code[2];BankCode@5157803 : Code[34];AccountNo@5157804 : Code[34];Spacer@5157810 : Boolean) IBAN : Code[34];
    VAR
      Country@5157811 : Record 9;
      Big@5157805 : BigInteger;
      Carry@5157806 : Integer;
      TestString@5157807 : Text[40];
      i@5157808 : Integer;
      Text10000@5157809 : TextConst 'DEU=IBAN-Erzeugung fÅr %1 ist nicht implementiert.;ENU=IBAN-Creation for %1 is not yet available.';
      MaxLenBankCode@5157812 : Integer;
      MaxLenAccNo@5157813 : Integer;
      TestBankCode@5157815 : Text[34];
      TestAccountNo@5157814 : Text[34];
    BEGIN
      CLEAR(TestString);
      BankCode := DELCHR(BankCode);
      FOR i := 1 TO STRLEN(BankCode) DO
        IF BankCode[i] IN [48..57,65..90] THEN
          TestString += COPYSTR(BankCode,i,1);
      BankCode := TestString;

      CLEAR(TestString);
      AccountNo := DELCHR(AccountNo);
      FOR i := 1 TO STRLEN(AccountNo) DO
        IF AccountNo[i] IN [48..57,65..90] THEN
          TestString += COPYSTR(AccountNo,i,1);
      AccountNo := TestString;

      MaxLenBankCode := 0;
      MaxLenAccNo := 0;

      CASE CountryCode OF
        'AT':
          BEGIN
            MaxLenBankCode := 5;
            MaxLenAccNo := 11;
          END;
        'CH':
          BEGIN
            MaxLenBankCode := 5;
            MaxLenAccNo := 12;
          END;
        'DE':
          BEGIN
            MaxLenBankCode := 8;
            MaxLenAccNo := 10;
          END;
        'GB':
          BEGIN
            MaxLenBankCode := 10;
            MaxLenAccNo := 8;
          END;
        'NL':
          BEGIN
            MaxLenBankCode := 4;
            MaxLenAccNo := 10;
          END;
        'BE':
          BEGIN
            MaxLenBankCode := 3;
            MaxLenAccNo := 9;
          END;
        'DK':
          BEGIN
            MaxLenBankCode := 4;
            MaxLenAccNo := 10;
          END;
        'FR':
          BEGIN
            MaxLenBankCode := 10;
            MaxLenAccNo := 13;
          END;
        ELSE BEGIN
          OPplusPaymentSetup.GET;
          IF OPplusPaymentSetup."Use Country Code Field" =
            OPplusPaymentSetup."Use Country Code Field"::"EU Country/Region Code"
          THEN BEGIN
            Country.SETCURRENTKEY("EU Country/Region Code");
            Country.SETRANGE("EU Country/Region Code",CountryCode);
            IF NOT Country.FINDFIRST THEN
              Country.INIT;
          END ELSE
            IF NOT Country.GET(CountryCode) THEN
              Country.INIT;
          MaxLenBankCode := Country."Default Length Branch Code";
          MaxLenAccNo := Country."Default Length Account No.";
        END;
      END;

      IF (MaxLenBankCode <> 0) AND (MaxLenAccNo <> 0) THEN BEGIN
        WHILE STRLEN(BankCode) < MaxLenBankCode DO
          BankCode := '0' + BankCode;
        WHILE STRLEN(AccountNo) < MaxLenAccNo DO
          AccountNo := '0' + AccountNo;
      END ELSE
        ERROR(Text10000,CountryCode);

      CLEAR(TestBankCode);
      FOR i := 1 TO STRLEN(BankCode) DO
        IF BankCode[i] IN [48..57] THEN
          TestBankCode += COPYSTR(BankCode,i,1)
        ELSE IF BankCode[i] IN [65..90] THEN
          TestBankCode += FORMAT(BankCode[i]-55);

      CLEAR(TestAccountNo);
      FOR i := 1 TO STRLEN(AccountNo) DO
        IF AccountNo[i] IN [48..57] THEN
          TestAccountNo += COPYSTR(AccountNo,i,1)
        ELSE IF AccountNo[i] IN [65..90] THEN
          TestAccountNo += FORMAT(AccountNo[i]-55);

      TestString := TestBankCode + TestAccountNo + FORMAT(CountryCode[1]-55) + FORMAT(CountryCode[2]-55) + '00';

      // 1. Schritt
      EVALUATE(Big,COPYSTR(TestString,1,9));
      TestString := COPYSTR(TestString,10);
      Carry := Big MOD 97;
      // 2. Schritt
      IF Carry > 9 THEN BEGIN
        EVALUATE(Big,FORMAT(Carry)+COPYSTR(TestString,1,7));
        TestString := COPYSTR(TestString,8);
      END ELSE BEGIN
        EVALUATE(Big,FORMAT(Carry)+COPYSTR(TestString,1,8));
        TestString := COPYSTR(TestString,9);
      END;
      Carry := Big MOD 97;
      // 3. Schritt
      IF Carry > 9 THEN BEGIN
        EVALUATE(Big,FORMAT(Carry)+COPYSTR(TestString,1,7));
        TestString := COPYSTR(TestString,8);
      END ELSE BEGIN
        EVALUATE(Big,FORMAT(Carry)+COPYSTR(TestString,1,8));
        TestString := COPYSTR(TestString,9);
      END;
      Carry := Big MOD 97;
      // 4. Schritt
      IF STRLEN(TestString) > 0 THEN BEGIN
        EVALUATE(Big, FORMAT(Carry) + TestString);
        Carry := Big MOD 97;
      END;

      Carry := 98-Carry;

      IF Carry < 10 THEN
        IBAN := CountryCode + '0' + FORMAT(Carry) + BankCode + AccountNo
      ELSE
        IBAN := CountryCode + FORMAT(Carry) + BankCode + AccountNo;

      IF Spacer THEN BEGIN
        CLEAR(TestString);
        REPEAT
          TestString += COPYSTR(IBAN,1,4) + ' ';
          IBAN := COPYSTR(IBAN,5);
        UNTIL STRLEN(IBAN) < 1;
        IBAN := DELCHR(TestString,'>');
      END;

      EXIT(IBAN);
    END;

    PROCEDURE Ansi2Ascii@5157897(_String@1150001 : Text[1024]) @1150000 : Text[1024];
    BEGIN
      // Converts from ANSI to ASCII
      EXIT(CONVERTSTR(_String,'«¸È‚‰‡ÂÁÍÎËÔÓÏƒ≈…Ê∆ÙˆÚ˚˘ˇ÷‹¯£ÿ◊É·ÌÛ˙Ò—™∫øÆ¡¬¿ À»ÕŒœÃ”ﬂ‘“⁄€Ÿ',
                              'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©µ∂∑“”‘÷◊ÿﬁ‡·‚„ÈÍÎ'));
    END;

    PROCEDURE Ascii2Ansi@5157896(_String@1150001 : Text[1024]) @1150000 : Text[1024];
    BEGIN
      // Converts from ASCII to ANSI
      EXIT(CONVERTSTR(_String,'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©µ∂∑“”‘÷◊ÿﬁ‡·‚„ÈÍÎ',
                              '«¸È‚‰‡ÂÁÍÎËÔÓÏƒ≈…Ê∆ÙˆÚ˚˘ˇ÷‹¯£ÿ◊É·ÌÛ˙Ò—™∫øÆ¡¬¿ À»ÕŒœÃ”ﬂ‘“⁄€Ÿ'));
    END;

    PROCEDURE ExtractFilename@5157830(Filename@5157802 : Text[1024]) : Text[254];
    VAR
      i@5157803 : Integer;
    BEGIN
      Filename := CONVERTSTR(Filename,'/','\'); // UNC safe
      i := STRPOS(Filename,'\');
      WHILE i > 0 DO BEGIN
        Filename := COPYSTR(Filename,i+1);
        i := STRPOS(Filename,'\');
      END;
      EXIT(Filename);
    END;

    PROCEDURE CheckCustEntry@5157832(VAR CustEntry@5157802 : Record 21);
    BEGIN
      CustEntry.TESTFIELD(Open);
    END;

    PROCEDURE CheckVendEntry@5157833(VAR VendEntry@5157802 : Record 25);
    BEGIN
      VendEntry.TESTFIELD(Open);
    END;

    PROCEDURE CalcSEPATargetDueDate@1000000002(BaseDueDate@5157805 : Date;SEPADueDays@5157804 : Integer;VAR TargetDays@5157803 : Integer;VAR TargetDueDate@5157802 : Date);
    VAR
      BaseCalChange@5157816 : Record 7601;
      DayCounter@5157815 : Integer;
      CalendarDate@5157811 : Date;
      Expression@5157808 : Text[30];
      DayDescription@5157807 : Text[50];
      CalendarMgt@5157806 : Codeunit 7600;
      DateRec@5157809 : Record 2000000007;
    BEGIN
      // partly given by Klaus Templin : Raber + MÑrker GmbH // thank you
      OPplusPaymentSetup.GET;
      TargetDueDate := BaseDueDate;
      TargetDays := SEPADueDays;

      IF NOT OPplusPaymentSetup."SEPA Bank Due over Target" THEN
        EXIT;

      OPplusPaymentSetup.TESTFIELD("Target Calendar SEPA");
      IF SEPADueDays > 0 THEN BEGIN
        BaseCalChange.SETRANGE("Base Calendar Code",OPplusPaymentSetup."Target Calendar SEPA");
        TargetDays := SEPADueDays;
        REPEAT
          DayCounter += 1;
          Expression := '<+' + FORMAT(DayCounter) + 'D>';
          CalendarDate := CALCDATE(Expression,BaseDueDate);
          IF CalendarMgt.CheckDateStatus(OPplusPaymentSetup."Target Calendar SEPA",CalendarDate,DayDescription) THEN
            TargetDays += 1
          // ggf. Wochenendtag (SA + SO) trotzdem abziehen
          ELSE BEGIN
            DateRec.SETRANGE("Period Type",0); // due to different names in different clients (day/tag);
            DateRec.SETRANGE("Period Start",CalendarDate);
            DateRec.FINDFIRST;
            IF (DateRec."Period No." = 6) OR (DateRec."Period No." = 7) THEN
              TargetDays += 1;
          END;
        UNTIL (DayCounter = TargetDays);
        Expression := '<+' + FORMAT(TargetDays) + 'D>';
        TargetDueDate := CALCDATE(Expression,BaseDueDate);
      END;
    END;

    PROCEDURE CustBankMand2BankMand@5157831(CustBankAcc@5157802 : Record 287);
    VAR
      BankAccMandate@5157803 : Record 5157913;
      Customer2@5157804 : Record 18;
    BEGIN
      IF CustBankAcc."Mandate ID" = '' THEN
        EXIT;
      Customer2.GET(CustBankAcc."Customer No.");
      IF NOT BankAccMandate.GET(CustBankAcc."Mandate ID") THEN BEGIN
        BankAccMandate."Mandate ID" := CustBankAcc."Mandate ID";
        BankAccMandate.INSERT;
      END;
      BankAccMandate."Account Type" := BankAccMandate."Account Type"::Customer;
      BankAccMandate."Account No." := CustBankAcc."Customer No.";
      BankAccMandate.Code := CustBankAcc.Code;
      BankAccMandate.Name := Customer2.Name;
      BankAccMandate.IBAN := CustBankAcc.IBAN;
      BankAccMandate."SWIFT Code" := CustBankAcc."SWIFT Code";
      BankAccMandate."Mandate Type" := CustBankAcc."Mandate Type";
      BankAccMandate."Mandate Date" := CustBankAcc."Mandate Date";
      BankAccMandate."Mandate Frequency" := CustBankAcc."Mandate Frequency";
      BankAccMandate."Mandate On Behalf of Owner" := CustBankAcc."Mandate On Behalf of Owner";
      BankAccMandate."Mandate Is Electronic" := CustBankAcc."Mandate Is Electronic";
      BankAccMandate."Mandate Status" := CustBankAcc."Mandate Status";
      BankAccMandate.MODIFY;
    END;

    PROCEDURE VendBankMand2BankMand@5157841(VendBankAcc@5157802 : Record 288);
    VAR
      BankAccMandate@5157803 : Record 5157913;
      Vendor2@5157804 : Record 23;
    BEGIN
      IF VendBankAcc."Mandate ID" = '' THEN
        EXIT;
      Vendor2.GET(VendBankAcc."Vendor No.");
      IF NOT BankAccMandate.GET(VendBankAcc."Mandate ID") THEN BEGIN
        BankAccMandate."Mandate ID" := VendBankAcc."Mandate ID";
        BankAccMandate.INSERT;
      END;
      BankAccMandate."Account Type" := BankAccMandate."Account Type"::Vendor;
      BankAccMandate."Account No." := VendBankAcc."Vendor No.";
      BankAccMandate.Code := VendBankAcc.Code;
      BankAccMandate.Name := Vendor2.Name;
      BankAccMandate.IBAN := VendBankAcc.IBAN;
      BankAccMandate."SWIFT Code" := VendBankAcc."SWIFT Code";
      BankAccMandate."Mandate Type" := VendBankAcc."Mandate Type";
      BankAccMandate."Mandate Date" := VendBankAcc."Mandate Date";
      BankAccMandate."Mandate Frequency" := VendBankAcc."Mandate Frequency";
      BankAccMandate."Mandate On Behalf of Owner" := VendBankAcc."Mandate On Behalf of Owner";
      BankAccMandate."Mandate Is Electronic" := VendBankAcc."Mandate Is Electronic";
      BankAccMandate."Mandate Status" := VendBankAcc."Mandate Status";
      BankAccMandate.MODIFY;
    END;

    PROCEDURE CreateIBANSWIFT@5157838(VAR IBAN@5157805 : Code[50];VAR "SWIFT Code"@5157806 : Code[50];"Country/Region Code"@5157807 : Code[10];"Bank Branch Code"@5157808 : Text[50];"Bank Account No."@5157809 : Text[50]);
    VAR
      BankBranchCodes@5157803 : Record 5157894;
      PmtSetup@5157804 : Record 5157892;
    BEGIN
      PmtSetup.GET;
      IF IBAN = '' THEN BEGIN
        IBAN := MakeIBAN(PmtSetup.GetPmtCountry("Country/Region Code"),"Bank Branch Code","Bank Account No.",TRUE);
      END;
      IF "SWIFT Code" = '' THEN BEGIN
        BankBranchCodes.SETRANGE(Type,BankBranchCodes.Type::"Bank Branch Code");
        BankBranchCodes.SETRANGE("Country Code",PmtSetup.GetPmtCountry("Country/Region Code"));
        BankBranchCodes.SETRANGE("Bank Branch Code","Bank Branch Code");
        BankBranchCodes.SETFILTER("Bank Identifier Code",'<>%1','');
        IF BankBranchCodes.FINDFIRST THEN
          IF BankBranchCodes.COUNT = 1 THEN
            "SWIFT Code" := BankBranchCodes."Bank Identifier Code";
      END;
    END;

    PROCEDURE ValidateMandate@5157839(MandateID@5157804 : Code[50];PostingDate@5157805 : Date;AmountLCY@5157806 : Decimal;VAR PaymentBankCode@5157802 : Code[10]);
    VAR
      BankAccMandate@5157807 : Record 5157913;
    BEGIN
      IF MandateID = '' THEN
        EXIT;
      BankAccMandate.GET(MandateID);
      IF BankAccMandate.Is_Valid(PostingDate,AmountLCY) THEN
        PaymentBankCode := BankAccMandate.Code
      ELSE
        ERROR('');
    END;

    PROCEDURE CreateMandateID@5157840(VAR MandateID@5157802 : Code[50];IBAN@5157803 : Code[50];AccType@5157806 : Integer;AccNo@5157807 : Code[20];Code@5157808 : Code[10]) : Boolean;
    VAR
      CustBankAccTemp@5157804 : TEMPORARY Record 287;
      VendBankAccTemp@5157812 : Record 288;
      BankAccMandate@5157810 : Record 5157913;
      PmtSetup@5157805 : Record 5157892;
      NoSeriesMgt@5157809 : Codeunit 396;
      Text001@5157811 : TextConst 'DEU=Wollen Sie eine neue %1 erzeugen?;ENU=Do you want to create a new %1?';
    BEGIN
      CASE AccType OF
        1:
          BEGIN
            CustBankAccTemp."Mandate ID" := MandateID;
            CustBankAccTemp.IBAN := IBAN;

            CustBankAccTemp.TESTFIELD("Mandate ID",'');
            CustBankAccTemp.TESTFIELD(IBAN);
          END;
        2:
          BEGIN
            VendBankAccTemp."Mandate ID" := MandateID;
            VendBankAccTemp.IBAN := IBAN;

            VendBankAccTemp.TESTFIELD("Mandate ID",'');
            VendBankAccTemp.TESTFIELD(IBAN);
          END;
      END;
      PmtSetup.GET;
      IF NOT PmtSetup."Mandate ID equals Account No." THEN
        PmtSetup.TESTFIELD("Mandate ID No. Series");
      IF CONFIRM(STRSUBSTNO(Text001,CustBankAccTemp.FIELDCAPTION("Mandate ID")),FALSE) THEN BEGIN
        IF NOT PmtSetup."Mandate ID equals Account No." THEN
          MandateID := NoSeriesMgt.GetNextNo(PmtSetup."Mandate ID No. Series",TODAY,TRUE)
        ELSE
          MandateID := AccNo;
        BankAccMandate."Mandate ID" := MandateID;
        BankAccMandate."Account Type" := AccType;
        BankAccMandate."Account No." := AccNo;
        BankAccMandate.Code := Code;
        BankAccMandate."Mandate Date" := TODAY;
        BankAccMandate.INSERT;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CreateMandateIDSystem@5157844(VAR MandateID@5157803 : Code[50];AccType@5157806 : Integer;AccNo@5157807 : Code[20];Code@5157808 : Code[10]) : Boolean;
    VAR
      BankAccMandate@5157810 : Record 5157913;
      PmtSetup@5157805 : Record 5157892;
      NoSeriesMgt@5157809 : Codeunit 396;
    BEGIN
      PmtSetup.GET;
      IF NOT PmtSetup."Mandate ID equals Account No." THEN
        PmtSetup.TESTFIELD("Mandate ID No. Series");

      IF NOT PmtSetup."Mandate ID equals Account No." THEN
        MandateID := NoSeriesMgt.GetNextNo(PmtSetup."Mandate ID No. Series",TODAY,TRUE)
      ELSE
        MandateID := AccNo;

      BankAccMandate."Mandate ID" := MandateID;
      BankAccMandate."Account Type" := AccType;
      BankAccMandate."Account No." := AccNo;
      BankAccMandate.Code := Code;
      BankAccMandate."Mandate Date" := TODAY;
      BankAccMandate.INSERT;
      EXIT(TRUE);
    END;

    BEGIN
    {
      -----------------------------------------------------
      (c) gbedv, OPplus, All rights reserved

      No.  Date       changed
      -----------------------------------------------------
      PMT  01.11.08   OPplus Payment
                      - Object created
      -----------------------------------------------------
    }
    END.
  }
}

