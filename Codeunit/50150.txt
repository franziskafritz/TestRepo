OBJECT Codeunit 50150 RHD Sales JobQueue Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=06.03.14;
    Time=14:11:01;
    Modified=Yes;
    Version List=GOB;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            RHDSalesImpMgt@1000000000 : Codeunit 50152;
            RHDSalesExpMgt@1000000005 : Codeunit 50151;
            RHDSalesInterfaceMgt@1000000010 : Codeunit 50153;
            FPCInterSetup@1000000002 : Record 50014;
            RHDSetup@1000000001 : Record 50177;
            ImportFile@1000000003 : Record 2000000022;
            RHDSalesExpHeader@1000000004 : Record 50181;
            RHDSalesExpHeader2@1000000008 : Record 50181;
            RHDSalesImport@1000000009 : Record 50183;
            RHDSalesImport2@1000000011 : Record 50183;
            Starttime@1000000007 : Time;
            Endtime@1000000006 : Time;
          BEGIN
            RHDSetup.GET;
            RHDSetup.TESTFIELD("Interface Code Post Code");
            RHDSetup.TESTFIELD("Interface Code STA");
            RHDSetup.TESTFIELD("Interface Code KAD");
            RHDSetup.TESTFIELD("STA-Processing Parameter");

            CASE "Parameter String" OF
              // POSTCODE
              RHDSetup."Interface Code Post Code":
                BEGIN
                  FPCInterSetup.GET(RHDSetup."Interface Code Post Code");
                  FPCInterSetup.TESTFIELD("Import Folder");
                  FPCInterSetup.TESTFIELD("Archive Root Folder");
                  ImportFile.SETRANGE(Path,FPCInterSetup."Import Folder");
                  ImportFile.SETRANGE("Is a file",TRUE);
                  IF ImportFile.FINDSET THEN
                    REPEAT  // for each file in import-directory
                      CLEARLASTERROR;
                      CLEAR(RHDSalesImpMgt);
                      RHDSalesImpMgt.SetRecFile(ImportFile);
                      RHDSalesImpMgt.SetInterfaceCode(RHDSetup."Interface Code Post Code");
                      IF RHDSalesImpMgt.RUN THEN;
                      IF NOT RHDSalesImpMgt.GetNoImport THEN  // log, if trying to import (File=ZIP)
                        CreateSalesLog(TRUE,1,RHDSalesImpMgt.GetFilename);    // ZIP
                    UNTIL ImportFile.NEXT = 0;
                END;
              // STA-IMPORT
              RHDSetup."Interface Code STA":
                BEGIN
                  FPCInterSetup.GET(RHDSetup."Interface Code STA");
                  FPCInterSetup.TESTFIELD("Import Folder");
                  FPCInterSetup.TESTFIELD("Archive Root Folder");
                  ImportFile.SETRANGE(Path,FPCInterSetup."Import Folder");
                  ImportFile.SETRANGE("Is a file",TRUE);
                  IF ImportFile.FINDSET THEN
                    REPEAT  // for each file in import-directory
                      CLEARLASTERROR;
                      CLEAR(RHDSalesImpMgt);
                      RHDSalesImpMgt.SetRecFile(ImportFile);
                      RHDSalesImpMgt.SetInterfaceCode(RHDSetup."Interface Code STA");
                      IF RHDSalesImpMgt.RUN THEN;
                      IF NOT RHDSalesImpMgt.GetNoImport THEN  // Log, if trying to import (File = STA)
                        CreateSalesLog(TRUE,2,RHDSalesImpMgt.GetFilename);   // STA
                    UNTIL ImportFile.NEXT = 0;
                END;
              // KAD-EXPORT
              RHDSetup."Interface Code KAD":
                BEGIN
                  FPCInterSetup.GET(RHDSetup."Interface Code KAD");
                  FPCInterSetup.TESTFIELD("Export Folder");
                  FPCInterSetup.TESTFIELD("Archive Root Folder");
                  RHDSalesExpHeader.SETRANGE("Record Type",RHDSetup."Record Type KAK");
                  RHDSalesExpHeader.SETRANGE(Status,RHDSalesExpHeader.Status::Unprocessed);
                  IF RHDSalesExpHeader.FINDSET THEN
                    REPEAT
                      //Starttime := TIME;
                      //IF FORMAT(Endtime) <> '' THEN
                        //SecondToWait(Starttime,Endtime);
                      CLEARLASTERROR;
                      CLEAR(RHDSalesExpMgt);
                      RHDSalesExpMgt.SetRHDSalesExpHeader(RHDSalesExpHeader);
                      RHDSalesExpMgt.SetInterfaceCode(RHDSetup."Interface Code KAD");
                      //S/P1216
                      //IF RHDSalesExpMgt.RUN THEN;
                      //RHDSalesExpHeader2.GET(RHDSalesExpHeader."Entry No.");
                      //IF GETLASTERRORTEXT = '' THEN
                        //RHDSalesExpHeader2.Status := RHDSalesExpHeader2.Status::Exported
                      //ELSE BEGIN
                        //RHDSalesExpHeader2.Status := RHDSalesExpHeader2.Status::Error;
                        //RHDSalesExpMgt.DeleteFileAfterError;
                      //END;
                      //IF NOT RHDSalesExpHeader2.MODIFY THEN
                        //RHDSalesExpMgt.DeleteFileAfterError;
                      //CreateSalesLog(FALSE,3,RHDSalesExpMgt.GetFilename);  // Commit
                      //Endtime := TIME;
                      IF RHDSalesExpMgt.RUN THEN BEGIN
                        IF RHDSalesExpHeader2.GET(RHDSalesExpHeader."Entry No.") THEN BEGIN
                          IF RHDSalesExpHeader2.Status = RHDSalesExpHeader2.Status::Unprocessed THEN BEGIN
                            RHDSalesExpHeader2.Status := RHDSalesExpHeader2.Status::Exported;
                            IF NOT RHDSalesExpHeader2.MODIFY THEN
                              RHDSalesExpMgt.DeleteFileAfterError;
                          END ELSE
                            RHDSalesExpMgt.DeleteFileAfterError;
                        END ELSE
                          RHDSalesExpMgt.DeleteFileAfterError;
                      END ELSE BEGIN
                        IF RHDSalesExpHeader2.GET(RHDSalesExpHeader."Entry No.") THEN BEGIN
                          RHDSalesExpHeader2.Status := RHDSalesExpHeader2.Status::Error;
                          IF NOT RHDSalesExpHeader2.MODIFY THEN
                            RHDSalesExpMgt.DeleteFileAfterError;
                        END ELSE
                          RHDSalesExpMgt.DeleteFileAfterError;
                      END;
                      CreateSalesLog(FALSE,3,RHDSalesExpMgt.GetFilename); //Has a COMMIT
                      //E/P1216
                    UNTIL RHDSalesExpHeader.NEXT = 0;
                END;
              // STA-Processing
              RHDSetup."STA-Processing Parameter":
                BEGIN
                  RHDSalesImport.SETRANGE("Record Type",RHDSetup."Record Type STA");
                  RHDSalesImport.SETRANGE("Import Status",RHDSalesImport."Import Status"::Unprocessed);
                  IF RHDSalesImport.FINDSET THEN BEGIN
                    RHDSalesInterfaceMgt.SetParameterCode(RHDSetup."STA-Processing Parameter");
                    REPEAT
                      CLEARLASTERROR;
                      RHDSalesInterfaceMgt.SetImportSales(RHDSalesImport);
                      IF RHDSalesInterfaceMgt.RUN THEN;

                      RHDSalesImport2.GET(RHDSalesImport."Entry No.");
                      IF GETLASTERRORTEXT = '' THEN
                        RHDSalesImport2."Import Status" := RHDSalesImport2."Import Status"::Processed
                      ELSE BEGIN
                        RHDSalesImport2."Import Status" := RHDSalesImport2."Import Status"::Error;
                        RHDSalesImport2."Error Description 1" := COPYSTR(GETLASTERRORTEXT,1,250);
                        RHDSalesImport2."Error Description 2" := COPYSTR(GETLASTERRORTEXT,251,250);
                        RHDSalesImport2."Error Description 3" := COPYSTR(GETLASTERRORTEXT,501,250);
                        RHDSalesImport2."Error Description 4" := COPYSTR(GETLASTERRORTEXT,751,250);
                      END;
                      RHDSalesImport2.MODIFY;
                      COMMIT;
                    UNTIL RHDSalesImport.NEXT = 0;
                  END;
                END;
            END;
          END;

  }
  CODE
  {

    PROCEDURE CreateSalesLog@1000000001(ParImport@1000000002 : Boolean;ParType@1000000003 : ' ,ZIP,STA,KAK';ParFilename@1000000000 : Text[250]);
    VAR
      SalesLog@1000000001 : Record 80004;
    BEGIN
      // Creates a sales log entry for error and succes, import and export
      // ParType: Option has to be equal to table "RHD Sales Log"

      WITH SalesLog DO BEGIN
        INIT;
        INSERT;
        IF ParImport THEN
          "Action Type" := "Action Type"::Import
        ELSE
          "Action Type" := "Action Type"::Export;

        "Action Sub Type" := ParType;

        IF GETLASTERRORTEXT = '' THEN BEGIN
          Status := Status::Success;
          Filename := ParFilename;
        END ELSE BEGIN
          Status := Status::Error;
          "Error Description 1" := COPYSTR(GETLASTERRORTEXT,1,250);
          "Error Description 2" := COPYSTR(GETLASTERRORTEXT,251,250);
          "Error Description 3" := COPYSTR(GETLASTERRORTEXT,501,250);
          "Error Description 4" := COPYSTR(GETLASTERRORTEXT,751,250);
        END;

        "Process Date" := TODAY;
        "Process Time" := TIME;
        "Process by" := USERID;
        MODIFY;
      END;

      COMMIT;
    END;

    PROCEDURE SecondToWait@1000000000(Starttime@1000000000 : Time;Endtime@1000000001 : Time);
    BEGIN
      // Wait max. 1 second for different filename
      IF Endtime - Starttime < 1000 THEN
        SLEEP(1000 - (Endtime-Starttime));
    END;

    BEGIN
    {
      +--------------------------------------------------+
      |                   ¸  Copyright                   |
      |       GOB Software & Systeme GmbH & Co. KG       |
      +--------------------------------------------------+
      |                      home24                      |
      +--------------------------------------------------+

      Project   Date        Consultant  Comment
      ------------------------------------------------------
      P1092     11.09.13    gob-rste    Object Created
      P1070     23.10.13    gob-rste    OM Guidelines
      P1216     06.03.14    gob-rste    Delete file on delete unprocessed records
    }
    END.
  }
}

