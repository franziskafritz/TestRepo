OBJECT Codeunit 90199 PTB Create User Role
{
  OBJECT-PROPERTIES
  {
    Date=07.01.13;
    Time=12:00:00;
    Version List=SSI/PTB;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF CONFIRM('Do you want to create the User Role "NAVSQLPTB"?', FALSE) THEN
              CreateRole();
          END;

  }
  CODE
  {

    PROCEDURE CreateRole@1000000001();
    VAR
      Roles@1000000000 : Record 2000000004;
      Permissions@1000000001 : Record 2000000005;
      Objects@1000000002 : Record 2000000001;
      Window@1000000003 : Dialog;
      c@1000000004 : Integer;
      i@1000000005 : Integer;
    BEGIN
      IF Roles.GET('NAVSQLPTB') THEN BEGIN
        IF CONFIRM('The User Role "NAVSQLPTB" already exists.\' +
                   'Do you want to overwrite the existing role?', FALSE)
        THEN BEGIN
          Roles.DELETE(TRUE);
          COMMIT;
        END ELSE
          ERROR('Canceled.');
      END;

      Roles.INIT;
      Roles."Role ID" := 'NAVSQLPTB';
      Roles.Name := 'NAV/SQL Performance Toolbox';
      Roles.INSERT(TRUE);

      Objects.SETRANGE(ID, 90100, 90199);
      Objects.SETFILTER(Type, '%1|%2|%3|%4|%5', Objects.Type::TableData, Objects.Type::Form,
                                                Objects.Type::Report, Objects.Type::Dataport, Objects.Type::Codeunit);
      Objects.SETFILTER("Version List", '%1', 'SSI/PTB*');
      IF Objects.FINDSET THEN BEGIN
        Window.OPEN('#1### #2######## @3@@@@@@@@@@@@@');
        c := Objects.COUNT;
        REPEAT
          i := i + 1;
          Window.UPDATE(1, Objects.Type);
          Window.UPDATE(2, Objects.Name);
          Window.UPDATE(3, ROUND(10000 / c * i, 1));
          Permissions.INIT;
          Permissions.VALIDATE("Role ID",  'NAVSQLPTB');
          Permissions.VALIDATE("Object Type", Objects.Type);
          Permissions.VALIDATE("Object ID", Objects.ID);
          IF (Objects.Type =  Objects.Type::TableData) THEN BEGIN
            Permissions."Read Permission" := Permissions."Read Permission"::Yes;
            Permissions."Insert Permission" := Permissions."Insert Permission"::Yes;
            Permissions."Modify Permission" := Permissions."Modify Permission"::Yes;
            Permissions."Delete Permission" := Permissions."Delete Permission"::Yes;
            Permissions."Execute Permission" := Permissions."Execute Permission"::" ";
          END ELSE BEGIN
            Permissions."Read Permission" := Permissions."Read Permission"::" ";
            Permissions."Insert Permission" := Permissions."Insert Permission"::" ";
            Permissions."Modify Permission" := Permissions."Modify Permission"::" ";
            Permissions."Delete Permission" := Permissions."Delete Permission"::" ";
          END;
          Permissions."Execute Permission" := Permissions."Execute Permission"::Yes;
          Permissions.INSERT(TRUE);
        UNTIL Objects.NEXT = 0;

        Permissions.INIT;
        Permissions.VALIDATE("Role ID",  'NAVSQLPTB');
        Permissions.VALIDATE("Object Type", Permissions."Object Type"::"Table Data");
        Permissions."Read Permission" := Permissions."Read Permission"::Yes;
        Permissions."Insert Permission" := Permissions."Insert Permission"::" ";
        Permissions."Modify Permission" := Permissions."Modify Permission"::" ";
        Permissions."Delete Permission" := Permissions."Delete Permission"::" ";
        Permissions."Execute Permission" := Permissions."Execute Permission"::" ";
        Permissions.VALIDATE("Object ID", 2000000001);
        Permissions.INSERT(TRUE);
        Permissions.VALIDATE("Object ID", 2000000009);
        Permissions.INSERT(TRUE);
        Permissions.VALIDATE("Object ID", 2000000028);
        Permissions.INSERT(TRUE);
        Permissions.VALIDATE("Object ID", 2000000047);
        Permissions.INSERT(TRUE);
        Permissions.VALIDATE("Object ID", 2000000048);
        Permissions.INSERT(TRUE);
        Permissions.VALIDATE("Object ID", 2000000063);
        Permissions.INSERT(TRUE);

        COMMIT;
        Window.CLOSE;
      END;

      MESSAGE('User Role "NAVSQLPTB" has been created.\Now this role could be assigned to the relevant User IDs.');
    END;

    BEGIN
    END.
  }
}

