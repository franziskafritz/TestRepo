OBJECT Codeunit 50200 Assert
{
  OBJECT-PROPERTIES
  {
    Date=02.09.13;
    Time=14:59:54;
    Version List=HME0513;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      IsTrueFailedMsg@1000 : TextConst 'ENU=Assert.IsTrue failed. %1';
      IsFalseFailedMsg@1001 : TextConst 'ENU=Assert.IsFalse failed. %1';
      AreEqualFailedMsg@1002 : TextConst 'ENU=Assert.AreEqual failed. Expected:<%1>. Actual:<%2>. %3';
      AreNotEqualFailedMsg@1003 : TextConst 'ENU=Assert.AreNotEqual failed. Expected any value except:<%1>. Actual:<%2>. %3';
      AreNearlyEqualFailedMsg@1006 : TextConst 'ENU=Assert.AreNearlyEqual failed. Expected a difference no greater than <%1> between expected value <%2> and actual value <%3>. %4';
      AreNotNearlyEqualFailedMsg@1007 : TextConst 'ENU=Assert.AreNotNearlyEqual failed. Expected a difference greater than <%1> between expected value <%2> and actual value <%3>. %4';
      FailFailedMsg@1004 : TextConst 'ENU=Assert.Fail failed. %1';
      KnowFailureFailedMsg@1008 : TextConst 'ENU=Assert.KnownFailure failed. %1';
      KnownFailureMsg@1009 : TextConst 'ENU=Known failure: %1';
      UnsupportedTypeMsg@1005 : TextConst 'ENU=Equality assertions only support Boolean, Option, Integer, Decimal, Code, Text, Date, and Time values.';

    PROCEDURE IsTrue@1(Condition@1000 : Boolean;Msg@1001 : Text[1024]);
    BEGIN
      IF NOT Condition THEN
        ERROR(IsTrueFailedMsg,Msg)
    END;

    PROCEDURE IsFalse@4(Condition@1000 : Boolean;Msg@1001 : Text[1024]);
    BEGIN
      IF Condition THEN
        ERROR(IsFalseFailedMsg,Msg)
    END;

    PROCEDURE AreEqual@2(Expected@1000 : Variant;Actual@1001 : Variant;Msg@1002 : Text[1024]);
    BEGIN
      IF NOT Equal(Expected,Actual) THEN
        ERROR(AreEqualFailedMsg,Expected,Actual,Msg)
    END;

    PROCEDURE AreNotEqual@9(Expected@1000 : Variant;Actual@1001 : Variant;Msg@1002 : Text[1024]);
    BEGIN
      IF Equal(Expected,Actual) THEN
        ERROR(AreNotEqualFailedMsg,Expected,Actual,Msg)
    END;

    PROCEDURE AreNearlyEqual@3(Expected@1000 : Decimal;Actual@1001 : Decimal;Delta@1002 : Decimal;Msg@1003 : Text[1024]);
    BEGIN
      IF ABS(Expected - Actual) > ABS(Delta) THEN
        ERROR(AreNearlyEqualFailedMsg,Delta,Expected,Actual,Msg)
    END;

    PROCEDURE AreNotNearlyEqual@8(Expected@1000 : Decimal;Actual@1001 : Decimal;Delta@1002 : Decimal;Msg@1003 : Text[1024]);
    BEGIN
      IF ABS(Expected - Actual) <= ABS(Delta) THEN
        ERROR(AreNotNearlyEqualFailedMsg,Delta,Expected,Actual,Msg)
    END;

    PROCEDURE Fail@7(Msg@1000 : Text[1024]);
    BEGIN
      ERROR(FailFailedMsg,Msg)
    END;

    PROCEDURE KnownFailure@6(Expected@1000 : Text[1024];Msg@1001 : Text[1024]);
    BEGIN
      IF STRPOS(GETLASTERRORTEXT,Expected) = 0 THEN
        ERROR(KnowFailureFailedMsg,GETLASTERRORTEXT);

      ERROR(KnownFailureMsg,Msg)
    END;

    LOCAL PROCEDURE TypeOf@5(Value@1000 : Variant) : Integer;
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      CASE TRUE OF
        Value.ISBOOLEAN:
          EXIT(Field.Type::Boolean);
        Value.ISOPTION OR Value.ISINTEGER:
          EXIT(Field.Type::Integer);
        Value.ISDECIMAL:
          EXIT(Field.Type::Decimal);
        Value.ISTEXT OR Value.ISCODE:
          EXIT(Field.Type::Text);
        Value.ISDATE:
          EXIT(Field.Type::Date);
        Value.ISTIME:
          EXIT(Field.Type::Time);
        ELSE ERROR(UnsupportedTypeMsg)
      END
    END;

    LOCAL PROCEDURE Equal@12(Left@1000 : Variant;Right@1001 : Variant) : Boolean;
    BEGIN
      IF IsNumber(Left) AND IsNumber(Right) THEN
        EXIT(EqualNumbers(Left,Right));

      EXIT((TypeOf(Left) = TypeOf(Right)) AND (FORMAT(Left,0,2) = FORMAT(Right,0,2)))
    END;

    LOCAL PROCEDURE EqualNumbers@11(Left@1000 : Decimal;Right@1001 : Decimal) : Boolean;
    BEGIN
      EXIT(Left = Right)
    END;

    LOCAL PROCEDURE IsNumber@10(Value@1001 : Variant) : Boolean;
    BEGIN
      EXIT(Value.ISDECIMAL OR Value.ISINTEGER OR Value.ISCHAR)
    END;

    BEGIN
    END.
  }
}

