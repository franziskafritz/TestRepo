OBJECT Codeunit 50724 Test: NAV Setups
{
  OBJECT-PROPERTIES
  {
    Date=22.01.15;
    Time=12:00:00;
    Version List=HME2002;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1000000000 : Codeunit 50200;
      FolderPathTxt@1000000001 : TextConst 'ENU=\\FPC-DC01\share\erp-nav\999 Quality Assurance\Automated Testing\NAV Setups\';
      LibrarySales@1000000005 : Codeunit 50701;
      isInitialized@1000000002 : Boolean;
      WrongFieldErr@1000000003 : TextConst 'ENU=Error in Table: %1, Field: %2 - %3.';
      NoXMLFileErr@1000000004 : TextConst 'ENU=XML File for table %1 not found.';

    [Test]
    PROCEDURE ExportSetupTables@1000000027();
    BEGIN
      // --- NAV Standart Setups ---
      ExportTableToXML(DATABASE::"User Setup");
      ExportTableToXML(DATABASE::"General Ledger Setup");
      ExportTableToXML(DATABASE::"Source Code Setup");
      ExportTableToXML(DATABASE::"General Posting Setup");
      ExportTableToXML(DATABASE::"Sales & Receivables Setup");
      ExportTableToXML(DATABASE::"Purchases & Payables Setup");
      ExportTableToXML(DATABASE::"Inventory Setup");
      ExportTableToXML(DATABASE::"Resources Setup");
      ExportTableToXML(DATABASE::"VAT Posting Setup");
      ExportTableToXML(DATABASE::"Change Log Setup");
      ExportTableToXML(DATABASE::"Change Log Setup (Table)");
      ExportTableToXML(DATABASE::"Change Log Setup (Field)");
      ExportTableToXML(DATABASE::"Job Queue Setup");
      ExportTableToXML(DATABASE::"Marketing Setup");
      ExportTableToXML(DATABASE::"FA Setup");
      ExportTableToXML(DATABASE::"FA Posting Type Setup");
      ExportTableToXML(DATABASE::"Warehouse Setup");
      ExportTableToXML(DATABASE::"Inventory Posting Setup");
      ExportTableToXML(DATABASE::"GDPdU Component Setup");

      // --- Custom Setups ---
      ExportTableToXML(DATABASE::"General Payment Setup");
      ExportTableToXML(DATABASE::"Common Interface Setup");
      ExportTableToXML(DATABASE::"FPC Interface Setup");
      ExportTableToXML(DATABASE::"DHL Setup");
      ExportTableToXML(DATABASE::"FPC General Setup");
      ExportTableToXML(DATABASE::"Darlehen Einrichtung");
      ExportTableToXML(DATABASE::"Admin Mail Queue Setup");
      ExportTableToXML(DATABASE::"Anveo Change Log Setup");
      ExportTableToXML(DATABASE::"SC Queue Setup");
      ExportTableToXML(DATABASE::"DHL History Setup");
      ExportTableToXML(DATABASE::"Shifting Days Setup");
      ExportTableToXML(DATABASE::"EDD Setup");
      ExportTableToXML(DATABASE::"General Status Setup");
      ExportTableToXML(DATABASE::"SII Setup");
      ExportTableToXML(DATABASE::"Client Monitor Setup HME");
      ExportTableToXML(DATABASE::"MailIT Setup");
      ExportTableToXML(DATABASE::"EDI Integrator Setup");
      ExportTableToXML(DATABASE::"Payment Setup");
      ExportTableToXML(DATABASE::"Liquidity Setup");
      ExportTableToXML(DATABASE::eBaySetup);
      ExportTableToXML(DATABASE::eBayPAYONESetup);
      ExportTableToXML(DATABASE::eBayPensioSetup);
      ExportTableToXML(DATABASE::eBayFactoringSetup);
      ExportTableToXML(DATABASE::"OPplus Setup");
      ExportTableToXML(DATABASE::"G/L Open Entries Setup");
      ExportTableToXML(DATABASE::"OPplus Analysis Setup");
      ExportTableToXML(DATABASE::"OPplus Payment Setup");
      ExportTableToXML(DATABASE::"Payment Posting Setup");
      ExportTableToXML(DATABASE::"ACF Setup");
    END;

    [Test]
    PROCEDURE VerifyTable91@1000000002();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"User Setup");
    END;

    [Test]
    PROCEDURE VerifyTable98@1000000025();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"General Ledger Setup");
    END;

    [Test]
    PROCEDURE VerifyTable242@1000000026();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Source Code Setup");
    END;

    [Test]
    PROCEDURE VerifyTable252@1000000028();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"General Posting Setup");
    END;

    [Test]
    PROCEDURE VerifyTable311@1000000029();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Sales & Receivables Setup");
    END;

    [Test]
    PROCEDURE VerifyTable312@1000000030();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Purchases & Payables Setup");
    END;

    [Test]
    PROCEDURE VerifyTable313@1000000031();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Inventory Setup");
    END;

    [Test]
    PROCEDURE VerifyTable314@1000000032();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Resources Setup");
    END;

    [Test]
    PROCEDURE VerifyTable325@1000000033();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"VAT Posting Setup");
    END;

    [Test]
    PROCEDURE VerifyTable402@1000000034();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Change Log Setup");
    END;

    [Test]
    PROCEDURE VerifyTable403@1000000035();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Change Log Setup (Table)");
    END;

    [Test]
    PROCEDURE VerifyTable404@1000000036();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Change Log Setup (Field)");
    END;

    [Test]
    PROCEDURE VerifyTable470@1000000037();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Job Queue Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5079@1000000038();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Marketing Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5603@1000000039();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"FA Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5604@1000000040();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"FA Posting Type Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5769@1000000041();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Warehouse Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5813@1000000042();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Inventory Posting Setup");
    END;

    [Test]
    PROCEDURE VerifyTable11020@1000000043();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"GDPdU Component Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50000@1000000050();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"General Payment Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50012@1000000051();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Common Interface Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50014@1000000052();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"FPC Interface Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50022@1000000053();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"DHL Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50055@1000000054();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"FPC General Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50079@1000000055();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Darlehen Einrichtung");
    END;

    [Test]
    PROCEDURE VerifyTable50092@1000000056();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Admin Mail Queue Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50099@1000000057();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Anveo Change Log Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50101@1000000058();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"SC Queue Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50108@1000000059();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"DHL History Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50115@1000000060();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Shifting Days Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50119@1000000061();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"EDD Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50128@1000000062();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"General Status Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50140@1000000064();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"SII Setup");
    END;

    [Test]
    PROCEDURE VerifyTable50163@1000000067();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Client Monitor Setup HME");
    END;

    [Test]
    PROCEDURE VerifyTable75402@1000000066();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"MailIT Setup");
    END;

    [Test]
    PROCEDURE VerifyTable82850@1000000065();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"EDI Integrator Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5001901@1000000007();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Payment Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5055253@1000000017();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Liquidity Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5095800@1000000016();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::eBaySetup);
    END;

    [Test]
    PROCEDURE VerifyTable5095824@1000000015();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::eBayPAYONESetup);
    END;

    [Test]
    PROCEDURE VerifyTable5095935@1000000014();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::eBayPensioSetup);
    END;

    [Test]
    PROCEDURE VerifyTable5095937@1000000012();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::eBayFactoringSetup);
    END;

    [Test]
    PROCEDURE VerifyTable5157802@1000000010();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"OPplus Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5157853@1000000009();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"G/L Open Entries Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5157882@1000000021();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"OPplus Analysis Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5157892@1000000020();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"OPplus Payment Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5157899@1000000019();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"Payment Posting Setup");
    END;

    [Test]
    PROCEDURE VerifyTable5327160@1000000018();
    BEGIN
      Initialize;
      VerifySetupTable(DATABASE::"ACF Setup");
    END;

    LOCAL PROCEDURE Initialize@1000000045();
    BEGIN
      IF isInitialized THEN
        EXIT;
      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE ExportTableToXML@1000000000(TableID@1000000009 : Integer);
    VAR
      SIIXMLServices@1000000004 : Codeunit 50122;
      DOMDocument@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      xmlProcessingInst@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      DOMNode@1000000001 : ARRAY [100] OF Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      RecRef@1000000005 : RecordRef;
      FieldRef@1000000011 : FieldRef;
      I@1000000010 : Integer;
    BEGIN
      CREATE(DOMDocument);
      SIIXMLServices.SetNormalCase;
      xmlProcessingInst := DOMDocument.createProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      DOMNode[1] := DOMDocument.appendChild(xmlProcessingInst);
      DOMNode[1] := DOMDocument.createElement('Root');
      DOMNode[1] := DOMDocument.appendChild(DOMNode[1]);

      SIIXMLServices.AddElement(DOMNode[1],'Table','','',DOMNode[2]);
      SIIXMLServices.AddAttribute(DOMNode[2],'ID',FORMAT(TableID));
      RecRef.OPEN(TableID);
      RecRef.FINDSET;
      REPEAT
        SIIXMLServices.AddElement(DOMNode[2],'Line','','',DOMNode[3]);
        FOR I := 1 TO RecRef.FIELDCOUNT DO BEGIN
          FieldRef := RecRef.FIELDINDEX(I);
          // H2002 15.01.15 MM ++++++++++++++++++++++++
          IF NOT (FORMAT(FieldRef.CLASS) = 'FlowField') THEN BEGIN
            SIIXMLServices.AddElement(DOMNode[3],'field',FORMAT(FieldRef.VALUE),'',DOMNode[4]);
            SIIXMLServices.AddAttribute(DOMNode[4],'ID',FORMAT(FieldRef.NUMBER));
          END;
          // H2002 15.01.15 MM ------------------------
        END;
      UNTIL RecRef.NEXT = 0;

      SaveXMLtoFile(DOMDocument,RecRef.NUMBER);
    END;

    LOCAL PROCEDURE VerifySetupTable@1000000003(TableId@1000000001 : Integer);
    VAR
      XMLDocument@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      XMLNodeList@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      XMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      CREATE(XMLDocument);
      XMLDocument.async(FALSE);
      IF NOT XMLDocument.load(FolderPathTxt + GetDatabaseName + '\' + FORMAT(TableId) + '.xml') THEN  // H2002 15.01.15 MM.
        Assert.Fail(STRSUBSTNO(NoXMLFileErr,TableId));

      // Read Table.
      XMLNodeList := XMLDocument.getElementsByTagName('Root/Table');
      XMLNode := XMLNodeList.item(0);
      WHILE NOT ISCLEAR(XMLNode) DO BEGIN
        ReadTable(XMLNode);
        XMLNode := XMLNodeList.nextNode;
      END;
    END;

    LOCAL PROCEDURE ReadTable@1000000011(XMLNodeMain@1000000008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode");
    VAR
      XMLAttrListMain@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      XMLAttrMain@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF85-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMAttribute";
      XMLNodeList@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      XMLNode@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      RecRef@1000000001 : RecordRef;
      TabId@1000000009 : Integer;
    BEGIN
      // Read Table ID as attribute.
      XMLAttrListMain := XMLNodeMain.attributes;
      XMLAttrMain := XMLAttrListMain.getNamedItem('ID');
      EVALUATE(TabId,XMLAttrMain.text);
      RecRef.OPEN(TabId);
      RecRef.FINDFIRST;

      XMLNodeList := XMLNodeMain.childNodes;  // Get Lines.
      XMLNode := XMLNodeList.nextNode;
      WHILE NOT ISCLEAR(XMLNode) DO BEGIN
        ReadLines(XMLNode,RecRef);
        RecRef.NEXT;
        XMLNode := XMLNodeList.nextNode;
      END;
    END;

    LOCAL PROCEDURE ReadLines@1000000013(XMLNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";RecRef@1000000008 : RecordRef);
    VAR
      XMLAttrChild@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF85-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMAttribute";
      XMLNodeListChild@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      XMLNodeChild@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      FieldRef@1000000003 : FieldRef;
      FieldId@1000000001 : Integer;
    BEGIN
      XMLNodeListChild := XMLNode.childNodes; // Get Fields.
      XMLNodeChild := XMLNodeListChild.item(0);
      WHILE NOT ISCLEAR(XMLNodeChild) DO BEGIN
        // Read field ID as attribute, Value of the field.
        XMLAttrChild := XMLNodeChild.attributes.item(0);
        EVALUATE(FieldId,XMLAttrChild.text);
        FieldRef := RecRef.FIELD(FieldId);

        Assert.AreEqual(
          XMLNodeChild.text,LibrarySales.TrimSpaces(FORMAT(FieldRef.VALUE)),
          STRSUBSTNO(WrongFieldErr,RecRef.RECORDID,FieldRef.NUMBER,FieldRef.NAME));

        XMLNodeChild := XMLNodeListChild.nextNode;
      END;
    END;

    LOCAL PROCEDURE SaveXMLtoFile@1000000001(DOMDocument@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";TableId@1000000001 : Integer);
    VAR
      TempBlobRequest@1000000004 : TEMPORARY Record 99008535;
      rtFileSystem@1000000005 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      OutStream@1000000003 : OutStream;
      FolderName@1000000006 : Text[1024];
      Filename@1000000002 : Text[1024];
    BEGIN
      TempBlobRequest.INSERT;
      TempBlobRequest.Blob.CREATEOUTSTREAM(OutStream);
      DOMDocument.save(OutStream);
      TempBlobRequest.MODIFY;

      // H2002 15.01.15 MM ++++++++++++++++++++++++
      FolderName := FolderPathTxt + GetDatabaseName;

      CREATE(rtFileSystem);
      IF NOT rtFileSystem.FolderExists(FolderName) THEN
        rtFileSystem.CreateFolder(FolderName);
      // H2002 15.01.15 MM ------------------------

      Filename := FolderName + '\' + FORMAT(TableId) + '.xml'; // H2002 15.01.15 MM.
      IF FILE.EXISTS(Filename) THEN
        FILE.ERASE(Filename);

      TempBlobRequest.Blob.EXPORT(Filename);
    END;

    LOCAL PROCEDURE GetDatabaseName@1000000005() : Text[250];
    VAR
      Database@1000000000 : Record 2000000048;
    BEGIN
      // H2002 15.01.15 MM ++++++++++++++++++++++++
      Database.SETRANGE("My Database",TRUE);
      Database.FINDFIRST;
      EXIT(Database."Database Name");
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      H1919       09.01.15  MM        Testing: Verify NAV Setups - Codeunit Created
      H2002       15.01.15  MM        Testing: Verification of NAV Setups: extend for different databases

      Test Cases:
      1.  ExportSetupTables
      2.  VerifyTable91
      3.  VerifyTable98
      4.  VerifyTable242
      5.  VerifyTable252
      6.  VerifyTable311
      7.  VerifyTable312
      8.  VerifyTable313
      9.  VerifyTable314
      10. VerifyTable325
      11. VerifyTable402
      12. VerifyTable403
      13. VerifyTable404
      14. VerifyTable470
      15. VerifyTable5079
      16. VerifyTable5603
      17. VerifyTable5604
      18. VerifyTable5769
      19. VerifyTable5813
      20. VerifyTable11020
      21. VerifyTable50000
      22. VerifyTable50012
      23. VerifyTable50014
      24. VerifyTable50022
      25. VerifyTable50055
      26. VerifyTable50079
      27. VerifyTable50092
      28. VerifyTable50099
      29. VerifyTable50101
      30. VerifyTable50108
      31. VerifyTable50115
      32. VerifyTable50119
      33. VerifyTable50128
      34. VerifyTable50140
      35. VerifyTable50163
      36. VerifyTable75402
      37. VerifyTable82850
      38. VerifyTable5001901
      39. VerifyTable5055253
      40. VerifyTable5095800
      41. VerifyTable5095824
      42. VerifyTable5095935
      43. VerifyTable5095937
      44. VerifyTable5157802
      45. VerifyTable5157853
      46. VerifyTable5157882
      47. VerifyTable5157892
      48. VerifyTable5157899
      49. VerifyTable5327160
    }
    END.
  }
}

