OBJECT Codeunit 50170 TEST
{
  OBJECT-PROPERTIES
  {
    Date=13.07.15;
    Time=18:19:23;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=VAR
            JobQueueLogEntryV@1000000000 : Record 474;
          BEGIN
            //MESSAGE(FORMAT(TIME+180000));
            MESSAGE(FORMAT(CURRENTDATETIME));
            //MESSAGE(FORMAT(CALCDATE('+4D'+DT2DATE(CURRENTDATETIME)));

            MESSAGE(FORMAT(CREATEDATETIME((CALCDATE('<+1W>',DT2DATE(CURRENTDATETIME))),DT2TIME(CURRENTDATETIME))));
            //JobQueueLogEntryV.GET(3100326);
            //CalculateAverageDuration2(  JobQueueLogEntryV);
          END;

  }
  CODE
  {

    PROCEDURE CalculateAverageDuration@1000000002(JobQueueLogEntryV@1000000000 : Record 474) AverageDurationO : Duration;
    VAR
      JobQueueEntryL@1000000001 : Record 472;
      JobQueueEntryLogL@1000000002 : Record 474;
      SumDurationL@1000000003 : Duration;
      NoOfEntriesL@1000000004 : Integer;
      CurrentEntryIsValidForAvgL@1000000005 : Boolean;
    BEGIN
      //H2009 17.02.15 MSL +++++++++++++++++++++++++++++++++++++++++++
      IF JobQueueEntryL.GET(JobQueueLogEntryV.ID) THEN BEGIN
        //check if current log entry qualifies
        IF ((JobQueueLogEntryV."Start Date/Time" > CREATEDATETIME(
                                                    TODAY-7,000000T)) AND
          ((JobQueueLogEntryV.Duration > JobQueueEntryL."Avg. Duration Min. Limit (sec)" * 1000 ) AND
          (JobQueueEntryL."Avg. Duration Min. Limit (sec)" > 0)) AND
          (JobQueueEntryL.Status = JobQueueEntryLogL.Status::Success))
        THEN
          CurrentEntryIsValidForAvgL := TRUE;

        //check entries in the DB
        JobQueueEntryLogL.SETRANGE(ID,JobQueueLogEntryV.ID);
        JobQueueEntryLogL.SETRANGE(
          "Start Date/Time",
          CREATEDATETIME((CALCDATE('<+1W>',DT2DATE(JobQueueLogEntryV."Start Date/Time"))),DT2TIME(JobQueueLogEntryV."Start Date/Time")),
          CREATEDATETIME((CALCDATE('<+1W>',DT2DATE(JobQueueLogEntryV."Start Date/Time"))),235900T));
        JobQueueEntryLogL.SETFILTER(Duration,'>%1',(JobQueueEntryL."Avg. Duration Min. Limit (sec)" * 1000));
        JobQueueEntryLogL.SETRANGE(Status,JobQueueEntryLogL.Status::Success);
        IF JobQueueEntryLogL.FINDSET THEN BEGIN
          NoOfEntriesL := JobQueueEntryLogL.COUNT;
          REPEAT
            SumDurationL := SumDurationL + JobQueueEntryLogL.Duration;
          UNTIL JobQueueEntryLogL.NEXT = 0;
          IF NOT CurrentEntryIsValidForAvgL THEN
            EVALUATE(AverageDurationO,FORMAT((((SumDurationL)/3600000)/NoOfEntriesL)))
          ELSE
            EVALUATE(AverageDurationO,FORMAT((((SumDurationL+JobQueueLogEntryV.Duration)/3600000)/(NoOfEntriesL+1))));
          EXIT(AverageDurationO);
        END ELSE BEGIN
         IF  CurrentEntryIsValidForAvgL THEN
           EXIT(JobQueueLogEntryV.Duration)
         ELSE
           EXIT (0);
        END;
      END ELSE BEGIN
        EXIT(0);
      END;
      //H2009 17.02.15 MSL -------------------------------------------
    END;

    PROCEDURE CalculateAverageDuration2@1000000001(JobQueueLogEntryV@1000000000 : Record 474) AverageDurationO : Duration;
    VAR
      JobQueueEntryL@1000000001 : Record 472;
      JobQueueEntryLogL@1000000002 : Record 474;
      SumDurationL@1000000003 : Duration;
      NoOfEntriesL@1000000004 : Integer;
      CurrentEntryIsValidForAvgL@1000000005 : Boolean;
      i@1000000006 : Integer;
    BEGIN
      //H2009 17.02.15 MSL +++++++++++++++++++++++++++++++++++++++++++
      IF JobQueueEntryL.GET('{6CB0E298-F200-4291-9B63-8D205F0F830A}') THEN BEGIN
        //check if current log entry qualifies
        IF ((JobQueueLogEntryV."Start Date/Time" > CREATEDATETIME(
                                                    TODAY-7,000000T)) AND
          ((JobQueueLogEntryV.Duration > JobQueueEntryL."Avg. Duration Min. Limit (sec)" * 1000 ) AND
          (JobQueueEntryL."Avg. Duration Min. Limit (sec)" > 0)) AND
          (JobQueueEntryL.Status = JobQueueEntryLogL.Status::Success))
        THEN
          CurrentEntryIsValidForAvgL := TRUE;

        //check entries in the DB
        i:= 1;
        JobQueueEntryLogL.SETRANGE(ID,JobQueueLogEntryV.ID);
        JobQueueEntryLogL.SETFILTER(Duration,'>%1',(JobQueueEntryL."Avg. Duration Min. Limit (sec)" * 1000));
        JobQueueEntryLogL.SETRANGE(Status,JobQueueEntryLogL.Status::Success);

        REPEAT
        MESSAGE(FORMAT(i));
           MESSAGE(FORMAT(CREATEDATETIME(TODAY-(i*7),TIME)));
          JobQueueEntryLogL.SETRANGE("Start Date/Time",
                                      CREATEDATETIME(TODAY-(i*7),TIME),
                                      CREATEDATETIME(TODAY,TIME));
          IF JobQueueEntryLogL.FINDFIRST THEN BEGIN
            NoOfEntriesL := NoOfEntriesL + 1;
            SumDurationL := SumDurationL + JobQueueEntryLogL.Duration;
            i:=i+1;
            MESSAGE(FORMAT(CREATEDATETIME(TODAY-(i*7),TIME)));
          END;
        UNTIL i = 5 ;

        IF NoOfEntriesL = 0 THEN BEGIN
          IF CurrentEntryIsValidForAvgL THEN
             EXIT(JobQueueLogEntryV.Duration)
          ELSE
             EXIT (0);
        END
        ELSE BEGIN
          IF NOT CurrentEntryIsValidForAvgL THEN
            EVALUATE(AverageDurationO,FORMAT((((SumDurationL)/3600000)/NoOfEntriesL)))
          ELSE
            EVALUATE(AverageDurationO,FORMAT((((SumDurationL+JobQueueLogEntryV.Duration)/3600000)/(NoOfEntriesL+1))));
          EXIT(AverageDurationO);
        END;
      END
      ELSE BEGIN
        EXIT(0);
      END;
      //H2009 17.02.15 MSL -------------------------------------------
    END;

    PROCEDURE CalculateAverageDura2222@1000000003(JobQueueLogEntryV@1000000000 : Record 474) AverageDurationO : Duration;
    VAR
      JobQueueEntryL@1000000001 : Record 472;
      JobQueueEntryLogL@1000000002 : Record 474;
      SumDurationL@1000000003 : Duration;
      NoOfEntriesL@1000000004 : Integer;
      CurrentEntryIsValidForAvgL@1000000005 : Boolean;
      i@1000000006 : Integer;
      DateFormulaL@1000000007 : Text[30];
    BEGIN
      //H2009 17.02.15 MSL +++++++++++++++++++++++++++++++++++++++++++
      IF JobQueueEntryL.GET(JobQueueLogEntryV.ID) THEN BEGIN
        //check if current log entry qualifies
        IF ( (JobQueueLogEntryV."Start Date/Time" > CREATEDATETIME(TODAY,000000T)) AND
          (JobQueueLogEntryV.Duration > JobQueueEntryL."Avg. Duration Min. Limit (sec)" * 1000 ) AND

          (JobQueueEntryL.Status = JobQueueEntryLogL.Status::Success))
        THEN
          CurrentEntryIsValidForAvgL := TRUE;

        //check entries in the DB
        i:= 1;
        JobQueueEntryLogL.SETRANGE(ID,JobQueueLogEntryV.ID);
        JobQueueEntryLogL.SETFILTER(Duration,'>%1',(JobQueueEntryL."Avg. Duration Min. Limit (sec)" * 1000));
        JobQueueEntryLogL.SETRANGE(Status,JobQueueEntryLogL.Status::Success);

        REPEAT
          DateFormulaL :=STRSUBSTNO('<-%1W>',FORMAT(i));
          JobQueueEntryLogL.SETRANGE(
            "Start Date/Time",
          CREATEDATETIME((CALCDATE(DateFormulaL,DT2DATE(JobQueueLogEntryV."Start Date/Time"))),
                         DT2TIME(JobQueueLogEntryV."Start Date/Time")),
          CREATEDATETIME((CALCDATE(DateFormulaL,DT2DATE(JobQueueLogEntryV."Start Date/Time"))),
                         235900T));

          IF JobQueueEntryLogL.FINDFIRST THEN BEGIN
            NoOfEntriesL := NoOfEntriesL + 1;
            SumDurationL := SumDurationL + JobQueueEntryLogL.Duration;

          END;
          i:=i+1;
        UNTIL i = 4 ;

        IF NoOfEntriesL = 0 THEN BEGIN
          IF CurrentEntryIsValidForAvgL THEN
             EXIT(JobQueueLogEntryV.Duration)
          ELSE
             EXIT (0);
        END
        ELSE BEGIN
          IF NOT CurrentEntryIsValidForAvgL THEN
            EVALUATE(AverageDurationO,FORMAT((((SumDurationL)/3600000)/NoOfEntriesL)))
          ELSE
            EVALUATE(AverageDurationO,FORMAT((((SumDurationL+JobQueueLogEntryV.Duration)/3600000)/(NoOfEntriesL+1))));
          EXIT(AverageDurationO);
        END;
      END
      ELSE BEGIN
        EXIT(0);
      END;
      //H2009 17.02.15 MSL -------------------------------------------
    END;

    BEGIN
    END.
  }
}

