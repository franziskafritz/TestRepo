OBJECT Codeunit 12 Gen. Jnl.-Post Line
{
  OBJECT-PROPERTIES
  {
    Date=26.05.15;
    Time=12:23:10;
    Modified=Yes;
    Version List=NAVW16.00.01,NAVDACH4.00,CO4.01,AR4.00.03,eBay1.06.12,OPP7,HME4277;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 17=imd,
                TableData 21=imd,
                TableData 25=imd,
                TableData 45=imd,
                TableData 253=rimd,
                TableData 254=imd,
                TableData 271=imd,
                TableData 272=imd,
                TableData 355=rimd,
                TableData 379=imd,
                TableData 380=imd,
                TableData 5601=rimd,
                TableData 5617=imd,
                TableData 5625=rimd,
                TableData 5001902=rimd,
                TableData 5157852=imd;
    OnRun=VAR
            TempJnlLineDim2@1000 : TEMPORARY Record 356;
          BEGIN
            GLSetup.GET;
            // gbedv ALL ------------------------------------------------- BEGIN
            SetupOPplus();
            // gbedv ALL ------------------------------------------------- END
            TempJnlLineDim2.RESET;
            TempJnlLineDim2.DELETEALL;
            IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
              TempJnlLineDim2."Table ID" := DATABASE::"Gen. Journal Line";
              TempJnlLineDim2."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim2."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim2."Journal Line No." := "Line No.";
              TempJnlLineDim2."Dimension Code" := GLSetup."Global Dimension 1 Code";
              TempJnlLineDim2."Dimension Value Code" := "Shortcut Dimension 1 Code";
              TempJnlLineDim2.INSERT;
            END;
            IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
              TempJnlLineDim2."Table ID" := DATABASE::"Gen. Journal Line";
              TempJnlLineDim2."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim2."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim2."Journal Line No." := "Line No.";
              TempJnlLineDim2."Dimension Code" := GLSetup."Global Dimension 2 Code";
              TempJnlLineDim2."Dimension Value Code" := "Shortcut Dimension 2 Code";
              TempJnlLineDim2.INSERT;
            END;
            RunWithCheck(Rec,TempJnlLineDim2);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=%1 sollte gerundet werden;ENU=%1 needs to be rounded';
      Text001@1001 : TextConst 'DEU=Verkauf %1 %2 existiert bereits.;ENU=Sales %1 %2 already exists.';
      Text002@1002 : TextConst 'DEU=Einkauf %1 %2 ist schon vorhanden.;ENU=Purchase %1 %2 already exists.';
      Text003@1003 : TextConst 'DEU=Einkauf %1 %2 existiert bereits fÅr diesen Kreditor.;ENU=Purchase %1 %2 already exists for this vendor.';
      Text004@1004 : TextConst 'DEU=darf nicht angegeben werden, wenn sich %1 in %2 und %3 unterscheidet.;ENU=must not be filled when %1 is different in %2 and %3.';
      Text005@1005 : TextConst 'DEU=" muss eingegeben werden, wenn %1 %2 ist";ENU=" must be entered when %1 is %2"';
      Text006@1006 : TextConst 'DEU=Scheck %1 ist fÅr dieses Bankkonto bereits vorhanden.;ENU=Check %1 already exists for this Bank Account.';
      GLSetup@1009 : Record 98;
      SalesSetup@1010 : Record 311;
      PurchSetup@1011 : Record 312;
      AccountingPeriod@1012 : Record 50;
      GLAcc@1013 : Record 15;
      GLEntry@1014 : Record 17;
      GLEntryTmp@1015 : TEMPORARY Record 17;
      TempGLEntryVAT@1016 : TEMPORARY Record 17;
      OrigGLEntry@1017 : Record 17;
      VATPostingSetup@1019 : Record 325;
      Cust@1020 : Record 18;
      Vend@1021 : Record 23;
      GenJnlLine@1022 : Record 81;
      TempJnlLineDim@1024 : TEMPORARY Record 356;
      TempFAJnlLineDim@1025 : TEMPORARY Record 356;
      GLReg@1029 : Record 45;
      CustPostingGr@1030 : Record 92;
      VendPostingGr@1031 : Record 93;
      Currency@1032 : Record 4;
      AddCurrency@1033 : Record 4;
      ApplnCurrency@1034 : Record 4;
      CurrExchRate@1035 : Record 330;
      VATEntry@1038 : Record 254;
      BankAcc@1039 : Record 270;
      BankAccLedgEntry@1040 : Record 271;
      CheckLedgEntry@1041 : Record 272;
      CheckLedgEntry2@1042 : Record 272;
      BankAccPostingGr@1043 : Record 277;
      GenJnlTemplate@1044 : Record 80;
      TaxJurisdiction@1045 : Record 320;
      TaxDetail@1046 : Record 322;
      FAGLPostBuf@1047 : TEMPORARY Record 5637;
      LedgerEntryDim@1105000011 : Record 355;
      JnlLineDim@1105000010 : Record 356;
      SourceCodeSetup@1105000009 : Record 242;
      CostAccJnlLine@1105000008 : Record 5000027;
      CostAccJnlLine2@1105000007 : Record 5000027;
      CostAccLedgEntry@1105000006 : Record 5000028;
      CostAccSetup@1105000005 : Record 5000099;
      ProjAccSetup@1105000004 : Record 5000221;
      ProjAccJnlLine@1105000003 : Record 5000202;
      ProjAccJnlLine2@1105000002 : Record 5000202;
      ProjAccLedgEntry@1105000001 : Record 5000203;
      LicPermission@1105000000 : Record 2000000043;
      UnrealizedCustLedgEntry@1084 : Record 21;
      UnrealizedVendLedgEntry@1085 : Record 25;
      GLEntryVatEntrylink@1087 : Record 253;
      TempVatEntry@1088 : TEMPORARY Record 254;
      ReversedGLEntryTemp@1089 : TEMPORARY Record 17;
      PaymLedgEntry@1105400003 : Record 5001902;
      PaymLedgEntry2@1105400002 : Record 5001902;
      ForeignPaymentEntry@1105400001 : Record 5001941;
      ForPaymentEntry2@1105400000 : Record 5001941;
      GenJnlCheckLine@1048 : Codeunit 11;
      ExchAccGLJnlLine@1049 : Codeunit 366;
      FAJnlPostLine@1050 : Codeunit 5632;
      SalesTaxCalculate@1051 : Codeunit 398;
      GenJnlApply@1052 : Codeunit 225;
      DimMgt@1053 : Codeunit 408;
      JobPostLine@1028 : Codeunit 1001;
      AutomaticCostPosting@1105000015 : Codeunit 5000099;
      SplitAmount@1105000014 : Codeunit 5000036;
      PostCostAccJnlLine@1105000013 : Codeunit 5000032;
      PostProjAccJnlLine@1105000012 : Codeunit 5000201;
      FiscalYearStartDate@1054 : Date;
      NextEntryNo@1055 : Integer;
      BalanceCheckAmount@1056 : Decimal;
      BalanceCheckAmount2@1057 : Decimal;
      BalanceCheckAddCurrAmount@1058 : Decimal;
      BalanceCheckAddCurrAmount2@1059 : Decimal;
      CurrentBalance@1060 : Decimal;
      SalesTaxBaseAmount@1061 : Decimal;
      TotalAddCurrAmount@1062 : Decimal;
      TotalAmount@1063 : Decimal;
      UnrealizedRemainingAmountCust@1086 : Decimal;
      UnrealizedRemainingAmountVend@1074 : Decimal;
      NextVATEntryNo@1064 : Integer;
      FirstNewVATEntryNo@1065 : Integer;
      NextTransactionNo@1066 : Integer;
      NextConnectionNo@1067 : Integer;
      InsertedTempGLEntryVAT@1068 : Integer;
      LastDocNo@1069 : Code[20];
      LastLineNo@1070 : Integer;
      LastDate@1071 : Date;
      LastDocType@1072 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder';
      NextCheckEntryNo@1073 : Integer;
      AddCurrGLEntryVATAmt@1075 : Decimal;
      CurrencyDate@1076 : Date;
      CurrencyFactor@1077 : Decimal;
      UseCurrFactorOnly@1078 : Boolean;
      NonAddCurrCodeOccured@1079 : Boolean;
      FADimAlreadyChecked@1080 : Boolean;
      Text010@1008 : TextConst 'DEU=Rundungsdifferenz von %1;ENU=Residual caused by rounding of %1';
      Text013@1007 : TextConst 'DEU=Eine im %1 %2, %3, %4 verwendete Dimension hat einen Fehler hervorgerufen. %5;ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5';
      Text014@1026 : TextConst 'DEU=Bei der Stornierung wurde ein %1 ohne Åbereinstimmenden %2 gefunden.;ENU=Reversal found a %1 without a matching %2.';
      Text015@1023 : TextConst 'DEU=Sie kînnen die Transaktion nicht stornieren, weil sie bereits storniert ist.;ENU=You cannot reverse the transaction, because it has already been reversed.';
      Text011@1027 : TextConst 'DEU=Die Kombination der in %1 %2 verwendeten Dimensionen ist gesperrt. %3;ENU=The combination of dimensions used in %1 %2 is blocked. %3';
      AllApplied@1081 : Boolean;
      OverrideDimErr@1018 : Boolean;
      JobLine@1036 : Boolean;
      Prepayment@1037 : Boolean;
      CheckUnrealizedCust@1082 : Boolean;
      CheckUnrealizedVend@1083 : Boolean;
      "+++ OPplus +++"@5157804 : Integer;
      ApplyLineDetails@5157810 : Record 5157804;
      DefaultDimension@5157809 : Record 352;
      TempGLEntryPmtCorrection@5157808 : TEMPORARY Record 17;
      BankDocument@5157807 : Record 5157809;
      OPplusSetup@5157806 : Record 5157802;
      OPPLicenseInfo@5157805 : Codeunit 5158000;
      FinanceTools@5157823 : Codeunit 5157802;
      SkipDimCheck@5157803 : Boolean;
      PostAtOnce@5157802 : Boolean;
      OPplusEnabled@5157817 : Boolean;
      OPplusSetupRead@5157814 : Boolean;
      TotalAmt5@5157825 : Decimal;
      GLOpenEntries@5157811 : Codeunit 5157852;
      OPplusVALSetup@5157822 : Record 5157863;
      VALTools@5157813 : Codeunit 5157862;
      OPplusVALEnabled@5157812 : Boolean;
      OPplusAnalysisSetup@5157821 : Record 5157882;
      OPplusAnalysisEnabled@5157815 : Boolean;
      OPplusPmtSetup@5157826 : Record 5157892;
      SinglePmtBankAccount@5157824 : Record 5157900;
      PmtTools@5157819 : Codeunit 5157892;
      OPplusPmtEnabled@5157816 : Boolean;
      Darlehen@1000000000 : Record 50080;
      GOBBAnkACC@1000000001 : Record 270;
      "*** HME Globals ***"@1000000003 : Integer;
      InvH24Mgt@1000000002 : Codeunit 50321;
      "**HME*************************"@1000081802 : TextConst;
      TextHME001@100081803 : TextConst 'ENU=There is no exchange rate for %1';

    PROCEDURE GetGLReg@10(VAR NewGLReg@1000 : Record 45);
    BEGIN
      NewGLReg := GLReg;
    END;

    PROCEDURE RunWithCheck@45(VAR GenJnlLine2@1000 : Record 81;VAR TempJnlLineDim2@1001 : Record 356);
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      TempJnlLineDim.RESET;
      TempJnlLineDim.DELETEALL;
      DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim2,TempJnlLineDim);
      // gbedv ALL ------------------------------------------------- BEGIN
      SetupOPplus();
      // gbedv ALL ------------------------------------------------- END
      Code(TRUE);
      GenJnlLine2 := GenJnlLine;
    END;

    PROCEDURE RunWithoutCheck@21(VAR GenJnlLine2@1000 : Record 81;VAR TempJnlLineDim2@1001 : Record 356);
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      TempJnlLineDim.RESET;
      TempJnlLineDim.DELETEALL;
      DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim2,TempJnlLineDim);
      // gbedv ALL ------------------------------------------------- BEGIN
      SetupOPplus();
      // gbedv ALL ------------------------------------------------- END
      // gbedv EA -------------------------------------------------- BEGIN
      IF OPplusEnabled THEN BEGIN
        ApplyLineDetails.SETRANGE("Journal Template Name", GenJnlLine."Journal Template Name");
        ApplyLineDetails.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
        ApplyLineDetails.SETRANGE("Line No.", GenJnlLine."Line No.");
        IF ApplyLineDetails.FINDFIRST AND (GenJnlLine."Applies-to ID" = OPplusSetup.GetExtendedText) THEN
          PostExtApplication()
        ELSE
          Code(FALSE);
      END ELSE
      // gbedv EA -------------------------------------------------- END
      Code(FALSE);
      GenJnlLine2 := GenJnlLine;
      // gbedv EA -------------------------------------------------- BEGIN
      IF OPplusEnabled THEN
        IF NOT ApplyLineDetails.ISEMPTY THEN
          ApplyLineDetails.DELETEALL;
      // gbedv EA -------------------------------------------------- END
    END;

    LOCAL PROCEDURE Code@9(CheckLine@1000 : Boolean);
    VAR
      "--eBay"@5095801 : Boolean;
      eBayFinancialAccounting@5095802 : Codeunit 5095805;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN BEGIN
          LastDocType := "Document Type";
          LastDocNo := "Document No.";
          LastLineNo := "Line No.";
          LastDate := "Posting Date";
          EXIT;
        END;

        IF CheckLine THEN BEGIN
          IF OverrideDimErr THEN
            GenJnlCheckLine.SetOverDimErr;
          GenJnlCheckLine.RunCheck(GenJnlLine,TempJnlLineDim);
        END;
        IF "Currency Code" = '' THEN BEGIN
          Currency.InitRoundingPrecision;
          "Amount (LCY)" := Amount;
          "VAT Amount (LCY)" := "VAT Amount";
          "VAT Base Amount (LCY)" := "VAT Base Amount";
        END ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          IF NOT "System-Created Entry" THEN BEGIN
            "Source Currency Code" := "Currency Code";
            "Source Currency Amount" := Amount;
            "Source Curr. VAT Base Amount" := "VAT Base Amount";
            "Source Curr. VAT Amount" := "VAT Amount";
          END;
        END;
        IF "Additional-Currency Posting" = "Additional-Currency Posting"::None THEN BEGIN
          IF Amount <> ROUND(Amount,Currency."Amount Rounding Precision") THEN
            FIELDERROR(
              Amount,
              STRSUBSTNO(Text000,Amount));
          IF "Amount (LCY)" <> ROUND("Amount (LCY)") THEN
            FIELDERROR(
              "Amount (LCY)",
              STRSUBSTNO(Text000,"Amount (LCY)"));
        END;

        IF ("Bill-to/Pay-to No." = '') THEN
          CASE TRUE OF
            "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Account No.";
            "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Bal. Account No.";
          END;
        IF "Document Date" = 0D THEN
          "Document Date" := "Posting Date";
        IF "Due Date" = 0D THEN
          "Due Date" := "Posting Date";

        JobLine := (GenJnlLine."Job No." <> '');

        InitCodeUnit;

        IF ("Account No." <> '') AND ("Bal. Account No." <> '') AND (NOT "System-Created Entry") AND
           ("Account Type" IN
            ["Account Type"::Customer,
             "Account Type"::Vendor,
             "Account Type"::"Fixed Asset"])
        THEN
          ExchAccGLJnlLine.RUN(GenJnlLine);



        // gbedv EA -------------------------------------------------- BEGIN
        IF OPplusEnabled THEN
          FinanceTools.UpdatePmtImportLine(GenJnlLine);
        // gbedv EA -------------------------------------------------- END
        // gbedv PMT ------------------------------------------------- BEGIN
        IF OPplusPmtEnabled THEN
          PmtTools.PostPmtExtended(GenJnlLine,NextEntryNo,NextTransactionNo);
        // gbedv PMT ------------------------------------------------- END
        IF "Account No." <> '' THEN
          CASE "Account Type" OF
            "Account Type"::"G/L Account":
              PostGLAcc;
            "Account Type"::Customer:
              PostCust;
            "Account Type"::Vendor:
              PostVend;
            "Account Type"::"Bank Account":
              PostBankAcc;
            "Account Type"::"Fixed Asset":
              PostFixedAsset;
            "Account Type"::"IC Partner":
              PostICPartner;
            END;

        IF "Bal. Account No." <> '' THEN BEGIN
          ExchAccGLJnlLine.RUN(GenJnlLine);
          IF "Account No." <> '' THEN
            CASE "Account Type" OF
              "Account Type"::"G/L Account":
                PostGLAcc;
              "Account Type"::Customer:
                PostCust;
              "Account Type"::Vendor:
                PostVend;
              "Account Type"::"Bank Account":
                PostBankAcc;
              "Account Type"::"Fixed Asset":
                PostFixedAsset;
              "Account Type"::"IC Partner":
                PostICPartner;
            END;
        END;

        FinishCodeunit;

      //eBay#002
        eBayFinancialAccounting.AuftragFakturieren();
      //eBay#002

      END;
    END;

    PROCEDURE InitVat@33();
    VAR
      LCYCurrency@1000 : Record 4;
    BEGIN
      LCYCurrency.InitRoundingPrecision;
      WITH GenJnlLine DO
        IF "Gen. Posting Type" <> 0 THEN BEGIN // None
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          TESTFIELD("VAT Calculation Type",VATPostingSetup."VAT Calculation Type");
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                GLEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
                GLEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
                GLEntry."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
                GLEntry."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
                GLEntry."Tax Area Code" := "Tax Area Code";
                GLEntry."Tax Liable" := "Tax Liable";
                GLEntry."Tax Group Code" := "Tax Group Code";
                GLEntry."Use Tax" := "Use Tax";
                CASE "VAT Calculation Type" OF
                  "VAT Calculation Type"::"Normal VAT":
                    BEGIN
                      IF "VAT Difference" <> 0 THEN BEGIN
                        GLEntry.Amount := "VAT Base Amount (LCY)";
                        GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                        GLEntry."Additional-Currency Amount" := "Source Curr. VAT Base Amount";
                        IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                          AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                        ELSE
                          AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                      END ELSE BEGIN
                        GLEntry."VAT Amount" :=
                          ROUND(
                            "Amount (LCY)" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                            LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                        GLEntry.Amount := "Amount (LCY)" - GLEntry."VAT Amount";
                        IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                          AddCurrGLEntryVATAmt :=
                            ROUND(
                              "Source Currency Amount" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                              AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                        ELSE
                          AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        GLEntry."Additional-Currency Amount" := "Source Currency Amount" - AddCurrGLEntryVATAmt;
                      END;
                    END;
                  "VAT Calculation Type"::"Reverse Charge VAT":
                    CASE "Gen. Posting Type" OF
                      "Gen. Posting Type"::Purchase:
                        BEGIN
                          IF "VAT Difference" <> 0 THEN BEGIN
                            GLEntry."VAT Amount" := "VAT Amount (LCY)";
                            IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                              AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                            ELSE
                              AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                          END ELSE BEGIN
                            GLEntry."VAT Amount" :=
                              ROUND(
                                GLEntry.Amount * VATPostingSetup."VAT %" / 100,
                                LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                            IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                              AddCurrGLEntryVATAmt :=
                                ROUND(
                                  GLEntry."Additional-Currency Amount" * VATPostingSetup."VAT %" / 100,
                                  AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                            ELSE
                              AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                          END;
                        END;
                      "Gen. Posting Type"::Sale:
                        BEGIN
                          GLEntry."VAT Amount" := 0;
                          AddCurrGLEntryVATAmt := 0;
                        END;
                    END;
                  "VAT Calculation Type"::"Full VAT":
                    BEGIN
                      CASE "Gen. Posting Type" OF
                        "Gen. Posting Type"::Sale:
                          BEGIN
                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                            TESTFIELD("Account No.",VATPostingSetup."Sales VAT Account");
                          END;
                        "Gen. Posting Type"::Purchase:
                          BEGIN
                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                            TESTFIELD("Account No.",VATPostingSetup."Purchase VAT Account");
                          END;
                      END;
                      GLEntry.Amount := 0;
                      GLEntry."Additional-Currency Amount" := 0;
                      GLEntry."VAT Amount" := "Amount (LCY)";
                      IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                        AddCurrGLEntryVATAmt := "Source Currency Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr("Amount (LCY)");
                    END;
                  "VAT Calculation Type"::"Sales Tax":
                    BEGIN
                      IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                         "Use Tax"
                      THEN BEGIN
                        GLEntry."VAT Amount" :=
                          ROUND(
                            SalesTaxCalculate.CalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry.Amount := "Amount (LCY)";
                      END ELSE BEGIN
                        GLEntry.Amount :=
                          ROUND(
                            SalesTaxCalculate.ReverseCalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      END;
                      GLEntry."Additional-Currency Amount" := "Source Curr. VAT Base Amount";
                      IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    END;
                END;
              END;
            "VAT Posting"::"Manual VAT Entry":
              BEGIN
                IF GenJnlLine."Gen. Posting Type" <> GenJnlLine."Gen. Posting Type"::Settlement THEN BEGIN
                  GLEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
                  GLEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
                  GLEntry."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
                  GLEntry."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
                  GLEntry."Tax Area Code" := "Tax Area Code";
                  GLEntry."Tax Liable" := "Tax Liable";
                  GLEntry."Tax Group Code" := "Tax Group Code";
                  GLEntry."Use Tax" := "Use Tax";
                  GLEntry."VAT Amount" := "VAT Amount (LCY)";
                  IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                    AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                  ELSE
                    AddCurrGLEntryVATAmt := CalcLCYToAddCurr("VAT Amount (LCY)");
                END;
              END;
          END;
        END;
      GLCalcAddCurrency(GLEntry."Additional-Currency Amount",TRUE);
    END;

    PROCEDURE PostVAT@34();
    VAR
      TaxDetail2@1008 : Record 322;
      VATAmount@1000 : Decimal;
      VATAmount2@1003 : Decimal;
      VATBase@1001 : Decimal;
      VATBase2@1004 : Decimal;
      SrcCurrVATAmount@1002 : Decimal;
      SrcCurrVATBase@1009 : Decimal;
      SrcCurrSalesTaxBaseAmount@1005 : Decimal;
      RemSrcCurrVATAmount@1007 : Decimal;
      TaxDetailFound@1006 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        // Post VAT
        // VAT for VAT entry
        CASE "VAT Calculation Type" OF
          "VAT Calculation Type"::"Normal VAT",
          "VAT Calculation Type"::"Reverse Charge VAT",
          "VAT Calculation Type"::"Full VAT":
            BEGIN
              IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN
                "VAT Base Amount (LCY)" := GLEntry.Amount;
              IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN
                AddCurrGLEntryVATAmt := "Source Curr. VAT Amount";
              InsertVAT(
                GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                GLEntry."Additional-Currency Amount",AddCurrGLEntryVATAmt,"Source Curr. VAT Base Amount");
              NextConnectionNo := NextConnectionNo + 1;
            END;
          "VAT Calculation Type"::"Sales Tax":
            BEGIN
              CASE "VAT Posting" OF
                "VAT Posting"::"Automatic VAT Entry":
                  SalesTaxBaseAmount := GLEntry.Amount;
                "VAT Posting"::"Manual VAT Entry":
                  SalesTaxBaseAmount := "VAT Base Amount (LCY)";
              END;
              IF ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") AND
                 ("Gen. Posting Type" = "Gen. Posting Type"::Settlement)
              THEN BEGIN
                TaxDetail."Tax Jurisdiction Code" := "Tax Area Code";
                "Tax Area Code" := '';
                InsertVAT(
                  GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                  "Source Curr. VAT Base Amount","Source Curr. VAT Amount","Source Curr. VAT Base Amount");
              END ELSE BEGIN
                CLEAR(SalesTaxCalculate);
                SalesTaxCalculate.InitSalesTaxLines(
                  "Tax Area Code","Tax Group Code","Tax Liable",
                  SalesTaxBaseAmount,Quantity,"Posting Date",GLEntry."VAT Amount");
                SrcCurrVATAmount := 0;
                SrcCurrSalesTaxBaseAmount := CalcLCYToAddCurr(SalesTaxBaseAmount);
                RemSrcCurrVATAmount := AddCurrGLEntryVATAmt;
                TaxDetailFound := FALSE;
                WHILE SalesTaxCalculate.GetSalesTaxLine(TaxDetail2,VATAmount,VATBase) DO BEGIN
                  RemSrcCurrVATAmount := RemSrcCurrVATAmount - SrcCurrVATAmount;
                  IF TaxDetailFound THEN
                    InsertVAT(
                      SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                      SrcCurrSalesTaxBaseAmount,SrcCurrVATAmount,SrcCurrVATBase);
                  TaxDetailFound := TRUE;
                  TaxDetail := TaxDetail2;
                  VATAmount2 := VATAmount;
                  VATBase2 := VATBase;
                  SrcCurrVATAmount := CalcLCYToAddCurr(VATAmount);
                  SrcCurrVATBase := CalcLCYToAddCurr(VATBase);
                END;
                IF TaxDetailFound THEN
                  InsertVAT(
                    SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                    SrcCurrSalesTaxBaseAmount,RemSrcCurrVATAmount,SrcCurrVATBase);
                InsertSummarizedVAT;
              END;
            END;
        END;
      END;
    END;

    PROCEDURE InsertVAT@30(GLEntryAmount@1000 : Decimal;GLEntryVATAmount@1001 : Decimal;GLEntryBaseAmount@1002 : Decimal;SrcCurrCode@1004 : Code[10];SrcCurrGLEntryAmt@1005 : Decimal;SrcCurrGLEntryVATAmt@1006 : Decimal;SrcCurrGLEntryBaseAmt@1007 : Decimal);
    VAR
      VATAmount@1008 : Decimal;
      VATBase@1009 : Decimal;
      UnrealizedVAT@1010 : Boolean;
      SrcCurrVATAmount@1011 : Decimal;
      SrcCurrVATBase@1012 : Decimal;
      VATDifferenceLCY@1013 : Decimal;
      SrcCurrVATDifference@1014 : Decimal;
      GenBusPostingGrpL@1000000000 : Record 250;
      CurrExchRateL@1000000001 : Record 330;
    BEGIN
      WITH GenJnlLine DO BEGIN
        // Post VAT
        // VAT for VAT entry
        VATEntry.INIT;
        VATEntry."Entry No." := NextVATEntryNo;
        VATEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        VATEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        VATEntry."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
        VATEntry."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
        VATEntry."EU Service" := VATPostingSetup."EU Service";
        VATEntry."Tax Area Code" := "Tax Area Code";
        VATEntry."Tax Liable" := "Tax Liable";
        VATEntry."Tax Group Code" := "Tax Group Code";
        VATEntry."Use Tax" := "Use Tax";
        VATEntry."Posting Date" := "Posting Date";
        VATEntry."Document Date" := "Document Date";
        VATEntry."Document No." := "Document No.";
        VATEntry."External Document No." := "External Document No.";
        VATEntry."Document Type" := "Document Type";
        VATEntry.Type := "Gen. Posting Type";
        VATEntry."VAT Calculation Type" := "VAT Calculation Type";
        VATEntry."Source Code" := "Source Code";
        VATEntry."Reason Code" := "Reason Code";
        VATEntry."Ship-to/Order Address Code" := "Ship-to/Order Address Code";
        VATEntry."EU 3-Party Trade" := "EU 3-Party Trade";
        VATEntry."Transaction No." := NextTransactionNo;
        VATEntry."Sales Tax Connection No." := NextConnectionNo;
        VATEntry."User ID" := USERID;
        VATEntry."No. Series" := "Posting No. Series";
        VATEntry."VAT Base Discount %" := "VAT Base Discount %";
        VATEntry."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
        IF "Bill-to/Pay-to No." <> '' THEN
          CASE VATEntry.Type OF
            VATEntry.Type::Purchase:
              BEGIN
                IF Vend."No." <> "Bill-to/Pay-to No." THEN
                  Vend.GET("Bill-to/Pay-to No.");
                VATEntry."Country/Region Code" := Vend."Country/Region Code";
                VATEntry."VAT Registration No." := Vend."VAT Registration No.";
              END;
            VATEntry.Type::Sale:
              BEGIN
                IF Cust."No." <> "Bill-to/Pay-to No." THEN
                  Cust.GET("Bill-to/Pay-to No.");
                VATEntry."Country/Region Code" := Cust."Country/Region Code";
                VATEntry."VAT Registration No." := Cust."VAT Registration No.";
              END;
          END;
        // gbedv TAX ------------------------------------------------- BEGIN
        IF OPplusAnalysisEnabled THEN
          OPplusAnalysisSetup.UpdateVATEntry(VATEntry,GenJnlLine);
        // gbedv TAX ------------------------------------------------- END
        // gbedv DC -------------------------------------------------- BEGIN
        IF OPplusEnabled THEN
          FinanceTools.UpdateVATEntry(VATEntry,GenJnlLine);
        // gbedv DC -------------------------------------------------- END

        IF "VAT Difference" = 0 THEN
          VATDifferenceLCY := 0
        ELSE
          IF "Currency Code" = '' THEN
            VATDifferenceLCY := "VAT Difference"
          ELSE
            VATDifferenceLCY :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  "Posting Date","Currency Code","VAT Difference",
                  CurrExchRate.ExchangeRate("Posting Date","Currency Code")));

        IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN BEGIN
          IF TaxJurisdiction.Code <> TaxDetail."Tax Jurisdiction Code" THEN
            TaxJurisdiction.GET(TaxDetail."Tax Jurisdiction Code");
          IF "Gen. Posting Type" <> "Gen. Posting Type"::Settlement THEN BEGIN
            VATEntry."Tax Group Used" := TaxDetail."Tax Group Code";
            VATEntry."Tax Type" := TaxDetail."Tax Type";
            VATEntry."Tax on Tax" := TaxDetail."Calculate Tax on Tax";
          END;
          VATEntry."Tax Jurisdiction Code" := TaxDetail."Tax Jurisdiction Code";
        END;

        IF GLSetup."Additional Reporting Currency" <> '' THEN
          IF GLSetup."Additional Reporting Currency" <> SrcCurrCode THEN BEGIN
            SrcCurrGLEntryAmt := ExchangeAmtLCYToFCY2(GLEntryAmount);
            SrcCurrGLEntryVATAmt := ExchangeAmtLCYToFCY2(GLEntryVATAmount);
            SrcCurrGLEntryBaseAmt := ExchangeAmtLCYToFCY2(GLEntryBaseAmount);
            SrcCurrVATDifference := ExchangeAmtLCYToFCY2(VATDifferenceLCY);
          END ELSE
            SrcCurrVATDifference :="VAT Difference";

        UnrealizedVAT :=
          (((VATPostingSetup."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT"])) OR
           ((TaxJurisdiction."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Sales Tax"]))) AND
          ("Document Type" IN
           ["Document Type"::Invoice,
            "Document Type"::"Credit Memo",
            "Document Type"::"Finance Charge Memo",
            "Document Type"::Reminder]);
        IF GLSetup."Prepayment Unrealized VAT" AND NOT GLSetup."Unrealized VAT" AND
          (VATPostingSetup."Unrealized VAT Type" > 0)
        THEN
          UnrealizedVAT := GenJnlLine.Prepayment;

        // VAT for VAT entry
        IF "Gen. Posting Type" <> 0 THEN BEGIN
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                VATAmount := GLEntryVATAmount;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              END;
            "VAT Posting"::"Manual VAT Entry":
              BEGIN
                IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN BEGIN
                  VATAmount := GLEntryAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                  VATEntry.Closed := TRUE;
                END ELSE BEGIN
                  VATAmount := GLEntryVATAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                END;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              END;
          END;

          IF UnrealizedVAT THEN BEGIN
            VATEntry.Amount := 0;
            VATEntry.Base := 0;
            VATEntry."Unrealized Amount" := VATAmount;
            VATEntry."Unrealized Base" := VATBase;
            VATEntry."Remaining Unrealized Amount" := VATEntry."Unrealized Amount";
            VATEntry."Remaining Unrealized Base" := VATEntry."Unrealized Base";
          END ELSE BEGIN
            VATEntry.Amount := VATAmount;
            VATEntry.Base := VATBase;
            VATEntry."Unrealized Amount" := 0;
            VATEntry."Unrealized Base" := 0;
            VATEntry."Remaining Unrealized Amount" := 0;
            VATEntry."Remaining Unrealized Base" := 0;
          END;

          IF GLSetup."Additional Reporting Currency" = '' THEN BEGIN
            VATEntry."Additional-Currency Base" := 0;
            VATEntry."Additional-Currency Amount" := 0;
            VATEntry."Add.-Currency Unrealized Amt." := 0;
            VATEntry."Add.-Currency Unrealized Base" := 0;
          END ELSE
            IF UnrealizedVAT THEN BEGIN
              VATEntry."Additional-Currency Base" := 0;
              VATEntry."Additional-Currency Amount" := 0;
              VATEntry."Add.-Currency Unrealized Base" := SrcCurrVATBase;
              VATEntry."Add.-Currency Unrealized Amt." := SrcCurrVATAmount;
            END ELSE BEGIN
              VATEntry."Additional-Currency Base" := SrcCurrVATBase;
              VATEntry."Additional-Currency Amount" := SrcCurrVATAmount;
              VATEntry."Add.-Currency Unrealized Base" := 0;
              VATEntry."Add.-Currency Unrealized Amt." := 0;
            END;
          VATEntry."Add.-Curr. Rem. Unreal. Amount" := VATEntry."Add.-Currency Unrealized Amt.";
          VATEntry."Add.-Curr. Rem. Unreal. Base" := VATEntry."Add.-Currency Unrealized Base";
          VATEntry."VAT Difference" := VATDifferenceLCY;
          VATEntry."Add.-Curr. VAT Difference" := SrcCurrVATDifference;
          // gbedv DC -------------------------------------------------- BEGIN
          IF OPplusEnabled THEN
            DimMgt.MoveJnlLineDimToLedgEntryDim(
              TempJnlLineDim,DATABASE::"VAT Entry",VATEntry."Entry No.");
          // gbedv DC -------------------------------------------------- END

          VATEntry.INSERT;
          GLEntryVatEntrylink.InsertLink(GLEntryTmp,VATEntry);
          NextVATEntryNo := NextVATEntryNo + 1;
        END;

        // VAT for G/L entry/entries
        IF (GLEntryVATAmount <> 0) OR
           ((SrcCurrGLEntryVATAmt <> 0) AND (SrcCurrCode = GLSetup."Additional Reporting Currency"))
        THEN BEGIN
          CASE "Gen. Posting Type" OF
            "Gen. Posting Type"::Purchase:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  BEGIN
                    IF UnrealizedVAT THEN BEGIN
                      VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                      InitGLEntry(
                        VATPostingSetup."Purch. VAT Unreal. Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END ELSE BEGIN
                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                      InitGLEntry(
                        VATPostingSetup."Purchase VAT Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END;
                  END;
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    IF UnrealizedVAT THEN BEGIN
                      VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                      InitGLEntry(
                        VATPostingSetup."Purch. VAT Unreal. Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                      VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Unreal. Acc.");
                      InitGLEntry(
                        VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.",
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END ELSE BEGIN
                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                      InitGLEntry(
                        VATPostingSetup."Purchase VAT Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                      VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Acc.");
                      InitGLEntry(
                        VATPostingSetup."Reverse Chrg. VAT Acc.",
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END;
                  END;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  IF "Use Tax" THEN BEGIN
                    IF UnrealizedVAT THEN BEGIN
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Unreal. Tax Acc. (Purchases)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      SummarizeVAT(
                        GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                      TaxJurisdiction.TESTFIELD("Unreal. Rev. Charge (Purch.)");
                      InitGLEntry(
                        TaxJurisdiction."Unreal. Rev. Charge (Purch.)",
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      SummarizeVAT(
                        GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                    END ELSE BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Tax Account (Purchases)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      SummarizeVAT(
                        GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                      TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Reverse Charge (Purchases)",
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      SummarizeVAT(
                        GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                    END;
                  END ELSE BEGIN
                    IF UnrealizedVAT THEN BEGIN
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Unreal. Tax Acc. (Purchases)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END ELSE BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Tax Account (Purchases)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END;
                    SummarizeVAT(
                      GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                  END;
              END;
            "Gen. Posting Type"::Sale:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  BEGIN
                    IF UnrealizedVAT THEN BEGIN
                      VATPostingSetup.TESTFIELD("Sales VAT Unreal. Account");
                      InitGLEntry(
                        VATPostingSetup."Sales VAT Unreal. Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END ELSE BEGIN
                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                      InitGLEntry(
                        VATPostingSetup."Sales VAT Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END;
                    InsertGLEntry(TRUE);
                  END;
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT": ;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    IF UnrealizedVAT THEN BEGIN
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Sales)");
                      InitGLEntry(
                        TaxJurisdiction."Unreal. Tax Acc. (Sales)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END ELSE BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                      InitGLEntry(
                        TaxJurisdiction."Tax Account (Sales)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END;
                    SummarizeVAT(
                      GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                  END;
              END;
          END;
        END;
      END;
    END;

    PROCEDURE SummarizeVAT@31(SummarizeGLEntries@1000 : Boolean;VAR GLEntry@1001 : Record 17;VAR TempGLEntryVAT@1002 : Record 17;VAR InsertedTempGLEntryVAT@1003 : Integer);
    VAR
      InsertedTempVAT@1004 : Boolean;
    BEGIN
      InsertedTempVAT := FALSE;
      IF SummarizeGLEntries THEN
        IF TempGLEntryVAT.FINDSET THEN
          REPEAT
            IF (TempGLEntryVAT."G/L Account No." = GLEntry."G/L Account No.") AND
               (TempGLEntryVAT."Bal. Account No." = GLEntry."Bal. Account No.")
            THEN BEGIN
              TempGLEntryVAT.Amount := TempGLEntryVAT.Amount + GLEntry.Amount;
              TempGLEntryVAT."Additional-Currency Amount" :=
                TempGLEntryVAT."Additional-Currency Amount" + GLEntry."Additional-Currency Amount";
              TempGLEntryVAT.MODIFY;
              InsertedTempVAT := TRUE;
            END;
          UNTIL (TempGLEntryVAT.NEXT = 0) OR InsertedTempVAT;
      IF NOT InsertedTempVAT OR NOT SummarizeGLEntries THEN BEGIN
        TempGLEntryVAT := GLEntry;
        TempGLEntryVAT."Entry No." :=
          TempGLEntryVAT."Entry No." + InsertedTempGLEntryVAT;
        TempGLEntryVAT.INSERT;
        InsertedTempGLEntryVAT := InsertedTempGLEntryVAT + 1;
      END;
    END;

    PROCEDURE InsertSummarizedVAT@37();
    BEGIN
      IF TempGLEntryVAT.FINDSET THEN BEGIN
        REPEAT
          GLEntry := TempGLEntryVAT;
          InsertGLEntry(TRUE);
        UNTIL TempGLEntryVAT.NEXT = 0;
        TempGLEntryVAT.DELETEALL;
        InsertedTempGLEntryVAT := 0;
      END;
      NextConnectionNo := NextConnectionNo + 1;
    END;

    LOCAL PROCEDURE PostGLAcc@11();
    BEGIN
      WITH GenJnlLine DO BEGIN
        // Post G/L entry
        InitGLEntry(
          "Account No.","Amount (LCY)",
          "Source Currency Amount",TRUE,"System-Created Entry");
        IF NOT "System-Created Entry" THEN
          IF "Posting Date" = NORMALDATE("Posting Date") THEN
            GLAcc.TESTFIELD("Direct Posting",TRUE);
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        GLEntry."No. Series" := "Posting No. Series";
        IF "Additional-Currency Posting" =
           "Additional-Currency Posting"::"Additional-Currency Amount Only"
        THEN BEGIN
          GLEntry."Additional-Currency Amount" := Amount;
          GLEntry.Amount := 0;
        END;

        InitVat;
        InsertGLEntry(TRUE);
        PostJob;
        PostVAT;
      END;
    END;

    LOCAL PROCEDURE PostCust@12();
    VAR
      CustLedgEntry@1000 : Record 21;
      OldCustLedgEntry@1001 : Record 21;
      CVLedgEntryBuf@1002 : Record 382;
      DtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldCustLedgEntry@1004 : Record 379;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF Cust."No." <> "Account No." THEN
          Cust.GET("Account No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          //A/gob-ko/19052015/H4277
          {
          //A/gob-czi/060812/P0143
          // 3.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          //original "Posting Group" := Cust."Customer Posting Group";
          //"Posting Group" := FindCustPostGroup(Cust."Customer Posting Group","Payment Method Code 2");
          // 3.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
          "Posting Group" := FindCustPostGroup(Cust."Customer Posting Group","Payment Method Code");
          //E/gob-czi/060812/P0143
          }
          "Posting Group" := Cust."Customer Posting Group";
          //E/gob-ko/19052015/H4277
        END;
          //A/gob-ko/V1.09/P1105/120913
          IF ("IC Partner Code" = '') AND ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND
             ("Applies-to Doc. No." = '') AND ("Applies-to ID" = '') THEN BEGIN
             IF GOBBAnkACC.GET("Bal. Account No.") THEN BEGIN
                IF GOBBAnkACC."Customer Posting Group" <> '' THEN BEGIN

                   "Posting Group" := GOBBAnkACC."Customer Posting Group";
                END;
             END;
          END;
          //E/gob-ko/V1.09/P1105/120913

        CustPostingGr.GET("Posting Group");
        CustPostingGr.TESTFIELD("Receivables Account");

        //A/gob-bth/08.11.2012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          CustPostingGr.TESTFIELD("Account receivables loans < 1");
          CustPostingGr.TESTFIELD("Account receivables loans > 1");
        END;
        //E/gob-bth/08.11.2012/P0484
        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        CustLedgEntry.INIT;
        CustLedgEntry."Customer No." := "Account No.";
        CustLedgEntry."Posting Date" := "Posting Date";
        CustLedgEntry."Document Date" := "Document Date";
        CustLedgEntry."Document Type" := "Document Type";
        CustLedgEntry."Document No." := "Document No.";
        CustLedgEntry."External Document No." := "External Document No.";
        CustLedgEntry.Description := Description;
        CustLedgEntry."Currency Code" := "Currency Code";
        CustLedgEntry."Sales (LCY)" := "Sales/Purch. (LCY)";
        CustLedgEntry."Profit (LCY)" := "Profit (LCY)";
        CustLedgEntry."Inv. Discount (LCY)" := "Inv. Discount (LCY)";
        CustLedgEntry."Sell-to Customer No." := "Sell-to/Buy-from No.";
        CustLedgEntry."Customer Posting Group" := "Posting Group";
        CustLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        CustLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        CustLedgEntry."Salesperson Code" := "Salespers./Purch. Code";
        CustLedgEntry."Source Code" := "Source Code";
        CustLedgEntry."On Hold" := "On Hold";

        //A/gob-czi/060812/P0143
        // 2.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //IF "Payment Method Code 2" <> '' THEN
        //  CustLedgEntry."Payment Method Code 2" := "Payment Method Code 2"
        //ELSE
        //  CustLedgEntry."Payment Method Code 2" := Cust."Payment Method Code";
        // 2.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        IF "Payment Method Code" <> '' THEN
          CustLedgEntry."Payment Method Code" := "Payment Method Code"
        ELSE
          CustLedgEntry."Payment Method Code" := Cust."Payment Method Code";
        //E/gob-czi/060812/P0143
        //A/gob-ko/V1.09/P1105/120913
        IF (GenJnlLine."IC Partner Code" = '') AND (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"Bank Account") AND
           (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') THEN BEGIN
           IF GOBBAnkACC.GET(GenJnlLine."Bal. Account No.") THEN BEGIN
              IF GOBBAnkACC."Customer Posting Group" <> '' THEN BEGIN
                 CustLedgEntry."Customer Posting Group" := GOBBAnkACC."Customer Posting Group";

              END;
           END;
        END;
        //E/gob-ko/V1.09/P1105/120913
        CustLedgEntry."Applies-to Doc. Type" := "Applies-to Doc. Type";
        CustLedgEntry."Applies-to Doc. No." := "Applies-to Doc. No.";
        CustLedgEntry."Due Date" := "Due Date";
        CustLedgEntry."Pmt. Discount Date" := "Pmt. Discount Date";
        CustLedgEntry."Applies-to ID" := "Applies-to ID";
        CustLedgEntry."Journal Batch Name" := "Journal Batch Name";
        CustLedgEntry."Reason Code" := "Reason Code";
        CustLedgEntry."Entry No." := NextEntryNo;
        CustLedgEntry."Transaction No." := NextTransactionNo;
        CustLedgEntry."User ID" := USERID;
        CustLedgEntry."Bal. Account Type" := "Bal. Account Type";
        CustLedgEntry."Bal. Account No." := "Bal. Account No.";
        CustLedgEntry."No. Series" := "Posting No. Series";
        CustLedgEntry."IC Partner Code" := "IC Partner Code";
        CustLedgEntry.Prepayment := Prepayment;
        //A/gob-jvi/11.07.12
        CustLedgEntry."Unique Identifier" := "Unique Identifier";
        //E/gob-jvi/11.07.12
        //A/gob-bth/23102012/P0484
        CustLedgEntry.Darlehen := Darlehen;
        CustLedgEntry.Zinsen := Zinsen;
        //E/gob-bth/23102012/P0484

        //H1109 17.06.14 ARI +++++++++++++++++++++++++++++
        CustLedgEntry."Payment Direction" := GenJnlLine."Payment Direction";
        //H1109 17.06.14 ARI -----------------------------

        IF NOT Cust."Block Payment Tolerance" AND
           ((CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice) OR
            (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo"))
        THEN BEGIN

          IF (CustLedgEntry."Pmt. Discount Date" <> 0D) THEN
            CustLedgEntry."Pmt. Disc. Tolerance Date" :=
              CALCDATE(GLSetup."Payment Discount Grace Period",CustLedgEntry."Pmt. Discount Date")
          ELSE
            CustLedgEntry."Pmt. Disc. Tolerance Date" := CustLedgEntry."Pmt. Discount Date";

          IF CustLedgEntry."Currency Code" = '' THEN BEGIN
            IF (GLSetup."Max. Payment Tolerance Amount" <
               (ABS(GLSetup."Payment Tolerance %" / 100 * "Amount (LCY)"))) OR (GLSetup."Payment Tolerance %" = 0)
            THEN BEGIN
              IF (GLSetup."Max. Payment Tolerance Amount" = 0) AND (GLSetup."Payment Tolerance %" > 0) THEN
                CustLedgEntry."Max. Payment Tolerance" :=
                  ROUND(GLSetup."Payment Tolerance %" * "Amount (LCY)" / 100,GLSetup."Amount Rounding Precision")
              ELSE
                IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo" THEN
                  CustLedgEntry."Max. Payment Tolerance" := -GLSetup."Max. Payment Tolerance Amount"
                ELSE
                  CustLedgEntry."Max. Payment Tolerance" := GLSetup."Max. Payment Tolerance Amount"
            END ELSE
              CustLedgEntry."Max. Payment Tolerance" :=
                GLSetup."Payment Tolerance %" * "Amount (LCY)" / 100
          END ELSE BEGIN
            IF (Currency."Max. Payment Tolerance Amount" <
               (ABS(Currency."Payment Tolerance %" / 100 * Amount))) OR (Currency."Payment Tolerance %" = 0)
            THEN BEGIN
              IF (Currency."Max. Payment Tolerance Amount" = 0) AND (Currency."Payment Tolerance %" > 0) THEN
                CustLedgEntry."Max. Payment Tolerance" :=
                  ROUND(Currency."Payment Tolerance %" * Amount / 100,Currency."Amount Rounding Precision")
              ELSE
                IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo" THEN
                  CustLedgEntry."Max. Payment Tolerance" := -Currency."Max. Payment Tolerance Amount"
                ELSE
                  CustLedgEntry."Max. Payment Tolerance" := Currency."Max. Payment Tolerance Amount"
            END ELSE
              CustLedgEntry."Max. Payment Tolerance" :=
                ROUND(Currency."Payment Tolerance %" * Amount / 100,Currency."Amount Rounding Precision");
          END;
          IF ABS(CustLedgEntry."Max. Payment Tolerance") > ABS(Amount) THEN
            CustLedgEntry."Max. Payment Tolerance" := Amount;

        END;

        DtldCVLedgEntryBuf.DELETEALL;
        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf."Cust. Ledger Entry No." := CustLedgEntry."Entry No.";
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Initial Entry";
        DtldCVLedgEntryBuf."Posting Date" := "Posting Date";
        DtldCVLedgEntryBuf."Document Type" := "Document Type";
        DtldCVLedgEntryBuf."Document No." := "Document No.";
        DtldCVLedgEntryBuf.Amount := Amount;
        DtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)";
        DtldCVLedgEntryBuf."Additional-Currency Amount" := Amount;
        DtldCVLedgEntryBuf."Customer No." := "Account No.";
        DtldCVLedgEntryBuf."Currency Code" := "Currency Code";
        DtldCVLedgEntryBuf."User ID" := USERID;
        DtldCVLedgEntryBuf."Initial Entry Due Date" := "Due Date";
        DtldCVLedgEntryBuf."Initial Entry Global Dim. 1" := "Shortcut Dimension 1 Code";
        DtldCVLedgEntryBuf."Initial Entry Global Dim. 2" := "Shortcut Dimension 2 Code";
        DtldCVLedgEntryBuf."Initial Document Type" := "Document Type";

        TransferCustLedgEntry(CVLedgEntryBuf,CustLedgEntry,TRUE);
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        IF "Amount (LCY)" <> 0 THEN BEGIN
          IF GLSetup."Pmt. Disc. Excl. VAT" THEN
            CVLedgEntryBuf."Original Pmt. Disc. Possible" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
          ELSE
            CVLedgEntryBuf."Original Pmt. Disc. Possible" := Amount;
          CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
            ROUND(
              CVLedgEntryBuf."Original Pmt. Disc. Possible" * "Payment Discount %" / 100,
              Currency."Amount Rounding Precision");

          CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";
        END;

        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Original Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Original Currency Factor" := 1;
        CVLedgEntryBuf."Adjusted Currency Factor" := CVLedgEntryBuf."Original Currency Factor";

        // Check the document no.
        IF "Recurring Method" = 0 THEN
          IF "Document Type" IN
             ["Document Type"::Invoice,
              "Document Type"::"Credit Memo",
              "Document Type"::"Finance Charge Memo",
              "Document Type"::Reminder]
          THEN BEGIN
            OldCustLedgEntry.RESET;
            IF NOT RECORDLEVELLOCKING THEN
              OldCustLedgEntry.SETCURRENTKEY("Document No.");
            OldCustLedgEntry.SETRANGE("Document No.",CVLedgEntryBuf."Document No.");
            OldCustLedgEntry.SETRANGE("Document Type",CVLedgEntryBuf."Document Type");
            IF NOT OldCustLedgEntry.ISEMPTY THEN
              ERROR(
                Text001,
                "Document Type","Document No.");

            IF SalesSetup."Ext. Doc. No. Mandatory" THEN
              IF "Document Type" IN
                 ["Document Type"::Invoice,
                  "Document Type"::"Credit Memo",
                  "Document Type"::Payment,
                  "Document Type"::Refund,
                  "Document Type"::" "]
              THEN
                TESTFIELD("External Document No.");
          END;

        // Post the application
        ApplyCustLedgEntry(
          CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,GLSetup."Appln. Rounding Precision");

        // Post customer entry
        TransferCustLedgEntry(CVLedgEntryBuf,CustLedgEntry,FALSE);
        CustLedgEntry."Amount to Apply" := 0;
        //eBay#003SP2
        IF CustLedgEntry."Applies-to Doc. Type"<>CustLedgEntry."Applies-to Doc. Type"::Order THEN BEGIN
        //eBay#003SP2

          CustLedgEntry."Applies-to Doc. Type" := CustLedgEntry."Applies-to Doc. Type"::" ";  // CLR
          CustLedgEntry."Applies-to Doc. No." := '';
        //eBay#003SP2
        END;
        //eBay#003SP2
        // gbedv EA -------------------------------------------------- BEGIN
        PostCustExtended(CustLedgEntry);
        // gbedv EA -------------------------------------------------- END

        CustLedgEntry.INSERT;

        // H1241       29.09.14 KM +++++++++++
        InvH24Mgt.UpdateEntryCLEPosting(CustLedgEntry);
        // H1241       29.09.14 KM -----------
        DimMgt.MoveJnlLineDimToLedgEntryDim(
          TempJnlLineDim,DATABASE::"Cust. Ledger Entry",CustLedgEntry."Entry No.");

        // Post Dtld. customer entry
        PostDtldCustLedgEntries(
          GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,GLSetup,NextTransactionNo,TRUE);
      END;
    END;

    LOCAL PROCEDURE PostVend@13();
    VAR
      VendLedgEntry@1000 : Record 25;
      OldVendLedgEntry@1001 : Record 25;
      CVLedgEntryBuf@1002 : Record 382;
      DtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldVendLedgEntry@1004 : Record 380;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF Vend."No." <> "Account No." THEN
          Vend.GET("Account No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        VendPostingGr.TESTFIELD("Payables Account");

        //A/gob-bth/08.11.2012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          VendPostingGr.TESTFIELD("Account payables loans < 1");
          VendPostingGr.TESTFIELD("Account payables loans > 1");
        END;
        //E/gob-bth/08.11.2012/P0484
        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        VendLedgEntry.INIT;
        VendLedgEntry."Vendor No." := "Account No.";
        VendLedgEntry."Posting Date" := "Posting Date";
        VendLedgEntry."Document Date" := "Document Date";
        VendLedgEntry."Document Type" := "Document Type";
        VendLedgEntry."Document No." := "Document No.";
        VendLedgEntry."External Document No." := "External Document No.";
        VendLedgEntry.Description := Description;
        VendLedgEntry."Currency Code" := "Currency Code";
        VendLedgEntry."Purchase (LCY)" := "Sales/Purch. (LCY)";
        VendLedgEntry."Inv. Discount (LCY)" := "Inv. Discount (LCY)";
        VendLedgEntry."Buy-from Vendor No." := "Sell-to/Buy-from No.";
        VendLedgEntry."Vendor Posting Group" := "Posting Group";
        VendLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        VendLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        VendLedgEntry."Purchaser Code" := "Salespers./Purch. Code";
        VendLedgEntry."Source Code" := "Source Code";
        VendLedgEntry."On Hold" := "On Hold";

        //A/gob-czi/060812/P0143
        // 1.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //IF "Payment Method Code 2" <> '' THEN
        //  VendLedgEntry."Payment Method Code 2" := "Payment Method Code 2"
        //ELSE
        //  VendLedgEntry."Payment Method Code 2" := Vend."Payment Method Code";
        // 1.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        IF "Payment Method Code" <> '' THEN
          VendLedgEntry."Payment Method Code" := "Payment Method Code"
        ELSE
          VendLedgEntry."Payment Method Code" := Vend."Payment Method Code";
        //E/gob-czi/060812/P0143

        VendLedgEntry."Applies-to Doc. Type" := "Applies-to Doc. Type";
        VendLedgEntry."Applies-to Doc. No." := "Applies-to Doc. No.";
        VendLedgEntry."Due Date" := "Due Date";
        VendLedgEntry."Pmt. Discount Date" := "Pmt. Discount Date";
        VendLedgEntry."Applies-to ID" := "Applies-to ID";
        VendLedgEntry."Journal Batch Name" := "Journal Batch Name";
        VendLedgEntry."Reason Code" := "Reason Code";
        VendLedgEntry."Entry No." := NextEntryNo;
        VendLedgEntry."Transaction No." := NextTransactionNo;
        VendLedgEntry."User ID" := USERID;
        VendLedgEntry."Bal. Account Type" := "Bal. Account Type";
        VendLedgEntry."Bal. Account No." := "Bal. Account No.";
        VendLedgEntry."No. Series" := "Posting No. Series";
        VendLedgEntry."IC Partner Code" := "IC Partner Code";
        VendLedgEntry.Prepayment := Prepayment;

        //A/gob-bth/23102012/P0484
        VendLedgEntry.Darlehen := Darlehen;
        VendLedgEntry.Zinsen := Zinsen;
        //E/gob-bth/23102012/P0484

        //A/H1175/nst/04.06.14
        VendLedgEntry."Orginial Vend. Ledger Entry No" := "Orginial Vend. Ledger Entry No";
        //E/H1175/nst/04.06.14

        IF NOT Vend."Block Payment Tolerance" AND
          ((VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice) OR
          (VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo"))
        THEN BEGIN

          IF (VendLedgEntry."Pmt. Discount Date" <> 0D) THEN
            VendLedgEntry."Pmt. Disc. Tolerance Date" :=
              CALCDATE(GLSetup."Payment Discount Grace Period",VendLedgEntry."Pmt. Discount Date")
          ELSE
            VendLedgEntry."Pmt. Disc. Tolerance Date" := VendLedgEntry."Pmt. Discount Date";

          IF VendLedgEntry."Currency Code" = '' THEN BEGIN
            IF (GLSetup."Max. Payment Tolerance Amount" <
               (ABS(GLSetup."Payment Tolerance %" / 100 * "Amount (LCY)"))) OR (GLSetup."Payment Tolerance %" = 0)
            THEN BEGIN
              IF (GLSetup."Max. Payment Tolerance Amount" = 0) AND (GLSetup."Payment Tolerance %" > 0) THEN
                VendLedgEntry."Max. Payment Tolerance" :=
                  ROUND(GLSetup."Payment Tolerance %" * "Amount (LCY)" / 100,GLSetup."Amount Rounding Precision")
              ELSE
                IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" THEN
                  VendLedgEntry."Max. Payment Tolerance" := GLSetup."Max. Payment Tolerance Amount"
                ELSE
                  VendLedgEntry."Max. Payment Tolerance" := -GLSetup."Max. Payment Tolerance Amount"
            END ELSE
              VendLedgEntry."Max. Payment Tolerance" :=
                GLSetup."Payment Tolerance %" * "Amount (LCY)" / 100
          END ELSE BEGIN
            IF (Currency."Max. Payment Tolerance Amount" <
               (ABS(Currency."Payment Tolerance %" / 100 * Amount))) OR (Currency."Payment Tolerance %" = 0)
            THEN BEGIN
              IF (Currency."Max. Payment Tolerance Amount" = 0) AND (Currency."Payment Tolerance %" > 0) THEN
                VendLedgEntry."Max. Payment Tolerance" :=
                  ROUND(Currency."Payment Tolerance %" * Amount / 100,Currency."Amount Rounding Precision")
              ELSE
                IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" THEN
                  VendLedgEntry."Max. Payment Tolerance" := Currency."Max. Payment Tolerance Amount"
                ELSE
                  VendLedgEntry."Max. Payment Tolerance" := -Currency."Max. Payment Tolerance Amount"
            END ELSE
              VendLedgEntry."Max. Payment Tolerance" :=
                ROUND(Currency."Payment Tolerance %" * Amount / 100,Currency."Amount Rounding Precision");
          END;
          IF ABS(VendLedgEntry."Max. Payment Tolerance") > ABS(Amount) THEN
            VendLedgEntry."Max. Payment Tolerance" := Amount;

        END;

        DtldCVLedgEntryBuf.DELETEALL;
        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf."Cust. Ledger Entry No." := VendLedgEntry."Entry No.";
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Initial Entry";
        DtldCVLedgEntryBuf."Posting Date" := "Posting Date";
        DtldCVLedgEntryBuf."Document Type" := "Document Type";
        DtldCVLedgEntryBuf."Document No." := "Document No.";
        DtldCVLedgEntryBuf.Amount := Amount;
        DtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)";
        DtldCVLedgEntryBuf."Additional-Currency Amount" := Amount;
        DtldCVLedgEntryBuf."Customer No." := "Account No.";
        DtldCVLedgEntryBuf."Currency Code" := "Currency Code";
        DtldCVLedgEntryBuf."User ID" := USERID;
        DtldCVLedgEntryBuf."Initial Entry Due Date" := "Due Date";
        DtldCVLedgEntryBuf."Initial Entry Global Dim. 1" := "Shortcut Dimension 1 Code";
        DtldCVLedgEntryBuf."Initial Entry Global Dim. 2" := "Shortcut Dimension 2 Code";
        DtldCVLedgEntryBuf."Initial Document Type" := "Document Type";

        TransferVendLedgEntry(CVLedgEntryBuf,VendLedgEntry,TRUE);
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        IF "Amount (LCY)" <> 0 THEN BEGIN
          IF GLSetup."Pmt. Disc. Excl. VAT" THEN
            CVLedgEntryBuf."Original Pmt. Disc. Possible" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
          ELSE
            CVLedgEntryBuf."Original Pmt. Disc. Possible" := Amount;

          CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
            ROUND(
              CVLedgEntryBuf."Original Pmt. Disc. Possible" * "Payment Discount %" / 100,
              Currency."Amount Rounding Precision");
          CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";
        END;

        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Adjusted Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Adjusted Currency Factor" := 1;
        CVLedgEntryBuf."Original Currency Factor" := CVLedgEntryBuf."Adjusted Currency Factor";

        // Check the document no.
        IF "Recurring Method" = 0 THEN
          IF "Document Type" IN
             ["Document Type"::Invoice,
             "Document Type"::"Credit Memo",
             "Document Type"::"Finance Charge Memo",
             "Document Type"::Reminder]
          THEN BEGIN
            // Test Internal number
            OldVendLedgEntry.RESET;
            IF NOT RECORDLEVELLOCKING THEN
              OldVendLedgEntry.SETCURRENTKEY("Document No.");
            OldVendLedgEntry.SETRANGE("Document No.",CVLedgEntryBuf."Document No.");
            OldVendLedgEntry.SETRANGE("Document Type",CVLedgEntryBuf."Document Type");
            IF NOT OldVendLedgEntry.ISEMPTY THEN
              ERROR(
                Text002,
                CVLedgEntryBuf."Document Type",CVLedgEntryBuf."Document No.");

            IF PurchSetup."Ext. Doc. No. Mandatory" OR
               (CVLedgEntryBuf."External Document No." <> '')
            THEN BEGIN
              // Test vendor number
              TESTFIELD("External Document No.");
              OldVendLedgEntry.RESET;
              IF NOT RECORDLEVELLOCKING THEN
                OldVendLedgEntry.SETCURRENTKEY("External Document No.");
              OldVendLedgEntry.SETRANGE("External Document No.",CVLedgEntryBuf."External Document No.");
              OldVendLedgEntry.SETRANGE("Document Type",CVLedgEntryBuf."Document Type");
              OldVendLedgEntry.SETRANGE("Vendor No.",CVLedgEntryBuf."CV No.");
              IF NOT OldVendLedgEntry.ISEMPTY THEN
                ERROR(
                  Text003,
                  CVLedgEntryBuf."Document Type",CVLedgEntryBuf."External Document No.");
            END;
          END;

        // Post the application
        ApplyVendLedgEntry(
          CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup."Appln. Rounding Precision");

        // Post Vendor entry
        TransferVendLedgEntry(CVLedgEntryBuf,VendLedgEntry,FALSE);
        VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Applies-to Doc. No." := '';
        // gbedv EA -------------------------------------------------- BEGIN
        PostVendExtended(VendLedgEntry);
        // gbedv EA -------------------------------------------------- END
        //A/P0134/gob-czi/020812
        IF GenJnlLine."Payment Method Code" <> '' THEN
          VendLedgEntry."Payment Method Code" := "Payment Method Code"
        ELSE
          VendLedgEntry."Payment Method Code" := Vend."Payment Method Code";
        //E/P0134/gob-czi/020812
        VendLedgEntry.INSERT;

        DimMgt.MoveJnlLineDimToLedgEntryDim(
          TempJnlLineDim,DATABASE::"Vendor Ledger Entry",VendLedgEntry."Entry No.");

        // Post Dtld Vendor entry
        PostDtldVendLedgEntries(
          GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,NextTransactionNo,TRUE);
      END;
    END;

    LOCAL PROCEDURE PostBankAcc@14();
    BEGIN
      WITH GenJnlLine DO BEGIN
        BankAccLedgEntry.LOCKTABLE;
        IF BankAcc."No." <> "Account No." THEN
          BankAcc.GET("Account No.");
        BankAcc.TESTFIELD(Blocked,FALSE);
        IF "Currency Code" = '' THEN
          BankAcc.TESTFIELD("Currency Code",'')
        ELSE
          IF BankAcc."Currency Code" <> '' THEN
            TESTFIELD("Currency Code",BankAcc."Currency Code");

        BankAcc.TESTFIELD("Bank Acc. Posting Group");
        BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");

        BankAccLedgEntry.INIT;
        BankAccLedgEntry."Bank Account No." := "Account No.";
        BankAccLedgEntry."Posting Date" := "Posting Date";
        BankAccLedgEntry."Document Date" := "Document Date";
        BankAccLedgEntry."Document Type" := "Document Type";
        BankAccLedgEntry."Document No." := "Document No.";
        BankAccLedgEntry."External Document No." := "External Document No.";
        BankAccLedgEntry.Description := Description;
        BankAccLedgEntry."Bank Acc. Posting Group" := BankAcc."Bank Acc. Posting Group";
        BankAccLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        BankAccLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        BankAccLedgEntry."Our Contact Code" := "Salespers./Purch. Code";
        BankAccLedgEntry."Source Code" := "Source Code";
        BankAccLedgEntry."Journal Batch Name" := "Journal Batch Name";
        BankAccLedgEntry."Reason Code" := "Reason Code";
        BankAccLedgEntry."Entry No." := NextEntryNo;
        BankAccLedgEntry."Transaction No." := NextTransactionNo;
        BankAccLedgEntry."Currency Code" := BankAcc."Currency Code";

        // CLR
        BankAccLedgEntry."Transit Posting" := "Transit Entry";
        IF NOT "Payment File created" THEN
          "Payment Order No." := NextEntryNo;
        // CLR

        IF BankAcc."Currency Code" <> '' THEN
          BankAccLedgEntry.Amount := Amount
        ELSE
          BankAccLedgEntry.Amount := "Amount (LCY)";
        BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)";
        BankAccLedgEntry."User ID" := USERID;
        IF BankAccLedgEntry.Amount <> 0 THEN BEGIN
          BankAccLedgEntry.Open := TRUE;
          BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
        END;
        BankAccLedgEntry.Positive := BankAccLedgEntry.Amount > 0;
        BankAccLedgEntry."Bal. Account Type" := "Bal. Account Type";
        BankAccLedgEntry."Bal. Account No." := "Bal. Account No.";
        IF (Amount > 0) AND (NOT Correction) OR
           ("Amount (LCY)" > 0) AND (NOT Correction) OR
           (Amount < 0) AND Correction OR
           ("Amount (LCY)" < 0) AND Correction
        THEN BEGIN
          BankAccLedgEntry."Debit Amount" := BankAccLedgEntry.Amount;
          BankAccLedgEntry."Credit Amount" := 0;
          BankAccLedgEntry."Debit Amount (LCY)" := BankAccLedgEntry."Amount (LCY)";
          BankAccLedgEntry."Credit Amount (LCY)" := 0;
        END ELSE BEGIN
          BankAccLedgEntry."Debit Amount" := 0;
          BankAccLedgEntry."Credit Amount" := -BankAccLedgEntry.Amount;
          BankAccLedgEntry."Debit Amount (LCY)" := 0;
          BankAccLedgEntry."Credit Amount (LCY)" := -BankAccLedgEntry."Amount (LCY)";
        END;
        // gbedv EA -------------------------------------------------- BEGIN
        IF OPplusEnabled THEN
          FinanceTools.UpdateBankEntry(BankAccLedgEntry,GenJnlLine);
        // gbedv EA -------------------------------------------------- END
        BankAccLedgEntry.INSERT;
        DimMgt.MoveJnlLineDimToLedgEntryDim(
          TempJnlLineDim,DATABASE::"Bank Account Ledger Entry",BankAccLedgEntry."Entry No.");

        IF (Amount <= 0) AND ((("Bank Payment Type" = "Bank Payment Type"::"Computer Check") AND "Check Printed") OR  // CLR
        // CLR BEGIN
        //     ((Amount  < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Manual Check"))
           ("Bank Payment Type" = "Bank Payment Type"::"Manual Check") OR
           (("Bank Payment Type" = "Bank Payment Type"::Clearing) AND "Payment File created"))
        // CLR END
        THEN BEGIN
        // CLR BEGIN
            IF "Bank Payment Type"<>"Bank Payment Type"::Clearing THEN
        // CLR END

          IF BankAcc."Currency Code" <> "Currency Code" THEN
            FIELDERROR(
              "Bank Payment Type",
              STRSUBSTNO(
                Text004,
                FIELDCAPTION("Currency Code"),TABLECAPTION,BankAcc.TABLECAPTION));
          CASE "Bank Payment Type" OF
            "Bank Payment Type"::"Computer Check":
              BEGIN
                TESTFIELD("Check Printed",TRUE);
                CheckLedgEntry.LOCKTABLE;
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETRANGE("Entry Status",CheckLedgEntry."Entry Status"::Printed);
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                IF CheckLedgEntry.FINDSET THEN
                  REPEAT
                    CheckLedgEntry2 := CheckLedgEntry;
                    CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Posted;
                    CheckLedgEntry2."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                    CheckLedgEntry2.MODIFY;
                  UNTIL CheckLedgEntry.NEXT = 0;
              END;
            "Bank Payment Type"::"Manual Check":
              BEGIN
                IF "Document No." = '' THEN
                  FIELDERROR(
                    "Document No.",
                    STRSUBSTNO(
                      Text005,
                      FIELDCAPTION("Bank Payment Type"),"Bank Payment Type"));
                CheckLedgEntry.RESET;
                IF NextCheckEntryNo = 0 THEN BEGIN
                  CheckLedgEntry.LOCKTABLE;
                  IF CheckLedgEntry.FINDLAST THEN
                    NextCheckEntryNo := CheckLedgEntry."Entry No." + 1
                  ELSE
                    NextCheckEntryNo := 1;
                END;

                IF NOT RECORDLEVELLOCKING THEN
                  CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETFILTER(
                  "Entry Status",'%1|%2|%3',
                  CheckLedgEntry."Entry Status"::Printed,
                  CheckLedgEntry."Entry Status"::Posted,
                  CheckLedgEntry."Entry Status"::"Financially Voided");
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                IF CheckLedgEntry.FINDFIRST THEN
                  ERROR(Text006,"Document No.");

                CheckLedgEntry.INIT;
                CheckLedgEntry."Entry No." := NextCheckEntryNo;
                CheckLedgEntry."Bank Account No." := BankAccLedgEntry."Bank Account No.";
                CheckLedgEntry."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                CheckLedgEntry."Posting Date" := BankAccLedgEntry."Posting Date";
                CheckLedgEntry."Document Type" := BankAccLedgEntry."Document Type";
                CheckLedgEntry."Document No." := BankAccLedgEntry."Document No.";
                CheckLedgEntry."External Document No." := BankAccLedgEntry."External Document No.";
                CheckLedgEntry.Description := BankAccLedgEntry.Description;
                CheckLedgEntry."Bank Payment Type" := "Bank Payment Type";
                CheckLedgEntry."Bal. Account Type" := BankAccLedgEntry."Bal. Account Type";
                CheckLedgEntry."Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
                CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::Posted;
                CheckLedgEntry.Open := TRUE;
                CheckLedgEntry."User ID" := USERID;
                CheckLedgEntry."Check Date" := BankAccLedgEntry."Posting Date";
                CheckLedgEntry."Check No." := BankAccLedgEntry."Document No.";
                IF BankAcc."Currency Code" <> '' THEN
                  CheckLedgEntry.Amount := -Amount
                ELSE
                  CheckLedgEntry.Amount := -"Amount (LCY)";
                CheckLedgEntry.INSERT;
                NextCheckEntryNo := NextCheckEntryNo + 1;
              END;
            // CLR.BEGIN - Payment
            "Bank Payment Type"::Clearing:
              BEGIN
                IF PaymLedgEntry.READPERMISSION THEN BEGIN
                  TESTFIELD("Payment File created",TRUE);
                  PaymLedgEntry.LOCKTABLE;
                  PaymLedgEntry.RESET;
                  PaymLedgEntry.SETCURRENTKEY("Bank Account No.","Posting State","Payment No.");
                  PaymLedgEntry.SETRANGE("Bank Account No.","Account No.");
                  PaymLedgEntry.SETRANGE("Posting State",PaymLedgEntry."Posting State"::Created);
                  PaymLedgEntry.SETRANGE("Payment No.","Document No.");
                  PaymLedgEntry.SETRANGE(PaymLedgEntry."Payment Order No.","Payment Order No.");
                  IF PaymLedgEntry.FINDSET THEN
                    REPEAT
                      PaymLedgEntry2 := PaymLedgEntry;
                      PaymLedgEntry2."Posting State" := PaymLedgEntry2."Posting State"::Posted;
                      PaymLedgEntry2."Bank Ledger Entry No." := BankAccLedgEntry."Entry No.";
                      PaymLedgEntry2.MODIFY;
                    UNTIL PaymLedgEntry.NEXT = 0;
                  END;
                IF ForeignPaymentEntry.READPERMISSION THEN BEGIN
                  ForeignPaymentEntry.RESET;
                  ForeignPaymentEntry.LOCKTABLE;
                  ForeignPaymentEntry.SETCURRENTKEY("Payment No.","Statement Status","Posting State");
                  ForeignPaymentEntry.SETRANGE("Payment No.","Document No.");
                  IF ForeignPaymentEntry.FINDSET THEN
                    REPEAT
                      ForPaymentEntry2 := ForeignPaymentEntry;
                      ForPaymentEntry2."Posting State" := ForPaymentEntry2."Posting State"::Posted;
                      ForPaymentEntry2.Open := FALSE;
                      ForPaymentEntry2.MODIFY;
                    UNTIL ForeignPaymentEntry.NEXT = 0;
                END;
              END;
              // CLR END
          END;
        END;

        // CLR BEGIN  - Collect
        IF ((Amount > 0) AND
          ("Bank Payment Type" = "Bank Payment Type"::Clearing) AND "Payment File created")
          THEN BEGIN
            CASE "Bank Payment Type" OF
              "Bank Payment Type"::Clearing:
                BEGIN
                  IF PaymLedgEntry.READPERMISSION THEN BEGIN
                    TESTFIELD("Payment File created",TRUE);
                    PaymLedgEntry.RESET;
                    PaymLedgEntry.LOCKTABLE;
                    PaymLedgEntry.SETCURRENTKEY("Bank Account No.","Posting State","Payment No.");
                    PaymLedgEntry.SETRANGE("Bank Account No.","Account No.");
                    PaymLedgEntry.SETRANGE("Posting State",PaymLedgEntry."Posting State"::Created);
                    PaymLedgEntry.SETRANGE("Payment No.","Document No.");
                    IF PaymLedgEntry.FINDSET THEN
                      REPEAT
                        PaymLedgEntry2 := PaymLedgEntry;
                        PaymLedgEntry2."Posting State" := PaymLedgEntry2."Posting State"::Posted;
                        PaymLedgEntry2."Bank Ledger Entry No." := BankAccLedgEntry."Entry No.";
                        PaymLedgEntry2.MODIFY;
                      UNTIL PaymLedgEntry.NEXT = 0;
                  END;
                END;
          END;
        END;

        IF NOT "Transit Entry" THEN BEGIN  //CLR
        BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
        InitGLEntry(
          BankAccPostingGr."G/L Bank Account No.","Amount (LCY)","Source Currency Amount",TRUE,TRUE);
        // CLR START
        END ELSE BEGIN

          BankAccPostingGr.TESTFIELD("G/L Bank Account Transit No.");
          InitGLEntry(
            BankAccPostingGr."G/L Bank Account Transit No.",
            "Amount (LCY)","Source Currency Amount",TRUE,TRUE);
        END;
        // CLR END

        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        InsertGLEntry(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostFixedAsset@29();
    VAR
      TempGLEntry@1000 : Record 17;
      TempFAGLPostBuf@1001 : Record 5637;
      FAReg@1002 : Record 5617;
      FAAutomaticEntry@1003 : Codeunit 5607;
      ShortcutDim1Code@1004 : Code[20];
      ShortcutDim2Code@1005 : Code[20];
      Correction2@1006 : Boolean;
      NetDisposalNo@1007 : Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        InitGLEntry('',"Amount (LCY)","Source Currency Amount",TRUE,"System-Created Entry");
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        InitVat;
        TempGLEntry := GLEntry;
        FAJnlPostLine.GenJnlPostLine(
          GenJnlLine,TempGLEntry.Amount,TempGLEntry."VAT Amount",NextTransactionNo,NextEntryNo,TempJnlLineDim);
        ShortcutDim1Code := "Shortcut Dimension 1 Code";
        ShortcutDim2Code := "Shortcut Dimension 2 Code";
        Correction2 := Correction;
      END;
      WITH TempFAGLPostBuf DO
        IF FAJnlPostLine.FindFirstGLAcc(TempFAGLPostBuf) THEN
          REPEAT
            GenJnlLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
            GenJnlLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
            GenJnlLine.Correction := Correction;
            FADimAlreadyChecked := TempFAGLPostBuf."FA Posting Group"  <> '';
            IF "Original General Journal Line" THEN
              InitGLEntry("Account No.",Amount,TempGLEntry."Additional-Currency Amount",TRUE,TRUE)
            ELSE BEGIN
              CheckNonAddCurrCodeOccurred('');
              InitGLEntry("Account No.",Amount,0,FALSE,TRUE);
            END;
            FADimAlreadyChecked := FALSE;
            GLEntry."Gen. Posting Type" := TempGLEntry."Gen. Posting Type";
            GLEntry."Gen. Bus. Posting Group" := TempGLEntry."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := TempGLEntry."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := TempGLEntry."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := TempGLEntry."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := TempGLEntry."Tax Area Code";
            GLEntry."Tax Liable" := TempGLEntry."Tax Liable";
            GLEntry."Tax Group Code" := TempGLEntry."Tax Group Code";
            GLEntry."Use Tax" := TempGLEntry."Use Tax";
            GLEntry."VAT Amount" := TempGLEntry."VAT Amount";
            GLEntry."Bal. Account Type" := TempGLEntry."Bal. Account Type";
            GLEntry."Bal. Account No." := TempGLEntry."Bal. Account No.";
            GLEntry."FA Entry Type" := "FA Entry Type";
            GLEntry."FA Entry No." := "FA Entry No.";
            IF "Net Disposal" THEN
              NetDisposalNo := NetDisposalNo + 1
            ELSE
              NetDisposalNo := 0;
           IF "Automatic Entry" AND NOT "Net Disposal" THEN
              FAAutomaticEntry.AdjustGLEntry(GLEntry);
            IF NetDisposalNo > 1 THEN
               GLEntry."VAT Amount" := 0;
            IF TempFAGLPostBuf."FA Posting Group" <> '' THEN BEGIN
              FAGLPostBuf := TempFAGLPostBuf;
              FAGLPostBuf."Entry No." := NextEntryNo;
              FAGLPostBuf.INSERT;
            END;
            InsertGLEntry(TRUE);
          UNTIL FAJnlPostLine.GetNextGLAcc(TempFAGLPostBuf) = 0;
      GenJnlLine."Shortcut Dimension 1 Code" := ShortcutDim1Code;
      GenJnlLine."Shortcut Dimension 2 Code" := ShortcutDim2Code;
      GenJnlLine.Correction := Correction2;
      GLEntry := TempGLEntry;
      GLEntryTmp := GLEntry;
      PostVAT;

      IF FAReg.FINDLAST THEN BEGIN
        FAReg."G/L Register No." := GLReg."No.";
        FAReg.MODIFY;
      END;
    END;

    PROCEDURE PostICPartner@63();
    VAR
      ICPartner@1001 : Record 413;
      AccountNo@1000 : Code[30];
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF GenJnlLine."Account No." <> ICPartner.Code THEN
          ICPartner.GET("Account No.");
          IF GenJnlLine.Amount > 0 THEN BEGIN
            ICPartner.TESTFIELD("Receivables Account");
            AccountNo := ICPartner."Receivables Account";
          END ELSE BEGIN
            ICPartner.TESTFIELD("Payables Account");
            AccountNo := ICPartner."Payables Account";
          END;
          InitGLEntry(AccountNo,"Amount (LCY)","Source Currency Amount",TRUE,TRUE);
          GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
          InsertGLEntry(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitCodeUnit@24();
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF NextEntryNo = 0 THEN BEGIN
          GLEntry.LOCKTABLE;
          IF GLEntry.FINDLAST THEN BEGIN
            NextEntryNo := GLEntry."Entry No." + 1;
            NextTransactionNo := GLEntry."Transaction No." + 1;
          END ELSE BEGIN
            NextEntryNo := 1;
            NextTransactionNo := 1;
          END;

          LastDocType := "Document Type";
          LastDocNo := "Document No.";
          LastLineNo := "Line No.";
          LastDate := "Posting Date";
          CurrentBalance := 0;

          AccountingPeriod.RESET;
          AccountingPeriod.SETCURRENTKEY(Closed);
          AccountingPeriod.SETRANGE(Closed,FALSE);
          AccountingPeriod.FINDFIRST;
          FiscalYearStartDate := AccountingPeriod."Starting Date";

          GLSetup.GET;
          // gbedv ALL ------------------------------------------------- BEGIN
          SetupOPplus();
          // gbedv ALL ------------------------------------------------- END

          SalesSetup.GET;
          PurchSetup.GET;

          IF NOT GenJnlTemplate.GET("Journal Template Name") THEN
            GenJnlTemplate.INIT;

          VATEntry.LOCKTABLE;
          IF VATEntry.FINDLAST THEN
            NextVATEntryNo := VATEntry."Entry No." + 1
          ELSE
            NextVATEntryNo := 1;
          NextConnectionNo := 1;
          FirstNewVATEntryNo := NextVATEntryNo;

          GLReg.LOCKTABLE;
          IF GLReg.FINDLAST THEN
            GLReg."No." := GLReg."No." + 1
          ELSE
            GLReg."No." := 1;
          GLReg.INIT;
          GLReg."From Entry No." := NextEntryNo;
          GLReg."From VAT Entry No." := NextVATEntryNo;
          GLReg."Creation Date" := TODAY;
          GLReg."Source Code" := "Source Code";
          GLReg."Journal Batch Name" := "Journal Batch Name";
          GLReg."User ID" := USERID;
        END ELSE
          IF (LastDocType <> "Document Type") OR (LastDocNo <> "Document No.") OR
             (LastDate <> "Posting Date") OR (CurrentBalance = 0) AND NOT "System-Created Entry"
          THEN BEGIN
            IF CheckUnrealizedCust THEN BEGIN
              CustUnrealizedVAT(UnrealizedCustLedgEntry,UnrealizedRemainingAmountCust);
              CheckUnrealizedCust := FALSE;
            END;
            IF CheckUnrealizedVend THEN BEGIN
              VendUnrealizedVAT(UnrealizedVendLedgEntry,UnrealizedRemainingAmountVend);
              CheckUnrealizedVend := FALSE;
            END;
            NextTransactionNo := NextTransactionNo + 1;
            LastDocType := "Document Type";
            LastDocNo := "Document No.";
            LastLineNo := "Line No.";
            LastDate := "Posting Date";
            FirstNewVATEntryNo := NextVATEntryNo;
          END;

        GetCurrencyExchRate;
        GLEntryTmp.DELETEALL;
        IF ("Account No." <> '') AND ("Bal. Account No." = '') THEN BEGIN
          IF "VAT Posting" = "VAT Posting"::"Manual VAT Entry" THEN
            CurrentBalance := CurrentBalance + "Amount (LCY)" + GenJnlLine."VAT Amount"
          ELSE
            CurrentBalance := CurrentBalance + "Amount (LCY)";
        END;
        IF ("Account No." = '') AND ("Bal. Account No." <> '') THEN BEGIN
          IF "VAT Posting" = "VAT Posting"::"Manual VAT Entry" THEN
            CurrentBalance := CurrentBalance - "Amount (LCY)" - "VAT Amount"
          ELSE
            CurrentBalance := CurrentBalance - "Amount (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE FinishCodeunit@25();
    VAR
      TempGLEntryJnlDim@5157802 : TEMPORARY Record 17;
    BEGIN
      //Unrealized VAT Check
      IF CheckUnrealizedCust AND (CurrentBalance = 0) THEN BEGIN
        CustUnrealizedVAT(UnrealizedCustLedgEntry,UnrealizedRemainingAmountCust);
        CheckUnrealizedCust := FALSE;
      END;
      IF CheckUnrealizedVend AND (CurrentBalance = 0) THEN BEGIN
        VendUnrealizedVAT(UnrealizedVendLedgEntry,UnrealizedRemainingAmountVend);
        CheckUnrealizedVend := FALSE;
      END;

      WITH GenJnlLine DO BEGIN
        IF GLEntryTmp.FINDSET THEN BEGIN
          // gbedv DC -------------------------------------------------- BEGIN
          // Aktuelle Einstellung der Glob. Dimensionscode ein GLEntryJnlDim speichern
          TempGLEntryJnlDim := GLEntryTmp;
          IF TempJnlLineDim.GET(
            DATABASE::"Gen. Journal Line",
            GenJnlLine."Journal Template Name",
            GenJnlLine."Journal Batch Name",
            GenJnlLine."Line No.",
            0,
            GLSetup."Global Dimension 1 Code")
          THEN
            TempGLEntryJnlDim."Global Dimension 1 Code" := TempJnlLineDim."Dimension Value Code"
          ELSE
            TempGLEntryJnlDim."Global Dimension 1 Code" := '';
          IF TempJnlLineDim.GET(
            DATABASE::"Gen. Journal Line",
            GenJnlLine."Journal Template Name",
            GenJnlLine."Journal Batch Name",
            GenJnlLine."Line No.",
            0,
            GLSetup."Global Dimension 2 Code")
          THEN
            TempGLEntryJnlDim."Global Dimension 2 Code" := TempJnlLineDim."Dimension Value Code"
          ELSE
            TempGLEntryJnlDim."Global Dimension 2 Code" := '';
          // gbedv DC -------------------------------------------------- END
          REPEAT
            GLEntry := GLEntryTmp;
            IF GLSetup."Additional Reporting Currency" = '' THEN BEGIN
              GLEntry."Additional-Currency Amount" := 0;
              GLEntry."Add.-Currency Debit Amount" := 0;
              GLEntry."Add.-Currency Credit Amount" := 0;
            END;
            // begin/22.11.2012/GOB-CPE/V1.06
            DimMgt.MoveEntryDimToGLEntry(TempJnlLineDim,GLEntry);
            // end/22.11.2012/GOB-CPE/V1.06
            // gbedv PMT CC ---------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              FinanceTools.UpdateGLEntry2(GLEntry,GenJnlLine);
            // gbedv PMT CC ---------------------------------------------- END
            // gbedv GLOE ------------------------------------------------ BEGIN
            GLAcc.GET(GLEntry."G/L Account No.");
            IF GLAcc."Build Open Entries" THEN
              GLOpenEntries.PostGLAccOE(GLEntry,GenJnlLine,NextTransactionNo);
            // gbedv GLOE ------------------------------------------------ END
            GLEntry.INSERT;
            // gbedv DC -------------------------------------------------- BEGIN
            IF NOT InsertFAAllocDim(GLEntry."Entry No.") THEN BEGIN
              DimMgt.MoveJnlLineDimToLedgEntryDim(
                TempJnlLineDim,DATABASE::"G/L Entry",GLEntry."Entry No.");
              // Dimension Update needed?
              IF TempGLEntryPmtCorrection.GET(GLEntry."Entry No.") THEN
                FinanceTools.DimensionUpdate(TempGLEntryJnlDim,TempGLEntryPmtCorrection,GLEntry,GenJnlLine);
            END;
            // gbedv DC -------------------------------------------------- END
            // gbedv EA -------------------------------------------------- BEGIN
            TotalAmt5 += GLEntry.Amount;
            // gbedv EA -------------------------------------------------- END
      // Start CKL01.dg
            LicPermission.GET(
              LicPermission."Object Type"::Table,
              DATABASE::"Cost Account Setup");
            IF (LicPermission."Execute Permission" = LicPermission."Execute Permission"::Yes) AND
               (NORMALDATE(GLEntry."Posting Date") = GLEntry."Posting Date") THEN
              CostAcc(GLEntry);
            LicPermission.GET(
              LicPermission."Object Type"::Table,
              DATABASE::"Project Account Setup");
            IF (LicPermission."Execute Permission" = LicPermission."Execute Permission"::Yes) AND
               (NORMALDATE(GLEntry."Posting Date") = GLEntry."Posting Date") THEN
              ProjAcc(GLEntry);
      // Stop CKL01.dg
          UNTIL GLEntryTmp.NEXT = 0;

          GLReg."To VAT Entry No." := NextVATEntryNo - 1;
          IF GLReg."To Entry No." = 0 THEN BEGIN
            GLReg."To Entry No." := GLEntry."Entry No.";
            GLReg.INSERT;
          END ELSE BEGIN
            GLReg."To Entry No." := GLEntry."Entry No.";
            GLReg.MODIFY;
          END;
        END;
        GLEntry.CONSISTENT(
          (BalanceCheckAmount = 0) AND (BalanceCheckAmount2 = 0) AND
          (BalanceCheckAddCurrAmount = 0) AND (BalanceCheckAddCurrAmount2 = 0));
      END;
    END;

    LOCAL PROCEDURE InitGLEntry@3(GLAccNo@1000 : Code[20];Amount@1001 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1003 : Boolean;SystemCreatedEntry@1004 : Boolean);
    VAR
      TableID@1005 : ARRAY [10] OF Integer;
      AccNo@1006 : ARRAY [10] OF Code[20];
    BEGIN
      IF GLAccNo <> '' THEN BEGIN
        GLAcc.GET(GLAccNo);
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);

        // Check the Value Posting field on the G/L Account if it is not checked already in Codeunit 11
        IF (NOT
            ((GLAccNo = GenJnlLine."Account No.") AND
             (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account")) OR
            ((GLAccNo = GenJnlLine."Bal. Account No.") AND
             (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"G/L Account"))) AND
           NOT FADimAlreadyChecked
        THEN BEGIN
          TableID[1] := DimMgt.TypeToTableID1(GenJnlLine."Account Type"::"G/L Account");
          AccNo[1] := GLAccNo;
          IF (GenJnlLine.Amount <> 0) OR (GenJnlLine."Amount (LCY)" <> 0) THEN BEGIN
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              IF SystemCreatedEntry AND (GLAcc."Dim. for System Entries" > 0) AND (GenJnlLine."Line No." <> 0) THEN
                SkipDimCheck := TRUE;
            IF NOT OPplusEnabled THEN
              SkipDimCheck := FALSE;
            IF NOT SkipDimCheck THEN
            // gbedv DC -------------------------------------------------- END
            IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
              IF GenJnlLine."Line No." <> 0 THEN
                ERROR(
                  Text013,
                  GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
                  GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
                  DimMgt.GetDimValuePostingErr)
              ELSE
                ERROR(DimMgt.GetDimValuePostingErr);
          END;
        END;
      END;

      GLEntry.INIT;
      GLEntry."Posting Date" := GenJnlLine."Posting Date";
      GLEntry."Document Date" := GenJnlLine."Document Date";
      GLEntry."Document Type" := GenJnlLine."Document Type";
      GLEntry."Document No." := GenJnlLine."Document No.";
      GLEntry."External Document No." := GenJnlLine."External Document No.";
      GLEntry.Description := GenJnlLine.Description;
      GLEntry."Business Unit Code" := GenJnlLine."Business Unit Code";
      GLEntry."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      GLEntry."Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      GLEntry."Source Code" := GenJnlLine."Source Code";
      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account" THEN BEGIN
        GLEntry."Source Type" := GenJnlLine."Source Type";
        GLEntry."Source No." := GenJnlLine."Source No.";
      END ELSE BEGIN
        GLEntry."Source Type" := GenJnlLine."Account Type";
        GLEntry."Source No." := GenJnlLine."Account No.";
      END;
      IF (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"IC Partner") OR
        (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"IC Partner")
      THEN
        GLEntry."Source Type" := GLEntry."Source Type"::" ";
      GLEntry."Job No." := GenJnlLine."Job No.";
      GLEntry.Quantity := GenJnlLine.Quantity;
      GLEntry."Journal Batch Name" := GenJnlLine."Journal Batch Name";
      GLEntry."Reason Code" := GenJnlLine."Reason Code";
      GLEntry."Entry No." := NextEntryNo;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry."G/L Account No." := GLAccNo;
      GLEntry.Amount := Amount;
      GLEntry."User ID" := USERID;
      GLEntry."No. Series" := GenJnlLine."Posting No. Series";
      GLEntry."System-Created Entry" := SystemCreatedEntry;
      GLEntry."Prior-Year Entry" := GLEntry."Posting Date" < FiscalYearStartDate;
      GLEntry."IC Partner Code" := GenJnlLine."IC Partner Code";

      //A/gob-bth/23102012/P0484
      GLEntry.Darlehen := GenJnlLine.Darlehen;
      GLEntry.Zinsen := GenJnlLine.Zinsen;
      //E/gob-bth/23102012/P0484

      // gbedv EA -------------------------------------------------- BEGIN
      IF OPplusEnabled THEN BEGIN
        FinanceTools.UpdateGLEntry1(GLEntry,GenJnlLine);
        IF SkipDimCheck AND SystemCreatedEntry AND (GLAcc."Dim. for System Entries" > 0) AND (GenJnlLine."Line No." <> 0) THEN
          FinanceTools.DimCheckSystemEntry(GLAcc,GLEntry,GenJnlLine,TempGLEntryPmtCorrection);
      END;
      IF SkipDimCheck THEN
        SkipDimCheck := FALSE;
      // gbedv EA -------------------------------------------------- END
      // gbedv TAX ------------------------------------------------- BEGIN
      IF OPplusAnalysisEnabled THEN
        OPplusAnalysisSetup.UpdateGLEntry(GLEntry,GenJnlLine);
      // gbedv TAX ------------------------------------------------- END
      GLCalcAddCurrency(AmountAddCurr,UseAmountAddCurr);
    END;

    LOCAL PROCEDURE InsertGLEntry@2(CalcAddCurrResiduals@1000 : Boolean);
    BEGIN
      GLEntry.TESTFIELD("G/L Account No.");

      IF GLEntry.Amount <> ROUND(GLEntry.Amount) THEN
        GLEntry.FIELDERROR(
          Amount,
          STRSUBSTNO(Text000,GLEntry.Amount));

      IF GLEntry."Posting Date" = NORMALDATE(GLEntry."Posting Date") THEN BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + GLEntry.Amount * ((GLEntry."Posting Date" - 01010000D) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + GLEntry.Amount * ((GLEntry."Posting Date" - 01010000D) MOD 98 + 1);
      END ELSE BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + GLEntry.Amount * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + GLEntry.Amount * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 98 + 1);
      END;

      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        IF GLEntry."Posting Date" = NORMALDATE(GLEntry."Posting Date") THEN BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount + GLEntry."Additional-Currency Amount" * ((GLEntry."Posting Date" - 01010000D) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 + GLEntry."Additional-Currency Amount" * ((GLEntry."Posting Date" - 01010000D) MOD 98 + 1);
        END ELSE BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount +
            GLEntry."Additional-Currency Amount" * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 +
            GLEntry."Additional-Currency Amount" * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 98 + 1);
        END;
      END ELSE BEGIN
        BalanceCheckAddCurrAmount := 0;
        BalanceCheckAddCurrAmount2 := 0;
      END;

      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
         ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
      THEN BEGIN
        GLEntry."Debit Amount" := GLEntry.Amount;
        GLEntry."Credit Amount" := 0
      END ELSE BEGIN
        GLEntry."Debit Amount" := 0;
        GLEntry."Credit Amount" := -GLEntry.Amount;
      END;

      IF ((GLEntry."Additional-Currency Amount" > 0) AND (NOT GenJnlLine.Correction)) OR
         ((GLEntry."Additional-Currency Amount" < 0) AND GenJnlLine.Correction)
      THEN BEGIN
        GLEntry."Add.-Currency Debit Amount" := GLEntry."Additional-Currency Amount";
        GLEntry."Add.-Currency Credit Amount" := 0
      END ELSE BEGIN
        GLEntry."Add.-Currency Debit Amount" := 0;
        GLEntry."Add.-Currency Credit Amount" := -GLEntry."Additional-Currency Amount";
      END;
      //A/gob-ko/GOB1.00/14.05.2012
      GLEntry."Groupon/Gift certificate No." := GenJnlLine."Groupon/Gift certificate No.";
      //E/gob-ko/GOB1.00/14.05.2012
      GLEntryTmp := GLEntry;
      GLEntryTmp.INSERT;

      NextEntryNo := NextEntryNo + 1;

      IF CalcAddCurrResiduals THEN
        HandleAddCurrResidualGLEntry;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntry@1(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;ApplnRoundingPrecision@1004 : Decimal);
    VAR
      OldCustLedgEntry@1005 : Record 21;
      OldCVLedgEntryBuf@1006 : Record 382;
      OldCVLedgEntryBuf2@1007 : Record 382;
      NewCustLedgEntry@1008 : Record 21;
      NewCVLedgEntryBuf2@1019 : Record 382;
      OldCVLedgEntryBuf3@1018 : Record 382;
      TempOldCustLedgEntry@1021 : TEMPORARY Record 21;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      AppliedAmountLCY@1011 : Decimal;
      OldAppliedAmount@1012 : Decimal;
      TempAmount@1013 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      OldRemainingAmtBeforeAppln@1016 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      "---eBay"@5095800 : Boolean;
      eBayPayment@5095801 : Codeunit 5095807;
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      // Skontoausbuchungen ermîglichen
      // IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
      IF (NewCVLedgEntryBuf."Amount to Apply" = 0) AND (GenJnlLine."Posting Payment Discount" = 0) THEN
      // gbedv EA -------------------------------------------------- END
        EXIT;

      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
           ((Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") AND
            GenJnlLine."Allow Application")
      THEN
        EXIT;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      IF NewCVLedgEntryBuf."Currency Code" <> '' THEN BEGIN
        // Management of application of already posted entries
        IF NewCVLedgEntryBuf."Currency Code" <> ApplnCurrency.Code THEN
          ApplnCurrency.GET(NewCVLedgEntryBuf."Currency Code");
        ApplnRoundingPrecision := ApplnCurrency."Appln. Rounding Precision";
      END ELSE
          ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision";
      ApplyingDate := GenJnlLine."Posting Date";

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        //eBay#001
        IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Order THEN BEGIN
          eBayPayment.AuftragsAusgleich(GenJnlLine);
          EXIT;
        END;
        //eBay#001
        //eBay#004
        IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
          eBayPayment.AnzahlungsAusgleich(GenJnlLine);
        //eBay#004

        // Find the entry to be applied to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Document No.");
        OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE(Open,TRUE);

        // gbedv EA -------------------------------------------------- BEGIN
        IF GenJnlLine."ID Applied-Entry" <> 0 THEN BEGIN
          OldCustLedgEntry.SETRANGE("Entry No.",GenJnlLine."ID Applied-Entry");
          OldCustLedgEntry.FINDFIRST;
        END ELSE BEGIN
        // gbedv EA -------------------------------------------------- END
        OldCustLedgEntry.FINDFIRST;
        OldCustLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        // gbedv EA -------------------------------------------------- BEGIN
        END;
        // gbedv EA -------------------------------------------------- END
        IF OldCustLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldCustLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",
          OldCustLedgEntry."Currency Code",
          GenJnlLine."Account Type"::Customer,
          TRUE);
        TempOldCustLedgEntry := OldCustLedgEntry;
        TempOldCustLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldCustLedgEntry.SETRANGE(Open,TRUE);
        OldCustLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        // gbedv EA -------------------------------------------------- BEGIN
        IF GenJnlTemplate."Application Method" <> GenJnlTemplate."Application Method"::Extended THEN
        // gbedv EA -------------------------------------------------- END
        IF NOT(Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") THEN
          OldCustLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        IF Cust."Application Method" = Cust."Application Method"::"Apply to Oldest" THEN
          OldCustLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        // Check Cust Ledger Entry and add to Temp.
        IF SalesSetup."Appln. between Currencies" = SalesSetup."Appln. between Currencies"::None THEN
          OldCustLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldCustLedgEntry.FINDSET(FALSE,FALSE) THEN
            REPEAT
              IF GenJnlApply.CheckAgainstApplnCurrency(
                NewCVLedgEntryBuf."Currency Code",
                OldCustLedgEntry."Currency Code",
                GenJnlLine."Account Type"::Customer,
                FALSE)
              THEN BEGIN
                IF (OldCustLedgEntry."Posting Date" > ApplyingDate) AND (OldCustLedgEntry."Applies-to ID" <> '') THEN
                  ApplyingDate := OldCustLedgEntry."Posting Date";
                TempOldCustLedgEntry := OldCustLedgEntry;
                TempOldCustLedgEntry.INSERT;
              END;
            UNTIL OldCustLedgEntry.NEXT=0;

        TempOldCustLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        IF TempOldCustLedgEntry.FIND('-') THEN BEGIN

          TempAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldCustLedgEntry.SETRANGE(Positive);
          TempOldCustLedgEntry.FIND('-');
          REPEAT
            TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
            IF NewCVLedgEntryBuf."Currency Code" <> TempOldCustLedgEntry."Currency Code" THEN BEGIN
              TempOldCustLedgEntry."Remaining Amount" :=

                ExchAmount(
                  TempOldCustLedgEntry."Remaining Amount",TempOldCustLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldCustLedgEntry."Remaining Pmt. Disc. Possible" :=
                ExchAmount(
                  TempOldCustLedgEntry."Remaining Pmt. Disc. Possible",TempOldCustLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldCustLedgEntry."Accepted Payment Tolerance" :=
                ExchAmount(
                  TempOldCustLedgEntry."Accepted Payment Tolerance",TempOldCustLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldCustLedgEntry."Amount to Apply" :=
                ExchAmount(
                  TempOldCustLedgEntry."Amount to Apply",TempOldCustLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");

            END;
            IF CheckCalcPmtDiscCVCust(NewCVLedgEntryBuf,TempOldCustLedgEntry,0,FALSE,FALSE)
            THEN
              TempOldCustLedgEntry."Remaining Amount" :=
                TempOldCustLedgEntry."Remaining Amount" - TempOldCustLedgEntry."Remaining Pmt. Disc. Possible";

            TempAmount := TempAmount + TempOldCustLedgEntry."Remaining Amount";

          UNTIL TempOldCustLedgEntry.NEXT = 0;

          TempOldCustLedgEntry.SETRANGE(Positive,TempAmount < 0);
        END ELSE
          TempOldCustLedgEntry.SETRANGE(Positive);

        IF NOT TempOldCustLedgEntry.FIND('-') THEN
          EXIT;
      END;

      GenJnlLine."Posting Date" := ApplyingDate;

      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        TempOldCustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TempOldCustLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);
        TransferCustLedgEntry(OldCVLedgEntryBuf,TempOldCustLedgEntry,TRUE);

        OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
        OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

        // Management of posting in multiple currencies
        OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
        OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);

        IF NewCVLedgEntryBuf."Currency Code" <> OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
          OldCVLedgEntryBuf2."Remaining Amount" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Remaining Amount",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Accepted Payment Tolerance" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Accepted Payment Tolerance",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Amount to Apply" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Amount to Apply",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
        END;

        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

        CalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo);

        CalcPmtDiscTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,NextTransactionNo,FirstNewVATEntryNo);

        CalcCurrencyApplnRounding(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
          GenJnlLine,ApplnRoundingPrecision);

        FindAmtForAppln(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
          AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision);

        CalcCurrencyUnrealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

        CalcCurrencyRealizedGainLoss(
          NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

        CalcCurrencyRealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

        CalcApplication(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
          GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
          NewCVLedgEntryBuf2,OldCVLedgEntryBuf3);

        CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2);

        CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

        IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
          UpdateCalcInterest(OldCVLedgEntryBuf);
          UpdateCalcInterest2(OldCVLedgEntryBuf,NewCVLedgEntryBuf);
        END;

        TransferCustLedgEntry(OldCVLedgEntryBuf,TempOldCustLedgEntry,FALSE);
        OldCustLedgEntry := TempOldCustLedgEntry;
        OldCustLedgEntry."Applies-to ID" := '';
        OldCustLedgEntry."Amount to Apply" := 0;
        OldCustLedgEntry.MODIFY;
        //A/gob-ko/P0499/24.10.2012
        GOBReleaseOrder(OldCustLedgEntry);
        //E/gob-ko/P0499/24.10.2012
        IF GLSetup."Unrealized VAT" OR
          (GLSetup."Prepayment Unrealized VAT" AND TempOldCustLedgEntry.Prepayment)
        THEN
          IF (TempOldCustLedgEntry."Document Type" IN
               [TempOldCustLedgEntry."Document Type"::Invoice,
                TempOldCustLedgEntry."Document Type"::"Credit Memo",
                TempOldCustLedgEntry."Document Type"::"Finance Charge Memo",
                TempOldCustLedgEntry."Document Type"::Reminder])
          THEN BEGIN
            IF TempOldCustLedgEntry."Currency Code" <> NewCVLedgEntryBuf."Currency Code" THEN BEGIN
              TempOldCustLedgEntry."Remaining Amount" :=
                ExchAmount(
                  TempOldCustLedgEntry."Remaining Amount",NewCVLedgEntryBuf."Currency Code",
                  TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldCustLedgEntry."Remaining Pmt. Disc. Possible" :=
                ExchAmount(
                  TempOldCustLedgEntry."Remaining Pmt. Disc. Possible",NewCVLedgEntryBuf."Currency Code",
                  TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              OldCVLedgEntryBuf."Accepted Payment Tolerance" :=
                ExchAmount(
                  OldCVLedgEntryBuf."Accepted Payment Tolerance",NewCVLedgEntryBuf."Currency Code",
                  OldCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            END;
            CustUnrealizedVAT(
              TempOldCustLedgEntry,
              ExchAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"));
          END;

        TempOldCustLedgEntry.DELETE;

          // Find the next old entry for application of the new entry
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          Completed := TRUE
        ELSE
          IF TempOldCustLedgEntry.GETFILTER(TempOldCustLedgEntry.Positive) <> '' THEN BEGIN
            IF TempOldCustLedgEntry.NEXT = 1 THEN
              Completed := FALSE
            ELSE BEGIN
              TempOldCustLedgEntry.SETRANGE(Positive);
              TempOldCustLedgEntry.FIND('-');
              TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldCustLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            END
          END ELSE BEGIN
            IF NewCVLedgEntryBuf.Open THEN BEGIN
              Completed := TempOldCustLedgEntry.NEXT = 0
            END ELSE
              Completed := TRUE;
          END;
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("Cust. Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)", Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF NOT NewCVLedgEntryBuf.Open THEN
        UpdateCalcInterest(NewCVLedgEntryBuf);

      IF GLSetup."Unrealized VAT" OR
        (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF (NewCVLedgEntryBuf."Document Type" IN
             [NewCVLedgEntryBuf."Document Type"::Invoice,
              NewCVLedgEntryBuf."Document Type"::"Credit Memo",
              NewCVLedgEntryBuf."Document Type"::"Finance Charge Memo",
              NewCVLedgEntryBuf."Document Type"::Reminder]) AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        THEN BEGIN
          TransferCustLedgEntry(NewCVLedgEntryBuf,NewCustLedgEntry,FALSE);
          CheckUnrealizedCust := TRUE;
          UnrealizedCustLedgEntry := NewCustLedgEntry;
          UnrealizedRemainingAmountCust := NewCustLedgEntry."Remaining Amount" - NewRemainingAmtBeforeAppln;
        END;
    END;

    LOCAL PROCEDURE CalcPmtTolerance@61(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;GLSetup@1003 : Record 98;VAR PmtTolAmtToBeApplied@1012 : Decimal;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtTol@1011 : Decimal;
      PmtTolLCY@1010 : Decimal;
      PmtTolAddCurr@1009 : Decimal;
    BEGIN
      IF Cust."Block Payment Tolerance" OR Vend."Block Payment Tolerance" THEN
        EXIT;

      IF OldCVLedgEntryBuf2."Accepted Payment Tolerance" <> 0 THEN BEGIN
        PmtTol := -OldCVLedgEntryBuf2."Accepted Payment Tolerance";
        PmtTolAmtToBeApplied := PmtTolAmtToBeApplied + PmtTol;
        PmtTolLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtTol) / NewCVLedgEntryBuf."Original Currency Factor") -
            NewCVLedgEntryBuf."Original Amt. (LCY)";

        OldCVLedgEntryBuf."Accepted Payment Tolerance" := 0;
        OldCVLedgEntryBuf."Pmt. Tolerance (LCY)" := -PmtTolLCY;

        IF NewCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency" THEN
          PmtTolAddCurr := PmtTol
        ELSE
          PmtTolAddCurr := CalcLCYToAddCurr(PmtTolLCY);

        IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtTolLCY <> 0) THEN
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,
            DtldCVLedgEntryBuf,GenJnlLine,GLSetup,PmtTolLCY,PmtTolAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,3);

        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance";
        DtldCVLedgEntryBuf.Amount := PmtTol;
        DtldCVLedgEntryBuf."Amount (LCY)" := PmtTolLCY;
        DtldCVLedgEntryBuf."Additional-Currency Amount" := PmtTolAddCurr;
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
      END;
    END;

    LOCAL PROCEDURE CalcPmtDisc@50(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR DtldCVLedgEntryBuf@1003 : Record 383;GenJnlLine@1004 : Record 81;GLSetup@1005 : Record 98;PmtTolAmtToBeApplied@1012 : Decimal;ApplnRoundingPrecision@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer);
    VAR
      PmtDisc@1009 : Decimal;
      PmtDiscLCY@1010 : Decimal;
      PmtDiscAddCurr@1011 : Decimal;
    BEGIN
      IF (CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE) AND
        ((OldCVLedgEntryBuf2."Amount to Apply" = 0) OR (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
        ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"))) OR
        (CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
        (OldCVLedgEntryBuf2."Amount to Apply" <> 0) AND (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
        ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")) AND
        ((ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >=
        ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")))))
        // gbedv EA -------------------------------------------------- BEGIN
        OR ((GenJnlLine."ID Applied-Entry" <> 0) AND (GenJnlLine."Posting Payment Discount" <> 0))
        // gbedv EA -------------------------------------------------- END
      THEN BEGIN
        PmtDisc := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
        // gbedv EA -------------------------------------------------- BEGIN
        IF GenJnlLine."ID Applied-Entry" <> 0 THEN
          PmtDisc := GenJnlLine."Posting Payment Discount";
        // gbedv EA -------------------------------------------------- END
        PmtDiscLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
            NewCVLedgEntryBuf."Original Amt. (LCY)";

        // gbedv EA -------------------------------------------------- BEGIN
        IF GenJnlLine."ID Applied-Entry" <> 0 THEN
          OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" - PmtDiscLCY
        ELSE
        // gbedv EA -------------------------------------------------- END
        OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;

        IF (NewCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency") AND
           (GLSetup."Additional Reporting Currency" <> '') THEN
          PmtDiscAddCurr := PmtDisc
        ELSE
          PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);

        IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND
           (PmtDiscLCY <> 0)
        THEN
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,
            DtldCVLedgEntryBuf,GenJnlLine,GLSetup,PmtDiscLCY,PmtDiscAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,1);

        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Payment Discount";
        DtldCVLedgEntryBuf.Amount := PmtDisc;
        DtldCVLedgEntryBuf."Amount (LCY)" := PmtDiscLCY;
        DtldCVLedgEntryBuf."Additional-Currency Amount" := PmtDiscAddCurr;
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscIfAdjVAT@49(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;GLSetup@1004 : Record 98;VAR PmtDiscLCY2@1005 : Decimal;VAR PmtDiscAddCurr2@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer;EntryType@1009 : Integer);
    VAR
      VATEntry@1010 : Record 254;
      VATEntry2@1011 : Record 254;
      VATPostingSetup@1012 : Record 325;
      TaxJurisdiction@1013 : Record 320;
      DtldCVLedgEntryBuf2@1015 : Record 383;
      OriginalAmountAddCurr@1016 : Decimal;
      PmtDiscRounding@1017 : Decimal;
      PmtDiscRoundingAddCurr@1018 : Decimal;
      PmtDiscFactorLCY@1019 : Decimal;
      PmtDiscFactorAddCurr@1020 : Decimal;
      VATBase@1021 : Decimal;
      VATBaseAddCurr@1022 : Decimal;
      VATAmount@1023 : Decimal;
      VATAmountAddCurr@1024 : Decimal;
      TotalVATAmount@1025 : Decimal;
      TempVatEntryNo@1014 : Integer;
      LastConnectionNo@1026 : Integer;
      VatEntryModifier@1027 : Integer;
      "+++ OPplus +++"@5157802 : Integer;
      GenPostingSetup@5157803 : Record 252;
      GLAccNo@5157804 : Code[20];
    BEGIN
      IF OldCVLedgEntryBuf."Original Amt. (LCY)" <> 0 THEN BEGIN
        IF (GLSetup."Additional Reporting Currency" = '') OR
           (GLSetup."Additional Reporting Currency" = OldCVLedgEntryBuf."Currency Code")
        THEN
          OriginalAmountAddCurr := OldCVLedgEntryBuf.Amount
        ELSE
          OriginalAmountAddCurr := CalcLCYToAddCurr(OldCVLedgEntryBuf."Original Amt. (LCY)");
        PmtDiscRounding := PmtDiscLCY2;
        PmtDiscFactorLCY := PmtDiscLCY2 / OldCVLedgEntryBuf."Original Amt. (LCY)";
        IF OriginalAmountAddCurr <> 0 THEN
          PmtDiscFactorAddCurr := PmtDiscAddCurr2 / OriginalAmountAddCurr
        ELSE
          PmtDiscFactorAddCurr := 0;
        VATEntry2.RESET;
        VATEntry2.SETCURRENTKEY("Transaction No.");
        VATEntry2.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
        IF OldCVLedgEntryBuf."Transaction No." = NextTransactionNo THEN
          VATEntry2.SETRANGE("Entry No.",0,FirstNewVATEntryNo - 1);
        IF VATEntry2.FINDSET THEN BEGIN
          TotalVATAmount := 0;
          LastConnectionNo := 0;
          REPEAT
            VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
            // gbedv DC -------------------------------------------------- BEGIN
            GenPostingSetup.GET(VATEntry2."Gen. Bus. Posting Group",VATEntry2."Gen. Prod. Posting Group");
            // gbedv DC -------------------------------------------------- END
            IF VATEntry2."VAT Calculation Type" =
               VATEntry2."VAT Calculation Type"::"Sales Tax"
            THEN BEGIN
              TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
              VATPostingSetup."Adjust for Payment Discount" :=
                TaxJurisdiction."Adjust for Payment Discount";
            END;
            IF VATPostingSetup."Adjust for Payment Discount" THEN BEGIN
              IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
                IF LastConnectionNo <> 0 THEN BEGIN
                  DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
                  DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
                  // gbedv DC -------------------------------------------------- BEGIN
                  PostAtOnce := TRUE;
                  // gbedv DC -------------------------------------------------- END
                  InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);

                  InsertSummarizedVAT;
                END;

                CASE VATEntry2."VAT Calculation Type" OF
                  VATEntry2."VAT Calculation Type"::"Normal VAT",
                  VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
                  VATEntry2."VAT Calculation Type"::"Full VAT":
                    BEGIN
                      VATBase :=
                        VATEntry2.Base + VATEntry2."Unrealized Base";
                      VATBaseAddCurr :=
                        VATEntry2."Additional-Currency Base" +
                        VATEntry2."Add.-Currency Unrealized Base";
                    END;
                  VATEntry2."VAT Calculation Type"::"Sales Tax":
                    BEGIN
                      VATEntry.RESET;
                      VATEntry.SETCURRENTKEY(VATEntry."Transaction No.");
                      VATEntry.SETRANGE("Transaction No.",VATEntry2."Transaction No.");
                      VATEntry.SETRANGE("Sales Tax Connection No.",VATEntry2."Sales Tax Connection No.");
                      VATEntry := VATEntry2;
                      REPEAT
                        IF VATEntry.Base < 0 THEN
                          VATEntry.SETFILTER(Base,'>%1',VATEntry.Base)
                        ELSE
                          VATEntry.SETFILTER(Base,'<%1',VATEntry.Base);
                      UNTIL NOT VATEntry.FINDLAST;
                      VATEntry.RESET;
                      VATBase :=
                        VATEntry.Base + VATEntry."Unrealized Base";
                      VATBaseAddCurr :=
                        VATEntry."Additional-Currency Base" +
                        VATEntry."Add.-Currency Unrealized Base";
                    END;
                END;

                PmtDiscRounding := PmtDiscRounding + VATBase * PmtDiscFactorLCY;
                VATBase := ROUND(PmtDiscRounding - PmtDiscLCY2);
                PmtDiscLCY2 := PmtDiscLCY2 + VATBase;

                PmtDiscRoundingAddCurr := PmtDiscRoundingAddCurr + VATBaseAddCurr * PmtDiscFactorAddCurr;
                VATBaseAddCurr := ROUND(CalcLCYToAddCurr(VATBase),AddCurrency."Amount Rounding Precision");
                PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATBaseAddCurr;

                DtldCVLedgEntryBuf2.INIT;
                DtldCVLedgEntryBuf2."Posting Date" := GenJnlLine."Posting Date";
                DtldCVLedgEntryBuf2."Document Type" := GenJnlLine."Document Type";
                DtldCVLedgEntryBuf2."Document No." := GenJnlLine."Document No.";
                DtldCVLedgEntryBuf2.Amount := 0;
                DtldCVLedgEntryBuf2."Amount (LCY)" := -VATBase;
                CASE EntryType OF
                  1:
                    BEGIN
                      DtldCVLedgEntryBuf2."Entry Type" :=
                        DtldCVLedgEntryBuf2."Entry Type"::"Payment Discount (VAT Excl.)";
                      InitOldCVLedgEntry(DtldCVLedgEntryBuf2,NewCVLedgEntryBuf);
                      VatEntryModifier := 0;
                    END;
                  2:
                    BEGIN
                      IF GLSetup."Post Pmt.Disc Tol. to Pmt.Disc" THEN
                        DtldCVLedgEntryBuf2."Entry Type" :=
                          DtldCVLedgEntryBuf2."Entry Type"::"Payment Discount (VAT Excl.)"
                      ELSE
                        DtldCVLedgEntryBuf2."Entry Type" :=
                          DtldCVLedgEntryBuf2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)";
                      InitOldCVLedgEntry(DtldCVLedgEntryBuf2,NewCVLedgEntryBuf);
                      VatEntryModifier := 1000000;
                    END;
                  3:
                    BEGIN
                      IF GLSetup."Post Pmt.Disc Tol. to Pmt.Disc" THEN
                        DtldCVLedgEntryBuf2."Entry Type" :=
                          DtldCVLedgEntryBuf2."Entry Type"::"Payment Discount (VAT Excl.)"
                      ELSE
                        DtldCVLedgEntryBuf2."Entry Type" :=
                          DtldCVLedgEntryBuf2."Entry Type"::"Payment Tolerance (VAT Excl.)";
                      InitOldCVLedgEntry(DtldCVLedgEntryBuf2,NewCVLedgEntryBuf);
                      VatEntryModifier := 2000000;
                    END;
                END;
                // The total payment discount in currency is posted on the entry made in
                // the function CalcPmtDisc.
                DtldCVLedgEntryBuf2."User ID" := USERID;
                DtldCVLedgEntryBuf2."Additional-Currency Amount" := -VATBaseAddCurr;
                DtldCVLedgEntryBuf2."Gen. Posting Type" := VATEntry2.Type;
                DtldCVLedgEntryBuf2."Gen. Bus. Posting Group" := VATEntry2."Gen. Bus. Posting Group";
                DtldCVLedgEntryBuf2."Gen. Prod. Posting Group" := VATEntry2."Gen. Prod. Posting Group";
                DtldCVLedgEntryBuf2."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
                DtldCVLedgEntryBuf2."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
                DtldCVLedgEntryBuf2."Tax Area Code" := VATEntry2."Tax Area Code";
                DtldCVLedgEntryBuf2."Tax Liable" := VATEntry2."Tax Liable";
                DtldCVLedgEntryBuf2."Tax Group Code" := VATEntry2."Tax Group Code";
                DtldCVLedgEntryBuf2."Use Tax" := VATEntry2."Use Tax";
                // gbedv DC -------------------------------------------------- BEGIN
                IF VATEntry2."Global Dimension 1 Code" <> '' THEN
                  DtldCVLedgEntryBuf2."VAT Entry Global Dim. 1" := VATEntry2."Global Dimension 1 Code";
                IF VATEntry2."Global Dimension 2 Code" <> '' THEN
                  DtldCVLedgEntryBuf2."VAT Entry Global Dim. 2" := VATEntry2."Global Dimension 2 Code";
                DtldCVLedgEntryBuf2."VAT Entry No." := VATEntry2."Entry No.";
                // gbedv DC -------------------------------------------------- END
                TotalVATAmount := 0;
                LastConnectionNo := VATEntry2."Sales Tax Connection No.";
              END;

              IF (VATBase = 0) AND (VATBaseAddCurr = 0) THEN BEGIN
                VATAmount := 0;
                VATAmountAddCurr := 0;
              END ELSE BEGIN
                CASE VATEntry2."VAT Calculation Type" OF
                  VATEntry2."VAT Calculation Type"::"Normal VAT",
                  VATEntry2."VAT Calculation Type"::"Full VAT":
                    BEGIN
                      IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
                         (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
                      THEN BEGIN
                        IF VATBase = 0 THEN
                          VATAmount := 0
                        ELSE BEGIN
                          PmtDiscRounding :=
                            PmtDiscRounding +
                            (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
                          VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
                          PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
                        END;
                        IF VATBaseAddCurr = 0 THEN
                          VATAmountAddCurr := 0
                        ELSE BEGIN
                          VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
                          PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
                        END;
                      END ELSE BEGIN
                        VATAmount := 0;
                        VATAmountAddCurr := 0;
                      END;
                    END;
                  VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                    BEGIN
                      VATAmount :=
                        ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
                      VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
                    END;
                  VATEntry2."VAT Calculation Type"::"Sales Tax":
                    IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
                      VATAmount :=
                        ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
                      VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
                    END ELSE BEGIN
                      IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
                         (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
                      THEN BEGIN
                        IF VATBase = 0 THEN
                          VATAmount := 0
                        ELSE BEGIN
                          PmtDiscRounding :=
                            PmtDiscRounding +
                            (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
                          VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
                          PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
                        END;

                        IF VATBaseAddCurr = 0 THEN
                          VATAmountAddCurr := 0
                        ELSE BEGIN
                          VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
                          PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
                        END;
                      END ELSE BEGIN
                        VATAmount := 0;
                        VATAmountAddCurr := 0;
                      END;
                    END;
                END;
              END;
              TotalVATAmount := TotalVATAmount + VATAmount;

              IF (PmtDiscAddCurr2 <> 0) AND (PmtDiscLCY2 = 0) THEN BEGIN
                VATAmountAddCurr := VATAmountAddCurr - PmtDiscAddCurr2;
                PmtDiscAddCurr2 := 0;
              END;

              // Post VAT
              // VAT for VAT entry
              IF VATEntry2.Type <> 0 THEN BEGIN
                TempVatEntry.RESET;
                TempVatEntry.SETRANGE("Entry No.",VatEntryModifier,VatEntryModifier + 999999);
                IF TempVatEntry.FINDLAST THEN
                  TempVatEntryNo := TempVatEntry."Entry No." + 1
                ELSE
                  TempVatEntryNo := VatEntryModifier + 1;
                TempVatEntry := VATEntry2;
                TempVatEntry."Entry No." := TempVatEntryNo;
                TempVatEntry."Posting Date" := GenJnlLine."Posting Date";
                TempVatEntry."Document No." := GenJnlLine."Document No.";
                TempVatEntry."External Document No." := GenJnlLine."External Document No.";
                TempVatEntry."Document Type" := GenJnlLine."Document Type";
                TempVatEntry."Source Code" := GenJnlLine."Source Code";
                TempVatEntry."Reason Code" := GenJnlLine."Reason Code";
                TempVatEntry."Transaction No." := NextTransactionNo;
                TempVatEntry."Sales Tax Connection No." := NextConnectionNo;
                TempVatEntry."Unrealized Amount" := 0;
                TempVatEntry."Unrealized Base" := 0;
                TempVatEntry."Remaining Unrealized Amount" := 0;
                TempVatEntry."Remaining Unrealized Base" := 0;
                TempVatEntry."User ID" := USERID;
                TempVatEntry."Closed by Entry No." := 0;
                TempVatEntry.Closed := FALSE;
                TempVatEntry."Internal Ref. No." := '';
                TempVatEntry.Amount := VATAmount;
                TempVatEntry."Additional-Currency Amount" := VATAmountAddCurr;
                TempVatEntry."VAT Difference" := 0;
                TempVatEntry."Add.-Curr. VAT Difference" := 0;
                TempVatEntry."Add.-Currency Unrealized Amt." := 0;
                TempVatEntry."Add.-Currency Unrealized Base" := 0;
                // gbedv DC -------------------------------------------------- BEGIN
                TempVatEntry."Global Dimension 1 Code" := VATEntry2."Global Dimension 1 Code";
                TempVatEntry."Global Dimension 2 Code" := VATEntry2."Global Dimension 2 Code";
                // gbedv DC -------------------------------------------------- END
                IF VATEntry2."Tax on Tax" THEN BEGIN
                  TempVatEntry.Base :=
                    ROUND((VATEntry2.Base + VATEntry2."Unrealized Base") * PmtDiscFactorLCY);
                  TempVatEntry."Additional-Currency Base" :=
                    ROUND(
                      (VATEntry2."Additional-Currency Base" +
                       VATEntry2."Add.-Currency Unrealized Base") * PmtDiscFactorAddCurr,
                      AddCurrency."Amount Rounding Precision");
                END ELSE BEGIN
                  TempVatEntry.Base := VATBase;
                  TempVatEntry."Additional-Currency Base" := VATBaseAddCurr;
                END;

                IF GLSetup."Additional Reporting Currency" = '' THEN BEGIN
                  TempVatEntry."Additional-Currency Base" := 0;
                  TempVatEntry."Additional-Currency Amount" := 0;
                  TempVatEntry."Add.-Currency Unrealized Amt." := 0;
                  TempVatEntry."Add.-Currency Unrealized Base" := 0;
                END;
                TempVatEntry.INSERT;
              END;

              // VAT for G/L entry/entries
              DtldCVLedgEntryBuf.INIT;
              CASE EntryType OF
                1:
                  BEGIN
                    InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
                    DtldCVLedgEntryBuf."Entry Type" :=
                      DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)";
                  END;
                2:
                  BEGIN
                    InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
                    IF GLSetup."Post Pmt.Disc Tol. to Pmt.Disc" THEN
                      DtldCVLedgEntryBuf."Entry Type" :=
                        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)"
                    ELSE
                      DtldCVLedgEntryBuf."Entry Type" :=
                      DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)";
                END;
                3:
                  BEGIN
                    InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
                    IF GLSetup."Post Pmt.Disc Tol. to Pmt.Disc" THEN
                      DtldCVLedgEntryBuf."Entry Type" :=
                        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)"
                    ELSE
                      DtldCVLedgEntryBuf."Entry Type" :=
                        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)";
                  END;
              END;
              DtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
              DtldCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
              DtldCVLedgEntryBuf."Document No." := GenJnlLine."Document No.";
              DtldCVLedgEntryBuf.Amount := 0;
              DtldCVLedgEntryBuf."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
              DtldCVLedgEntryBuf."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
              DtldCVLedgEntryBuf."Tax Jurisdiction Code" := VATEntry2."Tax Jurisdiction Code";
              // The total payment discount in currency is posted on the entry made in
              // the function CalcPmtDisc.
              DtldCVLedgEntryBuf."User ID" := USERID;
              DtldCVLedgEntryBuf."Use Additional-Currency Amount" := TRUE;
              // gbedv DC -------------------------------------------------- BEGIN
              IF OPplusEnabled THEN BEGIN
                FinanceTools.UpdateDtldCVBuffer(DtldCVLedgEntryBuf,VATEntry2);
                PostAtOnce := TRUE;
                CASE VATEntry2.Type OF
                  VATEntry2.Type::Purchase:
                    BEGIN
                      IF VATEntry2.Amount < 0 THEN
                        GLAccNo := GenPostingSetup."Purch. Pmt. Disc. Debit Acc."
                      ELSE
                        GLAccNo := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                    END;
                  VATEntry2.Type::Sale:
                    BEGIN
                      IF VATEntry2.Amount < 0 THEN
                        GLAccNo := GenPostingSetup."Sales Pmt. Disc. Debit Acc."
                      ELSE
                        GLAccNo := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                    END;
                END;
              END;
              // gbedv DC -------------------------------------------------- END

              CASE VATEntry2.Type OF
                VATEntry2.Type::Purchase:
                  BEGIN
                    CASE VATEntry2."VAT Calculation Type" OF
                      VATEntry2."VAT Calculation Type"::"Normal VAT",
                      VATEntry2."VAT Calculation Type"::"Full VAT":
                        BEGIN
                          VATPostingSetup.TESTFIELD("Purchase VAT Account");
                          // gbedv DC -------------------------------------------------- BEGIN
                          SkipDimCheck := TRUE;
                          // gbedv DC -------------------------------------------------- END
                          InitGLEntry(VATPostingSetup."Purchase VAT Account",VATAmount,0,FALSE,TRUE);
                          // gbedv DC -------------------------------------------------- BEGIN
                          IF OPplusEnabled THEN BEGIN
                            FinanceTools.DimCheckVATEntry(
                              GLAccNo,TempVatEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,VATEntry2."Entry No.");
                            FinanceTools.DimCheckVATEntry(
                              GLAccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,VATEntry2."Entry No.");
                          END;
                          // gbedv DC -------------------------------------------------- END
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                          DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
                        END;
                      VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                        BEGIN
                          VATPostingSetup.TESTFIELD("Purchase VAT Account");
                          // gbedv DC -------------------------------------------------- BEGIN
                          SkipDimCheck := TRUE;
                          // gbedv DC -------------------------------------------------- END
                          InitGLEntry(VATPostingSetup."Purchase VAT Account",VATAmount,0,FALSE,TRUE);
                          // gbedv DC -------------------------------------------------- BEGIN
                          IF OPplusEnabled THEN BEGIN
                            FinanceTools.DimCheckVATEntry(
                              GLAccNo,TempVatEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,VATEntry2."Entry No.");
                            FinanceTools.DimCheckVATEntry(
                              GLAccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,VATEntry2."Entry No.");
                          END;
                          // gbedv DC -------------------------------------------------- END
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Acc.");
                          // gbedv DC -------------------------------------------------- BEGIN
                          SkipDimCheck := TRUE;
                          // gbedv DC -------------------------------------------------- END
                          InitGLEntry(VATPostingSetup."Reverse Chrg. VAT Acc.",-VATAmount,0,FALSE,TRUE);
                          // gbedv DC -------------------------------------------------- BEGIN
                          IF OPplusEnabled THEN BEGIN
                            FinanceTools.DimCheckVATEntry(
                              GLAccNo,TempVatEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,VATEntry2."Entry No.");
                            FinanceTools.DimCheckVATEntry(
                              GLAccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,VATEntry2."Entry No.");
                          END;
                          // gbedv DC -------------------------------------------------- END
                          GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                        END;
                      VATEntry2."VAT Calculation Type"::"Sales Tax":
                        IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
                          TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                          InitGLEntry(TaxJurisdiction."Tax Account (Purchases)",VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
                          InitGLEntry(TaxJurisdiction."Reverse Charge (Purchases)",-VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                        END ELSE BEGIN
                          TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                          InitGLEntry(TaxJurisdiction."Tax Account (Purchases)",VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                          DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
                        END;
                    END;
                  END;
                VATEntry2.Type::Sale:
                  BEGIN
                    CASE VATEntry2."VAT Calculation Type" OF
                      VATEntry2."VAT Calculation Type"::"Normal VAT",
                      VATEntry2."VAT Calculation Type"::"Full VAT":
                        BEGIN
                          VATPostingSetup.TESTFIELD("Sales VAT Account");
                          // gbedv DC -------------------------------------------------- BEGIN
                          SkipDimCheck := TRUE;
                          // gbedv DC -------------------------------------------------- END
                          InitGLEntry(VATPostingSetup."Sales VAT Account",VATAmount,0,FALSE,TRUE);
                          // gbedv DC -------------------------------------------------- BEGIN
                          IF OPplusEnabled THEN BEGIN
                            FinanceTools.DimCheckVATEntry(
                              GLAccNo,TempVatEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,VATEntry2."Entry No.");
                            FinanceTools.DimCheckVATEntry(
                              GLAccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,VATEntry2."Entry No.");
                          END;
                          // gbedv DC -------------------------------------------------- END
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                          DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
                        END;
                      VATEntry2."VAT Calculation Type"::"Reverse Charge VAT": ;
                      VATEntry2."VAT Calculation Type"::"Sales Tax":
                        BEGIN
                          TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                          InitGLEntry(TaxJurisdiction."Tax Account (Sales)",VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                          DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
                        END;
                    END;
                  END;
              END;
            END;
          UNTIL VATEntry2.NEXT = 0;

          IF LastConnectionNo <> 0 THEN BEGIN
            DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
            DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
            // gbedv DC -------------------------------------------------- BEGIN
            PostAtOnce := TRUE;
            // gbedv DC -------------------------------------------------- END
            InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);

            InsertSummarizedVAT;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscTolerance@60(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;GLSetup@1003 : Record 98;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtDiscTol@1011 : Decimal;
      PmtDiscTolLCY@1010 : Decimal;
      PmtDiscTolAddCurr@1009 : Decimal;
    BEGIN
      IF Cust."Block Payment Tolerance" OR Vend."Block Payment Tolerance" THEN
        EXIT;
      IF OldCVLedgEntryBuf2."Accepted Pmt. Disc. Tolerance" = TRUE THEN BEGIN
        PmtDiscTol := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
        PmtDiscTolLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtDiscTol) / NewCVLedgEntryBuf."Original Currency Factor") -
            NewCVLedgEntryBuf."Original Amt. (LCY)";

        OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscTolLCY;

        IF NewCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency" THEN
          PmtDiscTolAddCurr := PmtDiscTol
        ELSE
          PmtDiscTolAddCurr := CalcLCYToAddCurr(PmtDiscTolLCY);

        IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtDiscTolLCY <> 0) THEN
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,
            DtldCVLedgEntryBuf,GenJnlLine,GLSetup,PmtDiscTolLCY,PmtDiscTolAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,2);

        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
        IF GLSetup."Post Pmt.Disc Tol. to Pmt.Disc" THEN
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Payment Discount"
        ELSE
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance";
        DtldCVLedgEntryBuf.Amount := PmtDiscTol;
        DtldCVLedgEntryBuf."Amount (LCY)" := PmtDiscTolLCY;
        DtldCVLedgEntryBuf."Additional-Currency Amount" := PmtDiscTolAddCurr;
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
      END;
    END;

    LOCAL PROCEDURE CalcCurrencyApplnRounding@51(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;ApplnRoundingPrecision@1005 : Decimal);
    VAR
      ApplnRounding@1006 : Decimal;
      ApplnRoundingLCY@1007 : Decimal;
    BEGIN
      IF ((NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Payment) AND
          (NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Refund)) OR
         (NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf."Currency Code")
      THEN
        EXIT;

      ApplnRounding := -(NewCVLedgEntryBuf."Remaining Amount" + OldCVLedgEntryBuf."Remaining Amount");
      ApplnRoundingLCY := ROUND(ApplnRounding / NewCVLedgEntryBuf."Adjusted Currency Factor");

      IF (ApplnRounding = 0) OR (ABS(ApplnRounding) > ApplnRoundingPrecision) THEN
        EXIT;

      InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
      InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
      DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding";
      DtldCVLedgEntryBuf.Amount := ApplnRounding;
      DtldCVLedgEntryBuf."Amount (LCY)" := ApplnRoundingLCY;
      DtldCVLedgEntryBuf."Additional-Currency Amount" := ApplnRounding;
      InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
    END;

    PROCEDURE FindAmtForAppln@6(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR AppliedAmount@1003 : Decimal;VAR AppliedAmountLCY@1004 : Decimal;VAR OldAppliedAmount@1005 : Decimal;ApplnRoundingPrecision@1007 : Decimal);
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      IF GenJnlLine."ID Applied-Entry" <> 0 THEN BEGIN
        IF ABS(NewCVLedgEntryBuf."Remaining Amount") < ABS(OldCVLedgEntryBuf2."Remaining Amount") THEN
          AppliedAmount := NewCVLedgEntryBuf."Remaining Amount"
        ELSE
          AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
      END ELSE
      // gbedv EA -------------------------------------------------- END
      IF OldCVLedgEntryBuf2.GETFILTER(Positive) <> '' THEN BEGIN
        IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN
          AppliedAmount := -OldCVLedgEntryBuf2."Amount to Apply"
        ELSE
          AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
      END ELSE BEGIN
        IF (OldCVLedgEntryBuf2."Amount to Apply" <> 0) THEN BEGIN
          IF (CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
             (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
             ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")) AND
             (ABS(NewCVLedgEntryBuf."Remaining Amount") >=
               ABS(
                 ABSMin(
                   OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",
                   OldCVLedgEntryBuf2."Amount to Apply")))) OR
             (OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" =  TRUE)
          THEN BEGIN
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
            OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := FALSE;
          END ELSE
            AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Amount to Apply");
        END ELSE
          AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Remaining Amount");
      END;

      IF (ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply") < ApplnRoundingPrecision) AND
        (ApplnRoundingPrecision <> 0)
      THEN
        AppliedAmount := AppliedAmount - (OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply");

      IF NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
        AppliedAmountLCY := ROUND(AppliedAmount / OldCVLedgEntryBuf."Original Currency Factor");
        OldAppliedAmount := AppliedAmount;
      END ELSE BEGIN
        // Management of posting in multiple currencies
        IF AppliedAmount = -OldCVLedgEntryBuf2."Remaining Amount" THEN
          OldAppliedAmount := -OldCVLedgEntryBuf."Remaining Amount"
        ELSE
          OldAppliedAmount :=
            ExchAmount(
              AppliedAmount,NewCVLedgEntryBuf."Currency Code",
              OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Posting Date");

        IF NewCVLedgEntryBuf."Currency Code" <> '' THEN
          // Post the realized gain or loss on the NewCVLedgEntryBuf
          AppliedAmountLCY := ROUND(OldAppliedAmount / OldCVLedgEntryBuf."Original Currency Factor")
        ELSE
          // Post the realized gain or loss on the OldCVLedgEntryBuf
          AppliedAmountLCY := ROUND(AppliedAmount / NewCVLedgEntryBuf."Original Currency Factor");
      END;
    END;

    LOCAL PROCEDURE CalcCurrencyUnrealizedGainLoss@48(VAR CVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1002 : TEMPORARY Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;RemainingAmountBeforeAppln@1007 : Decimal);
    VAR
      UnRealizedGainLossLCY@1006 : Decimal;
      DtldCustLedgEntry@1008 : Record 379;
      DtldVendLedgEntry@1009 : Record 380;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      // gbedv EA -------------------------------------------------- BEGIN
      IF RemainingAmountBeforeAppln = 0 THEN
        EXIT;
      // gbedv EA -------------------------------------------------- END
      // Calculate Unrealized GainLoss
      IF (GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer) THEN BEGIN
        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CVLedgEntryBuf."Entry No.");
        DtldCustLedgEntry.SETRANGE(
          "Entry Type",
          DtldCustLedgEntry."Entry Type"::"Unrealized Loss",
          DtldCustLedgEntry."Entry Type"::"Unrealized Gain");
        DtldCustLedgEntry.CALCSUMS("Amount (LCY)");
        UnRealizedGainLossLCY :=
          ROUND(DtldCustLedgEntry."Amount (LCY)" * ABS(AppliedAmount / RemainingAmountBeforeAppln));
      END ELSE BEGIN
        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.","Entry Type");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",CVLedgEntryBuf."Entry No.");
        DtldVendLedgEntry.SETRANGE(
          "Entry Type",
          DtldVendLedgEntry."Entry Type"::"Unrealized Loss",
          DtldVendLedgEntry."Entry Type"::"Unrealized Gain");
        DtldVendLedgEntry.CALCSUMS("Amount (LCY)");
        UnRealizedGainLossLCY :=
          ROUND(DtldVendLedgEntry."Amount (LCY)" * ABS(AppliedAmount / RemainingAmountBeforeAppln));
      END;

      IF UnRealizedGainLossLCY <> 0 THEN BEGIN
        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf);
        IF UnRealizedGainLossLCY < 0 THEN BEGIN
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss";
          DtldCVLedgEntryBuf."Amount (LCY)" := -UnRealizedGainLossLCY;
          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END ELSE BEGIN
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain";
          DtldCVLedgEntryBuf."Amount (LCY)" := -UnRealizedGainLossLCY;
          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END;
      END;
    END;

    PROCEDURE CalcCurrencyRealizedGainLoss@62(VAR CVLedgEntryBuf@1005 : Record 382;VAR DtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;GenJnlLine@1002 : Record 81;AppliedAmount@1001 : Decimal;AppliedAmountLCY@1000 : Decimal);
    VAR
      RealizedGainLossLCY@1006 : Decimal;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      // Calculate Realized GainLoss
      RealizedGainLossLCY :=
        AppliedAmountLCY - ROUND(AppliedAmount / CVLedgEntryBuf."Original Currency Factor");
      IF RealizedGainLossLCY <> 0 THEN BEGIN
        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf);
        IF RealizedGainLossLCY < 0 THEN BEGIN
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Realized Loss";
          DtldCVLedgEntryBuf."Amount (LCY)" := RealizedGainLossLCY;
          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END ELSE BEGIN
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Realized Gain";
          DtldCVLedgEntryBuf."Amount (LCY)" := RealizedGainLossLCY;
          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE CalcApplication@55(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;AppliedAmountLCY@1005 : Decimal;OldAppliedAmount@1006 : Decimal;PrevNewCVLedgEntryBuf@1008 : Record 382;PrevOldCVLedgEntryBuf@1007 : Record 382);
    BEGIN
      IF AppliedAmount = 0 THEN
        EXIT;

      InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
      InitOldCVLedgEntry(DtldCVLedgEntryBuf,OldCVLedgEntryBuf);
      DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::Application;
      DtldCVLedgEntryBuf.Amount := OldAppliedAmount;
      DtldCVLedgEntryBuf."Amount (LCY)" := AppliedAmountLCY;
      DtldCVLedgEntryBuf."Applied CV Ledger Entry No." := NewCVLedgEntryBuf."Entry No.";
      DtldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
        PrevOldCVLedgEntryBuf."Remaining Pmt. Disc. Possible";
      DtldCVLedgEntryBuf."Max. Payment Tolerance" := PrevOldCVLedgEntryBuf."Max. Payment Tolerance";
      InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,OldCVLedgEntryBuf,FALSE);

      OldCVLedgEntryBuf.Open := OldCVLedgEntryBuf."Remaining Amount" <> 0;
      IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
        OldCVLedgEntryBuf."Closed by Entry No." := NewCVLedgEntryBuf."Entry No.";
        OldCVLedgEntryBuf."Closed at Date" := GenJnlLine."Posting Date";
        OldCVLedgEntryBuf."Closed by Amount" := -OldAppliedAmount;
        OldCVLedgEntryBuf."Closed by Amount (LCY)" := -AppliedAmountLCY;
        OldCVLedgEntryBuf."Closed by Currency Code" := NewCVLedgEntryBuf."Currency Code";
        OldCVLedgEntryBuf."Closed by Currency Amount" := -AppliedAmount;
      END ELSE
        AllApplied := FALSE;

      InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
      InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
      DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::Application;
      DtldCVLedgEntryBuf.Amount := -AppliedAmount;
      DtldCVLedgEntryBuf."Amount (LCY)" := -AppliedAmountLCY;
      DtldCVLedgEntryBuf."Applied CV Ledger Entry No." := NewCVLedgEntryBuf."Entry No.";
      DtldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
        PrevNewCVLedgEntryBuf."Remaining Pmt. Disc. Possible";
      DtldCVLedgEntryBuf."Max. Payment Tolerance" := PrevNewCVLedgEntryBuf."Max. Payment Tolerance";
      InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);

      NewCVLedgEntryBuf.Open := NewCVLedgEntryBuf."Remaining Amount" <> 0;
      IF NOT NewCVLedgEntryBuf.Open AND NOT AllApplied THEN BEGIN
        NewCVLedgEntryBuf."Closed by Entry No." := OldCVLedgEntryBuf."Entry No.";
        NewCVLedgEntryBuf."Closed at Date" := GenJnlLine."Posting Date";
        NewCVLedgEntryBuf."Closed by Amount" := AppliedAmount;
        NewCVLedgEntryBuf."Closed by Amount (LCY)" := AppliedAmountLCY;
        NewCVLedgEntryBuf."Closed by Currency Code" := OldCVLedgEntryBuf."Currency Code";
        NewCVLedgEntryBuf."Closed by Currency Amount" := OldAppliedAmount;
      END;
    END;

    PROCEDURE CalcRemainingPmtDisc@59(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382);
    VAR
      TempOldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      IF ((((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::"Credit Memo") OR
          (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice)) AND
          ((OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice) OR
          (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo"))) AND
          ((OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" <> 0) AND
          (NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" <> 0)) OR
          ((OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo") AND
          (OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" <> 0)  AND
          (NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Refund)))
          // gbedv EA -------------------------------------------------- BEGIN
          OR ((GenJnlLine."ID Applied-Entry" <> 0) AND (GenJnlLine."Posting Payment Discount" <> 0))
          // gbedv EA -------------------------------------------------- END
      THEN BEGIN
        TempOldCVLedgEntryBuf2 := OldCVLedgEntryBuf2;
        // gbedv EA -------------------------------------------------- BEGIN
        IF (GenJnlLine."ID Applied-Entry" <> 0) AND (GenJnlLine."Posting Payment Discount" <> 0) THEN BEGIN
          OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" += GenJnlLine."Posting Payment Discount";
          IF OldCVLedgEntryBuf2."Remaining Amount" * OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" < 0 THEN
            OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" := 0;
        END ELSE
        // gbedv EA -------------------------------------------------- END
        OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" :=
          ROUND(OldCVLedgEntryBuf."Original Pmt. Disc. Possible" *
            (OldCVLedgEntryBuf."Remaining Amount" / OldCVLedgEntryBuf."Original Amount"),
            GLSetup."Amount Rounding Precision");
        // gbedv EA -------------------------------------------------- BEGIN
        IF NewCVLedgEntryBuf."Remaining Amount" = 0 THEN
          NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" := 0
        ELSE
        // gbedv EA -------------------------------------------------- END
        NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
          ROUND(NewCVLedgEntryBuf."Original Pmt. Disc. Possible" *
            (NewCVLedgEntryBuf."Remaining Amount" / NewCVLedgEntryBuf."Original Amount"),
            GLSetup."Amount Rounding Precision");

        IF NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf2."Currency Code" THEN
          OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
            OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"
        ELSE
          // Management of posting in multiple currencies
          IF OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" = 0 THEN
            OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" := 0
          ELSE
            OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
              OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
      END;

      IF (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice) OR
        (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo")
      THEN
        IF ABS(OldCVLedgEntryBuf."Remaining Amount") < ABS(OldCVLedgEntryBuf."Max. Payment Tolerance") THEN
          OldCVLedgEntryBuf."Max. Payment Tolerance" := OldCVLedgEntryBuf."Remaining Amount";

      IF NOT NewCVLedgEntryBuf.Open THEN BEGIN
        NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" := 0;
        NewCVLedgEntryBuf."Max. Payment Tolerance" := 0;
      END;

      IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
        OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" := 0;
        OldCVLedgEntryBuf."Max. Payment Tolerance" := 0;
      END;
    END;

    LOCAL PROCEDURE CalcAmtLCYAdjustment@52(VAR CVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81);
    VAR
      AdjustedAmountLCY@1005 : Decimal;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      AdjustedAmountLCY :=
        ROUND(CVLedgEntryBuf."Remaining Amount" / CVLedgEntryBuf."Adjusted Currency Factor");

      IF AdjustedAmountLCY <> CVLedgEntryBuf."Remaining Amt. (LCY)" THEN BEGIN
        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" :=
          DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount";
        DtldCVLedgEntryBuf."Amount (LCY)" := AdjustedAmountLCY - CVLedgEntryBuf."Remaining Amt. (LCY)";
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
      END;
    END;

    PROCEDURE InitNewCVLedgEntry@7(VAR InitDtldCVLedgEntryBuf@1000 : Record 383;GenJnlLine@1001 : Record 81);
    BEGIN
      InitDtldCVLedgEntryBuf.INIT;
      InitDtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      InitDtldCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      InitDtldCVLedgEntryBuf."Document No." := GenJnlLine."Document No.";
      InitDtldCVLedgEntryBuf."User ID" := USERID;
    END;

    PROCEDURE InitOldCVLedgEntry@20(VAR InitDtldCVLedgEntryBuf@1000 : Record 383;OldCVLedgEntryBuf@1001 : Record 382);
    BEGIN
      InitDtldCVLedgEntryBuf."Cust. Ledger Entry No." := OldCVLedgEntryBuf."Entry No.";
      InitDtldCVLedgEntryBuf."Customer No." := OldCVLedgEntryBuf."CV No.";
      InitDtldCVLedgEntryBuf."Currency Code" := OldCVLedgEntryBuf."Currency Code";
      InitDtldCVLedgEntryBuf."Initial Entry Due Date" := OldCVLedgEntryBuf."Due Date";
      InitDtldCVLedgEntryBuf."Initial Entry Global Dim. 1" := OldCVLedgEntryBuf."Global Dimension 1 Code";
      InitDtldCVLedgEntryBuf."Initial Entry Global Dim. 2" := OldCVLedgEntryBuf."Global Dimension 2 Code";
      InitDtldCVLedgEntryBuf."Initial Document Type" := OldCVLedgEntryBuf."Document Type";
    END;

    LOCAL PROCEDURE InsertDtldCVLedgEntry@53(VAR DtldCVLedgEntryBuf@1000 : Record 383;VAR CVLedgEntryBuf@1001 : Record 382;InsertZeroAmout@1004 : Boolean);
    VAR
      NewDtldCVLedgEntryBuf@1002 : Record 383;
      NextDtldBufferEntryNo@1003 : Integer;
    BEGIN
      IF (DtldCVLedgEntryBuf.Amount = 0) AND
         (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0) AND
         (NOT InsertZeroAmout)
      THEN
        EXIT;

      DtldCVLedgEntryBuf.TESTFIELD("Entry Type" );

      NewDtldCVLedgEntryBuf.INIT;
      NewDtldCVLedgEntryBuf := DtldCVLedgEntryBuf;

      IF NextDtldBufferEntryNo = 0 THEN BEGIN
        DtldCVLedgEntryBuf.RESET;
        IF DtldCVLedgEntryBuf.FINDLAST THEN
          NextDtldBufferEntryNo := DtldCVLedgEntryBuf."Entry No." + 1
        ELSE
          NextDtldBufferEntryNo := 1;
      END;

      DtldCVLedgEntryBuf.RESET;
      DtldCVLedgEntryBuf.SETRANGE("Cust. Ledger Entry No.",CVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE("Entry Type",NewDtldCVLedgEntryBuf."Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("Posting Date",NewDtldCVLedgEntryBuf."Posting Date");
      DtldCVLedgEntryBuf.SETRANGE("Document Type",NewDtldCVLedgEntryBuf."Document Type");
      DtldCVLedgEntryBuf.SETRANGE("Document No.",NewDtldCVLedgEntryBuf."Document No.");
      DtldCVLedgEntryBuf.SETRANGE("Customer No.",NewDtldCVLedgEntryBuf."Customer No.");
      DtldCVLedgEntryBuf.SETRANGE("Gen. Posting Type",NewDtldCVLedgEntryBuf."Gen. Posting Type");
      DtldCVLedgEntryBuf.SETRANGE(
        "Gen. Bus. Posting Group",NewDtldCVLedgEntryBuf."Gen. Bus. Posting Group");
      DtldCVLedgEntryBuf.SETRANGE(
        "Gen. Prod. Posting Group",NewDtldCVLedgEntryBuf."Gen. Prod. Posting Group");
      DtldCVLedgEntryBuf.SETRANGE(
        "VAT Bus. Posting Group",NewDtldCVLedgEntryBuf."VAT Bus. Posting Group");
      DtldCVLedgEntryBuf.SETRANGE(
        "VAT Prod. Posting Group",NewDtldCVLedgEntryBuf."VAT Prod. Posting Group");
      DtldCVLedgEntryBuf.SETRANGE("Tax Area Code",NewDtldCVLedgEntryBuf."Tax Area Code");
      DtldCVLedgEntryBuf.SETRANGE("Tax Liable",NewDtldCVLedgEntryBuf."Tax Liable");
      DtldCVLedgEntryBuf.SETRANGE("Tax Group Code",NewDtldCVLedgEntryBuf."Tax Group Code");
      DtldCVLedgEntryBuf.SETRANGE("Use Tax",NewDtldCVLedgEntryBuf."Use Tax");
      DtldCVLedgEntryBuf.SETRANGE(
        "Tax Jurisdiction Code",NewDtldCVLedgEntryBuf."Tax Jurisdiction Code");

      // gbedv DC -------------------------------------------------- BEGIN
      IF NOT OPplusEnabled THEN
        PostAtOnce := FALSE;
      IF PostAtOnce THEN BEGIN
        NewDtldCVLedgEntryBuf."Entry No." := NextDtldBufferEntryNo;
        NextDtldBufferEntryNo := NextDtldBufferEntryNo + 1;
        DtldCVLedgEntryBuf := NewDtldCVLedgEntryBuf;
        DtldCVLedgEntryBuf.INSERT;
        PostAtOnce := FALSE;
      END ELSE
      // gbedv DC -------------------------------------------------- END
      IF DtldCVLedgEntryBuf.FINDFIRST THEN BEGIN
        DtldCVLedgEntryBuf.Amount := DtldCVLedgEntryBuf.Amount + NewDtldCVLedgEntryBuf.Amount;
        DtldCVLedgEntryBuf."Amount (LCY)" :=
          DtldCVLedgEntryBuf."Amount (LCY)" + NewDtldCVLedgEntryBuf."Amount (LCY)";
        DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
          DtldCVLedgEntryBuf."VAT Amount (LCY)" + NewDtldCVLedgEntryBuf."VAT Amount (LCY)";
        DtldCVLedgEntryBuf."Additional-Currency Amount" :=
          DtldCVLedgEntryBuf."Additional-Currency Amount" +
          NewDtldCVLedgEntryBuf."Additional-Currency Amount";
        DtldCVLedgEntryBuf.MODIFY;
      END ELSE BEGIN
        NewDtldCVLedgEntryBuf."Entry No." := NextDtldBufferEntryNo;
        NextDtldBufferEntryNo := NextDtldBufferEntryNo + 1;
        DtldCVLedgEntryBuf := NewDtldCVLedgEntryBuf;
        DtldCVLedgEntryBuf.INSERT;
      END;

      CVLedgEntryBuf."Amount to Apply" := NewDtldCVLedgEntryBuf.Amount + CVLedgEntryBuf."Amount to Apply";
      CVLedgEntryBuf."Remaining Amount" := NewDtldCVLedgEntryBuf.Amount + CVLedgEntryBuf."Remaining Amount";
      CVLedgEntryBuf."Remaining Amt. (LCY)" :=
        NewDtldCVLedgEntryBuf."Amount (LCY)" + CVLedgEntryBuf."Remaining Amt. (LCY)";

      IF DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::"Initial Entry" THEN BEGIN
        CVLedgEntryBuf."Original Amount" := NewDtldCVLedgEntryBuf.Amount;
        CVLedgEntryBuf."Original Amt. (LCY)" := NewDtldCVLedgEntryBuf."Amount (LCY)";
      END;
      DtldCVLedgEntryBuf.RESET;
    END;

    LOCAL PROCEDURE CustUnrealizedVAT@16(VAR CustLedgEntry2@1000 : Record 21;SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record 254;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountLast@1012 : Decimal;
      TotalUnrealVATAmountFirst@1013 : Decimal;
      SalesVATAccount@1009 : Code[20];
      SalesVATUnrealAccount@1010 : Code[20];
      LastConnectionNo@1011 : Integer;
    BEGIN
      PaidAmount := CustLedgEntry2."Amount (LCY)" - CustLedgEntry2."Remaining Amt. (LCY)";
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
      IF VATEntry2.FINDSET THEN
        REPEAT
          IF (VATPostingSetup."VAT Bus. Posting Group" <> VATEntry2."VAT Bus. Posting Group") OR
             (VATPostingSetup."VAT Prod. Posting Group" <> VATEntry2."VAT Prod. Posting Group")
          THEN
            VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATPostingSetup."Unrealized VAT Type" IN
            [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"] THEN
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          IF VATPostingSetup."Unrealized VAT Type" IN
            [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"] THEN
              TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;
      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          IF (VATPostingSetup."VAT Bus. Posting Group" <> VATEntry2."VAT Bus. Posting Group") OR
             (VATPostingSetup."VAT Prod. Posting Group" <> VATEntry2."VAT Prod. Posting Group")
          THEN
            VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT;
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          VATPart :=
            VATEntry2.GetUnRealizedVATPart(
              ROUND(SettledAmount / CustLedgEntry2.GetOriginalCurrencyFactor),
              PaidAmount,
              CustLedgEntry2."Original Amt. (LCY)",
              TotalUnrealVATAmountFirst,
              TotalUnrealVATAmountLast);

          IF VATPart > 0 THEN BEGIN
            CASE VATEntry2."VAT Calculation Type" OF
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                BEGIN
                  VATPostingSetup.TESTFIELD("Sales VAT Account");
                  VATPostingSetup.TESTFIELD("Sales VAT Unreal. Account");
                  SalesVATAccount := VATPostingSetup."Sales VAT Account";
                  SalesVATUnrealAccount := VATPostingSetup."Sales VAT Unreal. Account";
                END;
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                  TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Sales)");
                  SalesVATAccount := TaxJurisdiction."Tax Account (Sales)";
                  SalesVATUnrealAccount := TaxJurisdiction."Unreal. Tax Acc. (Sales)";
                END;
            END;

            IF VATPart = 1 THEN BEGIN
              VATAmount := VATEntry2."Remaining Unrealized Amount";
              VATBase := VATEntry2."Remaining Unrealized Base";
              VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
              VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
            END ELSE BEGIN
              VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart);
              VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart);
              VATAmountAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              VATBaseAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                  AddCurrency."Amount Rounding Precision");
            END;

            InitGLEntry(SalesVATUnrealAccount,-VATAmount,0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
            GLEntry."Bal. Account No." := SalesVATAccount;
            SummarizeVAT(
              GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

            InitGLEntry(SalesVATAccount,VATAmount,0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
            GLEntry."Bal. Account No." := SalesVATUnrealAccount;
            GLEntry."Gen. Posting Type" := VATEntry2.Type;
            GLEntry."Gen. Bus. Posting Group" := VATEntry2."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := VATEntry2."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := VATEntry2."Tax Area Code";
            GLEntry."Tax Liable" := VATEntry2."Tax Liable";
            GLEntry."Tax Group Code" := VATEntry2."Tax Group Code";
            GLEntry."Use Tax" := VATEntry2."Use Tax";
            SummarizeVAT(
              GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

            VATEntry.LOCKTABLE;
            VATEntry := VATEntry2;
            VATEntry."Entry No." := NextVATEntryNo;
            VATEntry."Posting Date" := GenJnlLine."Posting Date";
            VATEntry."Document No." := GenJnlLine."Document No.";
            VATEntry."External Document No." := GenJnlLine."External Document No.";
            VATEntry."Document Type" := GenJnlLine."Document Type";
            VATEntry.Amount := VATAmount;
            VATEntry.Base := VATBase;
            VATEntry."Unrealized Amount" := 0;
            VATEntry."Unrealized Base" := 0;
            VATEntry."Remaining Unrealized Amount" := 0;
            VATEntry."Remaining Unrealized Base" := 0;
            VATEntry."Additional-Currency Amount" := VATAmountAddCurr;
            VATEntry."Additional-Currency Base" := VATBaseAddCurr;
            VATEntry."Add.-Currency Unrealized Amt." := 0;
            VATEntry."Add.-Currency Unrealized Base" := 0;
            VATEntry."Add.-Curr. Rem. Unreal. Amount" := 0;
            VATEntry."Add.-Curr. Rem. Unreal. Base" := 0;
            VATEntry."User ID" := USERID;
            VATEntry."Source Code" := GenJnlLine."Source Code";
            VATEntry."Reason Code" := GenJnlLine."Reason Code";
            VATEntry."Closed by Entry No." := 0;
            VATEntry.Closed := FALSE;
            VATEntry."Transaction No." := GLEntry."Transaction No.";
            VATEntry."Sales Tax Connection No." := NextConnectionNo;
            VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
            VATEntry.INSERT;
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              DimMgt.MoveJnlLineDimToLedgEntryDim(TempJnlLineDim,DATABASE::"VAT Entry",VATEntry."Entry No.");
            // gbedv DC -------------------------------------------------- END
            NextVATEntryNo := NextVATEntryNo + 1;

            VATEntry2."Remaining Unrealized Amount" :=
              VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
            VATEntry2."Remaining Unrealized Base" :=
              VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
            VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
              VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
            VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
              VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
            VATEntry2.MODIFY;
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT;
      END;
    END;

    PROCEDURE CustPostApplyCustLedgEntry@22(VAR GenJnlLinePostApply@1000 : Record 81;VAR CustLedgEntryPostApply@1001 : Record 21);
    VAR
      LedgEntryDim@1002 : Record 355;
      CustLedgEntry@1006 : Record 21;
      DtldCustLedgEntry@1003 : Record 379;
      DtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      GenJnlLine."Source Currency Code" := CustLedgEntryPostApply."Currency Code";
      GenJnlLine."Applies-to ID" := CustLedgEntryPostApply."Applies-to ID";
      CustLedgEntry.TRANSFERFIELDS(CustLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        LedgEntryDim.SETRANGE("Table ID",DATABASE::"Cust. Ledger Entry");
        LedgEntryDim.SETRANGE("Entry No.",CustLedgEntry."Entry No.");
        TempJnlLineDim.RESET;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);

        GenJnlCheckLine.RunCheck(GenJnlLine,TempJnlLineDim);

        InitCodeUnit;

        IF Cust."No." <> CustLedgEntry."Customer No." THEN
          Cust.GET(CustLedgEntry."Customer No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          //A/gob-ko/19052015/H4277
          {
          //A/gob-czi/060812/P0143
          // 3.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          //original "Posting Group" := Cust."Customer Posting Group";
          //"Posting Group" := FindCustPostGroup(Cust."Customer Posting Group","Payment Method Code 2");
          // 3.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
          "Posting Group" := FindCustPostGroup(Cust."Customer Posting Group","Payment Method Code");
          //E/gob-czi/060812/P0143
          }
          "Posting Group" := Cust."Customer Posting Group";
          //E/gob-ko/19052015/H4277
        END;
        CustPostingGr.GET("Posting Group");
        CustPostingGr.TESTFIELD("Receivables Account");

        //A/gob-bth/08.11.2012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          CustPostingGr.TESTFIELD("Account receivables loans < 1");
          CustPostingGr.TESTFIELD("Account receivables loans > 1");
        END;
        //E/gob-bth/08.11.2012/P0484
        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        // Post the application
        CustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TransferCustLedgEntry(CVLedgEntryBuf,CustLedgEntry,TRUE);
        ApplyCustLedgEntry(
          CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,GLSetup."Appln. Rounding Precision");
        TransferCustLedgEntry(CVLedgEntryBuf,CustLedgEntry,FALSE);
        CustLedgEntry.MODIFY;

        // Post the Dtld customer entry
        PostDtldCustLedgEntries(
          GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,GLSetup,NextTransactionNo,FALSE);
        FinishCodeunit;
      END;
    END;

    PROCEDURE UnapplyCustLedgEntry@66(GenJnlLine2@1004 : Record 81;DtldCustLedgEntry@1003 : Record 379);
    VAR
      DtldCustLedgEntry2@1013 : Record 379;
      NewDtldCustLedgEntry@1012 : Record 379;
      CustLedgEntry@1011 : Record 21;
      DtldCVLedgEntryBuf@1010 : Record 383;
      VATEntry@1009 : Record 254;
      VATPostingSetup@1007 : Record 325;
      LedgEntryDim@1006 : Record 355;
      GenPostingSetup@1014 : Record 252;
      VATEntryTemp@1023 : TEMPORARY Record 254;
      CurrencyLCY@1024 : Record 4;
      VATEntrySaved@1026 : Record 254;
      VATEntry2@1029 : Record 254;
      TotalAmountLCY@1005 : Decimal;
      TotalAmountAddCurr@1002 : Decimal;
      NextDtldLedgEntryEntryNo@1001 : Integer;
      UnapplyVATEntries@1000 : Boolean;
      DebitAddjustment@1018 : Decimal;
      DebitAddjustmentAddCurr@1017 : Decimal;
      CreditAddjustment@1016 : Decimal;
      CreditAddjustmentAddCurr@1015 : Decimal;
      PositiveLCYAppAmt@1022 : Decimal;
      NegativeLCYAppAmt@1021 : Decimal;
      PositiveACYAppAmt@1020 : Decimal;
      NegativeACYAppAmt@1019 : Decimal;
      VatBaseSum@1008 : ARRAY [2] OF Decimal;
      EntryNoBegin@1025 : ARRAY [2] OF Integer;
      i@1027 : Integer;
      TempVatEntryNo@1028 : Integer;
      "+++ OPplus +++"@5157804 : Integer;
      PmtDiscLCY@5157803 : Decimal;
      DtldCustLedgEntry3@5157802 : Record 379;
    BEGIN
      PositiveLCYAppAmt := 0;
      PositiveACYAppAmt := 0;
      NegativeLCYAppAmt := 0;
      NegativeACYAppAmt := 0;
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      InitCodeUnit;

      IF Cust."No." <> DtldCustLedgEntry."Customer No." THEN
        Cust.GET(DtldCustLedgEntry."Customer No.");
      Cust.CheckBlockedCustOnJnls(Cust,0,TRUE);

      CustPostingGr.GET(GenJnlLine."Posting Group");
      CustPostingGr.TESTFIELD("Receivables Account");

      //A/gob-bth/08.11.2012/P0484
      IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
        CustPostingGr.TESTFIELD("Account receivables loans < 1");
        CustPostingGr.TESTFIELD("Account receivables loans > 1");
      END;
      //E/gob-bth/08.11.2012/P0484


      VATEntry.LOCKTABLE;
      DtldCustLedgEntry.LOCKTABLE;
      CustLedgEntry.LOCKTABLE;

      DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::Application);

      DtldCustLedgEntry2.RESET;
      DtldCustLedgEntry2.FINDLAST;
      NextDtldLedgEntryEntryNo := DtldCustLedgEntry2."Entry No." + 1;
      DtldCustLedgEntry2.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
      DtldCustLedgEntry2.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
      DtldCustLedgEntry2.SETRANGE("Customer No.",DtldCustLedgEntry."Customer No.");
      DtldCustLedgEntry2.SETFILTER("Entry Type",'>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
      UnapplyVATEntries := FALSE;
      DtldCustLedgEntry2.FINDSET;
      REPEAT
        DtldCustLedgEntry2.TESTFIELD(Unapplied,FALSE);
        IF (DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::"Payment Discount (VAT Adjustment)") OR
           (DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::"Payment Tolerance (VAT Adjustment)") OR
           (DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)")
        THEN
          UnapplyVATEntries := TRUE
      UNTIL DtldCustLedgEntry2.NEXT = 0;

      TempVatEntryNo := 1;
      VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
      VATEntry.SETRANGE(Type,VATEntry.Type::Sale);
      VATEntry.SETRANGE("Bill-to/Pay-to No.",DtldCustLedgEntry."Customer No.");
      VATEntry.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
      IF VATEntry.FINDSET THEN BEGIN
        VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
        IF (VATPostingSetup."Adjust for Payment Discount") AND
           (VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT") AND
           (VATEntry."Document Type" <> VATEntry."Document Type" :: "Credit Memo") AND
           (VATEntry."Document Type" <> VATEntry."Document Type" :: Invoice) AND
           (VATEntry."Document Type" <> VATEntry."Document Type" :: "Finance Charge Memo") AND
           (VATEntry."Document Type" <> VATEntry."Document Type" :: Reminder)
        THEN
          UnapplyVATEntries := TRUE;
        REPEAT
          IF UnapplyVATEntries OR (VATEntry."Unrealized VAT Entry No." <> 0) THEN BEGIN
            TempVatEntry := VATEntry;
            TempVatEntry."Entry No." := TempVatEntryNo;
            TempVatEntryNo := TempVatEntryNo + 1;
            TempVatEntry."Closed by Entry No." := 0;
            TempVatEntry.Closed := FALSE;
            TempVatEntry.Base := -VATEntry.Base;
            TempVatEntry.Amount := -VATEntry.Amount;
            TempVatEntry."Unrealized Amount" := -VATEntry."Unrealized Amount";
            TempVatEntry."Unrealized Base" := -VATEntry."Unrealized Base";
            TempVatEntry."Remaining Unrealized Amount" := -VATEntry."Remaining Unrealized Amount";
            TempVatEntry."Remaining Unrealized Base" := -VATEntry."Remaining Unrealized Base";
            TempVatEntry."Additional-Currency Amount" := -VATEntry."Additional-Currency Amount";
            TempVatEntry."Additional-Currency Base" := -VATEntry."Additional-Currency Base";
            TempVatEntry."Add.-Currency Unrealized Amt." := -VATEntry."Add.-Currency Unrealized Amt.";
            TempVatEntry."Add.-Currency Unrealized Base" := -VATEntry."Add.-Currency Unrealized Base";
            TempVatEntry."Add.-Curr. Rem. Unreal. Amount" := -VATEntry."Add.-Curr. Rem. Unreal. Amount";
            TempVatEntry."Add.-Curr. Rem. Unreal. Base" := -VATEntry."Add.-Curr. Rem. Unreal. Base";
            TempVatEntry."Posting Date" := GenJnlLine2."Posting Date";
            TempVatEntry."Document No." := GenJnlLine2."Document No.";
            TempVatEntry."User ID" := USERID;
            TempVatEntry."Transaction No." := NextTransactionNo;
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              FinanceTools.UpdateNewVATEntry(TempVatEntry,VATEntry);
            // gbedv DC -------------------------------------------------- END
            TempVatEntry.INSERT;
            IF VATEntry."Unrealized VAT Entry No." <> 0 THEN BEGIN
              VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
              IF VATPostingSetup."VAT Calculation Type" IN
                 [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                  VATPostingSetup."VAT Calculation Type"::"Full VAT",
                  VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT"]
              THEN BEGIN
                VATPostingSetup.TESTFIELD("Sales VAT Unreal. Account");
                VATPostingSetup.TESTFIELD("Sales VAT Account");
                PostUnrealVATByUnapply(
                  VATPostingSetup."Sales VAT Unreal. Account",
                  VATPostingSetup."Sales VAT Account",
                  VATEntry,TempVatEntry);
              END ELSE BEGIN
                VATEntry.TESTFIELD("Tax Jurisdiction Code");
                TaxJurisdiction.GET(VATEntry."Tax Jurisdiction Code");
                TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Sales)");
                TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                PostUnrealVATByUnapply(
                  TaxJurisdiction."Unreal. Tax Acc. (Sales)",
                  TaxJurisdiction."Tax Account (Sales)",
                  VATEntry,TempVatEntry);
            //A/kb2514417/110213
               END;
            //E/kb2514417/110213
              END;
              VATEntry2 := TempVatEntry;
              VATEntry2."Entry No." := NextVATEntryNo;
              NextVATEntryNo := NextVATEntryNo + 1;
              VATEntry2.INSERT;
              TempVatEntry.DELETE;
            //A/kb2514417/110213
            //END;
            //E/kb2514417/110213
            IF (VATPostingSetup."Adjust for Payment Discount") AND
               (VATPostingSetup."VAT Calculation Type" =
                 VATPostingSetup."VAT Calculation Type" :: "Reverse Charge VAT") AND
               (VATEntry."Unrealized VAT Entry No." = 0) AND
               (VATEntry."Document Type" <> VATEntry."Document Type" :: "Credit Memo") AND
               (VATEntry."Document Type" <> VATEntry."Document Type" :: Invoice) AND
               (VATEntry."Document Type" <> VATEntry."Document Type" :: "Finance Charge Memo") AND
               (VATEntry."Document Type" <> VATEntry."Document Type" :: Reminder)
            THEN BEGIN
              VATPostingSetup.TESTFIELD("Sales VAT Account");
              GenPostingSetup.GET(VATEntry."Gen. Bus. Posting Group",VATEntry."Gen. Prod. Posting Group");
              PostPmtDiscountVATByUnapply(
                VATPostingSetup."Reverse Chrg. VAT Acc.",
                VATPostingSetup."Sales VAT Account",
                VATEntry);
            END;
          END;
        UNTIL VATEntry.NEXT = 0;
      END;

      DtldCustLedgEntry2.FINDSET;
      REPEAT
        IF (DtldCustLedgEntry2."Entry Type" IN
            [DtldCustLedgEntry2."Entry Type"::"Payment Discount (VAT Excl.)",
             DtldCustLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)",
             DtldCustLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"])
        THEN BEGIN
          TempVatEntry.RESET;
          TempVatEntry.SETRANGE("Entry No.",0,999999);
          TempVatEntry.SETRANGE("Gen. Bus. Posting Group",DtldCustLedgEntry2."Gen. Bus. Posting Group");
          TempVatEntry.SETRANGE("Gen. Prod. Posting Group",DtldCustLedgEntry2."Gen. Prod. Posting Group");
          TempVatEntry.SETRANGE("VAT Bus. Posting Group",DtldCustLedgEntry2."VAT Bus. Posting Group");
          TempVatEntry.SETRANGE("VAT Prod. Posting Group",DtldCustLedgEntry2."VAT Prod. Posting Group");
          IF TempVatEntry.FINDSET THEN BEGIN
            REPEAT
              CASE TRUE OF
                VatBaseSum[2] + TempVatEntry.Base = DtldCustLedgEntry2."Amount (LCY)":
                  i := 3;
                VatBaseSum[1] + TempVatEntry.Base = DtldCustLedgEntry2."Amount (LCY)":
                  i := 2;
                TempVatEntry.Base = DtldCustLedgEntry2."Amount (LCY)":
                  i := 1;
                ELSE
                  i := 0;
              END;
              IF i > 0 THEN BEGIN
                //A/13.10.14/gob-dah/H1614 KB2458018
                {
                IF i > 1 THEN
                  TempVatEntry.SETRANGE("Entry No.",EntryNoBegin[i - 1],TempVatEntry."Entry No.")
                ELSE
                  TempVatEntry.SETRANGE("Entry No.",TempVatEntry."Entry No.");
                }
                IF i > 1 THEN BEGIN
                  IF EntryNoBegin[i - 1] < TempVatEntry."Entry No." THEN
                    TempVatEntry.SETRANGE("Entry No.",EntryNoBegin[i - 1],TempVatEntry."Entry No.")
                  ELSE
                    TempVatEntry.SETRANGE("Entry No.",TempVatEntry."Entry No.",EntryNoBegin[i - 1]);
                END ELSE
                  TempVatEntry.SETRANGE("Entry No.",TempVatEntry."Entry No.");
                //E/13.10.14/gob-dah/H1614 KB2458018
                TempVatEntry.FINDSET;
                REPEAT
                  VATEntrySaved := TempVatEntry;
                  CASE DtldCustLedgEntry2."Entry Type" OF
                    DtldCustLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)":
                      TempVatEntry.RENAME(TempVatEntry."Entry No." + 2000000);
                    DtldCustLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                      TempVatEntry.RENAME(TempVatEntry."Entry No." + 1000000);
                  END;
                  TempVatEntry := VATEntrySaved;
                UNTIL TempVatEntry.NEXT = 0;
                FOR i := 1 TO 2 DO BEGIN
                  VatBaseSum[i] := 0;
                  EntryNoBegin[i] := 0;
                END;
                TempVatEntry.SETRANGE("Entry No.",0,999999);
              END ELSE BEGIN
                VatBaseSum[2] := VatBaseSum[1] + TempVatEntry.Base;
                VatBaseSum[1] := TempVatEntry.Base;
                EntryNoBegin[2] := EntryNoBegin[1];
                EntryNoBegin[1] := TempVatEntry."Entry No.";
              END;
            UNTIL TempVatEntry.NEXT = 0;
          END;
        END;
      UNTIL DtldCustLedgEntry2.NEXT = 0;

      DtldCustLedgEntry2.FINDSET;
      LedgEntryDim.SETRANGE("Table ID",DATABASE::"Cust. Ledger Entry");
      LedgEntryDim.SETRANGE("Entry No.",DtldCustLedgEntry2."Applied Cust. Ledger Entry No.");
      TempJnlLineDim.RESET;
      TempJnlLineDim.DELETEALL;
      DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);
      IF TempJnlLineDim.GET(DATABASE::"Cust. Ledger Entry",'','',0,0,GLSetup."Global Dimension 1 Code") THEN
        GenJnlLine."Shortcut Dimension 1 Code" := TempJnlLineDim."Dimension Value Code"
      ELSE
        GenJnlLine."Shortcut Dimension 1 Code" := '';
      IF TempJnlLineDim.GET(DATABASE::"Cust. Ledger Entry",'','',0,0,GLSetup."Global Dimension 2 Code") THEN
        GenJnlLine."Shortcut Dimension 2 Code" := TempJnlLineDim."Dimension Value Code"
      ELSE
        GenJnlLine."Shortcut Dimension 2 Code" := '';

      REPEAT
        NewDtldCustLedgEntry := DtldCustLedgEntry2;
        NewDtldCustLedgEntry."Entry No." := NextDtldLedgEntryEntryNo;
        NewDtldCustLedgEntry."Posting Date" := GenJnlLine."Posting Date";
        NewDtldCustLedgEntry."Transaction No." := NextTransactionNo;
        NewDtldCustLedgEntry.Amount := -DtldCustLedgEntry2.Amount;
        NewDtldCustLedgEntry."Amount (LCY)" := -DtldCustLedgEntry2."Amount (LCY)";
        NewDtldCustLedgEntry."Debit Amount" := -DtldCustLedgEntry2."Debit Amount";
        NewDtldCustLedgEntry."Credit Amount" := -DtldCustLedgEntry2."Credit Amount";
        NewDtldCustLedgEntry."Debit Amount (LCY)" := -DtldCustLedgEntry2."Debit Amount (LCY)";
        NewDtldCustLedgEntry."Credit Amount (LCY)" := -DtldCustLedgEntry2."Credit Amount (LCY)";
        NewDtldCustLedgEntry.Unapplied := TRUE;
        NewDtldCustLedgEntry."Unapplied by Entry No." := DtldCustLedgEntry2."Entry No.";
        NewDtldCustLedgEntry."Document No." := GenJnlLine."Document No.";
        NewDtldCustLedgEntry."Source Code" := GenJnlLine."Source Code";
        NewDtldCustLedgEntry."User ID" := USERID;
        // gbedv DC -------------------------------------------------- BEGIN
        IF OPplusEnabled THEN BEGIN
          PostAtOnce := TRUE;
          FinanceTools.UpdateNewDtldCustLedgEntry(NewDtldCustLedgEntry,DtldCustLedgEntry2);
        END;
        // gbedv DC -------------------------------------------------- END
        NewDtldCustLedgEntry.INSERT;
        NextDtldLedgEntryEntryNo := NextDtldLedgEntryEntryNo + 1;

        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldCustLedgEntry);
        GenJnlLine."Source Currency Code" := DtldCustLedgEntry2."Currency Code";
        IF GLSetup."Additional Reporting Currency" <> DtldCVLedgEntryBuf."Currency Code" THEN
          DtldCVLedgEntryBuf."Additional-Currency Amount" :=
            CalcAddCurrForUnapplication(DtldCVLedgEntryBuf."Posting Date",DtldCVLedgEntryBuf."Amount (LCY)")
        ELSE
          IF GLSetup."Additional Reporting Currency" <> '' THEN
            DtldCVLedgEntryBuf."Additional-Currency Amount" := DtldCVLedgEntryBuf.Amount;
        CurrencyLCY.InitRoundingPrecision;

        IF DtldCustLedgEntry2."Entry Type" IN [
          DtldCustLedgEntry2."Entry Type"::"Payment Discount (VAT Excl.)",
          DtldCustLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)",
          DtldCustLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"]
        THEN BEGIN
          VATEntryTemp.SETRANGE("VAT Bus. Posting Group",DtldCustLedgEntry2."VAT Bus. Posting Group");
          VATEntryTemp.SETRANGE("VAT Prod. Posting Group",DtldCustLedgEntry2."VAT Prod. Posting Group");
          //A/13.10.14/gob-dah/H1614 KB2458018
          VATEntryTemp.SETRANGE("Gen. Prod. Posting Group",DtldCustLedgEntry2."Gen. Prod. Posting Group");
          //E/13.10.14/gob-dah/H1614 KB2458018
          IF NOT VATEntryTemp.FINDFIRST THEN BEGIN
            VATEntryTemp.RESET;
            IF VATEntryTemp.FINDLAST THEN
              VATEntryTemp."Entry No." := VATEntryTemp."Entry No." + 1
            ELSE
              VATEntryTemp."Entry No." := 1;
            VATEntryTemp.INIT;
            VATEntryTemp."VAT Bus. Posting Group" := DtldCustLedgEntry2."VAT Bus. Posting Group";
            VATEntryTemp."VAT Prod. Posting Group" := DtldCustLedgEntry2."VAT Prod. Posting Group";
            //A/13.10.14/gob-dah/H1614 KB2458018
            VATEntryTemp.SETRANGE("Gen. Prod. Posting Group",DtldCustLedgEntry2."Gen. Prod. Posting Group");
            //E/13.10.14/gob-dah/H1614 KB2458018
            VATEntry.SETCURRENTKEY(VATEntry."Transaction No.");
            VATEntry.SETRANGE("Transaction No.",DtldCustLedgEntry2."Transaction No.");
            VATEntry.SETRANGE("VAT Bus. Posting Group",DtldCustLedgEntry2."VAT Bus. Posting Group");
            VATEntry.SETRANGE("VAT Prod. Posting Group",DtldCustLedgEntry2."VAT Prod. Posting Group");
            //A/13.10.14/gob-dah/H1614 KB2458018
            VATEntry.SETRANGE("Gen. Prod. Posting Group",DtldCustLedgEntry2."Gen. Prod. Posting Group");
            //E/13.10.14/gob-dah/H1614 KB2458018
            IF VATEntry.FINDSET THEN
              REPEAT
                IF VATEntry."Unrealized VAT Entry No." = 0 THEN BEGIN
                  VATEntryTemp.Base := VATEntryTemp.Base + VATEntry.Base;
                  VATEntryTemp.Amount := VATEntryTemp.Amount + VATEntry.Amount;
                END;
              UNTIL VATEntry.NEXT = 0;
            CLEAR(VATEntry);
            VATEntryTemp.INSERT;
          END;
          IF DtldCVLedgEntryBuf."Amount (LCY)" = VATEntryTemp.Base THEN BEGIN
            DtldCVLedgEntryBuf."VAT Amount (LCY)" := VATEntryTemp.Amount;
            VATEntryTemp.DELETE;
          END ELSE BEGIN
            DtldCVLedgEntryBuf."VAT Amount (LCY)" := ROUND(
              VATEntryTemp.Amount * DtldCVLedgEntryBuf."Amount (LCY)" / VATEntryTemp.Base,
              CurrencyLCY."Amount Rounding Precision",
              CurrencyLCY.VATRoundingDirection);
            VATEntryTemp.Base := VATEntryTemp.Base - DtldCVLedgEntryBuf."Amount (LCY)";
            VATEntryTemp.Amount := VATEntryTemp.Amount - DtldCVLedgEntryBuf."VAT Amount (LCY)";
            VATEntryTemp.MODIFY;
          END;
        END;
        TotalAmountLCY := TotalAmountLCY + DtldCVLedgEntryBuf."Amount (LCY)";
        TotalAmountAddCurr := TotalAmountAddCurr + DtldCVLedgEntryBuf."Additional-Currency Amount";
        IF DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::Application THEN BEGIN
          IF DtldCVLedgEntryBuf."Amount (LCY)" >= 0 THEN BEGIN
            PositiveLCYAppAmt := PositiveLCYAppAmt + DtldCVLedgEntryBuf."Amount (LCY)";
            PositiveACYAppAmt :=
              PositiveACYAppAmt + DtldCVLedgEntryBuf."Additional-Currency Amount";
          END ELSE BEGIN
            NegativeLCYAppAmt := NegativeLCYAppAmt + DtldCVLedgEntryBuf."Amount (LCY)";
            NegativeACYAppAmt :=
              NegativeACYAppAmt + DtldCVLedgEntryBuf."Additional-Currency Amount";
          END;
        END;
        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
          DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
          DtldCVLedgEntryBuf."Entry Type"::Application]) THEN
          CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
            CreditAddjustment,CreditAddjustmentAddCurr,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");
        AutoEntrForDtldCustLedgEntries(DtldCVLedgEntryBuf,DtldCustLedgEntry2."Transaction No.");

        DtldCustLedgEntry2.Unapplied := TRUE;
        DtldCustLedgEntry2."Unapplied by Entry No." := NewDtldCustLedgEntry."Entry No.";
        DtldCustLedgEntry2.MODIFY;

        // gbedv EA -------------------------------------------------- BEGIN
        IF (DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::Application) THEN BEGIN
          DtldCustLedgEntry3.RESET;
          DtldCustLedgEntry3.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
          DtldCustLedgEntry3.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
          DtldCustLedgEntry3.SETRANGE("Customer No.",DtldCustLedgEntry."Customer No.");
          DtldCustLedgEntry3.SETFILTER("Entry Type",'>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
          DtldCustLedgEntry3.SETRANGE("Cust. Ledger Entry No.",DtldCustLedgEntry2."Applied Cust. Ledger Entry No.");
          DtldCustLedgEntry3.FINDSET;
          PmtDiscLCY := 0;
          REPEAT
            IF DtldCustLedgEntry3."Entry Type" IN
              [DtldCustLedgEntry3."Entry Type"::"Payment Discount (VAT Excl.)",
               DtldCustLedgEntry3."Entry Type"::"Payment Discount (VAT Adjustment)"]
            THEN
              PmtDiscLCY := PmtDiscLCY + DtldCustLedgEntry3."Amount (LCY)";
          UNTIL DtldCustLedgEntry3.NEXT = 0;
        END;
        // gbedv EA -------------------------------------------------- END
        IF DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::Application THEN BEGIN
          CustLedgEntry.GET(DtldCustLedgEntry2."Cust. Ledger Entry No.");
          CustLedgEntry."Remaining Pmt. Disc. Possible" := DtldCustLedgEntry2."Remaining Pmt. Disc. Possible";
          CustLedgEntry."Max. Payment Tolerance" := DtldCustLedgEntry2."Max. Payment Tolerance";
          CustLedgEntry."Accepted Payment Tolerance" := 0;
          // gbedv EA -------------------------------------------------- BEGIN
          IF (CustLedgEntry."Pmt. Disc. Given (LCY)" <> 0) AND (PmtDiscLCY <> 0) THEN
            CustLedgEntry."Pmt. Disc. Given (LCY)" := CustLedgEntry."Pmt. Disc. Given (LCY)" + PmtDiscLCY;
          // gbedv EA -------------------------------------------------- END
          IF NOT CustLedgEntry.Open THEN BEGIN
            CustLedgEntry.Open := TRUE;
            CustLedgEntry."Closed by Entry No." := 0;
            CustLedgEntry."Closed at Date" := 0D;
            CustLedgEntry."Closed by Amount" := 0;
            CustLedgEntry."Closed by Amount (LCY)" := 0;
            CustLedgEntry."Closed by Currency Code" := '';
            CustLedgEntry."Closed by Currency Amount" := 0;
            // gbedv EA -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              IF (OPplusSetup."On Hold Returned Direct Debit" <> '') AND (GenJnlLine2.Payback) THEN
                CustLedgEntry."On Hold" := OPplusSetup."On Hold Returned Direct Debit";
            // CustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
            IF CustLedgEntry."Pmt. Disc. Given (LCY)" <> 0 THEN BEGIN
              CustLedgEntry.CALCFIELDS("Original Amt. (LCY)","Remaining Amt. (LCY)");
              IF (CustLedgEntry."Pmt. Disc. Given (LCY)" * CustLedgEntry."Original Amt. (LCY)" < 0) OR
                 (CustLedgEntry."Original Amt. (LCY)" = CustLedgEntry."Remaining Amt. (LCY)")
              THEN
                CustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
            END;
            // gbedv EA -------------------------------------------------- END
            CustLedgEntry."Pmt. Tolerance (LCY)" := 0;
            CustLedgEntry."Calculate Interest" := FALSE;
          END;
          CustLedgEntry.MODIFY;
        END;
      UNTIL DtldCustLedgEntry2.NEXT = 0;
      // gbedv EA -------------------------------------------------- BEGIN
      // wenn Ausgleich Skontoausbuchung aufgehoben wird
      CustLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
      IF CustLedgEntry."Remaining Amt. (LCY)" = 0 THEN BEGIN
        CustLedgEntry.Open := FALSE;
        CustLedgEntry.MODIFY;
      END;
      // gbedv EA -------------------------------------------------- END

      IF (TotalAmountLCY <> 0) OR
         (TotalAmountAddCurr <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
      THEN BEGIN
        //A/gob-bth/29112012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          Darlehen.GET(GenJnlLine.Darlehen);
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
            InitGLEntry(CustPostingGr."Account receivables loans < 1",TotalAmountLCY,TotalAmountAddCurr,TRUE,TRUE);
          END;
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
            InitGLEntry(CustPostingGr."Account receivables loans > 1",TotalAmountLCY,TotalAmountAddCurr,TRUE,TRUE);
          END;
        END ELSE
        //E/gob-bth/29112012/P0484
        InitGLEntry(CustPostingGr."Receivables Account",TotalAmountLCY,TotalAmountAddCurr,TRUE,TRUE);
        InsertGLEntry(TRUE);
      END;

      IF NOT GLEntryTmp.FINDFIRST THEN BEGIN
        //A/gob-bth/29112012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          Darlehen.GET(GenJnlLine.Darlehen);
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
            InitGLEntry(CustPostingGr."Account receivables loans < 1",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
          END;
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
            InitGLEntry(CustPostingGr."Account receivables loans > 1",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
          END;
        END ELSE
        //E/gob-bth/29112012/P0484
        InitGLEntry(CustPostingGr."Receivables Account",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
        InsertGLEntry(FALSE);
        //A/gob-bth/29112012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          Darlehen.GET(GenJnlLine.Darlehen);
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
            InitGLEntry(CustPostingGr."Account receivables loans < 1",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
          END;
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
            InitGLEntry(CustPostingGr."Account receivables loans > 1",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
          END;
        END ELSE
        //E/gob-bth/29112012/P0484
        InitGLEntry(CustPostingGr."Receivables Account",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
        InsertGLEntry(FALSE);
      END;

      FinishCodeunit;
    END;

    PROCEDURE TransferCustLedgEntry@8(VAR CVLedgEntryBuf@1000 : Record 382;VAR CustLedgEntry@1001 : Record 21;CustToCV@1002 : Boolean);
    BEGIN
      IF CustToCV THEN BEGIN
        CVLedgEntryBuf.TRANSFERFIELDS(CustLedgEntry);
        CVLedgEntryBuf.Amount := CustLedgEntry.Amount;
        CVLedgEntryBuf."Amount (LCY)" := CustLedgEntry."Amount (LCY)";
        CVLedgEntryBuf."Remaining Amount" := CustLedgEntry."Remaining Amount";
        CVLedgEntryBuf."Remaining Amt. (LCY)" := CustLedgEntry."Remaining Amt. (LCY)";
        CVLedgEntryBuf."Original Amount" := CustLedgEntry."Original Amount";
        CVLedgEntryBuf."Original Amt. (LCY)" := CustLedgEntry."Original Amt. (LCY)";
      END ELSE BEGIN
        CustLedgEntry.TRANSFERFIELDS(CVLedgEntryBuf);
        CustLedgEntry.Amount := CVLedgEntryBuf.Amount;
        CustLedgEntry."Amount (LCY)" := CVLedgEntryBuf."Amount (LCY)";
        CustLedgEntry."Remaining Amount" := CVLedgEntryBuf."Remaining Amount";
        CustLedgEntry."Remaining Amt. (LCY)" := CVLedgEntryBuf."Remaining Amt. (LCY)";
        CustLedgEntry."Original Amount" := CVLedgEntryBuf."Original Amount";
        CustLedgEntry."Original Amt. (LCY)" := CVLedgEntryBuf."Original Amt. (LCY)";
      END;
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntries@46(GenJnlLine2@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1002 : Record 92;GLSetup@1003 : Record 98;NextTransactionNo@1004 : Integer;CustLedgEntryInserted@1012 : Boolean);
    VAR
      DtldCustLedgEntry@1005 : Record 379;
      Currency@1007 : Record 4;
      GenPostingSetup@1008 : Record 252;
      TotalAmountLCY@1009 : Decimal;
      TotalAmountAddCurr@1010 : Decimal;
      PaymentDiscAcc@1011 : Code[20];
      DtldCustLedgEntryNoOffset@1006 : Integer;
      PaymentTolAcc@1013 : Code[20];
      SaveEntryNo@1014 : Integer;
      DebitAddjustment@1015 : Decimal;
      DebitAddjustmentAddCurr@1016 : Decimal;
      CreditAddjustment@1017 : Decimal;
      CreditAddjustmentAddCurr@1018 : Decimal;
      PositiveLCYAppAmt@1022 : Decimal;
      NegativeLCYAppAmt@1021 : Decimal;
      PositiveACYAppAmt@1020 : Decimal;
      NegativeACYAppAmt@1019 : Decimal;
      OriginalPostingDate@1032 : Date;
      OriginalDateSet@1031 : Boolean;
      TotalAmountLCYApplDate@1030 : Decimal;
      TotalAmountAddCurrApplDate@1029 : Decimal;
      ApplicationDate@1028 : Date;
      DebitAddjustmentApplDate@1027 : Decimal;
      DebitAddjustmentAddCurrApplDat@1026 : Decimal;
      CreditAddjustmentApplDate@1025 : Decimal;
      CreditAddjustmentAddCurrApplDa@1024 : Decimal;
      SavedEntryUsed@1023 : Boolean;
    BEGIN
      TotalAmountLCY := 0;
      TotalAmountAddCurr := 0;
      PositiveLCYAppAmt := 0;
      PositiveACYAppAmt := 0;
      NegativeLCYAppAmt := 0;
      NegativeACYAppAmt := 0;

      IF GenJnlLine2."Account Type" = GenJnlLine2."Account Type"::Customer THEN BEGIN
        IF DtldCustLedgEntry.FINDLAST THEN
          DtldCustLedgEntryNoOffset := DtldCustLedgEntry."Entry No."
        ELSE
          DtldCustLedgEntryNoOffset := 0;
        DtldCVLedgEntryBuf.RESET;
        IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
          IF CustLedgEntryInserted THEN BEGIN
            SaveEntryNo := NextEntryNo;
            NextEntryNo := NextEntryNo + 1;
          END;
          REPEAT
            IF DtldCVLedgEntryBuf."Posting Date" <> GenJnlLine."Posting Date" THEN BEGIN
              OriginalPostingDate := GenJnlLine."Posting Date";
              GenJnlLine."Posting Date" := DtldCVLedgEntryBuf."Posting Date";
              OriginalDateSet := TRUE;
              ApplicationDate := DtldCVLedgEntryBuf."Posting Date";
            END;
            CLEAR(DtldCustLedgEntry);
            DtldCustLedgEntry.TRANSFERFIELDS(DtldCVLedgEntryBuf);
            DtldCustLedgEntry."Entry No." :=
              DtldCustLedgEntryNoOffset + DtldCVLedgEntryBuf."Entry No.";
            DtldCustLedgEntry."Journal Batch Name" := GenJnlLine2."Journal Batch Name";
            DtldCustLedgEntry."Reason Code" := GenJnlLine2."Reason Code";
            DtldCustLedgEntry."Source Code" := GenJnlLine2."Source Code";
            DtldCustLedgEntry."Transaction No." := NextTransactionNo;
            CustUpdateDebitCredit(GenJnlLine2.Correction,DtldCustLedgEntry);
            DtldCustLedgEntry.INSERT;

            IF OriginalDateSet THEN BEGIN
              TotalAmountLCYApplDate := TotalAmountLCYApplDate + DtldCVLedgEntryBuf."Amount (LCY)";
              TotalAmountAddCurrApplDate := TotalAmountAddCurrApplDate + DtldCVLedgEntryBuf."Additional-Currency Amount";
            END ELSE BEGIN
              TotalAmountLCY := TotalAmountLCY + DtldCVLedgEntryBuf."Amount (LCY)";
              TotalAmountAddCurr := TotalAmountAddCurr + DtldCVLedgEntryBuf."Additional-Currency Amount";
            END;

            // Post automatic entries.
            IF (DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
               ((GLSetup."Additional Reporting Currency" <> '') AND
                (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
            THEN
              CASE DtldCVLedgEntryBuf."Entry Type" OF
                DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":;
                DtldCVLedgEntryBuf."Entry Type"::Application:
                  BEGIN
                    IF DtldCVLedgEntryBuf."Amount (LCY)" >= 0 THEN BEGIN
                      PositiveLCYAppAmt := PositiveLCYAppAmt + DtldCVLedgEntryBuf."Amount (LCY)";
                      PositiveACYAppAmt :=
                        PositiveACYAppAmt + DtldCVLedgEntryBuf."Additional-Currency Amount";
                    END ELSE BEGIN
                      NegativeLCYAppAmt := NegativeLCYAppAmt + DtldCVLedgEntryBuf."Amount (LCY)";
                      NegativeACYAppAmt :=
                        NegativeACYAppAmt + DtldCVLedgEntryBuf."Additional-Currency Amount";
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Losses Acc.");
                    InitGLEntry(
                      Currency."Unrealized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Gains Acc.");
                    InitGLEntry(
                      Currency."Unrealized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Losses Acc.");
                    InitGLEntry(
                      Currency."Realized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Gains Acc.");
                    InitGLEntry(
                      Currency."Realized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount":
                  BEGIN
                    IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                      CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                      PaymentDiscAcc := CustPostingGr."Payment Disc. Debit Acc.";
                    END ELSE BEGIN
                      CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                      PaymentDiscAcc := CustPostingGr."Payment Disc. Credit Acc.";
                    END;
                    InitGLEntry(
                      PaymentDiscAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                      GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                      PaymentDiscAcc := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                    END ELSE BEGIN
                      GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                      PaymentDiscAcc := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                    END;
                    // gbedv DC -------------------------------------------------- BEGIN
                    SkipDimCheck := TRUE;
                    // gbedv DC -------------------------------------------------- END
                    InitGLEntry(PaymentDiscAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    // gbedv DC -------------------------------------------------- BEGIN
                    IF OPplusEnabled THEN
                      FinanceTools.DimCheckVATEntry(
                        PaymentDiscAcc,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,DtldCVLedgEntryBuf."VAT Entry No.");
                    // gbedv DC -------------------------------------------------- END
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);

                    InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)":
                  BEGIN
                    // The g/l entries for this entry type are posted by the VAT functions.
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding":
                  BEGIN
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                      CustPostingGr.TESTFIELD("Debit Curr. Appln. Rndg. Acc.");
                      InitGLEntry(
                        CustPostingGr."Debit Curr. Appln. Rndg. Acc.",
                        -DtldCVLedgEntryBuf."Amount (LCY)",
                        -DtldCVLedgEntryBuf."Additional-Currency Amount",
                        TRUE,TRUE);

                      IF OriginalDateSet THEN
                        CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                          CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount")
                      ELSE
                        CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                          CreditAddjustment,CreditAddjustmentAddCurr,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                      CustPostingGr.TESTFIELD("Credit Curr. Appln. Rndg. Acc.");
                      InitGLEntry(
                        CustPostingGr."Credit Curr. Appln. Rndg. Acc.",
                        -DtldCVLedgEntryBuf."Amount (LCY)",
                        -DtldCVLedgEntryBuf."Additional-Currency Amount",
                        TRUE,TRUE);

                      IF OriginalDateSet THEN
                        CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                          CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount")
                      ELSE
                        CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                          CreditAddjustment,CreditAddjustmentAddCurr,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount":
                  BEGIN
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                      CustPostingGr.TESTFIELD("Debit Rounding Account");
                      InitGLEntry(
                        CustPostingGr."Debit Rounding Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                        0,FALSE,TRUE);
                      GLEntry."Additional-Currency Amount" := 0;

                      IF OriginalDateSet THEN
                        CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                          CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount")
                      ELSE
                        CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                          CreditAddjustment,CreditAddjustmentAddCurr,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                      CustPostingGr.TESTFIELD("Credit Rounding Account");
                      InitGLEntry(
                        CustPostingGr."Credit Rounding Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                        0,FALSE,TRUE);
                      GLEntry."Additional-Currency Amount" := 0;

                      IF OriginalDateSet THEN
                        CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                          CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount")
                      ELSE
                        CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                          CreditAddjustment,CreditAddjustmentAddCurr,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance":
                  BEGIN
                    IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Tolerance Debit Acc.";
                      END ELSE BEGIN
                        CustPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Tolerance Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Disc. Debit Acc.";
                      END ELSE BEGIN
                        CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(
                      PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance":
                  BEGIN
                    IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Tolerance Debit Acc.";
                      END ELSE BEGIN
                        CustPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Tolerance Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Disc. Debit Acc.";
                      END ELSE BEGIN
                        CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(
                      PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Tol. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Tol. Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                      END;
                    END;
                    // gbedv DC -------------------------------------------------- BEGIN
                    SkipDimCheck := TRUE;
                    // gbedv DC -------------------------------------------------- END
                    InitGLEntry(PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    // gbedv DC -------------------------------------------------- BEGIN
                    IF OPplusEnabled THEN
                      FinanceTools.DimCheckVATEntry(
                        PaymentTolAcc,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,DtldCVLedgEntryBuf."VAT Entry No.");
                    // gbedv DC -------------------------------------------------- END
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);

                    InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Tol. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Tol. Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                      END;
                    END;
                    // gbedv DC -------------------------------------------------- BEGIN
                    SkipDimCheck := TRUE;
                    // gbedv DC -------------------------------------------------- END
                    InitGLEntry(PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    // gbedv DC -------------------------------------------------- BEGIN
                    IF OPplusEnabled THEN
                      FinanceTools.DimCheckVATEntry(
                        PaymentTolAcc,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,DtldCVLedgEntryBuf."VAT Entry No.");
                    // gbedv DC -------------------------------------------------- END
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);

                    InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
                  BEGIN
                    // The g/l entries for this entry type are posted by the VAT functions.
                  END;
                ELSE
                  DtldCVLedgEntryBuf.FIELDERROR("Entry Type");
              END;
            IF OriginalDateSet THEN BEGIN
              GenJnlLine."Posting Date" := OriginalPostingDate;
              OriginalDateSet := FALSE;
            END;
          UNTIL DtldCVLedgEntryBuf.NEXT = 0;
        END;

        IF CustLedgEntryInserted OR (TotalAmountLCY <> 0) OR
           (TotalAmountAddCurr <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
        THEN BEGIN
          //A/gob-bth/29112012/P0484
          IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
            Darlehen.GET(GenJnlLine.Darlehen);
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
              HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
              TotalAmountLCY,TotalAmountAddCurr,CustPostingGr."Account receivables loans < 1");
            END;
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
              HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
              TotalAmountLCY,TotalAmountAddCurr,CustPostingGr."Account receivables loans > 1");
            END;
          END ELSE
          //E/gob-bth/29112012/P0484
            HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
             TotalAmountLCY,TotalAmountAddCurr,CustPostingGr."Receivables Account");
          GLEntry."Bal. Account Type" := GenJnlLine2."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine2."Bal. Account No.";
          IF CustLedgEntryInserted THEN BEGIN
            GLEntry."Entry No." := SaveEntryNo;
            NextEntryNo := NextEntryNo - 1;
            SavedEntryUsed := TRUE;
          END;
          InsertGLEntry(TRUE);
        END;

        IF (TotalAmountLCYApplDate <> 0) OR
           (TotalAmountAddCurrApplDate <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
        THEN BEGIN
          GenJnlLine."Posting Date" := ApplicationDate;

          //A/gob-bth/29112012/P0484
          IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
            Darlehen.GET(GenJnlLine.Darlehen);
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
              HandlDtlAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,CreditAddjustmentApplDate,
               CreditAddjustmentAddCurrApplDa,TotalAmountLCYApplDate, TotalAmountAddCurrApplDate,
                CustPostingGr."Account receivables loans < 1");
            END;
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
              HandlDtlAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,CreditAddjustmentApplDate,
               CreditAddjustmentAddCurrApplDa,TotalAmountLCYApplDate, TotalAmountAddCurrApplDate,
                CustPostingGr."Account receivables loans > 1");
            END;
          END ELSE
          //E/gob-bth/29112012/P0484
          HandlDtlAddjustment(DebitAddjustmentApplDate,
            DebitAddjustmentAddCurrApplDat,
            CreditAddjustmentApplDate,
            CreditAddjustmentAddCurrApplDa,
            TotalAmountLCYApplDate,
            TotalAmountAddCurrApplDate,
            CustPostingGr."Receivables Account");
          IF CustLedgEntryInserted AND NOT SavedEntryUsed THEN BEGIN
            GLEntry."Entry No." := SaveEntryNo;
            NextEntryNo := NextEntryNo - 1;
          END;
          InsertGLEntry(TRUE);
          GenJnlLine."Posting Date" := OriginalPostingDate;
        END;

        IF NOT GLEntryTmp.FINDFIRST AND DtldCVLedgEntryBuf.FINDFIRST THEN BEGIN
          //A/gob-bth/29112012/P0484
          IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
            Darlehen.GET(GenJnlLine.Darlehen);
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
              InitGLEntry(CustPostingGr."Account receivables loans < 1",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
              InsertGLEntry(FALSE);
              InitGLEntry(CustPostingGr."Account receivables loans < 1",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
              InsertGLEntry(FALSE);
            END;
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
              InitGLEntry(CustPostingGr."Account receivables loans > 1",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
              InsertGLEntry(FALSE);
              InitGLEntry(CustPostingGr."Account receivables loans > 1",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
              InsertGLEntry(FALSE);
            END
          END ELSE BEGIN
          //E/gob-bth/29112012/P0484
            InitGLEntry(CustPostingGr."Receivables Account",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
            InsertGLEntry(FALSE);
            InitGLEntry(CustPostingGr."Receivables Account",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
            InsertGLEntry(FALSE);
          //A/gob-bth/29112012/P0484
          END;
          //E/gob-bth/29112012/P0484
        END;
        DtldCVLedgEntryBuf.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE AutoEntrForDtldCustLedgEntries@65(DtldCVLedgEntryBuf@1001 : Record 383;OriginalTransactionNo@1006 : Integer);
    VAR
      GenPostingSetup@1005 : Record 252;
      VATPostingSetup@1004 : Record 325;
      TaxJurisdiction@1003 : Record 320;
      AccNo@1002 : Code[20];
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         ((GLSetup."Additional Reporting Currency" = '') OR
          (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      CASE DtldCVLedgEntryBuf."Entry Type" OF
        DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":;
        DtldCVLedgEntryBuf."Entry Type"::Application:;
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Unrealized Losses Acc.");
            InitGLEntry(
              Currency."Unrealized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Unrealized Gains Acc.");
            InitGLEntry(
              Currency."Unrealized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Realized Losses Acc.");
            InitGLEntry(
              Currency."Realized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Realized Gains Acc.");
            InitGLEntry(
              Currency."Realized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount":
          BEGIN
            IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
              CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
              AccNo := CustPostingGr."Payment Disc. Debit Acc.";
            END ELSE BEGIN
              CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
              AccNo := CustPostingGr."Payment Disc. Credit Acc.";
            END;
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          BEGIN
            DtldCVLedgEntryBuf.TESTFIELD("Gen. Prod. Posting Group");
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
              GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
              AccNo := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
            END ELSE BEGIN
              GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
              AccNo := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
            END;
            // gbedv DC -------------------------------------------------- BEGIN
            SkipDimCheck := TRUE;
            // gbedv DC -------------------------------------------------- END
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              FinanceTools.DimCheckVATEntry(
                AccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,DtldCVLedgEntryBuf."VAT Entry No.");
            // gbedv DC -------------------------------------------------- END
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Sale;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);

            InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)",
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
          BEGIN
            VATEntry.SETRANGE("Transaction No.",OriginalTransactionNo);
            VATEntry.SETRANGE("VAT Bus. Posting Group",DtldCVLedgEntryBuf."VAT Bus. Posting Group");
            VATEntry.SETRANGE("VAT Prod. Posting Group",DtldCVLedgEntryBuf."VAT Prod. Posting Group");
            VATEntry.FINDFIRST;

            VATPostingSetup.GET(
              DtldCVLedgEntryBuf."VAT Bus. Posting Group",
              DtldCVLedgEntryBuf."VAT Prod. Posting Group");
            VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
            CLEAR(VATEntry);

            CASE VATPostingSetup."VAT Calculation Type" OF
              VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT":
                BEGIN
                  VATPostingSetup.TESTFIELD("Sales VAT Account");
                  AccNo := VATPostingSetup."Sales VAT Account";
                END;
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT": ;
              VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                BEGIN
                  DtldCVLedgEntryBuf.TESTFIELD("Tax Jurisdiction Code");
                  TaxJurisdiction.GET(DtldCVLedgEntryBuf."Tax Jurisdiction Code");
                  TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                  AccNo := TaxJurisdiction."Tax Account (Sales)"
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding":
          IF -DtldCVLedgEntryBuf."Amount (LCY)" <> 0 THEN BEGIN
            CASE TRUE OF
              -DtldCVLedgEntryBuf."Amount (LCY)" < 0:
                BEGIN
                  CustPostingGr.TESTFIELD("Debit Curr. Appln. Rndg. Acc.");
                  AccNo := CustPostingGr."Debit Curr. Appln. Rndg. Acc.";
                END;
              -DtldCVLedgEntryBuf."Amount (LCY)" > 0:
                BEGIN
                  CustPostingGr.TESTFIELD("Credit Curr. Appln. Rndg. Acc.");
                  AccNo := CustPostingGr."Credit Curr. Appln. Rndg. Acc.";
                END;
            END;
            InitGLEntry(
              AccNo,
              -DtldCVLedgEntryBuf."Amount (LCY)",
              -DtldCVLedgEntryBuf."Additional-Currency Amount",
              TRUE,TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount":
          IF -DtldCVLedgEntryBuf."Amount (LCY)" <> 0 THEN BEGIN
            CASE TRUE OF
              -DtldCVLedgEntryBuf."Amount (LCY)" < 0:
                BEGIN
                  CustPostingGr.TESTFIELD("Debit Rounding Account");
                  AccNo := CustPostingGr."Debit Rounding Account";
                END;
              -DtldCVLedgEntryBuf."Amount (LCY)" > 0:
                BEGIN
                  CustPostingGr.TESTFIELD("Credit Rounding Account");
                  AccNo := CustPostingGr."Credit Rounding Account";
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := 0;
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance":
          BEGIN
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                  AccNo := CustPostingGr."Payment Tolerance Debit Acc.";
                END ELSE BEGIN
                  CustPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                  AccNo := CustPostingGr."Payment Tolerance Credit Acc.";
                END;
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                  AccNo := CustPostingGr."Payment Disc. Debit Acc.";
                END ELSE BEGIN
                  CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                  AccNo := CustPostingGr."Payment Disc. Credit Acc.";
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance":
          BEGIN
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                  AccNo := CustPostingGr."Payment Tolerance Debit Acc.";
                END ELSE BEGIN
                  CustPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                  AccNo := CustPostingGr."Payment Tolerance Credit Acc.";
                END;
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                  AccNo := CustPostingGr."Payment Disc. Debit Acc.";
                END ELSE BEGIN
                  CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                  AccNo := CustPostingGr."Payment Disc. Credit Acc.";
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" :=
              -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          BEGIN
            DtldCVLedgEntryBuf.TESTFIELD("Gen. Prod. Posting Group");
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Debit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Tol. Debit Acc.";
                END ELSE BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Credit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Tol. Credit Acc.";
                END;
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                END ELSE BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                END;
            END;
            // gbedv DC -------------------------------------------------- BEGIN
            SkipDimCheck := TRUE;
            // gbedv DC -------------------------------------------------- END
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              FinanceTools.DimCheckVATEntry(
                AccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,DtldCVLedgEntryBuf."VAT Entry No.");
            // gbedv DC -------------------------------------------------- END
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Sale;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);

            InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          BEGIN
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Debit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Tol. Debit Acc.";
                END ELSE BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Credit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Tol. Credit Acc.";
                END;
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                END ELSE BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                END;
            END;
            // gbedv DC -------------------------------------------------- BEGIN
            SkipDimCheck := TRUE;
            // gbedv DC -------------------------------------------------- END
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              FinanceTools.DimCheckVATEntry(
                AccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,DtldCVLedgEntryBuf."VAT Entry No.");
            // gbedv DC -------------------------------------------------- END
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Sale;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);

            InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
          END;
        ELSE
          DtldCVLedgEntryBuf.FIELDERROR("Entry Type");
      END;
    END;

    LOCAL PROCEDURE CustUpdateDebitCredit@19(Correction@1000 : Boolean;VAR DtldCustLedgEntry@1001 : Record 379);
    BEGIN
      WITH DtldCustLedgEntry DO BEGIN
        IF ((Amount > 0)  OR ("Amount (LCY)" > 0)) AND NOT Correction OR
           ((Amount < 0) OR ("Amount (LCY)" < 0)) AND Correction
        THEN BEGIN
          "Debit Amount" := Amount;
          "Credit Amount" := 0;
          "Debit Amount (LCY)" := "Amount (LCY)";
          "Credit Amount (LCY)" := 0;
        END ELSE BEGIN
          "Debit Amount" := 0;
          "Credit Amount" := -Amount;
          "Debit Amount (LCY)" := 0;
          "Credit Amount (LCY)" := -"Amount (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE ApplyVendLedgEntry@4(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;ApplnRoundingPrecision@1004 : Decimal);
    VAR
      OldVendLedgEntry@1005 : Record 25;
      OldCVLedgEntryBuf@1006 : Record 382;
      OldCVLedgEntryBuf2@1007 : Record 382;
      NewVendLedgEntry@1008 : Record 25;
      NewCVLedgEntryBuf2@1019 : Record 382;
      OldCVLedgEntryBuf3@1018 : Record 382;
      TempOldVendLedgEntry@1003 : TEMPORARY Record 25;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      AppliedAmountLCY@1011 : Decimal;
      OldAppliedAmount@1012 : Decimal;
      TempAmount@1013 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      OldRemainingAmtBeforeAppln@1016 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      // Skontoausbuchungen ermîglichen
      // IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
      // gbedv EA -------------------------------------------------- END
      IF (NewCVLedgEntryBuf."Amount to Apply" = 0) AND (GenJnlLine."Posting Payment Discount" = 0) THEN
        EXIT;

      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
           ((Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") AND
            GenJnlLine."Allow Application")
      THEN
        EXIT;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      IF NewCVLedgEntryBuf."Currency Code" <> '' THEN BEGIN
        // Management of application of already posted entries
        IF NewCVLedgEntryBuf."Currency Code" <> ApplnCurrency.Code THEN
          ApplnCurrency.GET(NewCVLedgEntryBuf."Currency Code");
        ApplnRoundingPrecision := ApplnCurrency."Appln. Rounding Precision";
      END ELSE
        ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision";
      ApplyingDate := GenJnlLine."Posting Date";

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Document No.");
        OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        // gbedv EA -------------------------------------------------- BEGIN
        IF GenJnlLine."ID Applied-Entry" <> 0 THEN BEGIN
          OldVendLedgEntry.SETRANGE("Entry No.",GenJnlLine."ID Applied-Entry");
          OldVendLedgEntry.FINDFIRST;
        END ELSE BEGIN
        // gbedv EA -------------------------------------------------- END
        OldVendLedgEntry.FINDFIRST;
        OldVendLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        // gbedv EA -------------------------------------------------- BEGIN
        END;
        // gbedv EA -------------------------------------------------- END
        IF OldVendLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldVendLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",
          OldVendLedgEntry."Currency Code",
          GenJnlLine."Account Type"::Vendor,
          TRUE);
        TempOldVendLedgEntry := OldVendLedgEntry;
        TempOldVendLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        OldVendLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        // gbedv EA -------------------------------------------------- BEGIN
        IF GenJnlTemplate."Application Method" <> GenJnlTemplate."Application Method"::Extended THEN
        // gbedv EA -------------------------------------------------- END
        IF NOT(Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") THEN
          OldVendLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        IF Vend."Application Method" = Vend."Application Method"::"Apply to Oldest" THEN
          OldVendLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        //Check and Move Ledger Entries to Temp
        IF PurchSetup."Appln. between Currencies" = PurchSetup."Appln. between Currencies"::None THEN
          OldVendLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldVendLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",
                 OldVendLedgEntry."Currency Code",
                 GenJnlLine."Account Type"::Vendor,
                 FALSE)
            THEN BEGIN
              IF (OldVendLedgEntry."Posting Date" > ApplyingDate) AND (OldVendLedgEntry."Applies-to ID" <> '') THEN
                ApplyingDate := OldVendLedgEntry."Posting Date";
              TempOldVendLedgEntry := OldVendLedgEntry;
              TempOldVendLedgEntry.INSERT;
            END;
          UNTIL OldVendLedgEntry.NEXT=0;

        TempOldVendLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        IF TempOldVendLedgEntry.FIND('-') THEN BEGIN
          TempAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldVendLedgEntry.SETRANGE(Positive);
          TempOldVendLedgEntry.FIND('-');
          REPEAT
            TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
            IF NewCVLedgEntryBuf."Currency Code" <> TempOldVendLedgEntry."Currency Code" THEN BEGIN
              TempOldVendLedgEntry."Remaining Amount" :=
                ExchAmount(
                  TempOldVendLedgEntry."Remaining Amount",TempOldVendLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Remaining Pmt. Disc. Possible" :=
                ExchAmount(
                  TempOldVendLedgEntry."Remaining Pmt. Disc. Possible",TempOldVendLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Accepted Payment Tolerance" :=
                ExchAmount(
                  TempOldVendLedgEntry."Accepted Payment Tolerance",TempOldVendLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Amount to Apply" :=
                ExchAmount(
                  TempOldVendLedgEntry."Amount to Apply",TempOldVendLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");

            END;
            IF CheckCalcPmtDiscCVVend(NewCVLedgEntryBuf,TempOldVendLedgEntry,0,FALSE,FALSE)
            THEN
              TempOldVendLedgEntry."Remaining Amount" :=
                TempOldVendLedgEntry."Remaining Amount" - TempOldVendLedgEntry."Remaining Pmt. Disc. Possible";

            TempAmount := TempAmount + TempOldVendLedgEntry."Remaining Amount";

          UNTIL TempOldVendLedgEntry.NEXT = 0;
          TempOldVendLedgEntry.SETRANGE(Positive,TempAmount < 0);
        END ELSE
          TempOldVendLedgEntry.SETRANGE(Positive);

        IF NOT TempOldVendLedgEntry.FIND('-') THEN
          EXIT;
      END;
      GenJnlLine."Posting Date" := ApplyingDate;
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        TempOldVendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TransferVendLedgEntry(OldCVLedgEntryBuf,TempOldVendLedgEntry,TRUE);
        TempOldVendLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);

        OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
        OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

        // Management of posting in multiple currencies
        OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
        OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
        IF NewCVLedgEntryBuf."Currency Code" <> OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
          OldCVLedgEntryBuf2."Remaining Amount" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Remaining Amount",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Accepted Payment Tolerance" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Accepted Payment Tolerance",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Amount to Apply" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Amount to Apply",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
        END;

        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

        CalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo);

        CalcPmtDiscTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,NextTransactionNo,FirstNewVATEntryNo);

        CalcCurrencyApplnRounding(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
          GenJnlLine,ApplnRoundingPrecision);

        FindAmtForAppln(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
          AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision);

        CalcCurrencyUnrealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

        CalcCurrencyRealizedGainLoss(
          NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

        CalcCurrencyRealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

        CalcApplication(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
          GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
          NewCVLedgEntryBuf2,OldCVLedgEntryBuf3);

        CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2);

        CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

        // Update the Old Entry
        TransferVendLedgEntry(OldCVLedgEntryBuf,TempOldVendLedgEntry,FALSE);

        OldVendLedgEntry := TempOldVendLedgEntry;
        OldVendLedgEntry."Applies-to ID" := '';
        OldVendLedgEntry."Amount to Apply" := 0;
        OldVendLedgEntry.MODIFY;

        IF GLSetup."Unrealized VAT" OR
          (GLSetup."Prepayment Unrealized VAT" AND TempOldVendLedgEntry.Prepayment)
        THEN
          IF (TempOldVendLedgEntry."Document Type" IN
               [TempOldVendLedgEntry."Document Type"::Invoice,
                TempOldVendLedgEntry."Document Type"::"Credit Memo",
                TempOldVendLedgEntry."Document Type"::"Finance Charge Memo",
                TempOldVendLedgEntry."Document Type"::Reminder])
          THEN BEGIN
            IF TempOldVendLedgEntry."Currency Code" <> NewCVLedgEntryBuf."Currency Code" THEN BEGIN
              TempOldVendLedgEntry."Remaining Amount" :=
                ExchAmount(
                  TempOldVendLedgEntry."Remaining Amount",NewCVLedgEntryBuf."Currency Code",
                  TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Remaining Pmt. Disc. Possible" :=
                ExchAmount(
                  TempOldVendLedgEntry."Remaining Pmt. Disc. Possible",NewCVLedgEntryBuf."Currency Code",
                  TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Accepted Payment Tolerance" :=
                ExchAmount(
                  TempOldVendLedgEntry."Accepted Payment Tolerance",NewCVLedgEntryBuf."Currency Code",
                  TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Amount to Apply" :=
                ExchAmount(
                  TempOldVendLedgEntry."Amount to Apply",NewCVLedgEntryBuf."Currency Code",
                  TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");

            END;
            VendUnrealizedVAT(
              TempOldVendLedgEntry,
              ExchAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"));
          END;

        TempOldVendLedgEntry.DELETE;

        // Find the next old entry to apply to the new entry
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          Completed := TRUE
        ELSE
          IF TempOldVendLedgEntry.GETFILTER(TempOldVendLedgEntry.Positive) <> '' THEN BEGIN
            IF TempOldVendLedgEntry.NEXT = 1 THEN
              Completed := FALSE
            ELSE BEGIN
              TempOldVendLedgEntry.SETRANGE(Positive);
              TempOldVendLedgEntry.FIND('-');
              TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldVendLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            END
          END ELSE BEGIN
            IF NewCVLedgEntryBuf.Open THEN BEGIN
              Completed := TempOldVendLedgEntry.NEXT = 0;
            END ELSE
              Completed := TRUE;
          END;
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("Cust. Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)", Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF GLSetup."Unrealized VAT" OR
        (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF (NewCVLedgEntryBuf."Document Type" IN
             [NewCVLedgEntryBuf."Document Type"::Invoice,
              NewCVLedgEntryBuf."Document Type"::"Credit Memo",
              NewCVLedgEntryBuf."Document Type"::"Finance Charge Memo",
              NewCVLedgEntryBuf."Document Type"::Reminder]) AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        THEN BEGIN
          TransferVendLedgEntry(NewCVLedgEntryBuf,NewVendLedgEntry,FALSE);
          CheckUnrealizedVend := TRUE;
          UnrealizedVendLedgEntry := NewVendLedgEntry;
          UnrealizedRemainingAmountVend := -(NewRemainingAmtBeforeAppln - NewVendLedgEntry."Remaining Amount");
        END;
    END;

    PROCEDURE VendPostApplyVendLedgEntry@41(VAR GenJnlLinePostApply@1000 : Record 81;VAR VendLedgEntryPostApply@1001 : Record 25);
    VAR
      LedgEntryDim@1002 : Record 355;
      VendLedgEntry@1006 : Record 25;
      DtldVendLedgEntry@1003 : Record 380;
      DtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      GenJnlLine."Source Currency Code" := VendLedgEntryPostApply."Currency Code";
      GenJnlLine."Applies-to ID" := VendLedgEntryPostApply."Applies-to ID";
      VendLedgEntry.TRANSFERFIELDS(VendLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        LedgEntryDim.SETRANGE("Table ID",DATABASE::"Vendor Ledger Entry");
        LedgEntryDim.SETRANGE("Entry No.",VendLedgEntry."Entry No.");
        TempJnlLineDim.RESET;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);

        GenJnlCheckLine.RunCheck(GenJnlLine,TempJnlLineDim);

        InitCodeUnit;

        IF Vend."No." <> VendLedgEntry."Vendor No." THEN
          Vend.GET(VendLedgEntry."Vendor No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        VendPostingGr.TESTFIELD("Payables Account");

        //A/gob-bth/08.11.2012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          VendPostingGr.TESTFIELD("Account payables loans < 1");
          VendPostingGr.TESTFIELD("Account payables loans > 1");
        END;
        //E/gob-bth/08.11.2012/P0484


        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        // Post the application
        VendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TransferVendLedgEntry(CVLedgEntryBuf,VendLedgEntry,TRUE);
        ApplyVendLedgEntry(
          CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,GLSetup."Appln. Rounding Precision");
        TransferVendLedgEntry(CVLedgEntryBuf,VendLedgEntry,FALSE);
        VendLedgEntry.MODIFY;

        // Post Dtld vendor entry
        PostDtldVendLedgEntries(
          GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,NextTransactionNo,FALSE);
        FinishCodeunit;
      END;
    END;

    PROCEDURE UnapplyVendLedgEntry@64(GenJnlLine2@1003 : Record 81;DtldVendLedgEntry@1002 : Record 380);
    VAR
      DtldVendLedgEntry2@1012 : Record 380;
      NewDtldVendLedgEntry@1011 : Record 380;
      VendLedgEntry@1010 : Record 25;
      DtldCVLedgEntryBuf@1009 : Record 383;
      VATEntry@1008 : Record 254;
      VATPostingSetup@1006 : Record 325;
      LedgEntryDim@1005 : Record 355;
      GenPostingSetup@1014 : Record 252;
      VATEntryTemp@1023 : TEMPORARY Record 254;
      CurrencyLCY@1024 : Record 4;
      VATEntrySaved@1007 : Record 254;
      VatEntry2@1026 : Record 254;
      TotalAmountLCY@1004 : Decimal;
      TotalAmountAddCurr@1001 : Decimal;
      NextDtldLedgEntryEntryNo@1000 : Integer;
      UnapplyVATEntries@1013 : Boolean;
      DebitAddjustment@1018 : Decimal;
      DebitAddjustmentAddCurr@1017 : Decimal;
      CreditAddjustment@1016 : Decimal;
      CreditAddjustmentAddCurr@1015 : Decimal;
      PositiveLCYAppAmt@1022 : Decimal;
      NegativeLCYAppAmt@1021 : Decimal;
      PositiveACYAppAmt@1020 : Decimal;
      NegativeACYAppAmt@1019 : Decimal;
      VatBaseSum@1029 : ARRAY [2] OF Decimal;
      EntryNoBegin@1028 : ARRAY [2] OF Integer;
      i@1027 : Integer;
      TempVatEntryNo@1025 : Integer;
      "+++ OPplus +++"@5157804 : Integer;
      PmtDiscLCY@5157803 : Decimal;
      DtldVendLedgEntry3@5157802 : Record 380;
    BEGIN
      PositiveLCYAppAmt := 0;
      PositiveACYAppAmt := 0;
      NegativeLCYAppAmt := 0;
      NegativeACYAppAmt := 0;
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      InitCodeUnit;

      IF Vend."No." <> DtldVendLedgEntry."Vendor No." THEN
        Vend.GET(DtldVendLedgEntry."Vendor No.");
      Vend.CheckBlockedVendOnJnls(Vend,0,TRUE);

      VendPostingGr.GET(GenJnlLine."Posting Group");
      VendPostingGr.TESTFIELD("Payables Account");

      //A/gob-bth/08.11.2012/P0484
      IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
        VendPostingGr.TESTFIELD("Account payables loans < 1");
        VendPostingGr.TESTFIELD("Account payables loans > 1");
      END;
      //E/gob-bth/08.11.2012/P0484



      VATEntry.LOCKTABLE;
      DtldVendLedgEntry.LOCKTABLE;
      VendLedgEntry.LOCKTABLE;

      DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::Application);

      DtldVendLedgEntry2.RESET;
      DtldVendLedgEntry2.FINDLAST;
      NextDtldLedgEntryEntryNo := DtldVendLedgEntry2."Entry No." + 1;
      DtldVendLedgEntry2.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
      DtldVendLedgEntry2.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      DtldVendLedgEntry2.SETRANGE("Vendor No.",DtldVendLedgEntry."Vendor No.");
      DtldVendLedgEntry2.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
      DtldVendLedgEntry2.FINDSET;
      UnapplyVATEntries := FALSE;
      REPEAT
        IF (DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::"Payment Discount (VAT Adjustment)") OR
           (DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::"Payment Tolerance (VAT Adjustment)") OR
           (DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)")
        THEN
          UnapplyVATEntries := TRUE
      UNTIL DtldVendLedgEntry2.NEXT = 0;

      TempVatEntryNo := 1;
      VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
      VATEntry.SETRANGE(Type,VATEntry.Type::Purchase);
      VATEntry.SETRANGE("Bill-to/Pay-to No.",DtldVendLedgEntry."Vendor No.");
      VATEntry.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      IF VATEntry.FINDSET THEN BEGIN
        VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
        IF (VATPostingSetup."Adjust for Payment Discount") AND
           (VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type" :: "Reverse Charge VAT") AND
           (VATEntry."Document Type" <> VATEntry."Document Type" :: "Credit Memo") AND
           (VATEntry."Document Type" <> VATEntry."Document Type" :: Invoice)
        THEN
          UnapplyVATEntries := TRUE;
        REPEAT
          IF UnapplyVATEntries OR (VATEntry."Unrealized VAT Entry No." <> 0) THEN BEGIN
            TempVatEntry := VATEntry;
            TempVatEntry."Entry No." := TempVatEntryNo;
            TempVatEntryNo := TempVatEntryNo + 1;
            TempVatEntry."Closed by Entry No." := 0;
            TempVatEntry.Closed := FALSE;
            TempVatEntry.Base := -VATEntry.Base;
            TempVatEntry.Amount := -VATEntry.Amount;
            TempVatEntry."Unrealized Amount" := -VATEntry."Unrealized Amount";
            TempVatEntry."Unrealized Base" := -VATEntry."Unrealized Base";
            TempVatEntry."Remaining Unrealized Amount" := -VATEntry."Remaining Unrealized Amount";
            TempVatEntry."Remaining Unrealized Base" := -VATEntry."Remaining Unrealized Base";
            TempVatEntry."Additional-Currency Amount" := -VATEntry."Additional-Currency Amount";
            TempVatEntry."Additional-Currency Base" := -VATEntry."Additional-Currency Base";
            TempVatEntry."Add.-Currency Unrealized Amt." := -VATEntry."Add.-Currency Unrealized Amt.";
            TempVatEntry."Add.-Currency Unrealized Base" := -VATEntry."Add.-Currency Unrealized Base";
            TempVatEntry."Add.-Curr. Rem. Unreal. Amount" := -VATEntry."Add.-Curr. Rem. Unreal. Amount";
            TempVatEntry."Add.-Curr. Rem. Unreal. Base" := -VATEntry."Add.-Curr. Rem. Unreal. Base";
            TempVatEntry."Posting Date" := GenJnlLine2."Posting Date";
            TempVatEntry."Document No." := GenJnlLine2."Document No.";
            TempVatEntry."User ID" := USERID;
            TempVatEntry."Transaction No." := NextTransactionNo;
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              FinanceTools.UpdateNewVATEntry(TempVatEntry,VATEntry);
            // gbedv DC -------------------------------------------------- END
            TempVatEntry.INSERT;
            IF VATEntry."Unrealized VAT Entry No." <> 0 THEN BEGIN
              VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
              IF VATPostingSetup."VAT Calculation Type" IN
                 [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                  VATPostingSetup."VAT Calculation Type"::"Full VAT"]
              THEN BEGIN
                VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                VATPostingSetup.TESTFIELD("Purchase VAT Account");
                PostUnrealVATByUnapply(
                  VATPostingSetup."Purch. VAT Unreal. Account",
                  VATPostingSetup."Purchase VAT Account",
                  VATEntry,TempVatEntry);
              END ELSE
                IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
                  VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                  VATPostingSetup.TESTFIELD("Purchase VAT Account");
                  PostUnrealVATByUnapply(
                    VATPostingSetup."Purch. VAT Unreal. Account",
                    VATPostingSetup."Purchase VAT Account",
                    VATEntry,TempVatEntry);

                  VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Acc.");
                  VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Unreal. Acc.");

                  InitGLEntry(VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.",-VATEntry.Amount,0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" :=
                    CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount);
                  InsertGLEntry(TRUE);

                  InitGLEntry(VATPostingSetup."Reverse Chrg. VAT Acc.",VATEntry.Amount,0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" :=
                    CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
                  InsertGLEntry(TRUE)
                END ELSE BEGIN
                  VATEntry.TESTFIELD("Tax Jurisdiction Code");
                  TaxJurisdiction.GET(VATEntry."Tax Jurisdiction Code");
                  TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                  TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                  PostUnrealVATByUnapply(
                    TaxJurisdiction."Unreal. Tax Acc. (Purchases)",
                    TaxJurisdiction."Tax Account (Purchases)",
                    VATEntry,TempVatEntry);
                END;
              //A/kb2514417/110213
              END;
              //E/kb2514417/110213
              VatEntry2 := TempVatEntry;
              VatEntry2."Entry No." := NextVATEntryNo;
              NextVATEntryNo := NextVATEntryNo + 1;
              VatEntry2.INSERT;
              TempVatEntry.DELETE;
            //A/kb2514417/110213
            //END;
            //E/kb2514417/110213
            IF (VATPostingSetup."Adjust for Payment Discount") AND
               (VATPostingSetup."VAT Calculation Type" =
                 VATPostingSetup."VAT Calculation Type" :: "Reverse Charge VAT") AND
               (VATEntry."Unrealized VAT Entry No." = 0) AND
               (VATEntry."Document Type" <> VATEntry."Document Type" :: "Credit Memo") AND
               (VATEntry."Document Type" <> VATEntry."Document Type" :: Invoice)
            THEN BEGIN
              VATPostingSetup.TESTFIELD("Purchase VAT Account");
              GenPostingSetup.GET(VATEntry."Gen. Bus. Posting Group",VATEntry."Gen. Prod. Posting Group");
              PostPmtDiscountVATByUnapply(
                VATPostingSetup."Reverse Chrg. VAT Acc.",
                VATPostingSetup."Purchase VAT Account",
                VATEntry);
            END;
          END;
        UNTIL VATEntry.NEXT = 0;
      END;

      DtldVendLedgEntry2.FINDSET;
      REPEAT
        IF (DtldVendLedgEntry2."Entry Type" IN
            [DtldVendLedgEntry2."Entry Type"::"Payment Discount (VAT Excl.)",
             DtldVendLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)",
             DtldVendLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"])
        THEN BEGIN
          TempVatEntry.RESET;
          TempVatEntry.SETRANGE("Entry No.",0,999999);
          TempVatEntry.SETRANGE("Gen. Bus. Posting Group",DtldVendLedgEntry2."Gen. Bus. Posting Group");
          TempVatEntry.SETRANGE("Gen. Prod. Posting Group",DtldVendLedgEntry2."Gen. Prod. Posting Group");
          TempVatEntry.SETRANGE("VAT Bus. Posting Group",DtldVendLedgEntry2."VAT Bus. Posting Group");
          TempVatEntry.SETRANGE("VAT Prod. Posting Group",DtldVendLedgEntry2."VAT Prod. Posting Group");
          IF TempVatEntry.FINDSET THEN BEGIN
            REPEAT
              CASE TRUE OF
                VatBaseSum[2] + TempVatEntry.Base = DtldVendLedgEntry2."Amount (LCY)":
                  i := 3;
                VatBaseSum[1] + TempVatEntry.Base = DtldVendLedgEntry2."Amount (LCY)":
                  i := 2;
                TempVatEntry.Base = DtldVendLedgEntry2."Amount (LCY)":
                  i := 1;
                ELSE
                  i := 0;
              END;
              IF i > 0 THEN BEGIN
                TempVatEntry.RESET;
                //A/13.10.14/gob-dah/H1614 KB2458018
                {
                IF i > 1 THEN
                  TempVatEntry.SETRANGE("Entry No.",EntryNoBegin[i - 1],TempVatEntry."Entry No.")
                ELSE
                  TempVatEntry.SETRANGE("Entry No.",TempVatEntry."Entry No.");
                }
                IF i > 1 THEN BEGIN
                  IF EntryNoBegin[i - 1] < TempVatEntry."Entry No." THEN
                    TempVatEntry.SETRANGE("Entry No.",EntryNoBegin[i - 1],TempVatEntry."Entry No.")
                  ELSE
                    TempVatEntry.SETRANGE("Entry No.",TempVatEntry."Entry No.",EntryNoBegin[i - 1]);
                END ELSE
                  TempVatEntry.SETRANGE("Entry No.",TempVatEntry."Entry No.");
                //E/13.10.14/gob-dah/H1614 KB2458018
                TempVatEntry.FINDSET;
                REPEAT
                  VATEntrySaved := TempVatEntry;
                  CASE DtldVendLedgEntry2."Entry Type" OF
                    DtldVendLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)":
                      TempVatEntry.RENAME(TempVatEntry."Entry No." + 2000000);
                    DtldVendLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                      TempVatEntry.RENAME(TempVatEntry."Entry No." + 1000000);
                  END;
                  TempVatEntry := VATEntrySaved;
                UNTIL TempVatEntry.NEXT = 0;
                FOR i := 1 TO 2 DO BEGIN
                  VatBaseSum[i] := 0;
                  EntryNoBegin[i] := 0;
                END;
                TempVatEntry.SETRANGE("Entry No.",0,999999);
              END ELSE BEGIN
                VatBaseSum[2] := VatBaseSum[1] + TempVatEntry.Base;
                VatBaseSum[1] := TempVatEntry.Base;
                EntryNoBegin[2] := EntryNoBegin[1];
                EntryNoBegin[1] := TempVatEntry."Entry No.";
              END;
            UNTIL TempVatEntry.NEXT = 0;
          END;
        END;
      UNTIL DtldVendLedgEntry2.NEXT = 0;

      DtldVendLedgEntry2.FINDSET;
      LedgEntryDim.SETRANGE("Table ID",DATABASE::"Vendor Ledger Entry");
      LedgEntryDim.SETRANGE("Entry No.",DtldVendLedgEntry2."Applied Vend. Ledger Entry No.");
      TempJnlLineDim.RESET;
      TempJnlLineDim.DELETEALL;
      DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);
      IF TempJnlLineDim.GET(DATABASE::"Vendor Ledger Entry",'','',0,0,GLSetup."Global Dimension 1 Code") THEN
        GenJnlLine."Shortcut Dimension 1 Code" := TempJnlLineDim."Dimension Value Code"
      ELSE
        GenJnlLine."Shortcut Dimension 1 Code" := '';
      IF TempJnlLineDim.GET(DATABASE::"Vendor Ledger Entry",'','',0,0,GLSetup."Global Dimension 2 Code") THEN
        GenJnlLine."Shortcut Dimension 2 Code" := TempJnlLineDim."Dimension Value Code"
      ELSE
        GenJnlLine."Shortcut Dimension 2 Code" := '';

      REPEAT
        DtldVendLedgEntry2.TESTFIELD(Unapplied,FALSE);

        NewDtldVendLedgEntry := DtldVendLedgEntry2;
        NewDtldVendLedgEntry."Entry No." := NextDtldLedgEntryEntryNo;
        NewDtldVendLedgEntry."Posting Date" := GenJnlLine."Posting Date";
        NewDtldVendLedgEntry."Transaction No." := NextTransactionNo;
        NewDtldVendLedgEntry.Amount := -DtldVendLedgEntry2.Amount;
        NewDtldVendLedgEntry."Amount (LCY)" := -DtldVendLedgEntry2."Amount (LCY)";
        NewDtldVendLedgEntry."Debit Amount" := -DtldVendLedgEntry2."Debit Amount";
        NewDtldVendLedgEntry."Credit Amount" := -DtldVendLedgEntry2."Credit Amount";
        NewDtldVendLedgEntry."Debit Amount (LCY)" := -DtldVendLedgEntry2."Debit Amount (LCY)";
        NewDtldVendLedgEntry."Credit Amount (LCY)" := -DtldVendLedgEntry2."Credit Amount (LCY)";
        NewDtldVendLedgEntry.Unapplied := TRUE;
        NewDtldVendLedgEntry."Unapplied by Entry No." := DtldVendLedgEntry2."Entry No.";
        NewDtldVendLedgEntry."Document No." := GenJnlLine."Document No.";
        NewDtldVendLedgEntry."Source Code" := GenJnlLine."Source Code";
        NewDtldVendLedgEntry."User ID" := USERID;
        // gbedv DC -------------------------------------------------- BEGIN
        IF OPplusEnabled THEN
          FinanceTools.UpdateNewDtldVendLedgEntry(NewDtldVendLedgEntry,DtldVendLedgEntry2);
        // gbedv DC -------------------------------------------------- END
        NewDtldVendLedgEntry.INSERT;
        NextDtldLedgEntryEntryNo := NextDtldLedgEntryEntryNo + 1;

        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldVendLedgEntry);
        GenJnlLine."Source Currency Code" := DtldVendLedgEntry2."Currency Code";
        IF GLSetup."Additional Reporting Currency" <> DtldCVLedgEntryBuf."Currency Code" THEN
          DtldCVLedgEntryBuf."Additional-Currency Amount" :=
            CalcAddCurrForUnapplication(DtldCVLedgEntryBuf."Posting Date",DtldCVLedgEntryBuf."Amount (LCY)")
        ELSE
          IF GLSetup."Additional Reporting Currency" <> '' THEN
            DtldCVLedgEntryBuf."Additional-Currency Amount" := DtldCVLedgEntryBuf.Amount;
        CurrencyLCY.InitRoundingPrecision;

        IF DtldVendLedgEntry2."Entry Type" IN [
          DtldVendLedgEntry2."Entry Type"::"Payment Discount (VAT Excl.)",
          DtldVendLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)",
          DtldVendLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"]
        THEN BEGIN
          VATEntryTemp.SETRANGE("VAT Bus. Posting Group",DtldVendLedgEntry2."VAT Bus. Posting Group");
          VATEntryTemp.SETRANGE("VAT Prod. Posting Group",DtldVendLedgEntry2."VAT Prod. Posting Group");
          //A/13.10.14/gob-dah/H1614 KB2458018
          VATEntryTemp.SETRANGE("Gen. Prod. Posting Group",DtldVendLedgEntry2."Gen. Prod. Posting Group");
          //E/13.10.14/gob-dah/H1614 KB2458018
          IF NOT VATEntryTemp.FINDFIRST THEN BEGIN
            VATEntryTemp.RESET;
            IF VATEntryTemp.FINDLAST THEN
              VATEntryTemp."Entry No." := VATEntryTemp."Entry No." + 1
            ELSE
              VATEntryTemp."Entry No." := 1;
            VATEntryTemp.INIT;
            VATEntryTemp."VAT Bus. Posting Group" := DtldVendLedgEntry2."VAT Bus. Posting Group";
            VATEntryTemp."VAT Prod. Posting Group" := DtldVendLedgEntry2."VAT Prod. Posting Group";
            //A/13.10.14/gob-dah/H1614 KB2458018
            VATEntryTemp."Gen. Prod. Posting Group" := DtldVendLedgEntry2."Gen. Prod. Posting Group";
            //E/13.10.14/gob-dah/H1614 KB2458018
            VATEntry.SETRANGE("Transaction No.",DtldVendLedgEntry2."Transaction No.");
            VATEntry.SETRANGE("VAT Bus. Posting Group",DtldVendLedgEntry2."VAT Bus. Posting Group");
            VATEntry.SETRANGE("VAT Prod. Posting Group",DtldVendLedgEntry2."VAT Prod. Posting Group");
            //A/13.10.14/gob-dah/H1614 KB2458018
            VATEntry.SETRANGE("Gen. Prod. Posting Group",DtldVendLedgEntry2."Gen. Prod. Posting Group");
            //E/13.10.14/gob-dah/H1614 KB2458018
            IF VATEntry.FINDSET THEN
              REPEAT
                IF VATEntry."Unrealized VAT Entry No." = 0 THEN BEGIN
                  VATEntryTemp.Base := VATEntryTemp.Base + VATEntry.Base;
                  VATEntryTemp.Amount := VATEntryTemp.Amount + VATEntry.Amount;
                END;
              UNTIL VATEntry.NEXT = 0;
            CLEAR(VATEntry);
            VATEntryTemp.INSERT;
          END;
          IF DtldCVLedgEntryBuf."Amount (LCY)" = VATEntryTemp.Base THEN BEGIN
            DtldCVLedgEntryBuf."VAT Amount (LCY)" := VATEntryTemp.Amount;
            VATEntryTemp.DELETE;
          END ELSE BEGIN
            DtldCVLedgEntryBuf."VAT Amount (LCY)" := ROUND(
              VATEntryTemp.Amount * DtldCVLedgEntryBuf."Amount (LCY)" / VATEntryTemp.Base,
              CurrencyLCY."Amount Rounding Precision",
              CurrencyLCY.VATRoundingDirection);
            VATEntryTemp.Base := VATEntryTemp.Base - DtldCVLedgEntryBuf."Amount (LCY)";
            VATEntryTemp.Amount := VATEntryTemp.Amount - DtldCVLedgEntryBuf."VAT Amount (LCY)";
            VATEntryTemp.MODIFY;
          END;
        END;
        TotalAmountLCY := TotalAmountLCY + DtldCVLedgEntryBuf."Amount (LCY)";
        TotalAmountAddCurr := TotalAmountAddCurr + DtldCVLedgEntryBuf."Additional-Currency Amount";
        IF DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::Application THEN BEGIN
          IF DtldCVLedgEntryBuf."Amount (LCY)" >= 0 THEN BEGIN
            PositiveLCYAppAmt := PositiveLCYAppAmt + DtldCVLedgEntryBuf."Amount (LCY)";
            PositiveACYAppAmt :=
              PositiveACYAppAmt + DtldCVLedgEntryBuf."Additional-Currency Amount";
          END ELSE BEGIN
            NegativeLCYAppAmt := NegativeLCYAppAmt + DtldCVLedgEntryBuf."Amount (LCY)";
            NegativeACYAppAmt :=
              NegativeACYAppAmt + DtldCVLedgEntryBuf."Additional-Currency Amount";
          END;
        END;

        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
          DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
          DtldCVLedgEntryBuf."Entry Type"::Application]) THEN
          CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
            CreditAddjustment,CreditAddjustmentAddCurr,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");
        AutoEntrForDtldVendLedgEntries(DtldCVLedgEntryBuf,DtldVendLedgEntry2."Transaction No.");

        DtldVendLedgEntry2.Unapplied := TRUE;
        DtldVendLedgEntry2."Unapplied by Entry No." := NewDtldVendLedgEntry."Entry No.";
        DtldVendLedgEntry2.MODIFY;

        // gbedv EA -------------------------------------------------- BEGIN
        IF (DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::Application) THEN BEGIN
          DtldVendLedgEntry3.RESET;
          DtldVendLedgEntry3.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
          DtldVendLedgEntry3.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
          DtldVendLedgEntry3.SETRANGE("Vendor No.",DtldVendLedgEntry."Vendor No.");
          DtldVendLedgEntry3.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
          DtldVendLedgEntry3.SETRANGE("Vendor Ledger Entry No.",DtldVendLedgEntry2."Applied Vend. Ledger Entry No.");
          DtldVendLedgEntry3.FINDSET;
          PmtDiscLCY := 0;
          REPEAT
            IF DtldVendLedgEntry3."Entry Type" IN
              [DtldVendLedgEntry3."Entry Type"::"Payment Discount (VAT Excl.)",
               DtldVendLedgEntry3."Entry Type"::"Payment Discount (VAT Adjustment)"]
            THEN
              PmtDiscLCY := PmtDiscLCY + DtldVendLedgEntry3."Amount (LCY)";
          UNTIL DtldVendLedgEntry3.NEXT = 0;
        END;
        // gbedv EA -------------------------------------------------- END
        IF DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::Application THEN BEGIN
          VendLedgEntry.GET(DtldVendLedgEntry2."Vendor Ledger Entry No.");
          VendLedgEntry."Remaining Pmt. Disc. Possible" := DtldVendLedgEntry2."Remaining Pmt. Disc. Possible";
          VendLedgEntry."Max. Payment Tolerance" := DtldVendLedgEntry2."Max. Payment Tolerance";
          VendLedgEntry."Accepted Payment Tolerance" := 0;
          // gbedv EA -------------------------------------------------- BEGIN
          IF (VendLedgEntry."Pmt. Disc. Rcd.(LCY)" <> 0) AND (PmtDiscLCY <> 0) THEN
            VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := VendLedgEntry."Pmt. Disc. Rcd.(LCY)" + PmtDiscLCY;
          // gbedv EA -------------------------------------------------- END
          IF NOT VendLedgEntry.Open THEN BEGIN
            VendLedgEntry.Open := TRUE;
            VendLedgEntry."Closed by Entry No." := 0;
            VendLedgEntry."Closed at Date" := 0D;
            VendLedgEntry."Closed by Amount" := 0;
            VendLedgEntry."Closed by Amount (LCY)" := 0;
            VendLedgEntry."Closed by Currency Code" := '';
            VendLedgEntry."Closed by Currency Amount" := 0;
            // gbedv EA -------------------------------------------------- BEGIN
            // VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
            IF VendLedgEntry."Pmt. Disc. Rcd.(LCY)" <> 0 THEN BEGIN
              VendLedgEntry.CALCFIELDS("Original Amt. (LCY)","Remaining Amt. (LCY)");
              IF (VendLedgEntry."Pmt. Disc. Rcd.(LCY)" * VendLedgEntry."Original Amt. (LCY)" < 0) OR
                 (VendLedgEntry."Original Amt. (LCY)" = VendLedgEntry."Remaining Amt. (LCY)")
              THEN
                VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
            END;
            // gbedv EA -------------------------------------------------- END
            VendLedgEntry."Pmt. Tolerance (LCY)" := 0;
          END;
          VendLedgEntry.MODIFY;
        END;
      UNTIL DtldVendLedgEntry2.NEXT = 0;
      // gbedv EA -------------------------------------------------- BEGIN
      // wenn Ausgleich Skontoausbuchung aufgehoben wird
      VendLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
      IF VendLedgEntry."Remaining Amt. (LCY)" = 0 THEN BEGIN
        VendLedgEntry.Open := FALSE;
        VendLedgEntry.MODIFY;
      END;
      // gbedv EA -------------------------------------------------- END

      IF (TotalAmountLCY <> 0) OR
         (TotalAmountAddCurr <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
      THEN BEGIN
        //A/gob-bth/29112012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          Darlehen.GET(GenJnlLine.Darlehen);
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
            HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
              TotalAmountLCY,TotalAmountAddCurr,VendPostingGr."Account payables loans < 1");
          END;
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
            HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
              TotalAmountLCY,TotalAmountAddCurr,VendPostingGr."Account payables loans > 1");
          END;
        END ELSE
        //E/gob-bth/29112012/P0484
          HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
            TotalAmountLCY,TotalAmountAddCurr,VendPostingGr."Payables Account");
        InsertGLEntry(TRUE);
      END;

      IF NOT GLEntryTmp.FINDFIRST THEN BEGIN
        //A/gob-bth/29112012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          Darlehen.GET(GenJnlLine.Darlehen);
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
            InitGLEntry(VendPostingGr."Account payables loans < 1",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
          END;
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
            InitGLEntry(VendPostingGr."Account payables loans > 1",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
          END;
        END ELSE
        //E/gob-bth/29112012/P0484
          InitGLEntry(VendPostingGr."Payables Account",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
        InsertGLEntry(FALSE);
        //A/gob-bth/29112012/P0484
        IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
          Darlehen.GET(GenJnlLine.Darlehen);
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
            InitGLEntry(VendPostingGr."Account payables loans < 1",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
          END;
          IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
            InitGLEntry(VendPostingGr."Account payables loans > 1",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
          END;
        END ELSE
        //E/gob-bth/29112012/P0484
          InitGLEntry(VendPostingGr."Payables Account",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
        InsertGLEntry(FALSE);
      END;

      FinishCodeunit;
    END;

    PROCEDURE TransferVendLedgEntry@5(VAR CVLedgEntryBuf@1000 : Record 382;VAR VendLedgEntry@1001 : Record 25;VendToCV@1002 : Boolean);
    BEGIN
      IF VendToCV THEN BEGIN
        CVLedgEntryBuf."Entry No." := VendLedgEntry."Entry No.";
        CVLedgEntryBuf."CV No." := VendLedgEntry."Vendor No.";
        CVLedgEntryBuf."Posting Date" := VendLedgEntry."Posting Date";
        CVLedgEntryBuf."Document Type" := VendLedgEntry."Document Type";
        CVLedgEntryBuf."Document No." := VendLedgEntry."Document No.";
        CVLedgEntryBuf.Description := VendLedgEntry.Description;
        CVLedgEntryBuf."Currency Code" := VendLedgEntry."Currency Code";
        CVLedgEntryBuf.Amount := VendLedgEntry.Amount;
        CVLedgEntryBuf."Remaining Amount" := VendLedgEntry."Remaining Amount";
        CVLedgEntryBuf."Original Amount" := VendLedgEntry."Original Amount";
        CVLedgEntryBuf."Original Amt. (LCY)" := VendLedgEntry."Original Amt. (LCY)";
        CVLedgEntryBuf."Remaining Amt. (LCY)" := VendLedgEntry."Remaining Amt. (LCY)";
        CVLedgEntryBuf."Amount (LCY)" := VendLedgEntry."Amount (LCY)";
        CVLedgEntryBuf."Sales/Purchase (LCY)" := VendLedgEntry."Purchase (LCY)";
        CVLedgEntryBuf."Inv. Discount (LCY)" := VendLedgEntry."Inv. Discount (LCY)";
        CVLedgEntryBuf."Bill-to/Pay-to CV No." := VendLedgEntry."Buy-from Vendor No.";
        CVLedgEntryBuf."CV Posting Group" := VendLedgEntry."Vendor Posting Group";
        CVLedgEntryBuf."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
        CVLedgEntryBuf."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
        CVLedgEntryBuf."Salesperson Code" := VendLedgEntry."Purchaser Code";
        CVLedgEntryBuf."User ID" := VendLedgEntry."User ID";
        CVLedgEntryBuf."Source Code" := VendLedgEntry."Source Code";
        CVLedgEntryBuf."On Hold" := VendLedgEntry."On Hold";
        CVLedgEntryBuf."Applies-to Doc. Type" := VendLedgEntry."Applies-to Doc. Type";
        CVLedgEntryBuf."Applies-to Doc. No." := VendLedgEntry."Applies-to Doc. No.";
        CVLedgEntryBuf.Open := VendLedgEntry.Open;
        CVLedgEntryBuf."Due Date" := VendLedgEntry."Due Date" ;
        CVLedgEntryBuf."Pmt. Discount Date" := VendLedgEntry."Pmt. Discount Date";
        CVLedgEntryBuf."Original Pmt. Disc. Possible" := VendLedgEntry."Original Pmt. Disc. Possible";
        CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := VendLedgEntry."Remaining Pmt. Disc. Possible";
        CVLedgEntryBuf."Pmt. Disc. Given (LCY)" := VendLedgEntry."Pmt. Disc. Rcd.(LCY)";
        CVLedgEntryBuf.Positive := VendLedgEntry.Positive;
        CVLedgEntryBuf."Closed by Entry No." := VendLedgEntry."Closed by Entry No.";
        CVLedgEntryBuf."Closed at Date" := VendLedgEntry."Closed at Date";
        CVLedgEntryBuf."Closed by Amount" := VendLedgEntry."Closed by Amount";
        CVLedgEntryBuf."Applies-to ID" := VendLedgEntry."Applies-to ID";
        CVLedgEntryBuf."Journal Batch Name" := VendLedgEntry."Journal Batch Name";
        CVLedgEntryBuf."Reason Code" := VendLedgEntry."Reason Code";
        CVLedgEntryBuf."Bal. Account Type" := VendLedgEntry."Bal. Account Type";
        CVLedgEntryBuf."Bal. Account No." := VendLedgEntry."Bal. Account No.";
        CVLedgEntryBuf."Transaction No." := VendLedgEntry."Transaction No.";
        CVLedgEntryBuf."Closed by Amount (LCY)" := VendLedgEntry."Closed by Amount (LCY)";
        CVLedgEntryBuf."Debit Amount" := VendLedgEntry."Debit Amount";
        CVLedgEntryBuf."Credit Amount" := VendLedgEntry."Credit Amount";
        CVLedgEntryBuf."Debit Amount (LCY)" := VendLedgEntry."Debit Amount (LCY)";
        CVLedgEntryBuf."Credit Amount (LCY)" := VendLedgEntry."Credit Amount (LCY)";
        CVLedgEntryBuf."Document Date" := VendLedgEntry."Document Date";
        CVLedgEntryBuf."External Document No." := VendLedgEntry."External Document No.";
        CVLedgEntryBuf."No. Series" := VendLedgEntry."No. Series";
        CVLedgEntryBuf."Closed by Currency Code" := VendLedgEntry."Closed by Currency Code";
        CVLedgEntryBuf."Closed by Currency Amount" := VendLedgEntry."Closed by Currency Amount";
        CVLedgEntryBuf."Adjusted Currency Factor" := VendLedgEntry."Adjusted Currency Factor";
        CVLedgEntryBuf."Original Currency Factor" := VendLedgEntry."Original Currency Factor";
        CVLedgEntryBuf."Pmt. Disc. Tolerance Date" := VendLedgEntry."Pmt. Disc. Tolerance Date";
        CVLedgEntryBuf."Max. Payment Tolerance" := VendLedgEntry."Max. Payment Tolerance";
        CVLedgEntryBuf."Accepted Payment Tolerance" := VendLedgEntry."Accepted Payment Tolerance";
        CVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := VendLedgEntry."Accepted Pmt. Disc. Tolerance";
        CVLedgEntryBuf."Amount to Apply" := VendLedgEntry."Amount to Apply";
        CVLedgEntryBuf.Prepayment := VendLedgEntry.Prepayment;
      END ELSE BEGIN
        VendLedgEntry."Entry No." := CVLedgEntryBuf."Entry No.";
        VendLedgEntry."Vendor No." := CVLedgEntryBuf."CV No.";
        VendLedgEntry."Posting Date" := CVLedgEntryBuf."Posting Date";
        VendLedgEntry."Document Type" := CVLedgEntryBuf."Document Type";
        VendLedgEntry."Document No." := CVLedgEntryBuf."Document No.";
        VendLedgEntry.Description := CVLedgEntryBuf.Description;
        VendLedgEntry."Currency Code" := CVLedgEntryBuf."Currency Code";
        VendLedgEntry.Amount := CVLedgEntryBuf.Amount;
        VendLedgEntry."Remaining Amount" := CVLedgEntryBuf."Remaining Amount";
        VendLedgEntry."Original Amount" := CVLedgEntryBuf."Original Amount";
        VendLedgEntry."Original Amt. (LCY)" := CVLedgEntryBuf."Original Amt. (LCY)";
        VendLedgEntry."Remaining Amt. (LCY)" := CVLedgEntryBuf."Remaining Amt. (LCY)";
        VendLedgEntry."Amount (LCY)" := CVLedgEntryBuf."Amount (LCY)";
        VendLedgEntry."Purchase (LCY)" := CVLedgEntryBuf."Sales/Purchase (LCY)";
        VendLedgEntry."Inv. Discount (LCY)" := CVLedgEntryBuf."Inv. Discount (LCY)";
        VendLedgEntry."Buy-from Vendor No." := CVLedgEntryBuf."Bill-to/Pay-to CV No.";
        VendLedgEntry."Vendor Posting Group" := CVLedgEntryBuf."CV Posting Group";
        VendLedgEntry."Global Dimension 1 Code" := CVLedgEntryBuf."Global Dimension 1 Code";
        VendLedgEntry."Global Dimension 2 Code" := CVLedgEntryBuf."Global Dimension 2 Code";
        VendLedgEntry."Purchaser Code" := CVLedgEntryBuf."Salesperson Code";
        VendLedgEntry."User ID" := CVLedgEntryBuf."User ID";
        VendLedgEntry."Source Code" := CVLedgEntryBuf."Source Code";
        VendLedgEntry."On Hold" := CVLedgEntryBuf."On Hold";
        VendLedgEntry."Applies-to Doc. Type" := CVLedgEntryBuf."Applies-to Doc. Type";
        VendLedgEntry."Applies-to Doc. No." := CVLedgEntryBuf."Applies-to Doc. No.";
        VendLedgEntry.Open := CVLedgEntryBuf.Open;
        VendLedgEntry."Due Date" := CVLedgEntryBuf."Due Date" ;
        VendLedgEntry."Pmt. Discount Date" := CVLedgEntryBuf."Pmt. Discount Date";
        VendLedgEntry."Original Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";
        VendLedgEntry."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Remaining Pmt. Disc. Possible";
        VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := CVLedgEntryBuf."Pmt. Disc. Given (LCY)";
        VendLedgEntry.Positive := CVLedgEntryBuf.Positive;
        VendLedgEntry."Closed by Entry No." := CVLedgEntryBuf."Closed by Entry No.";
        VendLedgEntry."Closed at Date" := CVLedgEntryBuf."Closed at Date";
        VendLedgEntry."Closed by Amount" := CVLedgEntryBuf."Closed by Amount";
        VendLedgEntry."Applies-to ID" := CVLedgEntryBuf."Applies-to ID";
        VendLedgEntry."Journal Batch Name" := CVLedgEntryBuf."Journal Batch Name";
        VendLedgEntry."Reason Code" := CVLedgEntryBuf."Reason Code";
        VendLedgEntry."Bal. Account Type" := CVLedgEntryBuf."Bal. Account Type";
        VendLedgEntry."Bal. Account No." := CVLedgEntryBuf."Bal. Account No.";
        VendLedgEntry."Transaction No." := CVLedgEntryBuf."Transaction No.";
        VendLedgEntry."Closed by Amount (LCY)" := CVLedgEntryBuf."Closed by Amount (LCY)";
        VendLedgEntry."Debit Amount" := CVLedgEntryBuf."Debit Amount";
        VendLedgEntry."Credit Amount" := CVLedgEntryBuf."Credit Amount";
        VendLedgEntry."Debit Amount (LCY)" := CVLedgEntryBuf."Debit Amount (LCY)";
        VendLedgEntry."Credit Amount (LCY)" := CVLedgEntryBuf."Credit Amount (LCY)";
        VendLedgEntry."Document Date" := CVLedgEntryBuf."Document Date";
        VendLedgEntry."External Document No." := CVLedgEntryBuf."External Document No.";
        VendLedgEntry."No. Series" := CVLedgEntryBuf."No. Series";
        VendLedgEntry."Closed by Currency Code" := CVLedgEntryBuf."Closed by Currency Code";
        VendLedgEntry."Closed by Currency Amount" := CVLedgEntryBuf."Closed by Currency Amount";
        VendLedgEntry."Adjusted Currency Factor" := CVLedgEntryBuf."Adjusted Currency Factor";
        VendLedgEntry."Original Currency Factor" := CVLedgEntryBuf."Original Currency Factor";
        VendLedgEntry."Pmt. Disc. Tolerance Date" := CVLedgEntryBuf."Pmt. Disc. Tolerance Date";
        VendLedgEntry."Max. Payment Tolerance" := CVLedgEntryBuf."Max. Payment Tolerance";
        VendLedgEntry."Accepted Payment Tolerance" := CVLedgEntryBuf."Accepted Payment Tolerance";
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := CVLedgEntryBuf."Accepted Pmt. Disc. Tolerance";
        VendLedgEntry."Pmt. Tolerance (LCY)" := CVLedgEntryBuf."Pmt. Tolerance (LCY)";
        VendLedgEntry."Amount to Apply" := CVLedgEntryBuf."Amount to Apply";
        VendLedgEntry.Prepayment := CVLedgEntryBuf.Prepayment;
      END;
    END;

    PROCEDURE PostDtldVendLedgEntries@32(GenJnlLine2@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;VendPostingGr@1002 : Record 93;NextTransactionNo@1003 : Integer;VendLedgEntryInserted@1011 : Boolean);
    VAR
      DtldVendLedgEntry@1004 : Record 380;
      Currency@1006 : Record 4;
      GenPostingSetup@1007 : Record 252;
      TotalAmountLCY@1008 : Decimal;
      TotalAmountAddCurr@1009 : Decimal;
      PaymentDiscAcc@1010 : Code[20];
      DtldVendLedgEntryNoOffset@1005 : Integer;
      PaymentTolAcc@1012 : Code[20];
      SaveEntryNo@1013 : Integer;
      DebitAddjustment@1014 : Decimal;
      DebitAddjustmentAddCurr@1015 : Decimal;
      CreditAddjustment@1016 : Decimal;
      CreditAddjustmentAddCurr@1017 : Decimal;
      PositiveLCYAppAmt@1021 : Decimal;
      NegativeLCYAppAmt@1020 : Decimal;
      PositiveACYAppAmt@1019 : Decimal;
      NegativeACYAppAmt@1018 : Decimal;
      OriginalPostingDate@1022 : Date;
      OriginalDateSet@1023 : Boolean;
      TotalAmountLCYApplDate@1024 : Decimal;
      TotalAmountAddCurrApplDate@1025 : Decimal;
      ApplicationDate@1026 : Date;
      DebitAddjustmentApplDate@1027 : Decimal;
      DebitAddjustmentAddCurrApplDat@1028 : Decimal;
      CreditAddjustmentApplDate@1029 : Decimal;
      CreditAddjustmentAddCurrApplDa@1030 : Decimal;
      SavedEntryUsed@1031 : Boolean;
    BEGIN
      TotalAmountLCY := 0;
      TotalAmountAddCurr := 0;
      PositiveLCYAppAmt := 0;
      PositiveACYAppAmt := 0;
      NegativeLCYAppAmt := 0;
      NegativeACYAppAmt := 0;

      IF GenJnlLine2."Account Type" = GenJnlLine2."Account Type"::Vendor THEN BEGIN
        IF DtldVendLedgEntry.FINDLAST THEN
          DtldVendLedgEntryNoOffset := DtldVendLedgEntry."Entry No."
        ELSE
          DtldVendLedgEntryNoOffset := 0;

        DtldCVLedgEntryBuf.RESET;
        IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
          IF VendLedgEntryInserted THEN BEGIN
            SaveEntryNo := NextEntryNo;
            NextEntryNo := NextEntryNo + 1;
          END;
          REPEAT
            IF DtldCVLedgEntryBuf."Posting Date" <> GenJnlLine."Posting Date" THEN BEGIN
              OriginalPostingDate := GenJnlLine."Posting Date";
              GenJnlLine."Posting Date" := DtldCVLedgEntryBuf."Posting Date";
              OriginalDateSet := TRUE;
              ApplicationDate := DtldCVLedgEntryBuf."Posting Date";
            END;
            CLEAR(DtldVendLedgEntry);
            DtldVendLedgEntry.TRANSFERFIELDS(DtldCVLedgEntryBuf);
            DtldVendLedgEntry."Entry No." :=
              DtldVendLedgEntryNoOffset + DtldCVLedgEntryBuf."Entry No.";
            DtldVendLedgEntry."Journal Batch Name" := GenJnlLine2."Journal Batch Name";
            DtldVendLedgEntry."Reason Code" := GenJnlLine2."Reason Code";
            DtldVendLedgEntry."Source Code" := GenJnlLine2."Source Code";
            DtldVendLedgEntry."Transaction No." := NextTransactionNo;
            VendUpdateDebitCredit(GenJnlLine2.Correction,DtldVendLedgEntry);
            DtldVendLedgEntry.INSERT;

            IF OriginalDateSet THEN BEGIN
              TotalAmountLCYApplDate := TotalAmountLCYApplDate + DtldCVLedgEntryBuf."Amount (LCY)";
              TotalAmountAddCurrApplDate := TotalAmountAddCurrApplDate + DtldCVLedgEntryBuf."Additional-Currency Amount";
            END ELSE BEGIN
              TotalAmountLCY := TotalAmountLCY + DtldCVLedgEntryBuf."Amount (LCY)";
              TotalAmountAddCurr := TotalAmountAddCurr + DtldCVLedgEntryBuf."Additional-Currency Amount";
            END;

            // Post automatic entries.
            IF (DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
               ((GLSetup."Additional Reporting Currency" <> '') AND
                (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
            THEN
              CASE DtldCVLedgEntryBuf."Entry Type" OF
                DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":;
                DtldCVLedgEntryBuf."Entry Type"::Application:
                  BEGIN
                    IF DtldCVLedgEntryBuf."Amount (LCY)" >= 0 THEN BEGIN
                      PositiveLCYAppAmt := PositiveLCYAppAmt + DtldCVLedgEntryBuf."Amount (LCY)";
                      PositiveACYAppAmt :=
                        PositiveACYAppAmt + DtldCVLedgEntryBuf."Additional-Currency Amount";
                    END ELSE BEGIN
                      NegativeLCYAppAmt := NegativeLCYAppAmt + DtldCVLedgEntryBuf."Amount (LCY)";
                      NegativeACYAppAmt :=
                        NegativeACYAppAmt + DtldCVLedgEntryBuf."Additional-Currency Amount";
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Losses Acc.");
                    InitGLEntry(
                      Currency."Unrealized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Gains Acc.");
                    InitGLEntry(
                      Currency."Unrealized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Losses Acc.");
                    InitGLEntry(
                      Currency."Realized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Gains Acc.");
                    InitGLEntry(
                      Currency."Realized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount":
                  BEGIN
                    IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                      VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                      PaymentDiscAcc := VendPostingGr."Payment Disc. Debit Acc.";
                    END ELSE BEGIN
                      VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                      PaymentDiscAcc := VendPostingGr."Payment Disc. Credit Acc.";
                    END;
                    InitGLEntry(
                      PaymentDiscAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                      GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                      PaymentDiscAcc := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                    END ELSE BEGIN
                      GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                      PaymentDiscAcc := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                    END;
                    // gbedv DC -------------------------------------------------- BEGIN
                    SkipDimCheck := TRUE;
                    // gbedv DC -------------------------------------------------- END
                    InitGLEntry(PaymentDiscAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    // gbedv DC -------------------------------------------------- BEGIN
                    IF OPplusEnabled THEN
                      FinanceTools.DimCheckVATEntry(PaymentDiscAcc,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,
                        DtldCVLedgEntryBuf."VAT Entry No.");
                    // gbedv DC -------------------------------------------------- END
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);

                    InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)":
                  BEGIN
                    // The g/l entries for this entry type are posted by the VAT functions.
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding":
                  BEGIN
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                      VendPostingGr.TESTFIELD("Debit Curr. Appln. Rndg. Acc.");
                      InitGLEntry(
                        VendPostingGr."Debit Curr. Appln. Rndg. Acc.",
                        -DtldCVLedgEntryBuf."Amount (LCY)",
                        -DtldCVLedgEntryBuf."Additional-Currency Amount",
                        TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END;
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                      VendPostingGr.TESTFIELD("Credit Curr. Appln. Rndg. Acc.");
                      InitGLEntry(
                        VendPostingGr."Credit Curr. Appln. Rndg. Acc.",
                        -DtldCVLedgEntryBuf."Amount (LCY)",
                        -DtldCVLedgEntryBuf."Additional-Currency Amount",
                        TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount":
                  BEGIN
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                      VendPostingGr.TESTFIELD("Debit Rounding Account");
                      InitGLEntry(
                        VendPostingGr."Debit Rounding Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                        0,FALSE,TRUE);
                      GLEntry."Additional-Currency Amount" := 0;

                      IF OriginalDateSet THEN
                        CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                          CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount")
                      ELSE
                        CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                          CreditAddjustment,CreditAddjustmentAddCurr,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                      VendPostingGr.TESTFIELD("Credit Rounding Account");
                      InitGLEntry(
                        VendPostingGr."Credit Rounding Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                        0,FALSE,TRUE);
                      GLEntry."Additional-Currency Amount" := 0;

                      IF OriginalDateSet THEN
                        CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                          CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount")
                      ELSE
                        CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                          CreditAddjustment,CreditAddjustmentAddCurr,
                          GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance":
                  BEGIN
                    IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" >= 0) THEN BEGIN
                        VendPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Tolerance Debit Acc.";
                      END ELSE BEGIN
                        VendPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Tolerance Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" >= 0) THEN BEGIN
                        VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Disc. Debit Acc.";
                      END ELSE BEGIN
                        VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(
                      PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance":
                  BEGIN
                    IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" >= 0) THEN BEGIN
                        VendPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Tolerance Debit Acc.";
                      END ELSE BEGIN
                        VendPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Tolerance Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" >= 0) THEN BEGIN
                        VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Disc. Debit Acc.";
                      END ELSE BEGIN
                        VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(
                      PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Tol. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Tol. Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                      END;
                    END;
                    // gbedv DC -------------------------------------------------- BEGIN
                    SkipDimCheck := TRUE;
                    // gbedv DC -------------------------------------------------- END
                    InitGLEntry(PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    // gbedv DC -------------------------------------------------- BEGIN
                    IF OPplusEnabled THEN
                      FinanceTools.DimCheckVATEntry(PaymentTolAcc,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,
                        DtldCVLedgEntryBuf."VAT Entry No.");
                    // gbedv DC -------------------------------------------------- END
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);

                    InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Tol. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Tol. Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                      END;
                    END;
                    // gbedv DC -------------------------------------------------- BEGIN
                    SkipDimCheck := TRUE;
                    // gbedv DC -------------------------------------------------- END
                    InitGLEntry(PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    // gbedv DC -------------------------------------------------- BEGIN
                    IF OPplusEnabled THEN
                      FinanceTools.DimCheckVATEntry(PaymentTolAcc,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,
                        DtldCVLedgEntryBuf."VAT Entry No.");
                    // gbedv DC -------------------------------------------------- END
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    IF OriginalDateSet THEN
                      CollectAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,
                        CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount")
                    ELSE
                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);

                    InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
                  BEGIN
                    // The g/l entries for this entry type are posted by the VAT functions.
                  END;
                ELSE
                  DtldCVLedgEntryBuf.FIELDERROR("Entry Type");
              END;
            IF OriginalDateSet THEN BEGIN
              GenJnlLine."Posting Date" := OriginalPostingDate;
              OriginalDateSet := FALSE;
            END;
          UNTIL DtldCVLedgEntryBuf.NEXT = 0;
        END;

        IF VendLedgEntryInserted OR (TotalAmountLCY <> 0) OR
           (TotalAmountAddCurr <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
        THEN BEGIN
          //A/gob-bth/29112012/P0484
          IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
            Darlehen.GET(GenJnlLine.Darlehen);
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
              HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
              TotalAmountLCY,TotalAmountAddCurr,VendPostingGr."Account payables loans < 1");
            END;
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
              HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
              TotalAmountLCY,TotalAmountAddCurr,VendPostingGr."Account payables loans > 1");
            END;
          END ELSE
          //E/gob-bth/29112012/P0484
            HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
              TotalAmountLCY,TotalAmountAddCurr,VendPostingGr."Payables Account");
          GLEntry."Bal. Account Type" := GenJnlLine2."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine2."Bal. Account No.";
          IF VendLedgEntryInserted THEN BEGIN
            GLEntry."Entry No." := SaveEntryNo;
            NextEntryNo := NextEntryNo - 1;
            SavedEntryUsed := TRUE;
          END;
          InsertGLEntry(TRUE);
        END;

        IF (TotalAmountLCYApplDate <> 0) OR
           (TotalAmountAddCurrApplDate <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
        THEN BEGIN
          GenJnlLine."Posting Date" := ApplicationDate;
          //A/gob-bth/29112012/P0484
          IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
            Darlehen.GET(GenJnlLine.Darlehen);
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
              HandlDtlAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,CreditAddjustmentApplDate,
                CreditAddjustmentAddCurrApplDa,TotalAmountLCYApplDate,TotalAmountAddCurrApplDate,
                VendPostingGr."Account payables loans < 1");
            END;
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
              HandlDtlAddjustment(DebitAddjustmentApplDate,DebitAddjustmentAddCurrApplDat,CreditAddjustmentApplDate,
                CreditAddjustmentAddCurrApplDa,TotalAmountLCYApplDate,TotalAmountAddCurrApplDate,
                VendPostingGr."Account payables loans > 1");
            END;
          END ELSE
          //E/gob-bth/29112012/P0484
            HandlDtlAddjustment(DebitAddjustmentApplDate,
              DebitAddjustmentAddCurrApplDat,CreditAddjustmentApplDate,CreditAddjustmentAddCurrApplDa,
              TotalAmountLCYApplDate,TotalAmountAddCurrApplDate,VendPostingGr."Payables Account");
          IF VendLedgEntryInserted AND NOT SavedEntryUsed THEN BEGIN
            GLEntry."Entry No." := SaveEntryNo;
            NextEntryNo := NextEntryNo - 1;
          END;
          InsertGLEntry(TRUE);
          GenJnlLine."Posting Date" := OriginalPostingDate;
        END;
        IF NOT GLEntryTmp.FINDFIRST AND DtldCVLedgEntryBuf.FINDFIRST THEN BEGIN
          //A/gob-bth/29112012/P0484
          IF (GenJnlLine."IC Partner Code" <> '') AND (GenJnlLine.Darlehen <> '') AND (GenJnlLine.Zinsen = FALSE) THEN BEGIN
            Darlehen.GET(GenJnlLine.Darlehen);
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "kleiner 1 Jahr" THEN BEGIN
              InitGLEntry(VendPostingGr."Account payables loans < 1",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
              InsertGLEntry(FALSE);
              InitGLEntry(VendPostingGr."Account payables loans < 1",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
              InsertGLEntry(FALSE);
            END;
            IF Darlehen.Laufzeit = Darlehen.Laufzeit:: "grî·er 1 Jahr" THEN BEGIN
              InitGLEntry(VendPostingGr."Account payables loans > 1",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
              InsertGLEntry(FALSE);
              InitGLEntry(VendPostingGr."Account payables loans > 1",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
              InsertGLEntry(FALSE);
            END
          END ELSE BEGIN
          //E/gob-bth/29112012/P0484
            InitGLEntry(VendPostingGr."Payables Account",PositiveLCYAppAmt,PositiveACYAppAmt,FALSE,TRUE);
            InsertGLEntry(FALSE);
            InitGLEntry(VendPostingGr."Payables Account",NegativeLCYAppAmt,NegativeACYAppAmt,FALSE,TRUE);
            InsertGLEntry(FALSE);
          //A/gob-bth/29112012/P0484
          END;
          //E/gob-bth/29112012/P0484
        END;
        DtldCVLedgEntryBuf.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE AutoEntrForDtldVendLedgEntries@69(DtldCVLedgEntryBuf@1001 : Record 383;OriginalTransactionNo@1006 : Integer);
    VAR
      GenPostingSetup@1005 : Record 252;
      VATPostingSetup@1004 : Record 325;
      TaxJurisdiction@1003 : Record 320;
      AccNo@1002 : Code[20];
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         ((GLSetup."Additional Reporting Currency" = '') OR
          (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      CASE DtldCVLedgEntryBuf."Entry Type" OF
        DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":;
        DtldCVLedgEntryBuf."Entry Type"::Application:;
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Unrealized Losses Acc.");
            InitGLEntry(
              Currency."Unrealized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Unrealized Gains Acc.");
            InitGLEntry(
              Currency."Unrealized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
           InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Realized Losses Acc.");
            InitGLEntry(
              Currency."Realized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Realized Gains Acc.");
            InitGLEntry(
              Currency."Realized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount":
          BEGIN
            IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
              VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
              AccNo := VendPostingGr."Payment Disc. Debit Acc.";
            END ELSE BEGIN
              VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
              AccNo := VendPostingGr."Payment Disc. Credit Acc.";
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          BEGIN
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
              GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
              AccNo := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
            END ELSE BEGIN
              GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
              AccNo := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
            END;
            // gbedv DC -------------------------------------------------- BEGIN
            SkipDimCheck := TRUE;
            // gbedv DC -------------------------------------------------- END
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              FinanceTools.DimCheckVATEntry(AccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,
                DtldCVLedgEntryBuf."VAT Entry No.");
            // gbedv DC -------------------------------------------------- END
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Purchase;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);

            InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)",
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
          BEGIN
            VATEntry.SETRANGE("Transaction No.",OriginalTransactionNo);
            VATEntry.SETRANGE("VAT Bus. Posting Group",DtldCVLedgEntryBuf."VAT Bus. Posting Group");
            VATEntry.SETRANGE("VAT Prod. Posting Group",DtldCVLedgEntryBuf."VAT Prod. Posting Group");
            VATEntry.FINDFIRST;

            VATPostingSetup.GET(
              DtldCVLedgEntryBuf."VAT Bus. Posting Group",
              DtldCVLedgEntryBuf."VAT Prod. Posting Group");
            VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
            CLEAR(VATEntry);

            CASE VATPostingSetup."VAT Calculation Type" OF
              VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT":
                BEGIN
                  VATPostingSetup.TESTFIELD("Purchase VAT Account");
                  InitGLEntry(
                    VATPostingSetup."Purchase VAT Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                    0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                END;
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                BEGIN
                  VATPostingSetup.TESTFIELD("Purchase VAT Account");
                  InitGLEntry(
                    VATPostingSetup."Purchase VAT Account",-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                  InitGLEntry(
                    VATPostingSetup."Reverse Chrg. VAT Acc.",DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                END;
              VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                IF DtldCVLedgEntryBuf."Use Tax" THEN BEGIN
                  TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                  InitGLEntry(
                    TaxJurisdiction."Tax Account (Purchases)",-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                  TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
                  InitGLEntry(
                    TaxJurisdiction."Reverse Charge (Purchases)",DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                END ELSE BEGIN
                  TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                  InitGLEntry(
                    TaxJurisdiction."Tax Account (Purchases)",-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                END;
              END;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding":
          BEGIN
            IF -DtldCVLedgEntryBuf."Amount (LCY)" <> 0 THEN BEGIN
              CASE TRUE OF
                -DtldCVLedgEntryBuf."Amount (LCY)" < 0:
                  BEGIN
                    VendPostingGr.TESTFIELD("Debit Curr. Appln. Rndg. Acc.");
                    AccNo := VendPostingGr."Debit Curr. Appln. Rndg. Acc.";
                  END;
                -DtldCVLedgEntryBuf."Amount (LCY)" > 0:
                  BEGIN
                    VendPostingGr.TESTFIELD("Credit Curr. Appln. Rndg. Acc.");
                    AccNo := VendPostingGr."Credit Curr. Appln. Rndg. Acc.";
                  END;
              END;
              InitGLEntry(
                AccNo,
                -DtldCVLedgEntryBuf."Amount (LCY)",
                -DtldCVLedgEntryBuf."Additional-Currency Amount",
                TRUE,TRUE);
              InsertGLEntry(TRUE);
            END;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount":
          BEGIN
            IF -DtldCVLedgEntryBuf."Amount (LCY)" <> 0 THEN BEGIN
              CASE TRUE OF
                -DtldCVLedgEntryBuf."Amount (LCY)" < 0:
                  BEGIN
                    VendPostingGr.TESTFIELD("Debit Rounding Account");
                    AccNo := VendPostingGr."Debit Rounding Account";
                  END;
                -DtldCVLedgEntryBuf."Amount (LCY)" > 0:
                  BEGIN
                    VendPostingGr.TESTFIELD("Credit Rounding Account");
                    AccNo := VendPostingGr."Credit Rounding Account";
                  END;
              END;
              InitGLEntry(
                AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",
                0,FALSE,TRUE);
              GLEntry."Additional-Currency Amount" := 0;
              InsertGLEntry(TRUE);
            END;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance":
          BEGIN
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                    VendPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                    AccNo := VendPostingGr."Payment Tolerance Debit Acc.";
                  END ELSE BEGIN
                    VendPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                    AccNo := VendPostingGr."Payment Tolerance Credit Acc.";
                  END;
                END;
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                    VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                    AccNo := VendPostingGr."Payment Disc. Debit Acc.";
                  END ELSE BEGIN
                    VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                    AccNo := VendPostingGr."Payment Disc. Credit Acc.";
                  END;
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance":
          BEGIN
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                    VendPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                    AccNo := VendPostingGr."Payment Tolerance Debit Acc.";
                  END ELSE BEGIN
                    VendPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                    AccNo := VendPostingGr."Payment Tolerance Credit Acc.";
                  END;
                END;
               GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                 BEGIN
                   IF DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                     VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                     AccNo := VendPostingGr."Payment Disc. Debit Acc.";
                   END ELSE BEGIN
                     VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                     AccNo := VendPostingGr."Payment Disc. Credit Acc.";
                   END;
                 END;
             END;
             InitGLEntry(
               AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
             GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
             InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          BEGIN
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Debit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Tol. Debit Acc.";
                  END ELSE BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Credit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Tol. Credit Acc.";
                  END;
                END;
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                  END ELSE BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                  END;
                END;
            END;
            // gbedv DC -------------------------------------------------- BEGIN
            SkipDimCheck := TRUE;
            // gbedv DC -------------------------------------------------- END
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              FinanceTools.DimCheckVATEntry(AccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,
                DtldCVLedgEntryBuf."VAT Entry No.");
            // gbedv DC -------------------------------------------------- END
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Purchase;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);

            InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          BEGIN
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Debit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Tol. Debit Acc.";
                  END ELSE BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Credit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Tol. Credit Acc.";
                  END;
                END;
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                  END ELSE BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                  END;
                END;
            END;
            // gbedv DC -------------------------------------------------- BEGIN
            SkipDimCheck := TRUE;
            // gbedv DC -------------------------------------------------- END
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            // gbedv DC -------------------------------------------------- BEGIN
            IF OPplusEnabled THEN
              FinanceTools.DimCheckVATEntry(AccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,
                DtldCVLedgEntryBuf."VAT Entry No.");
            // gbedv DC -------------------------------------------------- END
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Purchase;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);

            InsertVatEntriesFromTemp(DtldCVLedgEntryBuf);
          END;
        ELSE
          DtldCVLedgEntryBuf.FIELDERROR("Entry Type");
      END;
    END;

    LOCAL PROCEDURE VendUpdateDebitCredit@47(Correction@1000 : Boolean;VAR DtldVendLedgEntry@1001 : Record 380);
    BEGIN
      WITH DtldVendLedgEntry DO BEGIN
        IF ((Amount > 0) OR ("Amount (LCY)" > 0)) AND NOT Correction OR
           ((Amount < 0) OR ("Amount (LCY)" < 0)) AND Correction
        THEN BEGIN
          "Debit Amount" := Amount;
          "Credit Amount" := 0;
          "Debit Amount (LCY)" := "Amount (LCY)";
          "Credit Amount (LCY)" := 0;
        END ELSE BEGIN
          "Debit Amount" := 0;
          "Credit Amount" := -Amount;
          "Debit Amount (LCY)" := 0;
          "Credit Amount (LCY)" := -"Amount (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE VendUnrealizedVAT@18(VAR VendLedgEntry2@1000 : Record 25;SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record 254;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountFirst@1014 : Decimal;
      TotalUnrealVATAmountLast@1015 : Decimal;
      PurchVATAccount@1009 : Code[20];
      PurchVATUnrealAccount@1010 : Code[20];
      PurchReverseAccount@1011 : Code[20];
      PurchReverseUnrealAccount@1012 : Code[20];
      LastConnectionNo@1013 : Integer;
    BEGIN
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",VendLedgEntry2."Transaction No.");
      PaidAmount := -VendLedgEntry2."Amount (LCY)" + VendLedgEntry2."Remaining Amt. (LCY)";
      IF VATEntry2.FINDSET THEN
        REPEAT
          IF (VATPostingSetup."VAT Bus. Posting Group" <> VATEntry2."VAT Bus. Posting Group") OR
             (VATPostingSetup."VAT Prod. Posting Group" <> VATEntry2."VAT Prod. Posting Group")
          THEN
            VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATPostingSetup."Unrealized VAT Type" IN
            [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"] THEN
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          IF VATPostingSetup."Unrealized VAT Type" IN
            [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"] THEN
              TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;
      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          IF (VATPostingSetup."VAT Bus. Posting Group" <> VATEntry2."VAT Bus. Posting Group") OR
             (VATPostingSetup."VAT Prod. Posting Group" <> VATEntry2."VAT Prod. Posting Group")
          THEN
            VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT;
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          VATPart :=
            VATEntry2.GetUnRealizedVATPart(
              ROUND(SettledAmount / VendLedgEntry2.GetOriginalCurrencyFactor),
              PaidAmount,
              VendLedgEntry2."Original Amt. (LCY)",
              TotalUnrealVATAmountFirst,
              TotalUnrealVATAmountLast);

          IF VATPart >= 0 THEN BEGIN
            IF VATPart <> 0 THEN BEGIN
              CASE VATEntry2."VAT Calculation Type" OF
                VATEntry2."VAT Calculation Type"::"Normal VAT",
                VATEntry2."VAT Calculation Type"::"Full VAT":
                  BEGIN
                    VATPostingSetup.TESTFIELD("Purchase VAT Account");
                    VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                    PurchVATAccount := VATPostingSetup."Purchase VAT Account";
                    PurchVATUnrealAccount := VATPostingSetup."Purch. VAT Unreal. Account";
                  END;
                VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    VATPostingSetup.TESTFIELD("Purchase VAT Account");
                    VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                    VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Acc.");
                    VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Unreal. Acc.");
                    PurchVATAccount := VATPostingSetup."Purchase VAT Account";
                    PurchVATUnrealAccount := VATPostingSetup."Purch. VAT Unreal. Account";
                    PurchReverseAccount := VATPostingSetup."Reverse Chrg. VAT Acc.";
                    PurchReverseUnrealAccount := VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.";
                  END;
                VATEntry2."VAT Calculation Type"::"Sales Tax":
                  IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
                    TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                    TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                    TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
                    TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                    TaxJurisdiction.TESTFIELD("Unreal. Rev. Charge (Purch.)");
                    PurchVATAccount := TaxJurisdiction."Tax Account (Purchases)";
                    PurchVATUnrealAccount := TaxJurisdiction."Unreal. Tax Acc. (Purchases)";
                    PurchReverseAccount := TaxJurisdiction."Reverse Charge (Purchases)";
                    PurchReverseUnrealAccount := TaxJurisdiction."Unreal. Rev. Charge (Purch.)";
                  END ELSE BEGIN
                    TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                    TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                    TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                    PurchVATAccount := TaxJurisdiction."Tax Account (Purchases)";
                    PurchVATUnrealAccount := TaxJurisdiction."Unreal. Tax Acc. (Purchases)";
                  END;
              END;

              IF VATPart = 1 THEN BEGIN
                VATAmount := VATEntry2."Remaining Unrealized Amount";
                VATBase := VATEntry2."Remaining Unrealized Base";
                VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
                VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
              END ELSE BEGIN
                VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart);
                VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart);
                VATAmountAddCurr :=
                  ROUND(
                    VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                    AddCurrency."Amount Rounding Precision");
                VATBaseAddCurr :=
                  ROUND(
                    VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                    AddCurrency."Amount Rounding Precision");
              END;

              InitGLEntry(PurchVATUnrealAccount,-VATAmount,0,FALSE,TRUE);
              GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
              GLEntry."Bal. Account No." := PurchVATAccount;
              SummarizeVAT(
                GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

              InitGLEntry(PurchVATAccount,VATAmount,0,FALSE,TRUE);
              GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
              GLEntry."Gen. Posting Type" := VATEntry2.Type;
              GLEntry."Gen. Bus. Posting Group" := VATEntry2."Gen. Bus. Posting Group";
              GLEntry."Gen. Prod. Posting Group" := VATEntry2."Gen. Prod. Posting Group";
              GLEntry."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
              GLEntry."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
              GLEntry."Tax Area Code" := VATEntry2."Tax Area Code";
              GLEntry."Tax Liable" := VATEntry2."Tax Liable";
              GLEntry."Tax Group Code" := VATEntry2."Tax Group Code";
              GLEntry."Use Tax" := VATEntry2."Use Tax";
              GLEntry."Bal. Account No." := PurchVATUnrealAccount;
              SummarizeVAT(
                GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

              IF (VATEntry2."VAT Calculation Type" =
                  VATEntry2."VAT Calculation Type"::"Reverse Charge VAT") OR
                 ((VATEntry2."VAT Calculation Type" =
                   VATEntry2."VAT Calculation Type"::"Sales Tax") AND
                  (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax")
              THEN BEGIN
                InitGLEntry(PurchReverseUnrealAccount,VATAmount,0,FALSE,TRUE);
                GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                GLEntry."Bal. Account No." := PurchReverseAccount;
                SummarizeVAT(
                  GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

                InitGLEntry(PurchReverseAccount,-VATAmount,0,FALSE,TRUE);
                GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
                GLEntry."Gen. Posting Type" := VATEntry2.Type;
                GLEntry."Gen. Bus. Posting Group" := VATEntry2."Gen. Bus. Posting Group";
                GLEntry."Gen. Prod. Posting Group" := VATEntry2."Gen. Prod. Posting Group";
                GLEntry."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
                GLEntry."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
                GLEntry."Tax Area Code" := VATEntry2."Tax Area Code";
                GLEntry."Tax Liable" := VATEntry2."Tax Liable";
                GLEntry."Tax Group Code" := VATEntry2."Tax Group Code";
                GLEntry."Use Tax" := VATEntry2."Use Tax";
                GLEntry."Bal. Account No." := PurchReverseUnrealAccount;
                SummarizeVAT(
                  GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
              END;

              VATEntry.LOCKTABLE;
              VATEntry := VATEntry2;
              VATEntry."Entry No." := NextVATEntryNo;
              VATEntry."Posting Date" := GenJnlLine."Posting Date";
              VATEntry."Document No." := GenJnlLine."Document No.";
              VATEntry."External Document No." := GenJnlLine."External Document No.";
              VATEntry."Document Type" := GenJnlLine."Document Type";
              VATEntry.Amount := VATAmount;
              VATEntry.Base := VATBase;
              VATEntry."Unrealized Amount" := 0;
              VATEntry."Unrealized Base" := 0;
              VATEntry."Remaining Unrealized Amount" := 0;
              VATEntry."Remaining Unrealized Base" := 0;
              VATEntry."Additional-Currency Amount" := VATAmountAddCurr;
              VATEntry."Additional-Currency Base" := VATBaseAddCurr;
              VATEntry."Add.-Currency Unrealized Amt." := 0;
              VATEntry."Add.-Currency Unrealized Base" := 0;
              VATEntry."Add.-Curr. Rem. Unreal. Amount" := 0;
              VATEntry."Add.-Curr. Rem. Unreal. Base" := 0;
              VATEntry."User ID" := USERID;
              VATEntry."Source Code" := GenJnlLine."Source Code";
              VATEntry."Reason Code" := GenJnlLine."Reason Code";
              VATEntry."Closed by Entry No." := 0;
              VATEntry.Closed := FALSE;
              VATEntry."Transaction No." := GLEntry."Transaction No.";
              VATEntry."Sales Tax Connection No." := NextConnectionNo;
              VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
              VATEntry.INSERT;
              NextVATEntryNo := NextVATEntryNo + 1;

              VATEntry2."Remaining Unrealized Amount" :=
                VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
              VATEntry2."Remaining Unrealized Base" :=
                VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
              VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
                VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
              VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
                VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
              VATEntry2.MODIFY;
            END;
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT;
      END;
    END;

    LOCAL PROCEDURE PostUnrealVATByUnapply@80(UnrealVATAccNo@1000 : Code[20];VATAccNo@1001 : Code[20];VATEntry@1005 : Record 254;NewVATEntry@1004 : Record 254);
    VAR
      VATEntry2@1003 : Record 254;
    BEGIN
      InitGLEntry(UnrealVATAccNo,VATEntry.Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      InsertGLEntry(TRUE);

      InitGLEntry(VATAccNo,-VATEntry.Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount);
      GLEntry."Gen. Posting Type" := VATEntry.Type;
      GLEntry."Gen. Bus. Posting Group" := VATEntry."Gen. Bus. Posting Group";
      GLEntry."Gen. Prod. Posting Group" := VATEntry."Gen. Prod. Posting Group";
      GLEntry."VAT Bus. Posting Group" := VATEntry."VAT Bus. Posting Group";
      GLEntry."VAT Prod. Posting Group" := VATEntry."VAT Prod. Posting Group";
      GLEntry."Tax Area Code" := VATEntry."Tax Area Code";
      GLEntry."Tax Liable" := VATEntry."Tax Liable";
      GLEntry."Tax Group Code" := VATEntry."Tax Group Code";
      GLEntry."Use Tax" := VATEntry."Use Tax";
      InsertGLEntry(TRUE);

      WITH VATEntry2 DO BEGIN
        GET(VATEntry."Unrealized VAT Entry No.");
        "Remaining Unrealized Amount" :=  "Remaining Unrealized Amount" - NewVATEntry.Amount;
        "Remaining Unrealized Base" := "Remaining Unrealized Base" - NewVATEntry.Base;
        "Add.-Curr. Rem. Unreal. Amount" :=
          "Add.-Curr. Rem. Unreal. Amount" - NewVATEntry."Additional-Currency Amount";
        "Add.-Curr. Rem. Unreal. Base" :=
          "Add.-Curr. Rem. Unreal. Base" - NewVATEntry."Additional-Currency Base";
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateCalcInterest@28(VAR CVLedgEntryBuf@1000 : Record 382);
    VAR
      CustLedgEntry@1001 : Record 21;
      CVLedgEntryBuf2@1002 : Record 382;
    BEGIN
      WITH CVLedgEntryBuf DO BEGIN
        IF CustLedgEntry.GET("Closed by Entry No.") THEN BEGIN
          CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
          UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
        END;
        CustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
        CustLedgEntry.SETRANGE("Closed by Entry No.","Entry No.");
        IF CustLedgEntry.FINDSET THEN
          REPEAT
            CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
            UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
          UNTIL CustLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateCalcInterest2@27(VAR CVLedgEntryBuf@1000 : Record 382;VAR CVLedgEntryBuf2@1001 : Record 382);
    BEGIN
      WITH CVLedgEntryBuf DO
        IF "Due Date" < CVLedgEntryBuf2."Document Date" THEN
          "Calculate Interest" := TRUE;
    END;

    PROCEDURE GLCalcAddCurrency@35(AddCurrAmount@1000 : Decimal;UseAddCurrAmount@1001 : Boolean);
    BEGIN
      IF (GLSetup."Additional Reporting Currency" <> '') AND
         (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None)
      THEN BEGIN
        IF (GenJnlLine."Source Currency Code" = GLSetup."Additional Reporting Currency") AND
           UseAddCurrAmount
        THEN
          GLEntry."Additional-Currency Amount" := AddCurrAmount
        ELSE
          GLEntry."Additional-Currency Amount" := ExchangeAmtLCYToFCY2(GLEntry.Amount);
      END;
    END;

    PROCEDURE HandleAddCurrResidualGLEntry@38();
    VAR
      TableID@1001 : ARRAY [10] OF Integer;
      AccNo@1000 : ARRAY [10] OF Code[20];
    BEGIN
      IF GLSetup."Additional Reporting Currency" = '' THEN
        EXIT;

      TotalAddCurrAmount := TotalAddCurrAmount + GLEntry."Additional-Currency Amount";
      TotalAmount := TotalAmount + GLEntry.Amount;

      IF (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None) AND
          (TotalAmount = 0) AND  (TotalAddCurrAmount <> 0) AND
          CheckNonAddCurrCodeOccurred(GenJnlLine."Source Currency Code")
      THEN BEGIN
        OrigGLEntry := GLEntry;
        GLEntry.INIT;
        GLEntry."Posting Date" := GenJnlLine."Posting Date";
        GLEntry."Document Date" := GenJnlLine."Document Date";
        GLEntry."Document Type" := GenJnlLine."Document Type";
        GLEntry."Document No." := GenJnlLine."Document No.";
        GLEntry."External Document No." := '';
        GLEntry.Description :=
          COPYSTR(
            STRSUBSTNO(
              Text010,
              GLEntry.FIELDCAPTION("Additional-Currency Amount")),
            1,MAXSTRLEN(GLEntry.Description));
        GLEntry."Business Unit Code" := GenJnlLine."Business Unit Code";
        GLEntry."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
        GLEntry."Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
        GLEntry."Source Code" := GenJnlLine."Source Code";
        GLEntry."Source Type" := 0;
        GLEntry."Source No." := '';
        GLEntry."Job No." := '';
        GLEntry.Quantity := 0;
        GLEntry."Journal Batch Name" := GenJnlLine."Journal Batch Name";
        GLEntry."Reason Code" := GenJnlLine."Reason Code";
        GLEntry."Entry No." := NextEntryNo;
        GLEntry."Transaction No." := NextTransactionNo;
        IF TotalAddCurrAmount < 0 THEN
          GLEntry."G/L Account No." := AddCurrency."Residual Losses Account"
        ELSE
          GLEntry."G/L Account No." := AddCurrency."Residual Gains Account";
        GLEntry.Amount := 0;
        GLEntry."User ID" := USERID;
        GLEntry."No. Series" := GenJnlLine."Posting No. Series";
        GLEntry."System-Created Entry" := TRUE;
        GLEntry."Prior-Year Entry" := GLEntry."Posting Date" < FiscalYearStartDate;
        GLEntry."Additional-Currency Amount" := -TotalAddCurrAmount;
        GLAcc.GET(GLEntry."G/L Account No.");
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);
        InsertGLEntry(FALSE);

        GLAcc.GET(GLEntry."G/L Account No.");
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);
        TableID[1] := DimMgt.TypeToTableID1(GenJnlLine."Account Type"::"G/L Account");
        AccNo[1] := GLEntry."G/L Account No.";
        IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
          IF GenJnlLine."Line No." <> 0 THEN
            ERROR(
              Text013,
              GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
              GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
              DimMgt.GetDimValuePostingErr)
          ELSE
            ERROR(DimMgt.GetDimValuePostingErr);

        GLEntry := OrigGLEntry;
        TotalAddCurrAmount := 0;
      END;
    END;

    LOCAL PROCEDURE CalcLCYToAddCurr@42(AmountLCY@1000 : Decimal) : Decimal;
    BEGIN
      IF GLSetup."Additional Reporting Currency" = '' THEN
        EXIT;
      EXIT(ExchangeAmtLCYToFCY2(AmountLCY));
    END;

    PROCEDURE CalcAddCurrFactor@17(Numerator@1000 : Decimal;Denominator@1001 : Decimal) : Decimal;
    BEGIN
      IF Denominator = 0 THEN
        EXIT(0);

      IF Numerator <> 0 THEN
        EXIT(Numerator / Denominator)
      ELSE
        IF GLSetup."Additional Reporting Currency" <> '' THEN
          CalcLCYToAddCurr(1)
        ELSE
          EXIT(0);
    END;

    PROCEDURE GetCurrencyExchRate@39();
    VAR
      NewCurrencyDate@1000 : Date;
    BEGIN
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        IF GLSetup."Additional Reporting Currency" <> AddCurrency.Code THEN BEGIN
          AddCurrency.GET(GLSetup."Additional Reporting Currency");
          AddCurrency.TESTFIELD("Amount Rounding Precision");
          AddCurrency.TESTFIELD("Residual Gains Account");
          AddCurrency.TESTFIELD("Residual Losses Account");
        END;
        NewCurrencyDate := GenJnlLine."Posting Date";
        IF GenJnlLine."Reversing Entry" THEN
          NewCurrencyDate := NewCurrencyDate - 1;
        IF (NewCurrencyDate <> CurrencyDate) OR
           UseCurrFactorOnly
        THEN BEGIN
          UseCurrFactorOnly := FALSE;
          CurrencyDate := NewCurrencyDate;
          CurrencyFactor :=
            CurrExchRate.ExchangeRate(
              CurrencyDate,GLSetup."Additional Reporting Currency");
        END;
        IF (GenJnlLine."FA Add.-Currency Factor" <> 0) AND
           (GenJnlLine."FA Add.-Currency Factor" <> CurrencyFactor)
        THEN BEGIN
          UseCurrFactorOnly := TRUE;
          CurrencyDate := 0D;
          CurrencyFactor := GenJnlLine."FA Add.-Currency Factor";
        END;
      END;
    END;

    PROCEDURE ExchAmount@43(Amount@1000 : Decimal;FromCurrencyCode@1001 : Code[10];ToCurrencyCode@1002 : Code[10];UsePostingDate@1003 : Date) : Decimal;
    VAR
      ToCurrency@1004 : Record 4;
    BEGIN
      IF (FromCurrencyCode = ToCurrencyCode) OR (Amount = 0) THEN
        EXIT(Amount);

      // gbedv PMT CC -
      IF (OPPLicenseInfo.IsOptionRateLCYFCY > 0) THEN BEGIN
        IF (FromCurrencyCode = GenJnlLine."Currency Code") AND (ToCurrencyCode = '') AND
           (GenJnlLine."Currency Code" <> '')
        THEN
          Amount := Amount / GenJnlLine."Currency Factor"
        ELSE IF (ToCurrencyCode = GenJnlLine."Currency Code") AND (FromCurrencyCode = '') AND
           (GenJnlLine."Currency Code" <> '')
        THEN
          Amount := Amount * GenJnlLine."Currency Factor"
        ELSE IF (ToCurrencyCode = '') AND (GenJnlLine."Original Currency Factor" <> 0) THEN
          Amount := Amount / GenJnlLine."Original Currency Factor"
        ELSE IF (FromCurrencyCode = '') AND (GenJnlLine."Original Currency Factor" <> 0) THEN
          Amount := Amount * GenJnlLine."Original Currency Factor"
        ELSE
          Amount :=
            CurrExchRate.ExchangeAmtFCYToFCY(
              UsePostingDate,FromCurrencyCode,ToCurrencyCode,Amount);
      END ELSE
      // gbedv PMT CC +
      Amount :=
        CurrExchRate.ExchangeAmtFCYToFCY(
          UsePostingDate,FromCurrencyCode,ToCurrencyCode,Amount);

      IF ToCurrencyCode <> '' THEN BEGIN
        ToCurrency.GET(ToCurrencyCode);
        Amount := ROUND(Amount,ToCurrency."Amount Rounding Precision");
      END ELSE
        Amount := ROUND(Amount);

      EXIT(Amount);
    END;

    LOCAL PROCEDURE ExchangeAmtLCYToFCY2@40(Amount@1000 : Decimal) : Decimal;
    BEGIN
      IF UseCurrFactorOnly THEN
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(Amount,CurrencyFactor),
            AddCurrency."Amount Rounding Precision"));
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            CurrencyDate,GLSetup."Additional Reporting Currency",Amount,CurrencyFactor),
          AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CalcAddCurrForUnapplication@73(Date@1001 : Date;Amt@1002 : Decimal) : Decimal;
    VAR
      AddCurrency@1000 : Record 4;
    BEGIN
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        IF GLSetup."Additional Reporting Currency" <> AddCurrency.Code THEN BEGIN
          AddCurrency.GET(GLSetup."Additional Reporting Currency");
          AddCurrency.TESTFIELD("Amount Rounding Precision");
        END;
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              Date,
              GLSetup."Additional Reporting Currency",
              Amt,
              CurrExchRate.ExchangeRate(Date,GLSetup."Additional Reporting Currency")),
            AddCurrency."Amount Rounding Precision"));
      END;
    END;

    LOCAL PROCEDURE InsertFAAllocDim@44(EntryNo@1000 : Integer) : Boolean;
    VAR
      FAAllocDim@1001 : Record 5648;
    BEGIN
      IF FAGLPostBuf.GET(EntryNo) THEN BEGIN
        TempFAJnlLineDim.DELETEALL;
        FAAllocDim.SETRANGE(Code,FAGLPostBuf."FA Posting Group");
        FAAllocDim.SETRANGE("Allocation Type",FAGLPostBuf."FA Allocation Type");
        FAAllocDim.SETRANGE("Line No.",FAGLPostBuf."FA Allocation Line No.");
        IF FAAllocDim.FINDSET THEN
          REPEAT
            TempFAJnlLineDim."Dimension Code" := FAAllocDim."Dimension Code";
            TempFAJnlLineDim."Dimension Value Code" := FAAllocDim."Dimension Value Code";
            TempFAJnlLineDim.INSERT;
          UNTIL FAAllocDim.NEXT = 0;
          DimMgt.MoveJnlLineDimToLedgEntryDim(
            TempFAJnlLineDim,DATABASE::"G/L Entry",EntryNo);
        FAGLPostBuf.DELETE;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckNonAddCurrCodeOccurred@54(CurrencyCode@1000 : Code[10]) : Boolean;
    BEGIN
      NonAddCurrCodeOccured :=
        NonAddCurrCodeOccured OR (GLSetup."Additional Reporting Currency" <>  CurrencyCode);
      EXIT(NonAddCurrCodeOccured);
    END;

    PROCEDURE CheckCalcPmtDisc@15(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1001 : Boolean;CheckAmount@1004 : Boolean) : Boolean;
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      // Falls Åber erw. Ausgleich gebucht wird, nur Skonto buchen, falls Skonto hinterlegt
      IF (GenJnlLine."ID Applied-Entry" <> 0) THEN
        EXIT(GenJnlLine."Posting Payment Discount" <> 0);
      // gbedv EA -------------------------------------------------- END
      IF (((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Refund) OR
           (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment)) AND
          (((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::"Credit Memo") AND
            (OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" <> 0) AND
            (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date")) OR
            // gbedv EA -------------------------------------------------- BEGIN
            ((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::" ") AND
             (OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" <> 0) AND
             (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date")) OR
            // gbedv EA -------------------------------------------------- END
            ((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::Invoice) AND
             (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date"))))
      THEN BEGIN
        IF CheckFilter THEN BEGIN
          IF CheckAmount THEN BEGIN
            IF (OldCVLedgEntryBuf2.GETFILTER(Positive) <> '') OR
              (ABS(NewCVLedgEntryBuf."Remaining Amount") + ApplnRoundingPrecision >=
              ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"))
            THEN
              EXIT(TRUE)
            ELSE
              EXIT(FALSE);
          END ELSE BEGIN
            IF (OldCVLedgEntryBuf2.GETFILTER(Positive) <> '')
            THEN
              EXIT(TRUE)
            ELSE
              EXIT(FALSE);
          END;
        END ELSE BEGIN
          IF CheckAmount THEN BEGIN
            IF (ABS(NewCVLedgEntryBuf."Remaining Amount") + ApplnRoundingPrecision >=
              ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"))
            THEN
              EXIT(TRUE)
            ELSE
              EXIT(FALSE);
          END ELSE
            EXIT(TRUE);
        END;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CheckCalcPmtDiscCVCust@23(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCustLedgEntry2@1002 : Record 21;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1005 : Boolean;CheckAmount@1001 : Boolean) : Boolean;
    VAR
      OldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      OldCustLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      TransferCustLedgEntry(OldCVLedgEntryBuf2,OldCustLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscCust@26(VAR NewCustLedgEntry@1000 : Record 21;VAR OldCustLedgEntry2@1002 : Record 21;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1005 : Boolean;CheckAmount@1006 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record 382;
      OldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      TransferCustLedgEntry(NewCVLedgEntryBuf,NewCustLedgEntry,TRUE);
      OldCustLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      TransferCustLedgEntry(OldCVLedgEntryBuf2,OldCustLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscGenJnlCust@36(GenJnlLine@1000 : Record 81;OldCustLedgEntry2@1002 : Record 21;ApplnRoundingPrecision@1004 : Decimal;CheckAmount@1005 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record 382;
      OldCVLedgEntryBuf2@1003 : Record 382;
    BEGIN
      NewCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      NewCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      NewCVLedgEntryBuf."Remaining Amount" := GenJnlLine.Amount;
      TransferCustLedgEntry(OldCVLedgEntryBuf2,OldCustLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscCVVend@57(VAR NewCVLedgEntrybuf@1000 : Record 382;VAR OldVendLedgEntry2@1002 : Record 25;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1005 : Boolean;CheckAmount@1001 : Boolean) : Boolean;
    VAR
      OldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      OldVendLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      TransferVendLedgEntry(OldCVLedgEntryBuf2,OldVendLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntrybuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscVend@56(VAR NewVendLedgEntry@1000 : Record 25;VAR OldVendLedgEntry2@1002 : Record 25;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1006 : Boolean;CheckAmount@1005 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record 382;
      OldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      TransferVendLedgEntry(NewCVLedgEntryBuf,NewVendLedgEntry,TRUE);
      OldVendLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      TransferVendLedgEntry(OldCVLedgEntryBuf2,OldVendLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscGenJnlVend@58(GenJnlLine@1000 : Record 81;OldVendLedgEntry2@1002 : Record 25;ApplnRoundingPrecision@1005 : Decimal;CheckAmount@1004 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record 382;
      OldCVLedgEntryBuf2@1003 : Record 382;
    BEGIN
      NewCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      NewCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      NewCVLedgEntryBuf."Remaining Amount" := GenJnlLine.Amount;
      TransferVendLedgEntry(OldCVLedgEntryBuf2,OldVendLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,CheckAmount));
    END;

    PROCEDURE Reverse@72(VAR ReversalEntry@1002 : Record 179;VAR ReversalEntry2@1000 : Record 179);
    VAR
      SourceCodeSetup@1016 : Record 242;
      GLEntry2@1003 : Record 17;
      ReversedGLEntry@1001 : Record 17;
      GLReg2@1021 : Record 45;
      CustLedgEntry@1004 : Record 21;
      TempCustLedgEntry@1005 : TEMPORARY Record 21;
      VendLedgEntry@1008 : Record 25;
      TempVendLedgEntry@1012 : TEMPORARY Record 25;
      BankAccLedgEntry@1009 : Record 271;
      TempBankAccLedgEntry@1015 : TEMPORARY Record 271;
      VATEntry@1010 : Record 254;
      FALedgEntry@1007 : Record 5601;
      MaintenanceLedgEntry@1011 : Record 5625;
      LedgEntryDim@1017 : Record 355;
      TempRevertTransactionNo@1024 : TEMPORARY Record 2000000026;
      FAInsertLedgEntry@1006 : Codeunit 5600;
      UpdateAnalysisView@1020 : Codeunit 410;
      NextDtldCustLedgEntryEntryNo@1014 : Integer;
      NextDtldVendLedgEntryEntryNo@1013 : Integer;
      TableID@1019 : ARRAY [10] OF Integer;
      AccNo@1018 : ARRAY [10] OF Code[20];
      Number@1022 : Integer;
      NewNumber@1023 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Register THEN
        GLReg2."No." := ReversalEntry2."G/L Register No.";

      ReversalEntry.CopyFilters(
        GLEntry2,CustLedgEntry,VendLedgEntry,BankAccLedgEntry,VATEntry,FALedgEntry,MaintenanceLedgEntry);

      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        IF ReversalEntry2.FINDSET(FALSE,FALSE) THEN
          REPEAT
            TempRevertTransactionNo.Number := ReversalEntry2."Transaction No.";
            IF TempRevertTransactionNo.INSERT THEN;
          UNTIL ReversalEntry2.NEXT = 0;
      END;

      CLEAR(GenJnlLine);
      GenJnlLine."Source Code" := SourceCodeSetup.Reversal;

      InitCodeUnit;
      GLReg.Reversed := TRUE;

      IF CustLedgEntry.FINDSET THEN
        REPEAT
          IF CustLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text015);
          TempCustLedgEntry := CustLedgEntry;
          TempCustLedgEntry.INSERT;
        UNTIL CustLedgEntry.NEXT = 0;
      IF VendLedgEntry.FINDSET THEN
        REPEAT
          IF VendLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text015);
          TempVendLedgEntry := VendLedgEntry;
          TempVendLedgEntry.INSERT;
        UNTIL VendLedgEntry.NEXT = 0;
      IF BankAccLedgEntry.FINDSET THEN
        REPEAT
          IF BankAccLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text015);
          TempBankAccLedgEntry := BankAccLedgEntry;
          TempBankAccLedgEntry.INSERT;
        UNTIL BankAccLedgEntry.NEXT = 0;

      IF TempRevertTransactionNo.FINDSET THEN;
      REPEAT
        IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN
          GLEntry2.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
        WITH GLEntry2 DO
          IF FIND('+') THEN
            REPEAT
              IF "Reversed by Entry No." <> 0 THEN
                ERROR(Text015);
              LedgEntryDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
              LedgEntryDim.SETRANGE("Entry No.","Entry No.");
              TempJnlLineDim.RESET;
              TempJnlLineDim.DELETEALL;
              DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);
              IF NOT DimMgt.CheckJnlLineDimComb(TempJnlLineDim) THEN
                ERROR(Text011,TABLECAPTION,"Entry No.",DimMgt.GetDimCombErr);
              CLEAR(TableID);
              CLEAR(AccNo);
              TableID[1] := DATABASE::"G/L Account";
              AccNo[1] := "G/L Account No.";
              IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
                ERROR(DimMgt.GetDimValuePostingErr);
              GLEntry := GLEntry2;
              IF "FA Entry No." <> 0 THEN
                FAInsertLedgEntry.InsertReverseEntry(
                  NextEntryNo,"FA Entry Type","FA Entry No.",GLEntry."FA Entry No.",NextTransactionNo,ReversalEntry2);
              GLEntry.Amount := -Amount;
              GLEntry.Quantity := -Quantity;
              GLEntry."VAT Amount" := -"VAT Amount";
              GLEntry."Debit Amount" := -"Debit Amount";
              GLEntry."Credit Amount" := -"Credit Amount";
              GLEntry."Additional-Currency Amount" := -"Additional-Currency Amount";
              GLEntry."Add.-Currency Debit Amount" := -"Add.-Currency Debit Amount";
              GLEntry."Add.-Currency Credit Amount" := -"Add.-Currency Credit Amount";
              GLEntry."Entry No." := NextEntryNo;
              GLEntry."Transaction No." := NextTransactionNo;
              GLEntry."User ID" := USERID;
              GenJnlLine.Correction :=
                (GLEntry."Debit Amount" < 0) OR (GLEntry."Credit Amount" < 0) OR
                (GLEntry."Add.-Currency Debit Amount" < 0) OR (GLEntry."Add.-Currency Credit Amount" < 0);
              GLEntry."Prior-Year Entry" := GLEntry."Posting Date" < FiscalYearStartDate;
              GLEntry."Journal Batch Name" := '';
              GLEntry."Source Code" := GenJnlLine."Source Code";
              SetReversalDescription(
                ReversalEntry."Entry Type"::"G/L Account","Entry No.",ReversalEntry2,GLEntry.Description);
              GLEntry."Reversed Entry No." := "Entry No.";
              GLEntry.Reversed := TRUE;
              // Reversal of Reversal
              IF "Reversed Entry No." <> 0 THEN BEGIN
                ReversedGLEntry.GET(GLEntry2."Reversed Entry No.");
                ReversedGLEntry."Reversed by Entry No." := 0;
                ReversedGLEntry.Reversed := FALSE;
                ReversedGLEntry.MODIFY;
                "Reversed Entry No." := GLEntry."Entry No.";
                GLEntry."Reversed by Entry No." := "Entry No.";
              END;
              "Reversed by Entry No." := GLEntry."Entry No.";
              Reversed := TRUE;
              MODIFY;
              InsertGLEntry(FALSE);
              ReversedGLEntryTemp := GLEntry;
              ReversedGLEntryTemp.INSERT;

              // gbedv GLOE -------------------------------------------------- BEGIN
              GenJnlLine."Posting Date" := GLEntry."Posting Date";
              GenJnlLine."Document No." := GLEntry."Document No.";
              // gbedv GLOE -------------------------------------------------- END
              DimMgt.CopyLedgEntryDimToLedgEntryDim(
                DATABASE::"G/L Entry","Entry No.",DATABASE::"G/L Entry",GLEntry."Entry No.");

              CASE TRUE OF
                TempCustLedgEntry.GET("Entry No."):
                  BEGIN
                    IF NOT DimMgt.CheckJnlLineDimComb(TempJnlLineDim) THEN
                      ERROR(Text011,TABLECAPTION,"Entry No.",DimMgt.GetDimCombErr);
                    CLEAR(TableID);
                    CLEAR(AccNo);
                    TableID[1] := DATABASE::Customer;
                    AccNo[1] := TempCustLedgEntry."Customer No.";
                    TableID[2] := DATABASE::"Salesperson/Purchaser";
                    AccNo[2] := TempCustLedgEntry."Salesperson Code";
                    IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
                      ERROR(DimMgt.GetDimValuePostingErr);
                    ReverseCustLedgEntry(
                      TempCustLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,NextDtldCustLedgEntryEntryNo,ReversalEntry2);
                    TempCustLedgEntry.DELETE;
                  END;
                TempVendLedgEntry.GET("Entry No."):
                  BEGIN
                    IF NOT DimMgt.CheckJnlLineDimComb(TempJnlLineDim) THEN
                      ERROR(Text011,TABLECAPTION,"Entry No.",DimMgt.GetDimCombErr);
                    CLEAR(TableID);
                    CLEAR(AccNo);
                    TableID[1] := DATABASE::Vendor;
                    AccNo[1] := TempVendLedgEntry."Vendor No.";
                    TableID[2] := DATABASE::"Salesperson/Purchaser";
                    AccNo[2] := TempVendLedgEntry."Purchaser Code";
                    IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
                      ERROR(DimMgt.GetDimValuePostingErr);
                    ReverseVendLedgEntry(
                      TempVendLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,NextDtldVendLedgEntryEntryNo,ReversalEntry2);
                    TempVendLedgEntry.DELETE;
                  END;
                TempBankAccLedgEntry.GET("Entry No."):
                  BEGIN
                    IF NOT DimMgt.CheckJnlLineDimComb(TempJnlLineDim) THEN
                      ERROR(Text011,TABLECAPTION,"Entry No.",DimMgt.GetDimCombErr);
                    CLEAR(TableID);
                    CLEAR(AccNo);
                    TableID[1] := DATABASE::"Bank Account";
                    AccNo[1] := TempBankAccLedgEntry."Bank Account No.";
                    IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
                      ERROR(DimMgt.GetDimValuePostingErr);
                    ReverseBankAccLedgEntry(TempBankAccLedgEntry,GLEntry."Entry No.",ReversalEntry2);
                    TempBankAccLedgEntry.DELETE;
                  END;
              END;
            UNTIL NEXT(-1) = 0;
      UNTIL TempRevertTransactionNo.NEXT = 0;

      IF FALedgEntry.FINDSET THEN
        REPEAT
          FAInsertLedgEntry.CheckFAReverseEntry(FALedgEntry)
        UNTIL FALedgEntry.NEXT = 0;

      IF MaintenanceLedgEntry.FINDSET THEN
        REPEAT
          FAInsertLedgEntry.CheckMaintReverseEntry(MaintenanceLedgEntry)
        UNTIL FALedgEntry.NEXT = 0;

      FAInsertLedgEntry.FinishFAReverseEntry(GLReg);

      IF NOT TempCustLedgEntry.ISEMPTY THEN
        ERROR(Text014,CustLedgEntry.TABLECAPTION,GLEntry.TABLECAPTION);
      IF NOT TempVendLedgEntry.ISEMPTY THEN
        ERROR(Text014,VendLedgEntry.TABLECAPTION,GLEntry.TABLECAPTION);
      IF NOT TempBankAccLedgEntry.ISEMPTY THEN
        ERROR(Text014,BankAccLedgEntry.TABLECAPTION,GLEntry.TABLECAPTION);

      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        TempRevertTransactionNo.FINDSET;
        REPEAT
          VATEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
          ReverseVAT(VATEntry);
        UNTIL TempRevertTransactionNo.NEXT = 0;
      END ELSE
        ReverseVAT(VATEntry);

      TempJnlLineDim.DELETEALL;
      FinishCodeunit;

      IF GLReg2."No." <> 0 THEN
        IF GLReg2.GET(GLReg2."No.") THEN BEGIN
          GLReg2.Reversed := TRUE;
          GLReg2.MODIFY;
        END;

      UpdateAnalysisView.UpdateAll(0,TRUE);
    END;

    LOCAL PROCEDURE ReverseCustLedgEntry@71(CustLedgEntry@1000 : Record 21;NewEntryNo@1001 : Integer;Correction@1006 : Boolean;VAR NextDtldCustLedgEntryEntryNo@1003 : Integer;VAR ReversalEntry@1008 : Record 179);
    VAR
      NewCustLedgEntry@1002 : Record 21;
      ReversedCustLedgEntry@1007 : Record 21;
      DtldCustLedgEntry@1005 : Record 379;
      NewDtldCustLedgEntry@1004 : Record 379;
    BEGIN
      WITH NewCustLedgEntry DO BEGIN
        NewCustLedgEntry := CustLedgEntry;
        "Sales (LCY)" := -"Sales (LCY)";
        "Profit (LCY)" := -"Profit (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Given (LCY)" := -"Pmt. Disc. Given (LCY)";
        Positive := NOT Positive;
        "Adjusted Currency Factor" := -"Adjusted Currency Factor";
        "Original Currency Factor" := -"Original Currency Factor";
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := NextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := GenJnlLine."Source Code";
        SetReversalDescription(
          ReversalEntry."Entry Type"::Customer,CustLedgEntry."Entry No.",ReversalEntry,Description);
        "Reversed Entry No." := CustLedgEntry."Entry No.";
        Reversed := TRUE;
        "Applies-to ID" := '';
        // Reversal of Reversal
        IF CustLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedCustLedgEntry.GET(CustLedgEntry."Reversed Entry No.");
          ReversedCustLedgEntry."Reversed by Entry No." := 0;
          ReversedCustLedgEntry.Reversed := FALSE;
          ReversedCustLedgEntry.MODIFY;
          CustLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := CustLedgEntry."Entry No.";
        END;
        CustLedgEntry."Applies-to ID" := '';
        CustLedgEntry."Reversed by Entry No." := "Entry No.";
        CustLedgEntry.Reversed := TRUE;
        CustLedgEntry.MODIFY;
        INSERT;

        IF NextDtldCustLedgEntryEntryNo = 0 THEN BEGIN
          DtldCustLedgEntry.FINDLAST;
          NextDtldCustLedgEntryEntryNo := DtldCustLedgEntry."Entry No." + 1;
        END;
        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
        DtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
        DtldCustLedgEntry.FINDSET;
        REPEAT
          DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::"Initial Entry");
          NewDtldCustLedgEntry := DtldCustLedgEntry;
          NewDtldCustLedgEntry.Amount := -NewDtldCustLedgEntry.Amount;
          NewDtldCustLedgEntry."Amount (LCY)" := -NewDtldCustLedgEntry."Amount (LCY)";
          CustUpdateDebitCredit(Correction,NewDtldCustLedgEntry);
          NewDtldCustLedgEntry."Cust. Ledger Entry No." := NewEntryNo;
          NewDtldCustLedgEntry."User ID" := USERID;
          NewDtldCustLedgEntry."Transaction No." := NextTransactionNo;
          NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
          NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
          NewDtldCustLedgEntry.INSERT;
        UNTIL DtldCustLedgEntry.NEXT = 0;

        ApplyCustLedgEntryByReversal(
          CustLedgEntry,NewCustLedgEntry,NewDtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);
        ApplyCustLedgEntryByReversal(
          NewCustLedgEntry,CustLedgEntry,DtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);

        DimMgt.CopyLedgEntryDimToLedgEntryDim(
          DATABASE::"Cust. Ledger Entry",CustLedgEntry."Entry No.",DATABASE::"Cust. Ledger Entry",NewEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseVendLedgEntry@70(VendLedgEntry@1000 : Record 25;NewEntryNo@1001 : Integer;Correction@1006 : Boolean;VAR NextDtldVendLedgEntryEntryNo@1003 : Integer;VAR ReversalEntry@1007 : Record 179);
    VAR
      NewVendLedgEntry@1002 : Record 25;
      ReversedVendLedgEntry@1008 : Record 25;
      DtldVendLedgEntry@1005 : Record 380;
      NewDtldVendLedgEntry@1004 : Record 380;
    BEGIN
      WITH NewVendLedgEntry DO BEGIN
        NewVendLedgEntry := VendLedgEntry;
        "Purchase (LCY)" := -"Purchase (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Rcd.(LCY)" := -"Pmt. Disc. Rcd.(LCY)";
        Positive := NOT Positive;
        "Adjusted Currency Factor" := -"Adjusted Currency Factor";
        "Original Currency Factor" := -"Original Currency Factor";
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := NextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := GenJnlLine."Source Code";
        SetReversalDescription(
          ReversalEntry."Entry Type"::Vendor,VendLedgEntry."Entry No.",ReversalEntry,Description);
        "Reversed Entry No." := VendLedgEntry."Entry No.";
        Reversed := TRUE;
        "Applies-to ID" := '';
        // Reversal of Reversal
        IF VendLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedVendLedgEntry.GET(VendLedgEntry."Reversed Entry No.");
          ReversedVendLedgEntry."Reversed by Entry No." := 0;
          ReversedVendLedgEntry.Reversed := FALSE;
          ReversedVendLedgEntry.MODIFY;
          VendLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := VendLedgEntry."Entry No.";
        END;
        VendLedgEntry."Applies-to ID" := '';
        VendLedgEntry."Reversed by Entry No." := "Entry No.";
        VendLedgEntry.Reversed := TRUE;
        VendLedgEntry.MODIFY;
        INSERT;

        IF NextDtldVendLedgEntryEntryNo = 0 THEN BEGIN
          DtldVendLedgEntry.FINDLAST;
          NextDtldVendLedgEntryEntryNo := DtldVendLedgEntry."Entry No." + 1;
        END;
        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
        DtldVendLedgEntry.SETRANGE(Unapplied,FALSE);
        DtldVendLedgEntry.FINDSET;
        REPEAT
          DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::"Initial Entry");
          NewDtldVendLedgEntry := DtldVendLedgEntry;
          NewDtldVendLedgEntry.Amount := -NewDtldVendLedgEntry.Amount;
          NewDtldVendLedgEntry."Amount (LCY)" := -NewDtldVendLedgEntry."Amount (LCY)";
          VendUpdateDebitCredit(Correction,NewDtldVendLedgEntry);
          NewDtldVendLedgEntry."Vendor Ledger Entry No." := NewEntryNo;
          NewDtldVendLedgEntry."User ID" := USERID;
          NewDtldVendLedgEntry."Transaction No." := NextTransactionNo;
          NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
          NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
          NewDtldVendLedgEntry.INSERT;
        UNTIL DtldVendLedgEntry.NEXT = 0;

        ApplyVendLedgEntryByReversal(
          VendLedgEntry,NewVendLedgEntry,NewDtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);
        ApplyVendLedgEntryByReversal(
          NewVendLedgEntry,VendLedgEntry,DtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);

        DimMgt.CopyLedgEntryDimToLedgEntryDim(
          DATABASE::"Vendor Ledger Entry",VendLedgEntry."Entry No.",
          DATABASE::"Vendor Ledger Entry",NewEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseBankAccLedgEntry@68(BankAccLedgEntry@1000 : Record 271;NewEntryNo@1001 : Integer;VAR ReversalEntry@1003 : Record 179);
    VAR
      NewBankAccLedgEntry@1002 : Record 271;
      ReversedBankAccLedgEntry@1004 : Record 271;
    BEGIN
      WITH NewBankAccLedgEntry DO BEGIN
        NewBankAccLedgEntry := BankAccLedgEntry;
        Amount := -Amount;
        "Remaining Amount" := -"Remaining Amount";
        "Amount (LCY)" := -"Amount (LCY)";
        "Debit Amount" := -"Debit Amount";
        "Credit Amount" := -"Credit Amount";
        "Debit Amount (LCY)" := -"Debit Amount (LCY)";
        "Credit Amount (LCY)" := -"Credit Amount (LCY)";
        Positive := NOT Positive;
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := NextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := GenJnlLine."Source Code";
        SetReversalDescription(
          ReversalEntry."Entry Type"::"Bank Account",BankAccLedgEntry."Entry No.",ReversalEntry,Description);
        "Reversed Entry No." := BankAccLedgEntry."Entry No.";
        Reversed := TRUE;
        // Reversal of Reversal
        IF BankAccLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedBankAccLedgEntry.GET(BankAccLedgEntry."Reversed Entry No.");
          ReversedBankAccLedgEntry."Reversed by Entry No." := 0;
          ReversedBankAccLedgEntry.Reversed := FALSE;
          ReversedBankAccLedgEntry.MODIFY;
          BankAccLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := BankAccLedgEntry."Entry No.";
        END;
        BankAccLedgEntry."Reversed by Entry No." := "Entry No.";
        BankAccLedgEntry.Reversed := TRUE;
        BankAccLedgEntry.MODIFY;
        INSERT;

        DimMgt.CopyLedgEntryDimToLedgEntryDim(
          DATABASE::"Bank Account Ledger Entry",BankAccLedgEntry."Entry No.",
          DATABASE::"Bank Account Ledger Entry",NewEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseVAT@67(VAR VATEntry@1000 : Record 254);
    VAR
      NewVATEntry@1001 : Record 254;
      ReversedVATEntry@1002 : Record 254;
    BEGIN
      IF VATEntry.FINDSET THEN
        REPEAT
          IF VATEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text015);
          WITH NewVATEntry DO BEGIN
            NewVATEntry := VATEntry;
            Base := -Base;
            Amount := -Amount;
            "Unrealized Amount" := -"Unrealized Amount";
            "Unrealized Base" := -"Unrealized Base";
            "Remaining Unrealized Amount" := -"Remaining Unrealized Amount";
            "Remaining Unrealized Base" := -"Remaining Unrealized Base";
            "Additional-Currency Amount" := -"Additional-Currency Amount";
            "Additional-Currency Base" := -"Additional-Currency Base";
            "Add.-Currency Unrealized Amt." := -"Add.-Currency Unrealized Amt.";
            "Add.-Curr. Rem. Unreal. Amount" := - "Add.-Curr. Rem. Unreal. Amount";
            "Add.-Curr. Rem. Unreal. Base" := -"Add.-Curr. Rem. Unreal. Base";
            "VAT Difference" := -"VAT Difference";
            "Add.-Curr. VAT Difference" := -"Add.-Curr. VAT Difference";
            "Transaction No." := NextTransactionNo;
            "Source Code" := GenJnlLine."Source Code";
            "User ID" := USERID;
            "Entry No." := NextVATEntryNo;
             "Reversed Entry No." := VATEntry."Entry No.";
             Reversed := TRUE;
             // Reversal of Reversal
             IF VATEntry."Reversed Entry No." <> 0 THEN BEGIN
               ReversedVATEntry.GET(VATEntry."Reversed Entry No.");
               ReversedVATEntry."Reversed by Entry No." := 0;
               ReversedVATEntry.Reversed := FALSE;
               ReversedVATEntry.MODIFY;
               VATEntry."Reversed Entry No." := "Entry No.";
               "Reversed by Entry No." := VATEntry."Entry No.";
             END;
             VATEntry."Reversed by Entry No." := "Entry No.";
             VATEntry.Reversed := TRUE;
             VATEntry.MODIFY;
            INSERT;
            GLEntryVatEntrylink.SETRANGE("VAT Entry No.",VATEntry."Entry No.");
            IF GLEntryVatEntrylink.FINDSET THEN
              REPEAT
                ReversedGLEntryTemp.SETRANGE("Reversed Entry No.",GLEntryVatEntrylink."G/L Entry No.");
                IF ReversedGLEntryTemp.FINDFIRST THEN
                  GLEntryVatEntrylink.InsertLink(ReversedGLEntryTemp,NewVATEntry);
              UNTIL GLEntryVatEntrylink.NEXT = 0;
            NextVATEntryNo := NextVATEntryNo + 1;
          END;
        UNTIL VATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SetReversalDescription@74(EntryType@1000 : ' ,G/L Account,Customer,Vendor,Bank Account,Fixed Asset,Maintenance,VAT';EntryNo@1001 : Integer;VAR ReversalEntry@1002 : Record 179;VAR Description@1003 : Text[50]);
    BEGIN
      ReversalEntry.RESET;
      ReversalEntry.SETRANGE("Entry Type",EntryType);
      ReversalEntry.SETRANGE("Entry No.",EntryNo);
      IF ReversalEntry.FINDFIRST THEN
        Description := ReversalEntry.Description;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntryByReversal@75(CustLedgEntry@1000 : Record 21;CustLedgEntry2@1001 : Record 21;DtldCustLedgEntry2@1002 : Record 379;AppliedEntryNo@1005 : Integer;VAR NextDtldCustLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldCustLedgEntry@1003 : Record 379;
    BEGIN
      CustLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      CustLedgEntry."Closed by Entry No." := CustLedgEntry2."Entry No.";
      CustLedgEntry."Closed at Date" := CustLedgEntry2."Posting Date";
      CustLedgEntry."Closed by Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry."Closed by Amount (LCY)" := -CustLedgEntry2."Remaining Amt. (LCY)";
      CustLedgEntry."Closed by Currency Code" := CustLedgEntry2."Currency Code";
      CustLedgEntry."Closed by Currency Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry.Open := FALSE;
      CustLedgEntry.MODIFY;

      NewDtldCustLedgEntry := DtldCustLedgEntry2;
      NewDtldCustLedgEntry."Cust. Ledger Entry No." := CustLedgEntry."Entry No.";
      NewDtldCustLedgEntry."Entry Type" := NewDtldCustLedgEntry."Entry Type"::Application;
      NewDtldCustLedgEntry."Applied Cust. Ledger Entry No." := AppliedEntryNo;
      NewDtldCustLedgEntry."User ID" := USERID;
      NewDtldCustLedgEntry."Transaction No." := NextTransactionNo;
      NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
      NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
      NewDtldCustLedgEntry.INSERT;
    END;

    LOCAL PROCEDURE ApplyVendLedgEntryByReversal@76(VendLedgEntry@1000 : Record 25;VendLedgEntry2@1001 : Record 25;DtldVendLedgEntry2@1002 : Record 380;AppliedEntryNo@1005 : Integer;VAR NextDtldVendLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldVendLedgEntry@1003 : Record 380;
    BEGIN
      VendLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      VendLedgEntry."Closed by Entry No." := VendLedgEntry2."Entry No.";
      VendLedgEntry."Closed at Date" := VendLedgEntry2."Posting Date";
      VendLedgEntry."Closed by Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry."Closed by Amount (LCY)" := -VendLedgEntry2."Remaining Amt. (LCY)";
      VendLedgEntry."Closed by Currency Code" := VendLedgEntry2."Currency Code";
      VendLedgEntry."Closed by Currency Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry.Open := FALSE;
      VendLedgEntry.MODIFY;

      NewDtldVendLedgEntry := DtldVendLedgEntry2;
      NewDtldVendLedgEntry."Vendor Ledger Entry No." := VendLedgEntry."Entry No.";
      NewDtldVendLedgEntry."Entry Type" := NewDtldVendLedgEntry."Entry Type"::Application;
      NewDtldVendLedgEntry."Applied Vend. Ledger Entry No." := AppliedEntryNo;
      NewDtldVendLedgEntry."User ID" := USERID;
      NewDtldVendLedgEntry."Transaction No." := NextTransactionNo;
      NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
      NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
      NewDtldVendLedgEntry.INSERT;
    END;

    PROCEDURE PostPmtDiscountVATByUnapply@77(ReverseChargeVATAccNo@1002 : Code[20];VATAccNo@1001 : Code[20];VATEntry@1000 : Record 254);
    BEGIN
      // gbedv DC -------------------------------------------------- BEGIN
      SkipDimCheck := TRUE;
      // gbedv DC -------------------------------------------------- END
      InitGLEntry(ReverseChargeVATAccNo,VATEntry.Amount,0,FALSE,TRUE);
      // gbedv DC -------------------------------------------------- BEGIN
      IF OPplusEnabled THEN
        FinanceTools.DimCheckVATEntry(ReverseChargeVATAccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,
          VATEntry."Entry No.");
      // gbedv DC -------------------------------------------------- END
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      // gbedv DC -------------------------------------------------- BEGIN
      SkipDimCheck := TRUE;
      // gbedv DC -------------------------------------------------- END
      InsertGLEntry(TRUE);

      InitGLEntry(VATAccNo,-VATEntry.Amount,0,FALSE,TRUE);
      // gbedv DC -------------------------------------------------- BEGIN
      IF OPplusEnabled THEN
        FinanceTools.DimCheckVATEntry(VATAccNo,GLEntry."Entry No.",GenJnlLine,TempGLEntryPmtCorrection,
          VATEntry."Entry No.");
      // gbedv DC -------------------------------------------------- END
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount);
      InsertGLEntry(TRUE);
    END;

    LOCAL PROCEDURE HandlDtlAddjustment@82(DebitAddjustment@1000 : Decimal;DebitAddjustmentAddCurr@1001 : Decimal;CreditAddjustment@1002 : Decimal;CreditAddjustmentAddCurr@1003 : Decimal;TotalAmountLCY@1004 : Decimal;TotalAmountAddCurr@1005 : Decimal;GLAcc@1007 : Code[20]);
    VAR
      GLInitDone@1006 : Boolean;
    BEGIN
      GLInitDone := FALSE;
      IF (TotalAmountLCY > 0) OR ((TotalAmountLCY = 0) AND (TotalAmountAddCurr > 0)) THEN BEGIN
        IF ((DebitAddjustment <> 0) OR (DebitAddjustmentAddCurr <> 0)) AND
           ((TotalAmountLCY + DebitAddjustment <> 0) OR (TotalAmountAddCurr + DebitAddjustmentAddCurr <> 0)) THEN BEGIN
          InitGLEntry(
             GLAcc,-DebitAddjustment,-DebitAddjustmentAddCurr,TRUE,TRUE);
          GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
          InsertGLEntry(TRUE);
          InitGLEntry(
            GLAcc,TotalAmountLCY + DebitAddjustment,
            TotalAmountAddCurr + DebitAddjustmentAddCurr,TRUE,TRUE);
          GLInitDone := TRUE;
        END;
      END ELSE IF TotalAmountLCY < 0 THEN BEGIN
        IF ((CreditAddjustment <> 0) OR (CreditAddjustmentAddCurr <> 0)) AND
           ((TotalAmountLCY + CreditAddjustment <> 0) OR (TotalAmountAddCurr + CreditAddjustmentAddCurr <> 0)) THEN BEGIN
          InitGLEntry(
             GLAcc,-CreditAddjustment,-CreditAddjustmentAddCurr,TRUE,TRUE);
          GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
          InsertGLEntry(TRUE);
          InitGLEntry(
            GLAcc,TotalAmountLCY + CreditAddjustment,
            TotalAmountAddCurr + CreditAddjustmentAddCurr,TRUE,TRUE);
          GLInitDone := TRUE;
        END;
      END;

      IF NOT GLInitDone THEN
        InitGLEntry(GLAcc,TotalAmountLCY,TotalAmountAddCurr,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CollectAddjustment@81(VAR DebitAddjustment@1003 : Decimal;VAR DebitAddjustmentAddCurr@1002 : Decimal;VAR CreditAddjustment@1001 : Decimal;VAR CreditAddjustmentAddCurr@1000 : Decimal;Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal);
    BEGIN
      IF (Amount > 0) OR ((Amount = 0) AND (AmountAddCurr > 0)) THEN BEGIN
        DebitAddjustment := DebitAddjustment + Amount;
        DebitAddjustmentAddCurr := DebitAddjustmentAddCurr + AmountAddCurr;
      END ELSE BEGIN
        CreditAddjustment := CreditAddjustment + Amount;
        CreditAddjustmentAddCurr := CreditAddjustmentAddCurr + AmountAddCurr;
      END;
    END;

    PROCEDURE SetOverDimErr@79();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    LOCAL PROCEDURE PostJob@78();
    BEGIN
      IF JobLine THEN BEGIN
        JobLine := FALSE;
        JobPostLine.PostGenJnlLine(GenJnlLine,GLEntry,TempJnlLineDim);
      END;
    END;

    PROCEDURE InsertVatEntriesFromTemp@83(VAR DtldCVLedgEntryBuf@1000 : Record 383);
    VAR
      Complete@1001 : Boolean;
      LinkedAmount@1002 : Decimal;
    BEGIN
      TempVatEntry.SETRANGE("Gen. Bus. Posting Group",GLEntry."Gen. Bus. Posting Group");
      TempVatEntry.SETRANGE("Gen. Prod. Posting Group",GLEntry."Gen. Prod. Posting Group");
      TempVatEntry.SETRANGE("VAT Bus. Posting Group",GLEntry."VAT Bus. Posting Group");
      TempVatEntry.SETRANGE("VAT Prod. Posting Group",GLEntry."VAT Prod. Posting Group");
      CASE DtldCVLedgEntryBuf."Entry Type" OF
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          TempVatEntry.SETRANGE("Entry No.",0,999999);
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          TempVatEntry.SETRANGE("Entry No.",1000000,1999999);
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          TempVatEntry.SETRANGE("Entry No.",2000000,2999999)
      END;
      TempVatEntry.FINDSET;
      REPEAT
        VATEntry := TempVatEntry;
        VATEntry."Entry No." := NextVATEntryNo;
        VATEntry.INSERT;
        // gbedv DC -------------------------------------------------- BEGIN
          IF OPplusEnabled THEN
            IF TempGLEntryPmtCorrection.GET(TempVatEntry."Entry No.") THEN
              FinanceTools.VATDimensionUpdate(TempGLEntryPmtCorrection,VATEntry,GenJnlLine);
        // gbedv DC -------------------------------------------------- END
        NextVATEntryNo := NextVATEntryNo + 1;
        IF VATEntry."Unrealized VAT Entry No." = 0 THEN
          GLEntryVatEntrylink.InsertLink(GLEntry,VATEntry);
        TempVatEntry.DELETE;
        LinkedAmount := LinkedAmount + VATEntry.Base;
        Complete := LinkedAmount = -DtldCVLedgEntryBuf."Amount (LCY)";
      UNTIL Complete OR (TempVatEntry.NEXT = 0);
    END;

    PROCEDURE ABSMin@84(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(Decimal1) < ABS(Decimal2) THEN
        EXIT(Decimal1);
      EXIT(Decimal2);
    END;

    PROCEDURE CostAcc@1105000004(GLEntry@1105000005 : Record 17);
    BEGIN
      // Start CKL01.dg
      CostAccSetup.GET;
      IF CostAccSetup."Automatic Cost Posting" THEN
        IF (GLEntry."Global Dimension 1 Code" <> '') AND
           ((GLEntry."Global Dimension 2 Code" = '') OR CostAccSetup."Only Cost Accounting")THEN BEGIN
          GLAcc.GET(GLEntry."G/L Account No.");
          IF (GLAcc."Cost Account No." <> '') THEN BEGIN

            CostAccJnlLine.INIT;
            CostAccJnlLine."Journal Template Name" := '';
            CostAccJnlLine."Journal Batch Name" := '';
            CostAccJnlLine."Line No." := CostAccJnlLine."Line No." + 10000;
            CostAccJnlLine."Posting Date" := GLEntry."Posting Date";
            CostAccJnlLine."Posting Type" := CostAccJnlLine."Posting Type"::Cost;
            CostAccJnlLine."Shortcut Dimension 1 Code" := GLEntry."Global Dimension 1 Code";
            CostAccJnlLine."Cost Account No." := GLAcc."Cost Account No.";
            CostAccJnlLine."Shortcut Dimension 2 Code" := GLEntry."Global Dimension 2 Code";
            CostAccJnlLine."Reason Code" := GLEntry."Reason Code";
            CostAccJnlLine."Source Code" := GLEntry."Source Code";
            CostAccJnlLine."Document No." := GLEntry."Document No.";
            CostAccJnlLine.Description := GLEntry.Description;
            CostAccJnlLine."User ID" := USERID;
            CostAccJnlLine."Document Date" := GLEntry."Document Date";
            CostAccJnlLine."Gen. Bus. Posting Group" := GLEntry."Gen. Bus. Posting Group";
            CostAccJnlLine."Gen. Prod. Posting Group" := GLEntry."Gen. Prod. Posting Group";
            CostAccJnlLine."Business Unit Code" := GLEntry."Business Unit Code";
            CostAccJnlLine."Operational Amount" := GLEntry.Amount;
            CostAccJnlLine."Tax Amount" := GLEntry.Amount;
            CostAccJnlLine."Entry No. General Ledger Entry" := GLEntry."Entry No.";
            CostAccJnlLine.INSERT;

            LedgerEntryDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
            LedgerEntryDim.SETRANGE("Entry No.",GLEntry."Entry No.");
            IF LedgerEntryDim.FIND('-') THEN
              REPEAT
                JnlLineDim.INIT;
                JnlLineDim."Table ID" := DATABASE::"Cost Account Journal Line";
                JnlLineDim."Journal Template Name" := CostAccJnlLine."Journal Template Name";
                JnlLineDim."Journal Batch Name" := CostAccJnlLine."Journal Batch Name";
                JnlLineDim."Journal Line No." := CostAccJnlLine."Line No.";
                JnlLineDim."Dimension Code" := LedgerEntryDim."Dimension Code";
                JnlLineDim."Dimension Value Code" := LedgerEntryDim."Dimension Value Code";
                JnlLineDim.INSERT;
              UNTIL LedgerEntryDim.NEXT = 0;

            SourceCodeSetup.GET;
            AutomaticCostPosting.CreateDimCostAcc(CostAccJnlLine,SourceCodeSetup."Transfer G/L to Cost Account");

            SplitAmount.RUN(CostAccJnlLine);
            CostAccJnlLine."System-Created Entry" := TRUE;
            CostAccJnlLine.MODIFY;

            PostCostAccJnlLine.RUN(CostAccJnlLine);
            DimMgt.DeleteJnlLineDim(DATABASE::"Cost Account Journal Line",
              CostAccJnlLine."Journal Template Name",
              CostAccJnlLine."Journal Batch Name",CostAccJnlLine."Line No.",0);
            CostAccJnlLine.DELETE;
          END;
        END;
      // Stop CKL01.dg
    END;

    PROCEDURE ProjAcc@1105000006(GLEntry@1105000007 : Record 17);
    BEGIN
      // Start CKL01.dg
      ProjAccSetup.GET;
      IF ProjAccSetup."Automatic Cost Posting" THEN
        IF (GLEntry."Global Dimension 2 Code" <> '') THEN BEGIN
          GLAcc.GET(GLEntry."G/L Account No.");
          IF (GLAcc."Project Account No." <> '') THEN BEGIN
            ProjAccJnlLine.INIT;
            ProjAccJnlLine."Journal Template Name" := '';
            ProjAccJnlLine."Journal Batch Name" := '';
            ProjAccJnlLine."Line No." := ProjAccJnlLine."Line No." + 10000;
            ProjAccJnlLine."Posting Date" := GLEntry."Posting Date";
            ProjAccJnlLine."Posting Type" := ProjAccJnlLine."Posting Type"::Cost;
            ProjAccJnlLine."Shortcut Dimension 1 Code" := GLEntry."Global Dimension 1 Code";
            ProjAccJnlLine."Project Account No." := GLAcc."Project Account No.";
            ProjAccJnlLine."Shortcut Dimension 2 Code" := GLEntry."Global Dimension 2 Code";
            ProjAccJnlLine."Reason Code" := GLEntry."Reason Code";
            ProjAccJnlLine."Source Code" := GLEntry."Source Code";
            ProjAccJnlLine."Document No." := GLEntry."Document No.";
            ProjAccJnlLine.Description := GLEntry.Description;
            ProjAccJnlLine."User ID" := USERID;
            ProjAccJnlLine."Document Date" := GLEntry."Document Date";
            ProjAccJnlLine."Gen. Bus. Posting Group" := GLEntry."Gen. Bus. Posting Group";
            ProjAccJnlLine."Gen. Prod. Posting Group" := GLEntry."Gen. Prod. Posting Group";
            ProjAccJnlLine."Business Unit Code" := GLEntry."Business Unit Code";
            ProjAccJnlLine."Operational Amount" := GLEntry.Amount;
            ProjAccJnlLine."Tax Amount" := GLEntry.Amount;
            ProjAccJnlLine."Operational Amount Var" := GLEntry.Amount;
            ProjAccJnlLine."Tax Amount Var" := GLEntry.Amount;
            ProjAccJnlLine."Entry No. General Ledger Entry" := GLEntry."Entry No.";

            LedgerEntryDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
            LedgerEntryDim.SETRANGE("Entry No.",GLEntry."Entry No.");
            IF LedgerEntryDim.FIND('-') THEN
              REPEAT
                JnlLineDim.INIT;
                JnlLineDim."Table ID" := DATABASE::"Project Account Journal Line";
                JnlLineDim."Journal Template Name" := ProjAccJnlLine."Journal Template Name";
                JnlLineDim."Journal Batch Name" := ProjAccJnlLine."Journal Batch Name";
                JnlLineDim."Journal Line No." := ProjAccJnlLine."Line No.";
                JnlLineDim."Dimension Code" := LedgerEntryDim."Dimension Code";
                JnlLineDim."Dimension Value Code" := LedgerEntryDim."Dimension Value Code";
                JnlLineDim.INSERT;
              UNTIL LedgerEntryDim.NEXT = 0;

            SourceCodeSetup.GET;
            AutomaticCostPosting.CreateDimProjAcc(ProjAccJnlLine,SourceCodeSetup."Transfer G/L to Proj. Account");
            PostProjAccJnlLine.RUN(ProjAccJnlLine);
            DimMgt.DeleteJnlLineDim(DATABASE::"Project Account Journal Line",
              ProjAccJnlLine."Journal Template Name",
              ProjAccJnlLine."Journal Batch Name",ProjAccJnlLine."Line No.",0);
          END;
        END;
      // Stop CKL01.dg
    END;

    PROCEDURE FindCustPostGroup@1000000010(_PostGroup@1000000000 : Code[10];_PaymMethodCode@1000000002 : Code[10]) : Code[10];
    VAR
      LT_CustPostGroupPaym@1000000001 : Record 50046;
    BEGIN
      //A/gob-ko/19052015/H4277
      {
      // 3.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      IF (_PostGroup <> '') AND (_PaymMethodCode <> '') THEN
        IF LT_CustPostGroupPaym.GET(_PostGroup,_PaymMethodCode) THEN BEGIN
          LT_CustPostGroupPaym.TESTFIELD("Cust. Post. Group Paymentprov.");
          EXIT(LT_CustPostGroupPaym."Cust. Post. Group Paymentprov.");
        END;
      EXIT(_PostGroup);
      // 3.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      }
      //E/gob-ko/19052015/H4277
    END;

    PROCEDURE "++++ OPplus ++++"@5157809();
    BEGIN
    END;

    PROCEDURE PostCustExtended@5157802(VAR CLEntry@1000 : Record 21);
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      IF OPplusEnabled THEN
        FinanceTools.UpdateCLEntry(CLEntry,GenJnlLine,Cust);
      // gbedv EA -------------------------------------------------- END
      // gbedv VAL ------------------------------------------------- BEGIN
      IF OPplusVALEnabled THEN
        VALTools.UpdateCLEntry(CLEntry,GenJnlLine);
      // gbedv VAL ------------------------------------------------- END
      // gbedv PMT ------------------------------------------------- BEGIN
      IF OPplusPmtEnabled THEN
        PmtTools.UpdateCLEntry(CLEntry,GenJnlLine);
      // gbedv PMT ------------------------------------------------- END
    END;

    PROCEDURE PostVendExtended@5157803(VAR VLEntry@1000 : Record 25);
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      IF OPplusEnabled THEN
        FinanceTools.UpdateVLEntry(VLEntry,GenJnlLine,Vend);
      // gbedv EA -------------------------------------------------- END
      // gbedv VAL ------------------------------------------------- BEGIN
      IF OPplusVALEnabled THEN
        VALTools.UpdateVLEntry(VLEntry,GenJnlLine);
      // gbedv VAL ------------------------------------------------- END
      // gbedv TAX ------------------------------------------------- BEGIN
      IF OPplusAnalysisEnabled THEN
        OPplusAnalysisSetup.UpdateVLEntry(VLEntry,GenJnlLine);
      // gbedv TAX ------------------------------------------------- END
      // gbedv PMT ------------------------------------------------- BEGIN
      IF OPplusPmtEnabled THEN
        PmtTools.UpdateVLEntry(VLEntry,GenJnlLine);
      // gbedv PMT ------------------------------------------------- END
    END;

    PROCEDURE PostExtApplication@5157804();
    VAR
      GenJnlBatch@5157809 : Record 232;
      GenJnlOriginal@5157808 : Record 81;
      GenJnlLine5@5157807 : Record 81;
      TempJnlLineDim3@5157806 : TEMPORARY Record 356;
      LedgEntryDim@5157805 : Record 355;
      GLAccount3@5157804 : Record 15;
      GLOpenEntries@5157803 : Boolean;
      Account@5157802 : Boolean;
      TEXT001@5157811 : TextConst 'DEU=Es wurde kein gÅltiges Konto/Gegenkonto fÅr den Ausgleich erkannt.;ENU=There is no valid Account/Bal. Account for application.';
      TEXT002@5157810 : TextConst 'DEU=%1 stimmt nicht mit %2 Åberein.;ENU=%1 is not equal to %2.';
      DocNo@5157812 : Text[50];
      CVDocNo@5157813 : Text[50];
      DocType@5157814 : Code[10];
    BEGIN
      // gbedv EA -------------------------------------------------- BEGIN
      IF GenJnlLine."Bal. Account No." <> '' THEN
        TotalAmt5 := 0
      ELSE
        TotalAmt5 := -GenJnlLine."Amount (LCY)";
      GenJnlLine.CALCFIELDS("Allocated Application Amount","Allocated Appln. Amount (LCY)"); // PMT CC
      IF GenJnlLine."Applied Account Type" IN
        [GenJnlLine."Applied Account Type"::"G/L Account",GenJnlLine."Applied Account Type"::"Bank Account"]
      THEN BEGIN
        IF ABS(GenJnlLine."Amount (LCY)") <> ABS(GenJnlLine."Allocated Appln. Amount (LCY)") THEN   // PMT CC
          ERROR(TEXT002,GenJnlLine.FIELDCAPTION(Amount),GenJnlLine.FIELDCAPTION("Allocated Application Amount"));
      END ELSE BEGIN
        IF ABS(GenJnlLine.Amount) <> ABS(GenJnlLine."Allocated Application Amount") THEN
          ERROR(TEXT002,GenJnlLine.FIELDCAPTION(Amount),GenJnlLine.FIELDCAPTION("Allocated Application Amount"));
      END;


      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      GenJnlOriginal := GenJnlLine;
      GenJnlLine5 := GenJnlLine;

      // gbedv DC -------------------------------------------------- BEGIN
      // Ursp. Dimensionen sichern
      GLSetup.GET;
      OPplusSetup.GET;
      IF OPplusSetup."Dim. for Apply Line Details" = OPplusSetup."Dim. for Apply Line Details"::"Applied Entry" THEN BEGIN
        TempJnlLineDim3.RESET;
        TempJnlLineDim3.DELETEALL;
        DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim,TempJnlLineDim3);
      END;
      // gbedv DC -------------------------------------------------- END

      // Erw. Ausgleich _und_ Storno geht nicht.
      GenJnlLine.TESTFIELD(Correction,FALSE);

      // Ist das Ausgleichskonto im Konto oder Gegenkonto erfasst?
      IF GenJnlLine5."Account Type" IN [GenJnlLine5."Account Type"::Customer,GenJnlLine5."Account Type"::Vendor] THEN
        Account := TRUE
      ELSE IF GenJnlLine5."Bal. Account Type" IN [GenJnlLine5."Account Type"::Customer,GenJnlLine5."Account Type"::Vendor] THEN
        Account := FALSE
      // gbedv GLOE -------------------------------------------------- BEGIN
      ELSE BEGIN
        IF GenJnlLine5."Applied Account No." <> '' THEN BEGIN
          IF NOT GLAccount3.GET(GenJnlLine5."Applied Account No.") THEN
            ERROR(TEXT001);
          IF NOT GLAccount3."Build Open Entries" THEN
            ERROR(TEXT001);
          Account := GenJnlLine5."Applied by" <> GenJnlLine5."Applied by"::"Bal. Account";
        END;
      END;
      // gbedv GLOE -------------------------------------------------- END

      // ggf. zunÑchst die gesamte Zahlungssumme ein- und ausbuchen
      IF OPplusSetup."Post Pmt. Sum" AND (GenJnlLine.Amount <> 0) AND (ApplyLineDetails.COUNT > 1) AND
         ((GenJnlLine5."Account Type" IN [GenJnlLine5."Account Type"::Customer,GenJnlLine5."Account Type"::Vendor]) OR
          (GenJnlLine5."Bal. Account Type" IN [GenJnlLine5."Account Type"::Customer,GenJnlLine5."Account Type"::Vendor]))
      THEN BEGIN
        // zunÑchst Erfasste Originalzeile buchen
        GenJnlLine5."Applies-to ID" :=
          COPYSTR(COPYSTR(USERID,1,3) +
          COPYSTR(GenJnlLine."Journal Batch Name",1,3) +
          FORMAT(GenJnlLine."Line No."),1,20);

        GenJnlLine := GenJnlLine5;
        Code(FALSE);

        // dann Originalzeile stornieren
        GenJnlLine5.Correction := TRUE;
        GenJnlLine5."System-Created Entry" := TRUE;
        GenJnlLine5.VALIDATE(Amount, -GenJnlLine5.Amount);
        IF OPplusSetup."Text Pmt. Sum Posting" <> '' THEN
          GenJnlLine5.Description := COPYSTR(OPplusSetup."Text Pmt. Sum Posting" + ' ' +
            GenJnlLine.Description,1,MAXSTRLEN(GenJnlLine.Description));
        // Gegenkontoinformation lîschen
        IF Account THEN
          GenJnlLine5."Bal. Account No." := ''
        ELSE
          GenJnlLine5."Account No." := '';
        GenJnlLine := GenJnlLine5;
        IF NOT Account THEN
          ExchAccGLJnlLine.RUN(GenJnlLine);
        Code(FALSE);
      END;

      // Dann Aufteilung buchen
      GenJnlLine5."Applies-to ID" := '';
      GenJnlLine5.Correction := FALSE;

      ApplyLineDetails.FINDSET(FALSE,FALSE);

      REPEAT
        DocNo := ApplyLineDetails."External Document No.";
        IF DocNo = '' THEN
          DocNo := ApplyLineDetails."Applies-to Doc. No.";
        CVDocNo := ApplyLineDetails."External Document No.";
        IF (CVDocNo = '') OR (ApplyLineDetails."Account Type" <> ApplyLineDetails."Account Type"::Vendor) THEN
          CVDocNo := ApplyLineDetails."Applies-to Doc. No.";
        DocType := COPYSTR(UPPERCASE(FORMAT(ApplyLineDetails."Applies-to Doc. Type")),1,1);
        GenJnlLine5."Applies-to Doc. Type" := ApplyLineDetails."Applies-to Doc. Type";
        GenJnlLine5."Applies-to Doc. No." := ApplyLineDetails."Applies-to Doc. No.";
        GenJnlLine5."ID Applied-Entry" := ApplyLineDetails."ID Applied-Entry";
        GenJnlLine5."Source Type" := ApplyLineDetails."Source Type";
        GenJnlLine5."Source No." := ApplyLineDetails."Source No.";
        GenJnlLine5."Posting Group" := ApplyLineDetails."Posting Group";
        IF ApplyLineDetails."Payment Text" <> '' THEN
          GenJnlLine5.Description := ApplyLineDetails."Payment Text"
        ELSE IF GenJnlLine5."Document Type" = GenJnlLine5."Document Type"::Payment THEN BEGIN
          IF OPplusSetup."Text Pmt. Application Posting" <> '' THEN
            GenJnlLine5.Description :=
              COPYSTR(
                STRSUBSTNO(
                  OPplusSetup."Text Pmt. Application Posting",
                  ApplyLineDetails."Applies-to Doc. No.", // %1
                  FORMAT(ApplyLineDetails.Amount,0,'<Sign><Integer Thousand><Decimals,3>'), // %2
                  FORMAT(ApplyLineDetails."Posting Payment Discount",0,'<Sign><Integer Thousand><Decimals,3>'), // %3
                  ApplyLineDetails."Pmt. Discount %", // %4
                  ApplyLineDetails."Account No.", // %5
                  ApplyLineDetails."Account Name", // %6
                  ApplyLineDetails."External Document No.", // %7
                  DocNo, // %8
                  CVDocNo, // %9
                  DocType), // %10
                1,MAXSTRLEN(GenJnlLine5.Description))
        END ELSE BEGIN
          IF OPplusSetup."Text Application Posting" <> '' THEN
            GenJnlLine5.Description :=
              COPYSTR(
                STRSUBSTNO(
                  OPplusSetup."Text Application Posting",
                  ApplyLineDetails."Applies-to Doc. No.", // %1
                  FORMAT(ApplyLineDetails.Amount,0,'<Sign><Integer Thousand><Decimals,3>'), // %2
                  FORMAT(ApplyLineDetails."Posting Payment Discount",0,'<Sign><Integer Thousand><Decimals,3>'), // %3
                  ApplyLineDetails."Pmt. Discount %", // %4
                  ApplyLineDetails."Account No.", // %5
                  ApplyLineDetails."Account Name", // %6
                  ApplyLineDetails."External Document No.", // %7
                  DocNo, // %8
                  CVDocNo, // %9
                  DocType), // %10
                1,MAXSTRLEN(GenJnlLine5.Description))
        END;
        IF Account THEN BEGIN
          GenJnlLine5."Account No." := ApplyLineDetails."Account No.";
          GenJnlLine5."Account Type" := ApplyLineDetails."Account Type";
          GenJnlLine5."Posting Payment Discount" := ApplyLineDetails."Posting Payment Discount";
          GenJnlLine5.VALIDATE(Amount,ApplyLineDetails.Amount);
          // gbedv PMT CC -
          GenJnlLine5.VALIDATE("Amount (LCY)",ApplyLineDetails."Amount (LCY)");
          GenJnlLine5."Original Currency Factor" := ApplyLineDetails."Original Currency Factor";
          // gbedv PMT CC +
        END ELSE BEGIN
          GenJnlLine5."Bal. Account No." := ApplyLineDetails."Account No.";
          GenJnlLine5."Bal. Account Type" := ApplyLineDetails."Account Type";
          GenJnlLine5."Posting Payment Discount" := -ApplyLineDetails."Posting Payment Discount";
          GenJnlLine5.VALIDATE(Amount,-ApplyLineDetails.Amount);
          // gbedv PMT CC -
          GenJnlLine5.VALIDATE("Amount (LCY)",-ApplyLineDetails."Amount (LCY)");
          GenJnlLine5."Original Currency Factor" := ApplyLineDetails."Original Currency Factor";
          // gbedv PMT CC +
        END;
        GenJnlOriginal.Amount := GenJnlOriginal.Amount - GenJnlLine5.Amount;
        GenJnlOriginal."Amount (LCY)" := GenJnlOriginal."Amount (LCY)" - GenJnlLine5."Amount (LCY)";

        // gbedv DC -------------------------------------------------- BEGIN
        IF (OPplusSetup."Dim. for Apply Line Details" = OPplusSetup."Dim. for Apply Line Details"::"Applied Entry") AND
           (GenJnlLine5."ID Applied-Entry" <> 0) AND
           (GenJnlLine5."Document Type" IN [GenJnlLine5."Document Type"::Payment,GenJnlLine5."Document Type"::Refund])
        THEN BEGIN
          TempJnlLineDim.RESET;
          TempJnlLineDim.DELETEALL;
          IF GenJnlLine5."Applied Account Type" = GenJnlLine5."Applied Account Type"::Customer THEN
            LedgEntryDim.SETRANGE("Table ID",DATABASE::"Cust. Ledger Entry")
          ELSE IF GenJnlLine5."Applied Account Type" = GenJnlLine5."Applied Account Type"::Vendor THEN
            LedgEntryDim.SETRANGE("Table ID",DATABASE::"Vendor Ledger Entry")
          // gbedv GLOE -------------------------------------------------- BEGIN
          ELSE IF GenJnlLine5."Applied Account Type" IN
            [GenJnlLine5."Applied Account Type"::"G/L Account", GenJnlLine5."Applied Account Type"::"Bank Account"]
          THEN
            LedgEntryDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
          // gbedv GLOE -------------------------------------------------- END
          LedgEntryDim.SETRANGE("Entry No.",GenJnlLine5."ID Applied-Entry");
          DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);
          TempJnlLineDim3.SETFILTER("Dimension Value Code",'<>%1','');
          IF TempJnlLineDim3.FINDSET(FALSE,FALSE) THEN
            REPEAT
              TempJnlLineDim.SETRANGE("Dimension Code",TempJnlLineDim3."Dimension Code");
              IF NOT TempJnlLineDim.FINDFIRST THEN BEGIN
                TempJnlLineDim3.SETRANGE("Dimension Code",TempJnlLineDim3."Dimension Code");
                DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim3,TempJnlLineDim);
                TempJnlLineDim3.SETRANGE("Dimension Code");
              END;
            UNTIL TempJnlLineDim3.NEXT = 0;
          TempJnlLineDim.RESET;
          TempJnlLineDim.SETRANGE("Dimension Code",GLSetup."Global Dimension 1 Code");
          IF TempJnlLineDim.FINDFIRST THEN
            GenJnlLine5."Shortcut Dimension 1 Code" := TempJnlLineDim."Dimension Value Code"
          ELSE
            GenJnlLine5."Shortcut Dimension 1 Code" := '';
          TempJnlLineDim.SETRANGE("Dimension Code",GLSetup."Global Dimension 2 Code");
          IF TempJnlLineDim.FINDFIRST THEN
            GenJnlLine5."Shortcut Dimension 2 Code" := TempJnlLineDim."Dimension Value Code"
          ELSE
            GenJnlLine5."Shortcut Dimension 2 Code" := '';
          TempJnlLineDim.RESET;
        END;
        // gbedv DC -------------------------------------------------- END

        //H0823 29.01.14 ARI +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        GenJnlLine5."External Document No." := ApplyLineDetails."External Document No.";
        //H0823 29.01.14 ARI -----------------------------------------------------------------

        //H0882 21.02.14 ARI +++++++++++++++++++++++++++++++++++
        GenJnlLine5."Payment Method Code" := ApplyLineDetails."Payment Method Code";
        //H0882 21.02.14 ARI -----------------------------------

        GenJnlLine := GenJnlLine5;
        IF NOT Account THEN
          ExchAccGLJnlLine.RUN(GenJnlLine);
        Code(FALSE);
      UNTIL ApplyLineDetails.NEXT(1) = 0;

      // ggf. Ausgleichssaldo buchen
      IF (GenJnlOriginal.Amount <> 0) THEN BEGIN
        GenJnlLine5."Applies-to Doc. Type" := 0;
        GenJnlLine5."Applies-to Doc. No." := '';
        GenJnlLine5."ID Applied-Entry" := 0;
        GenJnlLine5."Source Type" := GenJnlOriginal."Source Type";
        GenJnlLine5."Source No." := GenJnlOriginal."Source No.";
        GenJnlLine5."Posting Group" := GenJnlOriginal."Posting Group";
        IF OPplusSetup."Text Balance Posting" <> '' THEN
          GenJnlLine5.Description := OPplusSetup."Text Balance Posting";
        GenJnlLine5."Account No." := GenJnlOriginal."Account No.";
        GenJnlLine5."Account Type" := GenJnlOriginal."Account Type";
        GenJnlLine5."Posting Payment Discount" := 0;
        GenJnlLine5.VALIDATE(Amount,GenJnlOriginal.Amount);
        GenJnlOriginal.Amount := GenJnlOriginal.Amount - GenJnlLine5.Amount;
        GenJnlOriginal."Amount (LCY)" := GenJnlOriginal."Amount (LCY)" - GenJnlLine5."Amount (LCY)";

        GenJnlLine := GenJnlLine5;
        IF NOT Account THEN
          ExchAccGLJnlLine.RUN(GenJnlLine);
        Code(FALSE);
      END;

      // gbedv DC -------------------------------------------------- BEGIN
      // Ursp. Dimensionen zurÅcksichern
      IF OPplusSetup."Dim. for Apply Line Details" = OPplusSetup."Dim. for Apply Line Details"::"Applied Entry" THEN BEGIN
        TempJnlLineDim3.RESET;
        TempJnlLineDim.RESET;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim3,TempJnlLineDim);
      END;
      // gbedv DC -------------------------------------------------- END

      // ggf. Rundungsdifferenz buchen
      // IF (GenJnlOriginal.Amount = 0) AND (GenJnlOriginal."Amount (LCY)" <> 0) THEN BEGIN
      IF TotalAmt5 <> 0 THEN BEGIN
        GenJnlLine5."Applies-to Doc. Type" := 0;
        GenJnlLine5."Applies-to Doc. No." := '';
        GenJnlLine5."ID Applied-Entry" := 0;
        GenJnlLine5."Source Type" := 0;
        GenJnlLine5."Source No." := '';
        GenJnlLine5."Posting Group" := '';
        IF OPplusSetup."Text Rounding Posting" <> '' THEN
          GenJnlLine5.Description := OPplusSetup."Text Rounding Posting";
        GenJnlLine5."Account Type" := 0;
        GenJnlLine5."Posting Payment Discount" := 0;
        GenJnlLine5."Currency Code" := '';
        IF Account THEN
          GenJnlLine5.Amount := -TotalAmt5
        ELSE
          GenJnlLine5.Amount := TotalAmt5;
        GenJnlLine5."Bal. Account No." := '';
        IF Currency.Code <> GenJnlOriginal."Currency Code" THEN
          Currency.GET(GenJnlOriginal."Currency Code");
        IF GenJnlLine5.Amount > 0 THEN BEGIN
          Currency.TESTFIELD("Conv. LCY Rndg. Debit Acc.");
          GenJnlLine5."Account No." := Currency."Conv. LCY Rndg. Debit Acc."
        END ELSE BEGIN
          Currency.TESTFIELD("Conv. LCY Rndg. Credit Acc.");
          GenJnlLine5."Account No." := Currency."Conv. LCY Rndg. Credit Acc.";
        END;
        GenJnlLine5.VALIDATE(Amount);

        GenJnlLine := GenJnlLine5;
        Code(FALSE);
      END;

      ApplyLineDetails.DELETEALL;
      // gbedv EA -------------------------------------------------- END
    END;

    PROCEDURE DimensionUpdate@5157805(VAR GLEntryJnlDim@5157803 : Record 17;VAR GLEntryPmtCorr@5157802 : Record 17);
    VAR
      VatEntryDim@5157804 : Record 355;
    BEGIN
      // gbedv DC -------------------------------------------------- BEGIN
      IF NOT OPplusEnabled THEN
        EXIT;
      // In jedem Fall Global Dim. Code 1 und 2 verifizieren
      IF GLEntryJnlDim."Global Dimension 1 Code" <> GLEntry."Global Dimension 1 Code" THEN BEGIN
        IF LedgerEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Entry No.",GLSetup."Global Dimension 1 Code") THEN BEGIN
          LedgerEntryDim."Dimension Value Code" := GLEntry."Global Dimension 1 Code";
          LedgerEntryDim.MODIFY;
        END ELSE BEGIN
          LedgerEntryDim."Table ID" := DATABASE::"G/L Entry";
          LedgerEntryDim."Entry No." := GLEntry."Entry No.";
          LedgerEntryDim."Dimension Code" := GLSetup."Global Dimension 1 Code";
          LedgerEntryDim."Dimension Value Code" := GLEntry."Global Dimension 1 Code";
          LedgerEntryDim.INSERT;
        END;
      END;
      IF GLEntryJnlDim."Global Dimension 2 Code" <> GLEntry."Global Dimension 2 Code" THEN BEGIN
        IF LedgerEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Entry No.",GLSetup."Global Dimension 2 Code") THEN BEGIN
          LedgerEntryDim."Dimension Value Code" := GLEntry."Global Dimension 2 Code";
          LedgerEntryDim.MODIFY;
        END ELSE BEGIN
          LedgerEntryDim."Table ID" := DATABASE::"G/L Entry";
          LedgerEntryDim."Entry No." := GLEntry."Entry No.";
          LedgerEntryDim."Dimension Code" := GLSetup."Global Dimension 2 Code";
          LedgerEntryDim."Dimension Value Code" := GLEntry."Global Dimension 2 Code";
          LedgerEntryDim.INSERT;
        END;
      END;
      // ggf. weitere Dim. Codes verifizieren
      IF (GLEntryPmtCorr."Transaction No." <> 0) AND
         (OPplusSetup."Dim. for Pmt. Disc. Corr." IN
         [OPplusSetup."Dim. for Pmt. Disc. Corr."::"VAT Entries",
          OPplusSetup."Dim. for Pmt. Disc. Corr."::"Gen. Jnl. Line (if empty VAT Entry)",
          OPplusSetup."Dim. for Pmt. Disc. Corr."::"G/L Account (if empty VAT Entry)"])
      THEN BEGIN
        VatEntryDim.RESET;
        VatEntryDim.SETRANGE("Table ID",DATABASE::"VAT Entry");
        VatEntryDim.SETRANGE("Entry No.",GLEntryPmtCorr."Transaction No.");
        IF VatEntryDim.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF NOT (VatEntryDim."Dimension Code" IN [GLSetup."Global Dimension 1 Code",GLSetup."Global Dimension 2 Code"])
            THEN BEGIN
              IF LedgerEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Entry No.",VatEntryDim."Dimension Code") THEN BEGIN
                IF LedgerEntryDim."Dimension Value Code" <> VatEntryDim."Dimension Value Code" THEN BEGIN
                  LedgerEntryDim."Dimension Value Code" := VatEntryDim."Dimension Value Code";
                  LedgerEntryDim.MODIFY;
                END;
              END ELSE BEGIN
                LedgerEntryDim."Table ID" := DATABASE::"G/L Entry";
                LedgerEntryDim."Entry No." := GLEntry."Entry No.";
                LedgerEntryDim."Dimension Code" := VatEntryDim."Dimension Code";
                LedgerEntryDim."Dimension Value Code" := VatEntryDim."Dimension Value Code";
                LedgerEntryDim.INSERT;
              END;
            END;
          UNTIL VatEntryDim.NEXT = 0;
      END;
      IF (OPplusSetup."Dim. for Pmt. Disc. Corr." IN
         [OPplusSetup."Dim. for Pmt. Disc. Corr."::"G/L Account (Always)",
          OPplusSetup."Dim. for Pmt. Disc. Corr."::"G/L Account (if empty VAT Entry)"])
      THEN BEGIN
        DefaultDimension.RESET;
        DefaultDimension.SETCURRENTKEY("Table ID","No.","Dimension Code");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GLEntryPmtCorr."G/L Account No.");
        IF DefaultDimension.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF NOT (DefaultDimension."Dimension Code" IN [GLSetup."Global Dimension 1 Code",GLSetup."Global Dimension 2 Code"])
            THEN BEGIN
              IF LedgerEntryDim.GET(DATABASE::"G/L Entry",GLEntry."Entry No.",DefaultDimension."Dimension Code") THEN BEGIN
                IF LedgerEntryDim."Dimension Value Code" <> DefaultDimension."Dimension Value Code" THEN BEGIN
                  LedgerEntryDim."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                  LedgerEntryDim.MODIFY;
                END;
              END ELSE BEGIN
                LedgerEntryDim."Table ID" := DATABASE::"G/L Entry";
                LedgerEntryDim."Entry No." := GLEntry."Entry No.";
                LedgerEntryDim."Dimension Code" := DefaultDimension."Dimension Code";
                LedgerEntryDim."Dimension Value Code" := DefaultDimension."Dimension Value Code";
                LedgerEntryDim.INSERT;
              END;
            END;
          UNTIL DefaultDimension.NEXT = 0;
      END;
      // gbedv DC -------------------------------------------------- END
    END;

    PROCEDURE DimCheck@5157806(GLAcc@5157805 : Code[20];VATEntryGlobalDim1@5157804 : Code[20];VATEntryGlobalDim2@5157803 : Code[20];VATEntryNo@5157802 : Integer);
    VAR
      DimensionValue@5157806 : Record 349;
    BEGIN
      // gbedv DC -------------------------------------------------- BEGIN
      IF NOT OPplusEnabled THEN
        EXIT;
      IF VATEntryNo <> 0 THEN BEGIN
        CASE OPplusSetup."Dim. for Pmt. Disc. Corr." OF
          OPplusSetup."Dim. for Pmt. Disc. Corr."::"VAT Entries":
            BEGIN
              GLEntry."Global Dimension 1 Code" := VATEntryGlobalDim1;
              GLEntry."Global Dimension 2 Code" := VATEntryGlobalDim2;
            END;
          OPplusSetup."Dim. for Pmt. Disc. Corr."::"Not Empty Gen. Jnl. Line":
            BEGIN
              IF GenJnlLine."Shortcut Dimension 1 Code" <> '' THEN
                GLEntry."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
              IF GenJnlLine."Shortcut Dimension 2 Code" <> '' THEN
                GLEntry."Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
            END;
          OPplusSetup."Dim. for Pmt. Disc. Corr."::"Gen. Jnl. Line (Always)":
            BEGIN
              GLEntry."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
              GLEntry."Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
            END;
          OPplusSetup."Dim. for Pmt. Disc. Corr."::"Gen. Jnl. Line (if empty VAT Entry)":
            BEGIN
              GLEntry."Global Dimension 1 Code" := VATEntryGlobalDim1;
              GLEntry."Global Dimension 2 Code" := VATEntryGlobalDim2;
              IF GLEntry."Global Dimension 1 Code" = '' THEN
                GLEntry."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
              IF GLEntry."Global Dimension 2 Code" = '' THEN
                GLEntry."Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
            END;
          OPplusSetup."Dim. for Pmt. Disc. Corr."::"G/L Account (Always)":
            BEGIN
              IF DefaultDimension.GET(DATABASE::"G/L Account",GLAcc,GLSetup."Global Dimension 1 Code") THEN
                GLEntry."Global Dimension 1 Code" := DefaultDimension."Dimension Value Code";
              IF DefaultDimension.GET(DATABASE::"G/L Account",GLAcc,GLSetup."Global Dimension 2 Code") THEN
                GLEntry."Global Dimension 2 Code" := DefaultDimension."Dimension Value Code";
            END;
          OPplusSetup."Dim. for Pmt. Disc. Corr."::"G/L Account (if empty VAT Entry)":
            BEGIN
              GLEntry."Global Dimension 1 Code" := VATEntryGlobalDim1;
              GLEntry."Global Dimension 2 Code" := VATEntryGlobalDim2;
              IF GLEntry."Global Dimension 1 Code" = '' THEN
                IF DefaultDimension.GET(DATABASE::"G/L Account",GLAcc,GLSetup."Global Dimension 1 Code") THEN
                  GLEntry."Global Dimension 1 Code" := DefaultDimension."Dimension Value Code";
              IF GLEntry."Global Dimension 2 Code" = '' THEN
                IF DefaultDimension.GET(DATABASE::"G/L Account",GLAcc,GLSetup."Global Dimension 2 Code") THEN
                  GLEntry."Global Dimension 2 Code" := DefaultDimension."Dimension Value Code";
            END;
        END;
      END;

      IF DefaultDimension.GET(DATABASE::"G/L Account",GLAcc,GLSetup."Global Dimension 1 Code") THEN BEGIN
        IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Same Code" THEN
          GLEntry."Global Dimension 1 Code" := DefaultDimension."Dimension Value Code";
        IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Code Mandatory" THEN BEGIN
          IF GLEntry."Global Dimension 1 Code" = '' THEN BEGIN
            IF GenJnlLine."Shortcut Dimension 1 Code" <> '' THEN
              GLEntry."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code"
            ELSE IF DefaultDimension."Dimension Value Code" <> '' THEN
              GLEntry."Global Dimension 1 Code" := DefaultDimension."Dimension Value Code";
          END;
          IF GLEntry."Global Dimension 1 Code" = '' THEN
            ERROR(
              Text013,
              GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
              GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
              GenJnlLine.FIELDCAPTION("Shortcut Dimension 1 Code"));
        END;
      END;
      IF DefaultDimension.GET(DATABASE::"G/L Account",GLAcc,GLSetup."Global Dimension 2 Code") THEN BEGIN
        IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Same Code" THEN
          GLEntry."Global Dimension 2 Code" := DefaultDimension."Dimension Value Code";
        IF DefaultDimension."Value Posting" = DefaultDimension."Value Posting"::"Code Mandatory" THEN BEGIN
          IF GLEntry."Global Dimension 2 Code" = '' THEN BEGIN
            IF GenJnlLine."Shortcut Dimension 2 Code" <> '' THEN
              GLEntry."Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code"
            ELSE IF DefaultDimension."Dimension Value Code" <> '' THEN
              GLEntry."Global Dimension 2 Code" := DefaultDimension."Dimension Value Code";
          END;
          IF GLEntry."Global Dimension 2 Code" = '' THEN
            ERROR(
              Text013,
              GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
              GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
              GenJnlLine.FIELDCAPTION("Shortcut Dimension 2 Code"));
        END;
      END;

      IF GLEntry."Global Dimension 1 Code" <> '' THEN BEGIN
        IF NOT DimMgt.CheckDimValue(GLSetup."Global Dimension 1 Code",GLEntry."Global Dimension 1 Code") THEN
          ERROR(Text013,
            GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
            GenJnlLine."Journal Batch Name",
            FORMAT(GenJnlLine."Line No.") + ' ' + GenJnlLine.FIELDCAPTION("Document No.") + ' ' + GenJnlLine."Document No.",
            DimMgt.GetDimErr);
      END;
      IF GLEntry."Global Dimension 2 Code" <> '' THEN BEGIN
        IF NOT DimMgt.CheckDimValue(GLSetup."Global Dimension 2 Code",GLEntry."Global Dimension 2 Code") THEN
          ERROR(Text013,
            GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
            GenJnlLine."Journal Batch Name",
            FORMAT(GenJnlLine."Line No.") + ' ' + GenJnlLine.FIELDCAPTION("Document No.") + ' ' + GenJnlLine."Document No.",
            DimMgt.GetDimErr);
      END;

      TempGLEntryPmtCorrection := GLEntry;
      TempGLEntryPmtCorrection."Transaction No." := 0;
      IF OPplusSetup."Dim. for Pmt. Disc. Corr." = OPplusSetup."Dim. for Pmt. Disc. Corr."::"VAT Entries" THEN
        TempGLEntryPmtCorrection."Transaction No." := VATEntryNo;
      TempGLEntryPmtCorrection.INSERT;
      // gbedv DC -------------------------------------------------- END
    END;

    PROCEDURE GLPostApplyGLEntry@5157807(VAR GenJnlLinePostApply@5157803 : Record 81;VAR GLEntryPostApply@5157802 : Record 17;AccNo@5157809 : Code[20]);
    VAR
      LedgEntryDim@5157808 : Record 355;
      DtldGLEntry@5157807 : Record 5157852;
      DtldCVLedgEntryBuf@5157806 : TEMPORARY Record 383;
      CVLedgEntryBuf@5157805 : Record 382;
      GLOpenEntryTools@5157804 : Codeunit 5157852;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      GenJnlLine."Applies-to ID" := GLEntryPostApply."Applies-to ID";
      GLEntry.TRANSFERFIELDS(GLEntryPostApply);
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      WITH GenJnlLine DO BEGIN
        LedgEntryDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
        LedgEntryDim.SETRANGE("Entry No.",GLEntry."Entry No.");
        TempJnlLineDim.RESET;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);

        GenJnlCheckLine.RunCheck(GenJnlLine,TempJnlLineDim);

        InitCodeUnit;

        GLEntry.TRANSFERFIELDS(GLEntryPostApply);

        IF GLAcc."No." <> GLEntry."G/L Account No." THEN
          GLAcc.GET(GLEntry."G/L Account No.");

        DtldGLEntry.LOCKTABLE;
        GLEntry.LOCKTABLE;

        // Post G/L entry
        GLEntry.CALCFIELDS("Remaining Amount");

        GLOpenEntryTools.TransferGLEntry(CVLedgEntryBuf,GLEntry,TRUE);

        GLOpenEntryTools.ApplyGLEntry(
          CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

        GLOpenEntryTools.TransferGLEntry(CVLedgEntryBuf,GLEntry,FALSE);
        GLEntry.MODIFY;

        GLOpenEntryTools.PostDtldGLEntries(
          GenJnlLine,DtldCVLedgEntryBuf,NextTransactionNo);

        IF NOT GLEntryTmp.FINDFIRST AND DtldCVLedgEntryBuf.FINDFIRST THEN BEGIN
          InitGLEntry(DtldCVLedgEntryBuf."Customer No.",0,0,FALSE,TRUE);
          IF AccNo <> '' THEN
            GLEntry."G/L Account No." := AccNo;
          InsertGLEntry(FALSE);
        END;

        DtldCVLedgEntryBuf.DELETEALL;

        FinishCodeunit;
      END;
    END;

    PROCEDURE UnapplyGLEntry@5157808(GenJnlLine2@5157803 : Record 81;DtldGLEntry@5157802 : Record 5157852);
    VAR
      DtldGLEntry2@5157810 : Record 5157852;
      NewDtldGLEntry@5157809 : Record 5157852;
      GLEntry@5157808 : Record 17;
      DtldCVLedgEntryBuf@5157807 : Record 383;
      LedgEntryDim@5157806 : Record 355;
      GenPostingSetup@5157805 : Record 252;
      PIPEntry@5157811 : Record 5157914;
      NextDtldLedgEntryEntryNo@5157804 : Integer;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      InitCodeUnit;

      DtldGLEntry.LOCKTABLE;
      GLEntry.LOCKTABLE;

      DtldGLEntry.TESTFIELD("Entry Type",DtldGLEntry."Entry Type"::Application);

      DtldGLEntry2.RESET;
      DtldGLEntry2.FINDLAST;
      NextDtldLedgEntryEntryNo := DtldGLEntry2."Entry No." + 1;
      DtldGLEntry2.SETCURRENTKEY("Transaction No.","G/L Account No.","Entry Type");
      DtldGLEntry2.SETRANGE("Transaction No.",DtldGLEntry."Transaction No.");
      DtldGLEntry2.SETRANGE("G/L Account No.",DtldGLEntry."G/L Account No.");
      DtldGLEntry2.SETFILTER("Entry Type",'>%1',DtldGLEntry."Entry Type"::"Initial Entry");

      DtldGLEntry2.FINDSET(TRUE,FALSE);
      REPEAT
        DtldGLEntry2.TESTFIELD(Unapplied,FALSE);

        NewDtldGLEntry := DtldGLEntry2;
        NewDtldGLEntry."Entry No." := NextDtldLedgEntryEntryNo;
        NewDtldGLEntry."Posting Date" := GenJnlLine."Posting Date";
        NewDtldGLEntry."Transaction No." := NextTransactionNo;
        NewDtldGLEntry.Amount := -DtldGLEntry2.Amount;
        NewDtldGLEntry."Debit Amount" := -DtldGLEntry2."Debit Amount";
        NewDtldGLEntry."Credit Amount" := -DtldGLEntry2."Credit Amount";
        NewDtldGLEntry.Unapplied := TRUE;
        NewDtldGLEntry."Unapplied by Entry No." := DtldGLEntry2."Entry No.";
        NewDtldGLEntry."Document No." := GenJnlLine."Document No.";
        NewDtldGLEntry."Source Code" := GenJnlLine."Source Code";
        NewDtldGLEntry."User ID" := USERID;
        NewDtldGLEntry.INSERT;
        NextDtldLedgEntryEntryNo := NextDtldLedgEntryEntryNo + 1;

        LedgEntryDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
        LedgEntryDim.SETRANGE("Entry No.",GLEntry."Entry No.");
        TempJnlLineDim.RESET;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);

        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldGLEntry);

        DtldGLEntry2.Unapplied := TRUE;
        DtldGLEntry2."Unapplied by Entry No." := NewDtldGLEntry."Entry No.";
        DtldGLEntry2.MODIFY;

        IF DtldGLEntry2."Entry Type" = DtldGLEntry2."Entry Type"::Application THEN BEGIN
          GLEntry.GET(DtldGLEntry2."Gen. Ledger Entry No.");
          IF NOT GLEntry.Open THEN BEGIN
            GLEntry.Open := TRUE;
            GLEntry."Closed by Entry No." := 0;
            GLEntry."Closed at Date" := 0D;
            GLEntry."Closed by Amount" := 0;
          END;
          GLEntry.MODIFY;
          // gbedv PMT CC -
          IF OPplusPmtEnabled THEN
            IF PIPEntry.GET(GLEntry."Entry No.") THEN BEGIN
              PIPEntry.Open := TRUE;
              PIPEntry."Closed by Entry No." := 0;
              PIPEntry."Closed at Date" := 0D;
              PIPEntry.MODIFY;
            END;
          // gbedv PMT CC +
        END;
      UNTIL DtldGLEntry2.NEXT = 0;

      IF NOT GLEntryTmp.FINDFIRST THEN BEGIN
        InitGLEntry(GenJnlLine."Account No.",0,0,FALSE,TRUE);
        InsertGLEntry(FALSE);
      END;

      FinishCodeunit;
    END;

    PROCEDURE SetupOPplus@5157810();
    BEGIN
      IF OPplusSetupRead THEN
        EXIT;
      // gbedv EA -------------------------------------------------- BEGIN
      OPplusEnabled := OPPLicenseInfo.IsBasics;
      // gbedv EA -------------------------------------------------- END
      // gbedv VAL ------------------------------------------------- BEGIN
      OPplusVALEnabled := OPPLicenseInfo.IsVaL;
      // gbedv VAL ------------------------------------------------- END
      // gbedv TAX ------------------------------------------------- BEGIN
      OPplusAnalysisEnabled := OPPLicenseInfo.IsAnalysis;
      // gbedv TAX ------------------------------------------------- END
      // gbedv PMT ------------------------------------------------- BEGIN
      OPplusPmtEnabled := OPPLicenseInfo.IsPmt;
      // gbedv PMT ------------------------------------------------- END
      OPplusSetupRead := TRUE;
      IF OPPLicenseInfo.IsBasics THEN
        OPplusSetup.GET;
    END;

    PROCEDURE GOBReleaseOrder@63500(CustEntry@1000000000 : Record 21);
    VAR
      Order@1000000001 : Record 36;
      Release@1000000002 : Codeunit 414;
    BEGIN
      //A/gob-ko/P0499/24.10.2012
      //A/gob-ko/P0558/06.11.2012
      IF GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment THEN
         EXIT;
      //E/gob-ko/P0558/06.11.2012
      Order.RESET;
      Order.SETCURRENTKEY("External Document No.");
      Order.SETRANGE("External Document No.",CustEntry."External Document No.");
      IF Order.FINDFIRST THEN BEGIN
         IF Order."Website No." = 2 THEN BEGIN
            Release.RUN(Order);

         END;
      END;
      //E/gob-ko/P0499/24.10.2012
    END;

    BEGIN
    {
      eBay1.00
      eBay#001 Aufruf FiBuErweiterung.AuftragsAusgleich
      eBay#002 Aufruf FiBuErweiterung.AuftragFakturieren
      eBay#003 Leeren von CustLedgEntry."Applies-to Doc. No." := ''bei   CustLedgEntry."Applies-to Doc. Type"::Order ausgeschaltet

      eBay1.03.09
      eBay#003SP2 Leeren "Applies-to Doc. No." bei CustLedgEntry."Applies-to Doc. Type"<>CustLedgEntry."Applies-to Doc. Type"::Order
                  deaktiviert
      eBay1.06.12
      eBay#004 Anzahlungsrechnung

      1.00  05.07.11  eich -fill "Payment Method Code"
      2.00  11.01.12  eich -fill "Payment Method Code" Customer
      3.00  30.01.12  eich -change customer "Posting Group"


      +----------------------------------------------+
      | Copyright GOB Software & Systeme             |
      +----------------------------------------------+
      | FP Commerce                                  |
      |                                              |
      +----------------------------------------------+

      Version    Datum       Berater    PSP-Code   Bemerkung
      ---------------------------------------------------------------------------
      V1.00      14.05.12    gob-ko                New Field Groupon/Gift certificate No.
      V1.01      11.07.12    gob-jvi               New Field "Unique Identifier"

      P0134      02.08.12    gob-czi               Zahlungsformcode aus Kreditor (GS)
      V1.02      23.10.12    gob-bth    P0484      Transfer new fields "Darlehen", "Zinsen"
      V1.03      24.10.12    gob-ko     P0499      Auftrag freiben bei FR
      V1.04      06.11.12    gob-ko     P0558      Auftrag freigeben FR
      V1.05      08.11.12    gob-bth    P0484      TESTFIELDS anderes Konto, je nach Laufzeit aus "Posting Group"
      V1.06      22.11.12    gob-cpe    P0573      Erweiterte Dimensionen in Sachposten
      V1.07      29.11.12    gob-bth    P0484      anderes Forderungskonto/Verbindlichkeitskonto, je nach Laufzeit aus "Posting Group"
      V1.09      11.02.13    gob-czi    P0800      Implemented knowledge base articles kb2514417 and kb979138
      V1.10      12.09.13    gob-ko     P1105      énderung Vorbelegung Customer Posting group
      V1.11      13.10.14    gob-dah    H1614      Implementation knowledge base article KB2458018

      -----------------------------------------------------
      (c) gbedv, OPplus, All rights reserved

      No.  Date       changed
      -----------------------------------------------------
      ALL  01.11.08   All modules
      EA   01.11.08   Function Extended Application
      DC   01.11.08   Global Dim. Correction with VAT Entries
      GLOE 01.11.08   Gen. Ledger Open Entries
      VAL  01.11.08   Views and Lists
      PMT  01.11.08   OPplus Payment
      TAX  01.11.08   Tax and Balance
      -----------------------------------------------------

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________

      H0823       29.01.14 ARI       Get "External Document No." from Application Details for Extended Application
      H0636       13.11.13 HCN       - DN(3),PS55931,GOB deleted from Version-List
      H0882       21.02.14 ARI       Get "Payment Method Code" from Application Details for Extended Application

      H1175       04.06.14 nst       Post "Orginial Vend. Ledger Entry No" into Vendor Ledger Entries.
      H1213       17.06.14 HCN       Reset CLE-field "On Hold" when invoicing a follow-up sales order
      H1109       17.06.14 ARI       Fill Payment Direction
      H1241       29.09.14 KM        new pmt method H24 Update dunning entry
      H4277       19.05.15 gob-ko    Back to Standard: Customer Posting Group
    }
    END.
  }
}

