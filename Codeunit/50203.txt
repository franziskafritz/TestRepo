OBJECT Codeunit 50203 Test Management
{
  OBJECT-PROPERTIES
  {
    Date=02.09.13;
    Time=14:59:54;
    Version List=HME0513;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Mode@1003 : 'Test,Publish';
      Text001@1000 : TextConst 'ENU=Active &Line,Active &Codeunit,&All';
      Text010@1005 : TextConst 'ENU=DEFAULT';
      Text011@1002 : TextConst 'ENU=Default Suite - Autogenerated';
      Text012@1007 : TextConst 'ENU=Object not compiled.';

    PROCEDURE SETPUBLISHMODE@1();
    BEGIN
      Mode := Mode::Publish;
    END;

    PROCEDURE SETTESTMODE@2();
    BEGIN
      Mode := Mode::Test;
    END;

    PROCEDURE ISPUBLISHMODE@3() : Boolean;
    BEGIN
      EXIT(Mode = Mode::Publish);
    END;

    PROCEDURE ISTESTMODE@4() : Boolean;
    BEGIN
      EXIT(Mode = Mode::Test);
    END;

    PROCEDURE GetTestCodeunits@6(VAR ToAllObjWithCaption@1000 : Record 2000000058;OnlyThoseNotInAnySuite@1003 : Boolean) : Boolean;
    VAR
      FromAllObjWithCaption@1001 : Record 2000000058;
      TestLine@1002 : Record 80002;
    BEGIN
      WITH ToAllObjWithCaption DO BEGIN
        FromAllObjWithCaption.SETRANGE("Object Type","Object Type"::Codeunit);
        FromAllObjWithCaption.SETRANGE("Object Subtype",'Test');
        IF FromAllObjWithCaption.FIND('-') THEN
          REPEAT
            TestLine.SETRANGE("Test Codeunit",FromAllObjWithCaption."Object ID");
            IF NOT OnlyThoseNotInAnySuite OR NOT TestLine.FINDFIRST THEN BEGIN
              ToAllObjWithCaption := FromAllObjWithCaption;
              INSERT;
            END;
          UNTIL FromAllObjWithCaption.NEXT = 0;
      END;

      EXIT(ToAllObjWithCaption.FIND('-'));
    END;

    PROCEDURE CreateNewSuite@5(VAR NewSuiteName@1006 : Code[10]);
    VAR
      TestSuite@1001 : Record 80001;
    BEGIN
      WITH TestSuite DO BEGIN
        NewSuiteName := Text010;
        INIT;
        VALIDATE(Name,NewSuiteName);
        VALIDATE(Description,Text011);
        VALIDATE(Export,FALSE);
        INSERT(TRUE);
      END;
    END;

    PROCEDURE RefreshSuite@7(TestSuite@1000 : Record 80001;VAR AllObjWithCaption@1005 : Record 2000000058);
    VAR
      TestLine@1004 : Record 80002;
      Object@1003 : Record 2000000001;
      LineNo@1001 : Integer;
    BEGIN
      WITH TestLine DO BEGIN
        LineNo := LineNo + 10000;

        INIT;
        VALIDATE("Test Suite",TestSuite.Name);
        VALIDATE("Line No.",LineNo);
        VALIDATE("Line Type","Line Type"::Group);
        VALIDATE(Name,Text011);
        VALIDATE(Run,TRUE);
        INSERT(TRUE);

        IF AllObjWithCaption.FIND('-') THEN
          REPEAT
            LineNo := LineNo + 10000;

            INIT;
            VALIDATE("Test Suite",TestSuite.Name);
            VALIDATE("Line No.",LineNo);
            VALIDATE("Line Type","Line Type"::Codeunit);
            VALIDATE("Test Codeunit",AllObjWithCaption."Object ID");

            VALIDATE(Run,TRUE);

            INSERT(TRUE);

            Object.SETRANGE(Type,Object.Type::Codeunit);
            Object.SETRANGE(ID,AllObjWithCaption."Object ID");
            IF Object.FINDFIRST THEN BEGIN
              IF Object.Compiled THEN BEGIN
                SETPUBLISHMODE;
                SETRECFILTER;
                CODEUNIT.RUN(CODEUNIT::"Test Runner",TestLine);
              END ELSE BEGIN
                VALIDATE(Result,Result::Failure);
                VALIDATE("First Error",Text012);
                MODIFY(TRUE);
              END;
            END;
          UNTIL AllObjWithCaption.NEXT = 0;
      END;
    END;

    PROCEDURE RunSuiteYesNo@9(VAR TestLine@1003 : Record 80002);
    VAR
      CopyOfTestLine@1001 : Record 80002;
      Selection@1005 : Integer;
      Filter@1000 : Text[100];
    BEGIN
      Selection := STRMENU(Text001,1);
      IF Selection = 0 THEN
        EXIT;

      CopyOfTestLine.COPY(TestLine);

      TestLine.RESET;
      CASE Selection OF
        1:
          BEGIN
            TestLine.TESTFIELD("Line Type",TestLine."Line Type"::"Function");
            Filter := FORMAT(TestLine."Line No.");
            REPEAT
              IF (TestLine."Test Codeunit" <> 0) AND (TestLine."Function" IN ['','OnRun']) THEN
                Filter := STRSUBSTNO('%1|%2',Filter,TestLine."Line No.");
            UNTIL (TestLine.NEXT(-1) = 0) OR
                  (TestLine."Test Codeunit" <> CopyOfTestLine."Test Codeunit");
          END;
        2:
          Filter := STRSUBSTNO('%1..%2',TestLine.GetMinCodeunitLineNo,TestLine.GetMaxCodeunitLineNo);
      END;

      TestLine.COPY(CopyOfTestLine);
      IF Filter <> '' THEN
        CopyOfTestLine.SETFILTER("Line No.",Filter);

      RunSuite(CopyOfTestLine,TRUE);
    END;

    PROCEDURE RunSuite@8(VAR TestLine@1003 : Record 80002;IsTestMode@1004 : Boolean);
    VAR
      TestLine2@1002 : Record 80002;
      TestRunner@1000 : Codeunit 50202;
    BEGIN
      IF IsTestMode THEN BEGIN
        SETTESTMODE;
        TestRunner.RUN(TestLine);
      END ELSE BEGIN
        SETPUBLISHMODE;
        TestLine2.COPY(TestLine);
        TestLine2.SETRANGE("Line No.",TestLine."Line No.");
        TestLine2.TESTFIELD("Test Codeunit");
        TestLine2.TESTFIELD("Function",'');

        TestLine.DeleteChildren;
        TestLine2.DeleteChildren;

        TestRunner.RUN(TestLine2);
      END;
    END;

    BEGIN
    END.
  }
}

