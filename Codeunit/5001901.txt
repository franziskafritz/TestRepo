OBJECT Codeunit 5001901 Clearing
{
  OBJECT-PROPERTIES
  {
    Date=09.10.09;
    Time=12:00:00;
    Version List=AR6.00,SEPA,Umlautfix,private fix 55039;
  }
  PROPERTIES
  {
    TableNo=5001903;
    Permissions=TableData 5001901=rm,
                TableData 5001902=rim,
                TableData 5001903=rm,
                TableData 5001904=rimd,
                TableData 5001917=rimd,
                TableData 5001918=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text1105400000@1105400000 : TextConst 'DEU=Kann Datei nicht erstellen;ENU=Unable to create file';
      Text1105400001@1105400001 : TextConst 'DEU=Kann Datei nicht îffnen;ENU=Unable to open file';
      Text1105400002@1105400002 : TextConst 'DEU=BLZ bei der Bank %1 darf nicht leer sein;ENU=Bank Branch No. of Bank %1 must not be empty';
      Text1105400003@1105400003 : TextConst 'DEU=BLZ bei der Bank %1 mu· 8 Ziffern beinhalten;ENU=Bank Branch No. of Bank %1 must have 8 numbers';
      Text1105400004@1105400004 : TextConst 'DEU="""Bankkontonummer"" bei der Bank %1 darf nicht leer sein";ENU=Bank Accountno of Bank %1 must not be empty';
      Text1105400005@1105400005 : TextConst 'DEU="""Bankkontonummer"" bei der Bank %1 darf nicht mehr als 10 Ziffern beinhalten";ENU=Bank Accountno of Bank %1 must not be longer than 10 characters';
      Text1105400006@1105400006 : TextConst 'DEU=C;ENU=C';
      Text1105400007@1105400007 : TextConst 'DEU=LK;ENU=LK';
      Text1105400008@1105400008 : TextConst 'DEU=Soll;ENU=Debit';
      Text1105400009@1105400009 : TextConst 'DEU=GK;ENU=GK';
      Text1105400010@1105400010 : TextConst 'DEU=Haben;ENU=Credit';
      Text1105400011@1105400011 : TextConst 'DEU=Beim Debitor %1 ist keine Bank zum \;ENU=On Customer %1 there is no bank marked\';
      Text1105400012@1105400012 : TextConst 'DEU=%2 gekennzeichnet.;ENU=for %2.';
      Text1105400013@1105400013 : TextConst 'DEU=BLZ auf Debitor %1 bei der Bank %2\;ENU=Bank BranchNo. of customer %1 and bank %2\';
      Text1105400014@1105400014 : TextConst 'DEU=darf nicht leer sein;ENU=must not be empty';
      Text1105400015@1105400015 : TextConst 'DEU=muss 8 Ziffern beinhalten;ENU=must have a length of 8';
      Text1105400016@1105400016 : TextConst 'DEU=Bankkonto auf Debitor %1 bei der Bank %2\;ENU=Bankaccountno. of customer %1 and bank %2\';
      Text1105400017@1105400017 : TextConst 'DEU=darf nicht mehr als 10 Ziffern beinhalten.;ENU=must not be longer than 10.';
      Text1105400018@1105400018 : TextConst 'DEU=Beim Kreditor %1 ist keine Bank zum\;ENU=On vendor %1 there is no bank marked\';
      Text1105400019@1105400019 : TextConst 'DEU=BLZ auf Kreditor %1 bei der Bank %2\;ENU=Bank BranchNo. of vendor %1 and bank %2\';
      Text1105400020@1105400020 : TextConst 'DEU=muss 8 Zeichen lang sein.;ENU=must be 8 characters long.';
      Text1105400021@1105400021 : TextConst 'DEU=Bankkonto auf Kreditor %1 bei der Bank %2\;ENU=Bankaccountno. of vendor %1 and bank %2\';
      Text1105400022@1105400022 : TextConst 'DEU=" Im Inlandszahlungsverkehr darf nur der Euro verwendet werden. ";ENU=" There is only EURO allowed in national data exchange. "';
      Text1105400023@1105400023 : TextConst 'DEU=A;ENU=A';
      Text1105400024@1105400024 : TextConst 'DEU=F0;ENU=F0';
      Text1105400026@1105400026 : TextConst 'DEU=E;ENU=E';
      Text1105400027@1105400027 : TextConst 'DEU=" In diesem Zahlungsvorschlag befinden sich Posten, die im Feld \";ENU=" There are Entries in this payment suggestion, that are\"';
      Text1105400028@1105400028 : TextConst 'DEU=" ""Ausgleich-mit Belegart"" mit Zahlung gekennzeichnet sind. Dies \";ENU=" marked as ""Payment"" in Applied-to Doc Type. This \"';
      Text1105400029@1105400029 : TextConst 'DEU=" ist nicht zulÑssig. Bitte gleichen Sie diese Posten manuell aus \";ENU=" is not possible. Please apply these Entries manually.\"';
      Text1105400030@1105400030 : TextConst 'DEU=" und fÅhren den Zahlungsvorschlag gegebenenfalls erneut durch. ";ENU=" and repeat the payment suggestion. "';
      Text1105400031@1105400031 : TextConst 'DEU=vom;ENU=of';
      Text1105400034@1105400034 : TextConst 'DEU=" SK";ENU=" SK"';
      Text1105400035@1105400035 : TextConst 'DEU="KD.NR. ";ENU="KD.NR. "';
      Text1105400036@1105400036 : TextConst 'DEU="SIEHE AVIS VOM ";ENU="LOOK AT AVIS FROM "';
      Text1105400037@1105400037 : TextConst 'DEU="SIEHE AVIS VOM 30.09.97    ";ENU="SIEHE AVIS VOM 30.09.97    "';
      Text1105400038@1105400038 : TextConst 'DEU=RENR.1234567890 V. 27.05.97;ENU=RENR.1234567890 V. 27.05.97';
      Text1105400039@1105400039 : TextConst 'DEU="     1000,00 ./.    2,00 SK";ENU="     1000,00 ./.    2,00 SK"';
      Text1105400040@1105400040 : TextConst 'DEU=Zahlungsdatei %1 ist fÅr dieses Bankkonto bereits vorhanden.;ENU=Paymenfile %1 already exists for this Bank';
      Text1105400041@1105400041 : TextConst 'DEU=" Die Zahlungsdatei %1 wurde annuliert ";ENU=" Paymentfile %1 voided "';
      Text1105400042@1105400042 : TextConst 'DEU=Zahlungsdatei %1 wird annulliert.;ENU=Paymentfile %1 becomes voided.';
      Text1105400043@1105400043 : TextConst 'DEU=" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZéôö·.,&-+*%/$";ENU=" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZéôö·.,&-+*%/$"';
      Text1105400044@1105400044 : TextConst 'DEU=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZéôö·.,&-+*%/$;ENU=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZéôö·.,&-+*%/$';
      Text1105400045@1105400045 : TextConst 'DEU=Es gibt weitere Daten auf dem DatentrÑger. %1 \;ENU=There are any data on Drive %1 \';
      Text1105400046@1105400046 : TextConst 'DEU=Wollen Sie einen anderen DatentrÑger fÅr das Clearing verwenden ?;ENU=Do you want to change disk for clearing ?';
      Text1105400047@1105400047 : TextConst 'DEU=C:\;ENU=C:\';
      CompanyInfo@1105400048 : Record 79;
      PaymentSetup@1105400049 : Record 5001901;
      SourceCodeSetup@1105400050 : Record 242;
      Customer@1105400051 : Record 18;
      Vendor@1105400052 : Record 23;
      CustBankAcc@1105400053 : Record 287;
      VendBankAcc@1105400054 : Record 288;
      CustLedgEntry@1105400055 : Record 21;
      VendLedgEntry@1105400056 : Record 25;
      "Gen.-JnlLine"@1105400057 : Record 81;
      BankAccount@1105400058 : Record 270;
      BankAccount2@1105400059 : Record 270;
      PaymLedgEntry@1105400060 : Record 5001902;
      PaymLine@1105400061 : Record 5001903;
      GLSetup@1105400062 : Record 98;
      Files@1105400063 : Record 2000000022;
      FormatAddr@1105400064 : Codeunit 365;
      GenJnlPostLine@1105400065 : Codeunit 12;
      Check@1105400066 : Boolean;
      Flag@1105400067 : Boolean;
      BankCodeInteger@1105400068 : Decimal;
      PmtDiscount@1105400069 : ARRAY [6] OF Decimal;
      AccountInteger@1105400070 : Decimal;
      AmountDM@1105400071 : ARRAY [6] OF Decimal;
      CCode@1105400072 : ARRAY [6] OF Code[10];
      DMark@1105400073 : Decimal;
      DmarkTotal@1105400074 : Decimal;
      Total@1105400075 : Decimal;
      SumDM@1105400076 : Decimal;
      TotalDM@1105400077 : Decimal;
      RecordBankCodeSum@1105400078 : Decimal;
      RecordAccountSum@1105400079 : Decimal;
      EuroTotal@1105400080 : Decimal;
      CentTotal@1105400081 : Decimal;
      Euro@1105400082 : Decimal;
      Cent@1105400083 : Decimal;
      IDate@1105400084 : ARRAY [6] OF Date;
      BankCodeBank@1105400085 : Code[30];
      AccountBank@1105400086 : Code[30];
      ValueDate@1105400087 : Code[10];
      OurAccount@1105400088 : Text[20];
      Counter1@1105400089 : Integer;
      NextPaymLedgEntryNo@1105400090 : Integer;
      Pfennig@1105400091 : Decimal;
      PfennigTotal@1105400092 : Decimal;
      NoOfTypeC@1105400093 : Integer;
      RecordLength@1105400094 : Integer;
      Length@1105400095 : Integer;
      CharacterCounter@1105400096 : Integer;
      NoOfCharacter@1105400097 : Integer;
      Exportfile@1105400098 : File;
      "Bank Code"@1105400099 : Text[30];
      Account@1105400100 : Text[30];
      Sign@1105400101 : Text[2];
      Document@1105400102 : ARRAY [6] OF Text[20];
      DocumentMark@1105400103 : ARRAY [6] OF Text[5];
      DocumentType@1105400104 : Text[20];
      TextCode@1105400105 : Text[2];
      AddrArray@1105400106 : ARRAY [8] OF Text[90];
      Filename@1105400107 : Text[12];
      Z@1105400108 : Text[250];
      Help@1105400109 : Text[1];
      RecordType@1105400110 : Text[1];
      RecordStart@1105400111 : ARRAY [6] OF Text[2];
      RecordEnd@1105400112 : Text[100];
      BankCodeRec2@1105400113 : Text[30];
      BankCodeRec@1105400114 : Text[8];
      AccountRec2@1105400115 : Text[30];
      RecordAccount@1105400116 : Text[10];
      CharacterText@1105400117 : Text[1];
      AccoutName@1105400118 : Text[50];
      CurrencySym@1105400119 : Text[1];
      AvisLetter@1105400120 : Boolean;
      CheckRec@1105400121 : Text[80];
      DocumentText@1105400122 : ARRAY [6] OF Text[150];
      I@1105400123 : Integer;
      CompName@1105400124 : Code[50];
      String@1105400125 : Integer;
      Dtaus@1105400126 : Code[1024];
      ExtDocument@1000 : ARRAY [6] OF Code[20];
      OrignAmount@1001 : ARRAY [6] OF Decimal;
      PDate@1002 : ARRAY [6] OF Date;
      Text1105400128@1105400128 : TextConst 'DEU=Die Verarbeitung wurde unterbrochen, um die Warnung zu berÅcksichtigen.;ENU=The update has been interrupted to respect the warning.';
      PostDescription@1105400025 : ARRAY [6] OF Text[50];
      Text1105400400@1105400400 : TextConst 'DEU=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]~.,&-+*%/$;ENU=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]~.,&-+*%/$';
      AUmlaut@1105400401 : Text[1];
      OUmlaut@1105400404 : Text[1];
      UUmlaut@1105400403 : Text[1];
      EsZet@1116000004 : Text[1];

    PROCEDURE "Open Exportfile"@1105400127(VAR Drive@1105400000 : Code[260];VAR Filename@1105400002 : Code[80];PaymNo@1105400001 : Record 5001902);
    BEGIN
      PaymentSetup.GET;
      Dtaus := Drive + Filename;

      Exportfile.WRITEMODE:=TRUE;
      Exportfile.TEXTMODE:=TRUE;

      IF NOT Exportfile.CREATE(Drive + Filename) THEN
        ERROR(Text1105400000);

      Help[1]:=32;

      CompanyInfo.GET;
      CompName := CheckFormat(FORMAT(UPPERCASE(CompanyInfo.Name),27));
      FormatAddr.BankAcc(AddrArray,BankAccount);

      BankAccount.GET(PaymNo."Bank Account No.");

      "Bank Code" := BankAccount."Bank Branch No.";
      IF STRLEN("Bank Code") = 0 THEN
        ERROR(Text1105400002,BankAccount."No.");
      BankCodeBank := FormatBankCode("Bank Code");
      IF STRLEN(BankCodeBank) <> 8 THEN
        ERROR(Text1105400003,BankAccount."No.");
      BankCodeRec := BankCodeBank;
      Account := BankAccount."Bank Account No.";
      IF STRLEN(Account) = 0 THEN
        ERROR(Text1105400004,BankAccount."No.");
      AccountBank := FormatAccount(Account);
      IF STRLEN(AccountBank) > 10 THEN
        ERROR(
           Text1105400005,BankAccount."No.");
      RecordAccount := AccountBank;

      RecordType := Text1105400006;

      CASE PaymNo.Type OF
        PaymNo.Type::"Customer Debit": BEGIN
          Sign := Text1105400007;
          DocumentType := Text1105400008;
          PaymentSetup.TESTFIELD("Textcode Debit Item");
          TextCode := PaymentSetup."Textcode Debit Item";
        END;
        PaymNo.Type::"Customer Collect": BEGIN
          Sign := Text1105400007;
          DocumentType := Text1105400008;
          PaymentSetup.TESTFIELD("Textcode Collect");
          TextCode := PaymentSetup."Textcode Collect";
        END;
        PaymNo.Type::"Customer Credit" : BEGIN
          Sign := Text1105400009;
          DocumentType := Text1105400010;
          PaymentSetup.TESTFIELD("Textcode Credit Note");
          TextCode := PaymentSetup."Textcode Credit Note";
        END;
        PaymNo.Type::"Vendor Credit": BEGIN
          Sign := Text1105400009;
          DocumentType := Text1105400010;
          PaymentSetup.TESTFIELD("Textcode Credit Note");
          TextCode := PaymentSetup."Textcode Credit Note";
        END;
      END;

      AUmlaut := '[';
      OUmlaut := '\';
      UUmlaut := ']';
      EsZet := '~';
    END;

    PROCEDURE FormatBankCode@1105400128(BankCode@1105400000 : Code[30]) : Text[30];
    VAR
      BankCodebank@1105400001 : Code[30];
    BEGIN
      CLEAR(BankCodebank);
      Length := STRLEN(BankCode);
      IF Length <> 0 THEN REPEAT
        CharacterCounter := CharacterCounter + 1;
        CharacterText   := COPYSTR(BankCode,CharacterCounter,1);
        Check := EVALUATE(NoOfCharacter,CharacterText);
        IF Check = TRUE THEN BankCodebank := BankCodebank + CharacterText;
      UNTIL CharacterCounter = Length;
      CLEAR(CharacterCounter);
      EXIT(BankCodebank);
    END;

    PROCEDURE FormatAccount@1105400129(Account@1105400000 : Code[30]) : Text[30];
    VAR
      Accountbank@1105400001 : Code[30];
    BEGIN
      CLEAR(Accountbank);
      Length := STRLEN(Account);
      CLEAR(CharacterCounter);
      IF Length <> 0 THEN REPEAT
        CharacterCounter := CharacterCounter + 1;
        CharacterText   := COPYSTR(Account,CharacterCounter,1);
        Check := EVALUATE(NoOfCharacter,CharacterText);
        IF Check = TRUE THEN Accountbank := Accountbank + CharacterText;
      UNTIL CharacterCounter = Length;
      CLEAR(CharacterCounter);
      EXIT(Accountbank);
    END;

    PROCEDURE Number2Str@1105400130(Number@1105400001 : Text[30];Length@1105400002 : Integer;Filler@1105400003 : Text[1]) output@1105400000 : Text[20];
    VAR
      I@1105400004 : Integer;
      Character@1105400005 : Char;
      OutputChar@1105400006 : ARRAY [20] OF Char;
    BEGIN
      FOR I := 1 TO Length DO BEGIN    // New Code for RTC-Workaround
        output[I] := Filler[1];
      END;
      FOR I := Length DOWNTO (Length + 1 - STRLEN(Number)) DO BEGIN
        Character := Number[STRLEN(Number)+I-Length];
        IF (48 <= Character) AND (Character <= 57) THEN BEGIN
          output[I] := Number[STRLEN(Number) + I - Length];
        END
        ELSE IF Character<>'.' THEN
          output[I] := Filler[1];
      END;
      output := COPYSTR(output,1,Length); // New Code for RTC-Workaround
    END;

    PROCEDURE DecimalNumber@1105400131(Number@1105400001 : Decimal;FullLength@1105400002 : Integer) output@1105400000 : Text[20];
    VAR
      NextKomma@1105400003 : Text[2];
      FirmaKomma@1105400004 : Text[30];
      I@1105400005 : Integer;
      j@1105400006 : Integer;
      Help@1105400007 : Text[30];
    BEGIN
      IF Number = 0 THEN
        output := '0,00'
      ELSE BEGIN
        NextKomma := FORMAT(ABS((Number MOD 1)*100),2);
        FirmaKomma := FORMAT(Number DIV 1,17);
        IF NextKomma[1]=32 THEN
           NextKomma[1]:=48;
        IF NextKomma[2]=32 THEN
           NextKomma[2]:=48;
        Help := FirmaKomma + ',' + NextKomma;
        FOR I := FullLength DOWNTO 1 DO
          output[I] := Help[20 + I - FullLength];
      END;
    END;

    PROCEDURE TotalInit@1105400132();
    BEGIN
      CLEAR(Document);
      CLEAR(AmountDM);
      CLEAR(PmtDiscount);
      CLEAR(IDate);
      CLEAR(RecordStart);
      CLEAR(SumDM);
      CLEAR(RecordEnd);
      CLEAR(ExtDocument);
      CLEAR(OrignAmount);
      CLEAR(PDate);
      CLEAR(PostDescription);
    END;

    PROCEDURE CustomerOutput@1105400133(VAR PaymLine2@1105400000 : Record 5001903;VAR PaymLine3@1105400001 : Record 5001903;VAR Counter@1105400002 : Integer;CreditMemo@1105400003 : Boolean;VAR TotalEntries@1105400004 : Decimal);
    BEGIN
      WITH PaymLine2 DO BEGIN
        IF "Account No." = PaymLine3."Account No." THEN BEGIN
          PaymLine3 := PaymLine2;
          IF "Sum Entries"<>0 THEN BEGIN
            Counter := Counter + 1;
            SumDM := TotalEntries;
            AmountDM[Counter] := TotalEntries;
            PDate [Counter] := "Posting Date";
          END ELSE BEGIN
            Counter := Counter + 1;
            SumDM := SumDM + "Payment Amount";
            AmountDM[Counter] := "Payment Amount";
            CCode[Counter] := "Currency Code";
            ExtDocument [Counter] := "External Document No.";
            PDate [Counter] := "Posting Date";
            Document[Counter] := "Document No.";
            CustLedgEntry.SETCURRENTKEY("Customer No.","Document No.");
            CustLedgEntry.SETRANGE("Customer No.",PaymLine3."Account No.");
            CustLedgEntry.SETRANGE("Document No.",PaymLine3."Applies-to Doc. No.");
            IF CustLedgEntry.FINDFIRST THEN BEGIN
              CustLedgEntry.CALCFIELDS("Remaining Amount","Original Amount");
              IDate[Counter] := CustLedgEntry."Document Date";
              PmtDiscount[Counter] := PaymLine3."Pmt. Discount";
              AmountDM[Counter] := "Payment Amount";
              OrignAmount[Counter] := CustLedgEntry."Original Amount";
              Document[Counter] := CustLedgEntry."Document No.";
              DocumentMark[Counter] := UPPERCASE(COPYSTR(FORMAT(CustLedgEntry."Document Type",0),1,2) + '.');
            END;
            PostDescription[Counter] := PaymLine2.Description;
          END;
          RecordStart[Counter] := '02';

          CheckFormat(Document[Counter]);

          IF CreditMemo THEN BEGIN
            AmountDM[Counter] := -AmountDM[Counter];
            PmtDiscount[Counter]  := -PmtDiscount[Counter] ;
          END;
        END;
      END;
    END;

    PROCEDURE VendorOutput@1105400134(VAR PaymLine2@1105400000 : Record 5001903;VAR PaymLine3@1105400001 : Record 5001903;VAR Counter@1105400002 : Integer;VAR TotalEntries@1105400003 : Decimal);
    BEGIN
      WITH PaymLine2 DO BEGIN
        IF "Account No." = PaymLine3."Account No." THEN BEGIN
          PaymLine3 := PaymLine2;
          IF "Sum Entries"<>0 THEN BEGIN
            Counter := Counter + 1;
            SumDM := "Sum Entries";
            AmountDM[Counter] := "Sum Entries";
            PDate [Counter] := "Posting Date";
          END ELSE BEGIN
            Counter := Counter + 1;
            SumDM := SumDM + "Payment Amount";
            AmountDM[Counter] := Amount;
            CCode[Counter] := "Currency Code";
            ExtDocument [Counter] := "External Document No.";
            PDate [Counter] := "Posting Date";
            Document[Counter] := "Applies-to Doc. No.";
            CheckFormat(Document[Counter]);
            VendLedgEntry.SETCURRENTKEY("Vendor No.","Document No.");
            VendLedgEntry.SETRANGE("Vendor No.",PaymLine3."Account No.");
            VendLedgEntry.SETRANGE("Document No.",PaymLine3."Applies-to Doc. No.");
            IF VendLedgEntry.FINDFIRST THEN BEGIN
              VendLedgEntry.CALCFIELDS("Remaining Amount","Original Amount");
              IDate[Counter] := VendLedgEntry."Document Date";
              PmtDiscount[Counter] := PaymLine3."Pmt. Discount";
              AmountDM[Counter] := "Payment Amount";
              OrignAmount[Counter] := VendLedgEntry."Original Amount";
              CheckFormat(Document[Counter]);
              DocumentMark[Counter] := UPPERCASE(COPYSTR(FORMAT(VendLedgEntry."Document Type",0),1,2) + '.');
            END;
            PostDescription[Counter] := PaymLine2.Description;
          END;
          RecordStart[Counter] := '02'
        END;
      END;
    END;

    PROCEDURE CustBankFormat@1105400135(PaymLine2@1105400000 : Record 5001903;PaymLine3@1105400001 : Record 5001903;BankInfoLine@1105400002 : Record 5001918);
    BEGIN
      WITH PaymLine2 DO BEGIN
        Customer.GET(PaymLine3."Account No.");
        OurAccount := Customer."No.";
        CheckFormat(UPPERCASE(OurAccount));
        AccoutName := Customer.Name;
        CheckFormat(UPPERCASE(AccoutName));

        IF BankInfoLine."Payment No." <> '' THEN BEGIN
          CustBankAcc.INIT;
          CustBankAcc."Customer No." := BankInfoLine."Account No.";
          CustBankAcc.Code := BankInfoLine."Bank Code";
          CustBankAcc.Name := BankInfoLine."Bank Name";
          CustBankAcc."Bank Branch No." := BankInfoLine."Bank Branch No.";
          CustBankAcc."Bank Account No." := BankInfoLine."Bank Account No.";
          CustBankAcc.Clearing := TRUE;
          CustBankAcc."Alternative Account Owner" := BankInfoLine."Alternative Account Owner";
          CustBankAcc.IBAN := BankInfoLine.IBAN;
          CustBankAcc."SWIFT Code" := BankInfoLine."SWIFT Code";
        END ELSE BEGIN
          CustBankAcc.SETRANGE("Customer No.",Customer."No.");
          CustBankAcc.SETRANGE(Clearing,TRUE);
          IF NOT CustBankAcc.FINDFIRST THEN
            ERROR (Text1105400011+
                   Text1105400012,Customer."No.",CustBankAcc.FIELDCAPTION(Clearing));
        END;

        IF CustBankAcc."Alternative Account Owner" <> '' THEN
          AccoutName := CustBankAcc."Alternative Account Owner";
        CheckFormat(UPPERCASE(AccoutName));

        DMark := ROUND(SumDM,1,'<');
        Pfennig := ABS(ROUND(SumDM - DMark,0.01)) * 100;
        TotalDM := TotalDM + SumDM;
        DmarkTotal  := ROUND(TotalDM,1,'<');
        PfennigTotal := ABS(ROUND(TotalDM - DmarkTotal,0.01)) * 100;
        IF NOT PaymLedgEntry."SEPA Payment" THEN BEGIN
          "Bank Code" := CustBankAcc."Bank Branch No.";
          IF STRLEN("Bank Code") = 0 THEN
            ERROR(Text1105400013+
                  Text1105400014,Customer."No.",CustBankAcc.Code);
          BankCodeBank := DELCHR(FormatBankCode("Bank Code"),'=','.');
          IF STRLEN(BankCodeBank) <> 8 THEN
            ERROR(Text1105400013+
                  Text1105400015,Customer."No.",CustBankAcc.Code);
          BankCodeRec2 := BankCodeBank;
          Account := CustBankAcc."Bank Account No.";
          IF STRLEN(Account) = 0 THEN
            ERROR(Text1105400016+
                  Text1105400014,Customer."No.",CustBankAcc.Code);
          AccountBank := DELCHR(FormatAccount(Account),'=','.');
          IF STRLEN(AccountBank) > 10 THEN
            ERROR(Text1105400016+
                  Text1105400017,Customer."No.",CustBankAcc.Code);
          AccountRec2 := AccountBank;
        END;
      END;
    END;

    PROCEDURE VendBankFormat@1105400136(PaymLine2@1105400000 : Record 5001903;PaymLine3@1105400001 : Record 5001903;BankInfoLine@1105400002 : Record 5001918);
    BEGIN
      WITH PaymLine2 DO BEGIN
        Vendor.GET(PaymLine3."Account No.");
        OurAccount := Vendor."Our Account No.";
        CheckFormat(UPPERCASE(OurAccount));
        AccoutName := Vendor.Name;
        CheckFormat(UPPERCASE(AccoutName));

        IF BankInfoLine."Payment No." <> '' THEN BEGIN
          VendBankAcc.INIT;
          VendBankAcc."Vendor No." := BankInfoLine."Account No.";
          VendBankAcc.Code := BankInfoLine."Bank Code";
          VendBankAcc.Name := BankInfoLine."Bank Name";
          VendBankAcc."Bank Branch No." := BankInfoLine."Bank Branch No.";
          VendBankAcc."Bank Account No." := BankInfoLine."Bank Account No.";
          VendBankAcc.Clearing := TRUE;
          VendBankAcc."SWIFT Code" := BankInfoLine."SWIFT Code";
          VendBankAcc.IBAN := BankInfoLine.IBAN;
          VendBankAcc."Alternative Account Owner" := BankInfoLine."Alternative Account Owner";
        END ELSE BEGIN
          VendBankAcc.SETRANGE("Vendor No.",Vendor."No.");
          VendBankAcc.SETRANGE(Clearing,TRUE);
          IF NOT VendBankAcc.FINDFIRST THEN
            ERROR (Text1105400018+
                   Text1105400012,Vendor."No.",VendBankAcc.FIELDCAPTION(Clearing));
        END;
        IF VendBankAcc."Alternative Account Owner" <> '' THEN
          AccoutName := VendBankAcc."Alternative Account Owner";
        CheckFormat(UPPERCASE(AccoutName));

        DMark  := ROUND(SumDM,1,'<');
        Pfennig := ABS(ROUND(SumDM - DMark,0.01)) * 100;
        TotalDM := TotalDM + SumDM;
        DmarkTotal  := ROUND(TotalDM,1,'<');
        PfennigTotal := ABS(ROUND(TotalDM - DmarkTotal,0.01)) * 100;
        IF NOT PaymLedgEntry."SEPA Payment" THEN BEGIN
          "Bank Code" := VendBankAcc."Bank Branch No.";
          IF STRLEN("Bank Code") = 0 THEN
            ERROR(Text1105400019+
                  Text1105400014,Vendor."No.",VendBankAcc.Code);
          BankCodeBank := DELCHR(FormatBankCode("Bank Code"),'=','.');
          IF STRLEN(BankCodeBank) <> 8 THEN
            ERROR(Text1105400019+
                  Text1105400020,Vendor."No.",VendBankAcc.Code);
          BankCodeRec2 := BankCodeBank;

          Account := VendBankAcc."Bank Account No.";
          IF STRLEN(Account) = 0 THEN
            ERROR(Text1105400021+
                  Text1105400014,Vendor."No.",VendBankAcc.Code);
          AccountBank := DELCHR(FormatAccount(Account),'=','.');
          IF STRLEN(AccountBank) > 10 THEN
            ERROR(Text1105400021+
                  Text1105400017,Vendor."No.",VendBankAcc.Code);
          AccountRec2 := AccountBank;
        END;
      END;
    END;

    PROCEDURE PaymentHeader@1105400137(PaymLedgEntry2@1105400000 : Record 5001902;CurrencyType@1105400001 : Code[10]);
    BEGIN
      GLSetup.GET;
      IF PaymentSetup."Currencycode EURO" = CurrencyType THEN
        CurrencySym := '1'
      ELSE
        ERROR(Text1105400022);

      IF CurrencyType <>'' THEN
        ERROR(Text1105400022)
      ELSE
      IF PaymentSetup."Currencycode EURO"<>CurrencyType THEN
        ERROR(Text1105400022);

      //  Record A (Disk-Header)
      // ------------------------------------------------------------------------------------------------------------
        Z := '0128' +                                             //    1       4   RecLength   (constant '0128')
             Text1105400023 +                                     //    2       1   Record Type
             Sign +                                               //    3       2   Sign ( G=debit, L=collect )
             FORMAT(BankCodeRec,8)+                               //    4       8   Bank Branch No
             PADSTR('',8,'0') +                                   //    5       8   XText1105400024
             PADSTR(UPPERCASE(CompName),27)+                      //    6      27   Customer name  ( Disk Creator )
             FORMAT(TODAY,6,'<day,2><month,2><year,2>')+          //    7       6   Date ( disk creation (TTMMYY) )
             PADSTR('',4,' ') +                                   //    8       4   spaces ( X'40'/X'20' )
             Number2Str(RecordAccount,10,'0') +                   //    9      10   Accountno ( Creator )
             PADSTR('',10,'0') +                                  //   10      10   Referenceno creator ( optional )
             PADSTR('',15,' ') +                                  //   11a     15   spaces ( X'40'/X'20' ) Reserved
             FORMAT(PaymLedgEntry2."Execution Date",8,'<day,2><month,2><year4>') +    //   11b      8   execution date
             PADSTR('',24,' ') +                                  //   11c     24   spaces ( X'40'/X'20' ) Reserved
             CurrencySym;                                         //   12       1   currency symbol empty=DM 1=Euro
        Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
    END;

    PROCEDURE PaymentFooter@1105400138(VAR PaymLedgEntry2@1105400000 : Record 5001902);
    BEGIN
      PaymLedgEntry2."Control/Account" :=  RecordAccountSum;
      PaymLedgEntry2."Control/Bank Branch No." := RecordBankCodeSum;
      PaymLedgEntry2.Amount := TotalDM;
      PaymLedgEntry2."No. of Entries" := NoOfTypeC;
      PaymLedgEntry2.MODIFY;
      IF CurrencySym = '1' THEN BEGIN
        EuroTotal := DmarkTotal;
        CentTotal := PfennigTotal;
        DmarkTotal := 0;
        PfennigTotal := 0;
      END ELSE BEGIN
        EuroTotal := 0;
        CentTotal := 0;
      END;

      IF NOT PaymLedgEntry2."SEPA Payment" THEN BEGIN

        //Record E   (Disk-Footer)
        // ------------------------------------------------------------------------------------------------------------
        Z := '0128' +                                                    //    1       4   record length ( constant )
             Text1105400026 +                                            //    2       1   record type ( constant )
             PADSTR('',5,' ') +                                          //    3       5   X'40'/X'20' Reserved
             Number2Str(FORMAT(NoOfTypeC,7),7,'0') +                     //    4       7   No of Records C
             Number2Str(FORMAT(DmarkTotal,11,1),11,'0') +                //    5      13   Total Amounts Records C in DEM
             Number2Str(FORMAT(PfennigTotal,2,1),2,'0') +
             Number2Str(FORMAT(RecordAccountSum,17,1),17,'0') +          //    6      17   Total Accountnos from field5 Records C
             Number2Str(FORMAT(RecordBankCodeSum,17,1),17,'0') +         //    7      17   Total BankCodes from field4 record C
             Number2Str(FORMAT(EuroTotal,11,1),11,'0') +                 //    8      13   Total Amounts Record C in Euro
             Number2Str(FORMAT(CentTotal,2,1),2,'0') +
             PADSTR('',51,' ');                                          //    9      51   X'40'/X'20' End Section

        Exportfile.SEEK(Exportfile.POS-2);
        Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
        Exportfile.SEEK(Exportfile.POS-2);
        Exportfile.CLOSE;
        Exportfile.OPEN(Dtaus);
        Exportfile.SEEK(Exportfile.LEN-2);
        Exportfile.TRUNC;
        Exportfile.CLOSE;

      END;
    END;

    PROCEDURE PaymentfileRecord@1105400139(PaymLine2@1105400000 : Record 5001903;PaymLine3@1105400001 : Record 5001903;Counter@1105400002 : Integer;PaymBankInfoLine@1105400003 : Record 5001918);
    VAR
      Setuptext@1105400004 : Text[54];
    BEGIN
      WITH PaymLine2 DO BEGIN
        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Payment) AND
           ("Document Type" = "Document Type"::Payment) THEN
          ERROR(Text1105400027+
                Text1105400028+
                Text1105400029+
                Text1105400030);

        NoOfTypeC := NoOfTypeC + 1;

        PaymLedgEntry.SETCURRENTKEY("Payment No.");
        PaymLedgEntry.SETRANGE("Payment No.","Payment No.");
        PaymLedgEntry.FINDLAST;

        IF "Account Type" = "Account Type"::Customer THEN
          CustBankFormat(PaymLine2,PaymLine3,PaymBankInfoLine)
        ELSE
          VendBankFormat(PaymLine2,PaymLine3,PaymBankInfoLine);

        // >> SEPA:1-F-50:5:01
        IF NOT PaymLedgEntry."SEPA Payment" THEN BEGIN
        // << SEPA:1-F-50:5:01

          RecordLength := 129 + (29 * ((Counter + 1) * 2)) ;
          EVALUATE(BankCodeInteger,BankCodeRec2);
          RecordBankCodeSum := RecordBankCodeSum + BankCodeInteger;
          EVALUATE(AccountInteger,AccountRec2);
          RecordAccountSum := RecordAccountSum + AccountInteger;

          CLEAR(DocumentText);
          PaymentSetup.GET;
          CASE PaymLedgEntry.Type OF
            PaymLedgEntry.Type::"Customer Debit",
            PaymLedgEntry.Type::"Customer Collect" : Setuptext := PaymentSetup."Customer Debit Proposal";
            PaymLedgEntry.Type::"Customer Credit" : Setuptext := PaymentSetup."Customer Payment Proposal";
            PaymLedgEntry.Type::"Vendor Credit" : Setuptext := PaymentSetup."Vendor Proposal";
          END;

          IF PaymLine3."AVIS Letter" THEN
            Setuptext := PaymentSetup."Avis Proposal";

          FOR I := 1 TO Counter DO BEGIN
            IF CCode[I] = '' THEN
              CCode[I] := GLSetup."LCY Code";

              DocumentText[I] := STRSUBSTNO(DELCHR(Setuptext,'>'),
                                   DELCHR(FORMAT(ExtDocument[I]),'>'),
                                   DELCHR(FORMAT(Document[I]),'>'),
                                   FORMAT(IDate[I],8,'<day,2>.<month,2>.<year,2>'),
                                   DELCHR(FORMAT(ABS(AmountDM[I]),12,'<Sign><Integer><Decimals,3>')),
                                   DELCHR(FORMAT(ABS(PmtDiscount[I]),8,'<Sign><Integer><Decimals,3>')),
                                   DELCHR(FORMAT(ABS(OrignAmount[I]),12,'<Sign><Integer><Decimals,3>')),
                                   FORMAT(PDate[I],8,'<day,2>.<month,2>.<year,2>'),
                                   DELCHR(FORMAT(CCode[I])),
                                   DocumentMark[I],
                                   PostDescription[I]);

            DocumentText[I] := CheckFormat(FORMAT(UPPERCASE(DocumentText[I]),54));
          END;

          AccoutName := CheckFormat(FORMAT(UPPERCASE(AccoutName),27));
          OurAccount := CheckFormat(FORMAT(UPPERCASE(OurAccount),20));

          IF CurrencySym='1' THEN BEGIN
            Euro := DMark;
            Cent := Pfennig;
            DMark := 0;
            Pfennig := 0;
          END ELSE BEGIN
            Euro := 0;
            Cent := 0;
          END;

        // Recordtype C (PaymentExchangeRecord), 1. Constant Part, 1. Section
        //
        //                                                                  field  length   contents
      //--------------------------------------------------------------------------------------------------------------------------------
          Z := Number2Str(FORMAT(RecordLength,4),4,'0') +                  //   1       4   RecLength
               RecordType +                                                //   2       1   RecType
               PADSTR('',8,'0') +                                          //   3       8   BankCode
               BankCodeRec2 +                                              //   4       8   BankCode (Paying)
               Number2Str(AccountRec2,10,'0') +                            //   5      10   AccountNo
               PADSTR('',13,'0') +                                         //   6      13   Filler 0
               TextCode +                                                  //   7a      2   Text Code
               PADSTR('',3,'0') +                                          //   7b      3   Supplement Text Code
               PADSTR('',1,' ') +                                          //   8       1   X'40'/X'20' internal bank field
               Number2Str(FORMAT(DMark,9,1),9,'0') +                       //   9      11   amount in DEM
               Number2Str(FORMAT(Pfennig,2,1),2,'0') +                     //               "
               BankCodeRec +                                               //  10       8   BankCode
               Number2Str(RecordAccount,10,'0') +                          //  11      10   AccountNo
               Number2Str(FORMAT(Euro,9,1),9,'0') +                        //   9      11   Amount in Euro
               Number2Str(FORMAT(Cent,2,1),2,'0') +                        //               "
               PADSTR('',3,' ') +                                          //  13       3   X'40'/X'20 Reserved
               FORMAT(UPPERCASE(AccoutName),27) +                          //  14a     27   Name
               PADSTR('',8,' ') +                                          //  14b      8   X'40'/X'20 End Section

        // Record C (DataExchange), 1. Constant Part, 2. Section
        //
        //                                                                 field  length   contents
      // -------------------------------------------------------------------------------------------------------------------------------
               FORMAT(UPPERCASE(CompanyInfo.Name),27) +                    // 15      27   Name
               COPYSTR(Text1105400035 + PADSTR('',7,' '),1,7) +            // Cust.No / KD.NR.
               FORMAT(UPPERCASE(OurAccount),20) +                          // 16      27   customer no.
               CurrencySym +                                               // 17a      1   currency symbol space=DM 1=Euro
               PADSTR('',2,' ') +                                          // 17b      2   X'40'/X'20 Reserved
               Number2Str(FORMAT((Counter * 2),2),2,'0');                  // 18       2   No. of extensions

          Exportfile.SEEK(Exportfile.POS-2);
          Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));

        // Datensatz C (Zahlungsaustauschsatz), 2. variable part, 2. section
        //
        //                                                                 field  length   contents
      // -------------------------------------------------------------------------------------------------------------------------------
          Z:=  RecordStart[1] +                                            // 19       2   extension
               FORMAT(COPYSTR(DocumentText[1],1,27),27);                   // 20      27   Verwendungszweck
          Exportfile.SEEK(Exportfile.POS-2);
          Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));

          Z := RecordStart[1] +                                            // 21       2   extension
               FORMAT(COPYSTR(DocumentText[1],28,54),27) +                 // 22      27   Verwendungszweck
               PADSTR('',11,' ') ;                                         // 23      11   X'40'/X'20 end section

          Exportfile.SEEK(Exportfile.POS-2);
          Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));

          // Record C (DataExchange), 2. variable part, 3. section
          //
          //                                                                  field  length contents
      // -------------------------------------------------------------------------------------------------------------------------------
          Z := RecordStart[2] +                                            // 24       2   extension
               FORMAT(COPYSTR(DocumentText[2],1,27),27);                   // 25      27   Verwendungszweck

          IF Counter > 1 THEN BEGIN
            Exportfile.SEEK(Exportfile.POS-2);
            Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;

          Z := RecordStart[2] +                                            // 26       2   extension
               FORMAT(COPYSTR(DocumentText[2],28,54),27);                  // 27      27   Verwendungszweck

          IF Counter > 1 THEN BEGIN
            Exportfile.SEEK(Exportfile.POS-2);
            Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;

          Z := RecordStart[3] +                                            // 28       2   extension
               FORMAT(COPYSTR(DocumentText[3],1,27),27);                   // 29      27   Verwendungszweck

          IF Counter > 2 THEN BEGIN
            Exportfile.SEEK(Exportfile.POS-2);
            Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;

          Z := RecordStart[3] +                                            // 30       2   extension
               FORMAT(COPYSTR(DocumentText[3],28,54),27) +                 // 31      27   Verwendungszweck
               PADSTR('',12,' ') ;                                         // 32      12   X'40'/X'20 end section

          IF Counter > 2 THEN BEGIN
            Exportfile.SEEK(Exportfile.POS-2);
            Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;

        // Record C (DataExchange), 2. variable part, 4. section
        //
        //                                                                 field  length   contents
      // -------------------------------------------------------------------------------------------------------------------------------
          Z := RecordStart[4] +                                            // 33       2   extension
               FORMAT(COPYSTR(DocumentText[4],1,27),27);                   // 34      27   Verwendungszweck (Text1105400038)

            IF Counter > 3 THEN BEGIN
            Exportfile.SEEK(Exportfile.POS-2);
            Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;

          Z := RecordStart[4] +                                            // 35       2   extension
               FORMAT(COPYSTR(DocumentText[4],28,54),27);                  // 36      27   Verwendungszweck (Text1105400039)

          IF Counter > 3 THEN BEGIN
            Exportfile.SEEK(Exportfile.POS-2);
            Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;

          Z := RecordStart[5] +                                            // 37       2   extension
               FORMAT(COPYSTR(DocumentText[5],1,27),27);                   // 38      27   Verwendungszweck

            IF Counter > 4 THEN BEGIN
             Exportfile.SEEK(Exportfile.POS-2);
             Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;

          Z := RecordStart[5] +                                            // 39       2   extension
               FORMAT(COPYSTR(DocumentText[5],28,54),27) +                 // 40      27   Verwendungszweck
               PADSTR('',12,' ') ;                                         // 41      12   X'40'/X'20 end section
          IF Counter > 4 THEN BEGIN
             Exportfile.SEEK(Exportfile.POS-2);
             Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;


        // Record C (DataExchange), 2. variable part, 5. section
        //
        //                                                                 field  length   contents
      // -------------------------------------------------------------------------------------------------------------------------------
          Z := RecordStart[6] +                                            // 42       2   extension
               FORMAT(COPYSTR(DocumentText[6],1,27),27);                   // 43      27   Verwendungszweck

          IF Counter > 5 THEN BEGIN
             Exportfile.SEEK(Exportfile.POS-2);
             Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;

          Z := RecordStart[6] +                                            // 44       2   extension
               FORMAT(COPYSTR(DocumentText[6],28,54),27);                  // 45      27   Verwendungszweck

          IF Counter > 5 THEN BEGIN
            Exportfile.SEEK(Exportfile.POS-2);
            Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
          END;

          Z:='';
          CASE Counter OF
            2,4,6  :   Z := PADSTR(Z,70,' ');
          END;

          Exportfile.SEEK(Exportfile.POS-2);
          Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));

        END;

      END; // With
    END;

    PROCEDURE InsertPaymentfile@1105400140(VAR PaymLedgEntry2@1105400000 : Record 5001902);
    BEGIN
      IF NextPaymLedgEntryNo = 0 THEN BEGIN
        PaymLedgEntry2.LOCKTABLE;
        PaymLedgEntry2.RESET;
        IF PaymLedgEntry2.FINDLAST THEN
          NextPaymLedgEntryNo := PaymLedgEntry2."Entry No." + 1
        ELSE
          NextPaymLedgEntryNo := 1;
      END;

      PaymLedgEntry2.RESET;
      PaymLedgEntry2.SETCURRENTKEY("Bank Account No.","Posting State","Payment No.");
      PaymLedgEntry2.SETRANGE("Bank Account No.",PaymLedgEntry2."Bank Account No.");
      PaymLedgEntry2.SETFILTER(
        "Posting State",'%1|%2|%3',
        PaymLedgEntry2."Posting State"::Created,
        PaymLedgEntry2."Posting State"::Posted,
        PaymLedgEntry2."Posting State"::Corrected);
      PaymLedgEntry2.SETRANGE("Payment No.",PaymLedgEntry2."Document No.");
      IF PaymLedgEntry2.FINDFIRST THEN
        ERROR(Text1105400040,PaymLedgEntry2."Document No.");

      PaymLedgEntry2.Open := TRUE;
      PaymLedgEntry2."User ID" := USERID;
      PaymLedgEntry2."Entry No." := NextPaymLedgEntryNo;
      PaymLedgEntry2.INSERT;

      NextPaymLedgEntryNo := NextPaymLedgEntryNo + 1;
    END;

    PROCEDURE CancelPaymentfile@1105400141(VAR GenJnlLine@1105400000 : Record 81);
    VAR
      GenJnlBatch@1105400001 : Record 232;
    BEGIN
      GenJnlLine.TESTFIELD("Bank Payment Type",GenJnlLine."Bank Payment Type"::Clearing);
      GenJnlLine.TESTFIELD("Payment File created",TRUE);
      GenJnlLine.TESTFIELD("Document No.");

      "Gen.-JnlLine".RESET;
      "Gen.-JnlLine".SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
      "Gen.-JnlLine".SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      "Gen.-JnlLine".SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      "Gen.-JnlLine".SETRANGE("Document No.",GenJnlLine."Document No.");
      "Gen.-JnlLine".SETFILTER("Account Type",'%1|%2',"Gen.-JnlLine"."Account Type"::"G/L Account",
                                       "Gen.-JnlLine"."Account Type"::"Bank Account");
      "Gen.-JnlLine".SETRANGE("Payment File created",TRUE);
      IF "Gen.-JnlLine".FINDFIRST THEN
        REPEAT
          IF "Gen.-JnlLine"."Bal. Account No." = '' THEN BEGIN
            "Gen.-JnlLine"."Payment File created" := FALSE;
            "Gen.-JnlLine".DELETE(TRUE);
          END;
        UNTIL "Gen.-JnlLine".NEXT=0;

      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");

      "Gen.-JnlLine".RESET;
      "Gen.-JnlLine".SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
      "Gen.-JnlLine".SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      "Gen.-JnlLine".SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      "Gen.-JnlLine".SETRANGE("Document No.",GenJnlLine."Document No.");
      IF "Gen.-JnlLine".FINDFIRST THEN
        REPEAT
          IF "Gen.-JnlLine"."Bal. Account No." = '' THEN BEGIN
            IF "Gen.-JnlLine"."Account No." = '' THEN BEGIN
              "Gen.-JnlLine"."Account Type" := "Gen.-JnlLine"."Account Type"::"Bank Account";
              "Gen.-JnlLine"."Account No." := GenJnlLine."Account No.";
            END ELSE BEGIN
              "Gen.-JnlLine"."Bal. Account Type" := "Gen.-JnlLine"."Account Type"::"Bank Account";
              "Gen.-JnlLine"."Bal. Account No." := GenJnlLine."Account No.";
            END;
            // "Gen.-JnlLine".VALIDATE(Amount);  NEW 02
            "Gen.-JnlLine"."Bank Payment Type" := GenJnlLine."Bank Payment Type";
          END;
          PaymLine.SETCURRENTKEY("Payment No.","Line No.");
          PaymLine.SETRANGE("Payment No.","Gen.-JnlLine"."Document No.");
          PaymLine.SETRANGE("Line No.","Gen.-JnlLine"."Line No.");
          PaymLine.FINDFIRST;
          "Gen.-JnlLine"."Currency Code" := PaymLine."Currency Code";     // NEW 02
          "Gen.-JnlLine"."Currency Factor" := PaymLine."Currency Factor"; // NEW 02
          "Gen.-JnlLine".VALIDATE(Amount,PaymLine.Amount);
          "Gen.-JnlLine"."Document No." := '';
          "Gen.-JnlLine"."Payment File created" := FALSE;
          "Gen.-JnlLine"."Payment Order No." := 0;
          "Gen.-JnlLine".UpdateSource;
          "Gen.-JnlLine"."Posting No. Series" := GenJnlBatch."Posting No. Series";  // NEW
          "Gen.-JnlLine".MODIFY;
        UNTIL "Gen.-JnlLine".NEXT = 0;

      PaymLedgEntry.RESET;
      PaymLedgEntry.SETCURRENTKEY("Bank Account No.","Posting State","Payment No.");

      IF GenJnlLine.Amount > 0 THEN
        PaymLedgEntry.SETRANGE("Bank Account No.",GenJnlLine."Account No.")
      ELSE
        PaymLedgEntry.SETRANGE("Bank Account No.","Gen.-JnlLine"."Bal. Account No.");

      PaymLedgEntry.SETRANGE("Posting State",PaymLedgEntry."Posting State"::Created);
      PaymLedgEntry.SETRANGE("Payment No.",GenJnlLine."Document No.");
      PaymLedgEntry.FINDFIRST;
      PaymLedgEntry."Original State" := PaymLedgEntry."Posting State";
      PaymLedgEntry."Posting State" := PaymLedgEntry."Posting State"::Cancelled;
      PaymLedgEntry.Open := FALSE;
      PaymLedgEntry.MODIFY;
      MESSAGE(Text1105400041,PaymLedgEntry."Payment No.");
    END;

    PROCEDURE VoidPaymentfile@1105400142(VAR PaymLedgEntry2@1105400000 : Record 5001902);
    BEGIN
      PaymLedgEntry2.TESTFIELD("Posting State",PaymLedgEntry2."Posting State"::Posted);
      PaymLedgEntry2.TESTFIELD("Statement Status",PaymLedgEntry2."Statement Status"::Open);
      PaymLedgEntry2.TESTFIELD("Bal. Account No.");
      BankAccount2.GET(PaymLedgEntry2."Bank Account No.");
      SourceCodeSetup.GET;

      "Gen.-JnlLine".INIT;
      "Gen.-JnlLine"."Document No." := PaymLedgEntry2."Document No.";
      "Gen.-JnlLine"."Account Type" := "Gen.-JnlLine"."Account Type"::"Bank Account";
      "Gen.-JnlLine".VALIDATE("Account No.",PaymLedgEntry2."Bank Account No.");
      "Gen.-JnlLine"."Posting Date" := PaymLedgEntry2."Posting Date";
      "Gen.-JnlLine".Description := STRSUBSTNO(Text1105400042,PaymLedgEntry2."Payment No.");
      "Gen.-JnlLine".VALIDATE(Amount,PaymLedgEntry2.Amount);
      "Gen.-JnlLine"."Bal. Account Type" := PaymLedgEntry2."Bal. Account Type";
      "Gen.-JnlLine".VALIDATE("Bal. Account No.",PaymLedgEntry2."Bal. Account No.");
      "Gen.-JnlLine"."Source Code" := SourceCodeSetup."Corrected Paymentfile";
      GenJnlPostLine.RUN("Gen.-JnlLine");

      PaymLedgEntry2."Original State" := PaymLedgEntry2."Posting State";
      PaymLedgEntry2."Posting State" := PaymLedgEntry2."Posting State"::Corrected;
      PaymLedgEntry2.MODIFY;
    END;

    PROCEDURE CheckFormat@1105400143(FieldContent@1105400001 : Text[54]) FText@1105400000 : Code[54];
    BEGIN
      WHILE STRPOS(FieldContent,'·') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'·')-1) + EsZet +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'·')+1,MAXSTRLEN(FieldContent));
      WHILE STRPOS(FieldContent,'é') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'é')-1) + AUmlaut +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'é')+1,MAXSTRLEN(FieldContent));
      WHILE STRPOS(FieldContent,'ô') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'ô')-1) + OUmlaut +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'ô')+1,MAXSTRLEN(FieldContent));
      WHILE STRPOS(FieldContent,'ö') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'ö')-1) + UUmlaut +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'ö')+1,MAXSTRLEN(FieldContent));
      CheckRec := DELCHR(FieldContent,'=',Text1105400043);
      IF CheckRec <> '' THEN BEGIN
        CheckRec := CONVERTSTR(FieldContent,Text1105400400,
                                          '                                                 ');
        String := STRLEN(DELCHR(CheckRec));
        FieldContent := CONVERTSTR(FieldContent,DELCHR(CheckRec),PADSTR('',String,' '));

      END;
      EXIT (FieldContent);
    END;

    PROCEDURE CheckPaymfile@1105400144(Drive@1105400000 : Code[260]) : Boolean;
    BEGIN
      Files.SETRANGE(Path,Drive);
      IF Files.FINDFIRST THEN BEGIN

        IF CONFIRM(STRSUBSTNO(Text1105400045+
                       Text1105400046,Drive),TRUE) THEN
          ERROR(Text1105400128)
        ELSE BEGIN
          Files.SETRANGE(Path,Text1105400047);
          IF Files.FINDFIRST THEN ;
          EXIT(TRUE);
        END;
      END ELSE
      EXIT(TRUE);
    END;

    PROCEDURE TestCompanyInfo@1105400145(Bacc@1105400000 : Code[20]);
    BEGIN
      CompanyInfo.GET;
      CompName := CheckFormat(FORMAT(UPPERCASE(CompanyInfo.Name),27));
      BankAccount.GET(Bacc);
      "Bank Code" := BankAccount."Bank Branch No.";
      IF STRLEN("Bank Code") = 0 THEN
        ERROR(Text1105400002,BankAccount."No.");
      BankCodeBank := FormatBankCode("Bank Code");
      IF STRLEN(BankCodeBank) <> 8 THEN
        ERROR(Text1105400003,BankAccount."No.");
      BankCodeRec := BankCodeBank;
      Account := BankAccount."Bank Account No.";
      IF STRLEN(Account) = 0 THEN
        ERROR(Text1105400004,BankAccount."No.");
      AccountBank := FormatAccount(Account);
      IF STRLEN(AccountBank) > 10 THEN
        ERROR(
           Text1105400005,BankAccount."No.");
    END;

    PROCEDURE CheckBeforePaym@1105400146(GenJnlLine2@1105400000 : Record 81;AbortOnErrors@1105400003 : Boolean;CheckCurrentLine@1105400007 : Boolean;VAR ErrorMessage@1105400004 : ARRAY [10] OF Text[1024]) : Boolean;
    VAR
      GenJnlLine@1105400001 : Record 81;
      AccNo@1105400002 : Code[20];
      ErrorCounter@1105400005 : Integer;
      MaxErrors@1105400006 : Integer;
    BEGIN
      // Function returns TRUE if there aren't any errors
      // and FALSE if there are

      CLEAR(ErrorMessage);
      MaxErrors := ARRAYLEN(ErrorMessage);

      GenJnlLine.SETCURRENTKEY(
        "Journal Template Name",
        "Journal Batch Name",
        "Account Type",
        "Currency Code",
        "Account No.",
        "Amount (LCY)");
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine2."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine2."Journal Batch Name");
      PaymentSetup.GET;
      IF PaymentSetup."Parting Currencies" THEN
        GenJnlLine.SETRANGE("Currency Code",GenJnlLine2."Currency Code");
      GenJnlLine.SETFILTER("Account No.",'<>%1','');
      GenJnlLine.SETFILTER("Amount (LCY)",'<>%1',0);
      GenJnlLine.SETFILTER("Document Type",'%1|%2|%3',GenJnlLine."Document Type"::" ",GenJnlLine."Document Type"::Payment,
        GenJnlLine."Document Type"::Refund);

      IF CheckCurrentLine THEN
        GenJnlLine.SETRANGE("Line No.",GenJnlLine2."Line No.");

      IF GenJnlLine.FINDFIRST THEN
      REPEAT
        IF AccNo <> GenJnlLine."Account No." THEN
          CASE GenJnlLine."Account Type" OF
            GenJnlLine."Account Type"::Customer : BEGIN
              Customer.GET(GenJnlLine."Account No.");
              CustBankAcc.SETRANGE("Customer No.",Customer."No.");
              CustBankAcc.SETRANGE(Clearing,TRUE);
              IF NOT CustBankAcc.FINDFIRST THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400011+
                        Text1105400012,Customer."No.",CustBankAcc.FIELDCAPTION(Clearing)),
                    1,150);
              END;
              "Bank Code" := CustBankAcc."Bank Branch No.";
              IF STRLEN("Bank Code") = 0 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400013+
                        Text1105400014,Customer."No.",CustBankAcc.Code),
                    1,150);
              END;
              BankCodeBank := DELCHR(FormatBankCode("Bank Code"),'=','.');
              IF STRLEN(BankCodeBank) <> 8 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400013+
                        Text1105400015,Customer."No.",CustBankAcc.Code),
                    1,150);
              END;
              Account := CustBankAcc."Bank Account No.";
              IF STRLEN(Account) = 0 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400016+
                        Text1105400014,Customer."No.",CustBankAcc.Code),
                    1,150);
              END;
              AccountBank := DELCHR(FormatAccount(Account),'=','.');
              IF STRLEN(AccountBank) > 10 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400016+
                        Text1105400017,Customer."No.",CustBankAcc.Code),
                    1,150);
              END;
            END;
            GenJnlLine."Account Type"::Vendor : BEGIN
              Vendor.GET(GenJnlLine."Account No.");
              VendBankAcc.SETRANGE("Vendor No.",Vendor."No.");
              VendBankAcc.SETRANGE(Clearing,TRUE);
              IF NOT VendBankAcc.FINDFIRST THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400018+
                        Text1105400012,Vendor."No.",VendBankAcc.FIELDCAPTION(Clearing)),
                    1,150);
              END;
              "Bank Code" := VendBankAcc."Bank Branch No.";
              IF STRLEN("Bank Code") = 0 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400019+
                        Text1105400014,Vendor."No.",VendBankAcc.Code),
                    1,150);
              END;
              BankCodeBank := DELCHR(FormatBankCode("Bank Code"),'=','.');
              IF STRLEN(BankCodeBank) <> 8 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400019+
                        Text1105400020,Vendor."No.",VendBankAcc.Code),
                    1,150);
              END;
              Account := VendBankAcc."Bank Account No.";
              IF STRLEN(Account) = 0 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400021+
                        Text1105400014,Vendor."No.",VendBankAcc.Code),
                    1,150);
              END;
              AccountBank := DELCHR(FormatAccount(Account),'=','.');
              IF STRLEN(AccountBank) > 10 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400021+
                        Text1105400017,Vendor."No.",VendBankAcc.Code),
                    1,150);
              END;
            END;
          END;
        AccNo := GenJnlLine."Account No.";
      UNTIL GenJnlLine.NEXT=0;

      IF AbortOnErrors AND (ErrorCounter > 0) THEN
        ERROR(ErrorMessage[1]);

      EXIT(ErrorCounter = 0);
    END;

    PROCEDURE InsertPaymBankInfo@1105400147(PaymNo@1105400000 : Code[20]) : Integer;
    VAR
      PaymBankInfo@1105400001 : Record 5001917;
      NextEntryNo@1105400002 : Integer;
    BEGIN
      WITH PaymBankInfo DO BEGIN
        RESET;
        SETRANGE("Payment No.",PaymNo);
        IF FINDLAST THEN
          NextEntryNo := PaymBankInfo."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        "Payment No." := PaymNo;
        "Entry No." := NextEntryNo;
        "Creation Date" := TODAY;
        "Creation Time" := TIME;
        INSERT;

        EXIT(NextEntryNo);
      END;
    END;

    PROCEDURE WritePaymBankInfoLine@1105400148(PaymLine@1105400000 : Record 5001903);
    VAR
      PaymBankInfo@1105400001 : Record 5001917;
      PaymBankInfoLine@1105400003 : Record 5001918;
      CustBankAcc@1105400004 : Record 287;
      VendBankAcc@1105400005 : Record 288;
    BEGIN
      PaymBankInfo.RESET;
      PaymBankInfo.SETRANGE("Payment No.",PaymLine."Payment No.");
      IF NOT PaymBankInfo.FINDLAST THEN
        EXIT;

      WITH PaymBankInfoLine DO BEGIN
        RESET;
        SETRANGE("Payment No.",PaymBankInfo."Payment No.");
        SETRANGE("Bank Info Entry No.",PaymBankInfo."Entry No.");
        SETRANGE("Account Type",PaymLine."Account Type");
        SETRANGE("Account No.",PaymLine."Account No.");
        SETRANGE(OrderNo,PaymLine."Payment Order No.");
        IF NOT FINDLAST THEN BEGIN
          "Payment No." := PaymBankInfo."Payment No.";
          "Bank Info Entry No." := PaymBankInfo."Entry No.";
          "Account Type" := PaymLine."Account Type";
          "Account No." := PaymLine."Account No.";
          OrderNo := PaymLine."Payment Order No.";
          INSERT;
        END ELSE
          EXIT;

        CASE PaymLine."Account Type" OF
          PaymLine."Account Type"::Customer:
            BEGIN
              CustBankAcc.SETRANGE("Customer No.",PaymLine."Account No.");
              CustBankAcc.SETRANGE(Clearing,TRUE);
              CustBankAcc.FINDFIRST;
              "Bank Code" := CustBankAcc.Code;
              "Bank Name" := CustBankAcc.Name;
              "Bank Branch No." := CustBankAcc."Bank Branch No.";
              "Bank Account No." := CustBankAcc."Bank Account No.";
              "SWIFT Code" := CustBankAcc."SWIFT Code";
              IBAN := CustBankAcc.IBAN;
              "Bank Name 2" := CustBankAcc."Name 2";
              "Bank Address" := CustBankAcc.Address;
              "Bank Address 2" := CustBankAcc."Address 2";
              "Bank City" := CustBankAcc.City;
              "Bank Post Code" := CustBankAcc."Post Code";
              "Bank Country Code" := CustBankAcc."Country/Region Code";
              "Alternative Account Owner" := CustBankAcc."Alternative Account Owner";
            END;
          PaymLine."Account Type"::Vendor:
            BEGIN
              VendBankAcc.SETRANGE("Vendor No.",PaymLine."Account No.");
              VendBankAcc.SETRANGE(Clearing,TRUE);
              VendBankAcc.FINDFIRST;
              "Bank Code" := VendBankAcc.Code;
              "Bank Name" := VendBankAcc.Name;
              "Bank Branch No." := VendBankAcc."Bank Branch No.";
              "Bank Account No." := VendBankAcc."Bank Account No.";
              "SWIFT Code" := VendBankAcc."SWIFT Code";
              IBAN := VendBankAcc.IBAN;
              "Bank Name 2" := VendBankAcc."Name 2";
              "Bank Address" := VendBankAcc.Address;
              "Bank Address 2" := VendBankAcc."Address 2";
              "Bank City" := VendBankAcc.City;
              "Bank Post Code" := VendBankAcc."Post Code";
              "Bank Country Code" := VendBankAcc."Country/Region Code";
              "Alternative Account Owner" := VendBankAcc."Alternative Account Owner";
            END;
          ELSE
            EXIT;
        END;

        IF EVALUATE("Numeric Bank Branch No.",DELCHR(FormatBankCode("Bank Branch No."),'=','.')) THEN;
        IF EVALUATE("Numeric Bank Account No.",DELCHR(FormatAccount("Bank Account No."),'=','.')) THEN;

        MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

