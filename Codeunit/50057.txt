OBJECT Codeunit 50057 DD CYCC
{
  OBJECT-PROPERTIES
  {
    Date=11.02.15;
    Time=12:00:00;
    Modified=Yes;
    Version List=DD1.00,HME2128;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
            //H1792 12.11.14 TST +++++++++++++++++++++++++++++++++++++++
            //PostCycleCount;
            PostCycleCount(0);
            //H1792 12.11.14 TST ---------------------------------------
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=&Liefern,&Fakturieren,Liefern &und fakturieren;ENU=&Ship,&Invoice,Ship &and Invoice';
      Text001@1001 : TextConst 'DEU=M”chten Sie die %1 buchen?;ENU=Do you want to post the %1?';
      Text002@1002 : TextConst 'DEU=&Liefern,&Fakturieren,Liefern &und fakturieren;ENU=&Receive,&Invoice,Receive &and Invoice';
      SalesHeader@1003 : Record 36;
      PurchHeader@1006 : Record 38;
      ItemJnlBatch@1007 : Record 233;
      DDSetup@1000000000 : Record 50060;
      SalesPost@1004 : Codeunit 80;
      PurchPost@1010 : Codeunit 90;
      SalesPostAndPrint@1011 : Codeunit 82;
      PurchPostAndPrint@1012 : Codeunit 92;
      ReleaseSalesDoc@1009 : Codeunit 414;
      Selection@1005 : Integer;
      DocumentNo@1008 : Code[20];
      SalesPrice@1000000001 : Record 7002;
      DueDate@1000000003 : Date;
      TransNoDD@1000000002 : Code[20];
      TransNoRhenus@1000000005 : Code[20];
      LineNo@1000000004 : Integer;
      "*** HME0601 ***"@1000000008 : Integer;
      FPCGeneralSetup@1000000035 : Record 50055;
      InventorySetup@1000000060 : Record 313;
      Item@1000000063 : Record 27;
      ItemRHE@1000000020 : Record 27;
      ItemRHECD@1000000023 : Record 27;
      ItemRHEGB@1000000022 : Record 27;
      ItemRHEGBCD@1000000021 : Record 27;
      Location@1000000006 : Record 14;
      PhysInventoryOrderHeader@1000000007 : Record 5005350;
      PhysInvtRecordingHeader@1000000009 : Record 5005352;
      InvPostingSetup@1000000017 : Record 313;
      PhysInvtRecordingLine@1000000016 : Record 5005353;
      CreateNewRecording@1000000015 : Report 5005361;
      CalcPhysInvtOrderLines@1000000013 : Report 5005360;
      PhysInvtRecordingLine2@1000000012 : Record 5005353;
      PhysInvtRecordingHeader2@1000000011 : Record 5005352;
      NoSeriesMngt@1000000010 : Codeunit 396;
      PhysInvtRecordingFinish@1000000014 : Codeunit 5005351;
      Text50000@1000000018 : TextConst 'DEU=Ausgleich erwarteter NAV Mengen;ENU=corr. expect. Qty NAV';
      CalcQtyExpectedAllLines@1000000039 : Codeunit 5005362;
      PhysInvtRecReopen@1000000040 : Codeunit 5005353;
      PhysInvtReference1@1000000031 : Text[35];
      PhysInvtReference2@1000000032 : Text[35];
      "***HME-TextConstants***"@1000000033 : TextConst;
      TextHME001@1000000034 : TextConst 'ENU=Undefined Location Code in C50057: "%1".';
      TextHME002@1000000019 : TextConst 'ENU=%1 "%2"-records for posting date %3 has/have been found.\Do you want to delete them ?';
      TextHME003@1000000024 : TextConst 'ENU=Execution of function aborted.';
      TextHME004@1000000036 : TextConst 'ENU=All "%2"-records with posting date %2 will now be deleted !\Do you really want to continue ?';
      TextHME005@1000000037 : TextConst 'ENU=%1 "%2"-records with posting date %3 has/have been deleted now.';
      Window@1000000048 : Dialog;
      EndingDateTime@1000000057 : DateTime;
      StartingDateTime@1000000053 : DateTime;
      Qty@1000000030 : Decimal;
      QtyGoodDD@1000000029 : Decimal;
      QtyDefectDD@1000000028 : Decimal;
      QtyGoodRhenus639@1000000027 : Decimal;
      QtyGoodRhenus633@1000000026 : Decimal;
      QtyReturnA@1000000025 : Decimal;
      QtyReturnB@1000000062 : Decimal;
      DoDeletePhysInvtRecordHeader@1000000038 : Boolean;
      TextHME007@1000000042 : TextConst 'ENU=... processing stockcounting results\';
      TextHME008@1000000043 : TextConst 'ENU=Currently processing item:       #1#################\';
      TextHME009@1000000044 : TextConst 'ENU=Items to be processed:           #2#################\';
      TextHME010@1000000045 : TextConst 'ENU=Items processed:                 #3#################\\';
      TextHME011@1000000051 : TextConst 'ENU=Counted items to be processed:   #4#################\';
      TextHME012@1000000046 : TextConst 'ENU=Counted items processed:         #5#################';
      CounterCountedItemsProcessed@1000000047 : Integer;
      CounterItemsProcessed@1000000050 : Integer;
      NoOfItemsToBeProcessed@1000000049 : Integer;
      NoOfCountedItemsToBeProcessed@1000000052 : Integer;
      TextHME013@1000000041 : TextConst 'ENU=Execution of function\';
      TextHME014@1000000054 : TextConst 'ENU=- started at %1\';
      TextHME015@1000000055 : TextConst 'ENU=- successfully finished at %2\';
      TextHME016@1000000056 : TextConst 'ENU=- lasted for %3 minutes.';
      DurationOfExecution@1000000058 : Integer;
      TextHME017@1000000061 : TextConst 'ENU=Do you want to start the manual cycle count?';
      "+++H0807+++"@1000000065 : Integer;
      PhysInvOrderHeader@1000000064 : Record 5005350;
      FinishInventoryOrders@1000000066 : Codeunit 5005355;
      QtyReturnC@1000000067 : Decimal;
      "+++H1627+++"@1000000059 : Integer;
      QtyGoodRhenus639UN@1000000069 : Decimal;
      QtyGoodRhenus633UN@1000000068 : Decimal;
      QtyReturnLWF@1000000070 : Decimal;
      QtyReturnLWFUN@1000000071 : Decimal;
      "+++H1726+++"@1000000072 : Integer;
      SupressMessage@1000000073 : Boolean;
      "+++H1770+++"@1000000074 : Integer;
      QtyReturnPL@1000000076 : Decimal;
      QtyReturnPLUN@1000000075 : Decimal;
      "+++H1792+++"@1000000077 : Integer;
      InventoryLogNo@1000000078 : Integer;
      "+++H1859+++"@1000000079 : Integer;
      QtyReturnBRA@1000000080 : Decimal;

    PROCEDURE PostCycleCount@1000000008(InventoryLogNoV@1000000005 : Integer) OK : Boolean;
    VAR
      DDMaterialL@1000000007 : Record 50059;
      LMItem@1000 : Record 50059;
      LMItem2@1000000000 : Record 50059;
      ItemJnLine@1001 : Record 83;
      LineNo@1002 : Integer;
      SKUNo@1000000001 : Code[20];
      ProdStat@1000000002 : Code[10];
      LMInterfaceHandler@1000000003 : Codeunit 50050;
      DDItem@1000000004 : Record 50059;
      i@1000000006 : Integer;
      j@1000000010 : Integer;
      InvLogHeaderL@1000000008 : Record 50208;
    BEGIN
      //H1726 04.11.14 TST +++++++++++++++++++++++++++++++++++++++
      IF GUIALLOWED AND NOT SupressMessage THEN BEGIN
      //H1726 04.11.14 TST ---------------------------------------
        IF NOT CONFIRM(TextHME017,FALSE) THEN BEGIN
          EXIT;
        END;
      END;

      //H1792 12.11.14 TST +++++++++++++++++++++++++++++++++++++++
      InventoryLogNo := InventoryLogNoV;
      //H1792 12.11.14 TST ---------------------------------------

      VerifySetup();
      DeleteInsertPhysInvtOrders();

      CLEAR(Item);
      //H2128,H1959 19.01.15 TST +++++++++++++++++++++++++++++++++++
      InvLogHeaderL.GET(InventoryLogNo);
      //H2128,H1959 19.01.15 TST -----------------------------------

      SetupStatusWindow();
      IF Item.FIND('-') THEN BEGIN;
        REPEAT
          CounterItemsProcessed += 1;
          IF GUIALLOWED THEN BEGIN
            Window.UPDATE(1,Item."No.");
            Window.UPDATE(3,CounterItemsProcessed);
          END;
          QtyGoodDD := GetQtyDD(Item."No.",0);
          //H1627 28.10.14 TST +++++++++++++++++++++++++++++++++++++++
          QtyGoodRhenus633 := GetQtyRHENUS(Item."No.",0,FPCGeneralSetup."Branch Rhenus Freienbrink",'V');
          QtyGoodRhenus639 := GetQtyRHENUS(Item."No.",0,FPCGeneralSetup."Branch Rhenus Grevenbroich",'V');
          QtyGoodRhenus633UN := GetQtyRHENUS(Item."No.",0,FPCGeneralSetup."Branch Rhenus Freienbrink",'N');
          QtyGoodRhenus639UN := GetQtyRHENUS(Item."No.",0,FPCGeneralSetup."Branch Rhenus Grevenbroich",'N');
          QtyReturnLWF := GetQtyRHENUS(Item."No.",0,FPCGeneralSetup."Branch Ludwigsfelde",'V');
          QtyReturnLWFUN := GetQtyRHENUS(Item."No.",0,FPCGeneralSetup."Branch Ludwigsfelde",'N');
          //H1627 28.10.14 TST ---------------------------------------
          //H1770 07.11.14 TST +++++++++++++++++++++++++++++++++++++++
          QtyReturnPL := GetQtyRHENUS(Item."No.",0,FPCGeneralSetup."Branch Poland",'V');
          QtyReturnPLUN := GetQtyRHENUS(Item."No.",0,FPCGeneralSetup."Branch Poland",'N');
          //H1770 07.11.14 TST ---------------------------------------
          //H1859 28.11.14 TST +++++++++++++++++++++++++++++++++++++++
          QtyReturnBRA := GetQtyRHENUS(Item."No.",0,FPCGeneralSetup."Branch Brazil/LWF",'V');
          //H1859 28.11.14 TST ---------------------------------------
          QtyReturnA := GetQtyRETURN(Item."No.",InventorySetup."Location Code Home24 1");
          QtyReturnB := GetQtyRETURN(Item."No.",InventorySetup."Location Code Home24 2");
          //H0819 21.01.14 ARI +++++++++++++++++++++++++++++++++++++++
          QtyReturnC := GetQtyRETURN(Item."No.",InventorySetup."Location Code Home24 3");
          //H0819 21.01.14 ARI ---------------------------------------

          IF (ABS(QtyGoodDD) +
              ABS(QtyDefectDD) +
              ABS(QtyGoodRhenus639) +
              ABS(QtyGoodRhenus633) +
              //H1627 28.10.14 TST +++++++++++++++++++++++++++++++++++++++
              ABS(QtyGoodRhenus639UN) +
              ABS(QtyGoodRhenus633UN) +
              ABS(QtyReturnLWF) +
              ABS(QtyReturnLWFUN) +
              //H1627 28.10.14 TST ---------------------------------------
              //H1770 07.11.14 TST +++++++++++++++++++++++++++++++++++++++
              ABS(QtyReturnPL) +
              ABS(QtyReturnPLUN) +
              //H1770 07.11.14 TST ---------------------------------------
              //H1859 28.11.14 TST +++++++++++++++++++++++++++++++++++++++
              ABS(QtyReturnBRA) +
              //H1859 28.11.14 TST ---------------------------------------
              ABS(QtyReturnA) +
          //H0819 21.01.14 ARI +++++++++++++++++++++++++++++++++++++++
          {
              ABS(QtyReturnB) <> 0)
          }
              ABS(QtyReturnB) +
              ABS(QtyReturnC) <> 0)
          //H0819 21.01.14 ARI ---------------------------------------
          THEN BEGIN
            CalcQtyPerLocation(Item."No.");
            EvaluateCountedvsExpectedQty(Item."No.");
          END;
        UNTIL Item.NEXT = 0;  // Item-Loop
      END;

      //H1959 19.01.15 TST +++++++++++++++++++++++++++++++++++
      IF InvLogHeaderL."Simulated Phys. Inventory" THEN BEGIN
        DDMaterialL.RESET;
        DDMaterialL.SETFILTER("Record ID",'11|BMP');
        DDMaterialL.SETRANGE("Trans. Status",DDMaterialL."Trans. Status"::new);
        DDMaterialL.MODIFYALL("Trans. Status",DDMaterialL."Trans. Status"::canceled);
      END;
      //H1959 19.01.15 TST -----------------------------------

      FinishPhysInvtOrders();


      //H0807 15.01.14 ARI ++++++++++++++++++++++++++++++++++++
      PhysInvOrderHeader.SETCURRENTKEY("Posting Date","Location Code");
      PhysInvOrderHeader.SETRANGE("Posting Date",InventorySetup."Posting Date Phys. Inventory");
      PhysInvOrderHeader.SETRANGE(Status,PhysInvOrderHeader.Status::Open);
      IF PhysInvOrderHeader.FIND('-') THEN
      REPEAT
        FinishInventoryOrders.RUN(PhysInvOrderHeader);
        COMMIT;
      UNTIL PhysInvOrderHeader.NEXT = 0;
      //H0807 15.01.14 ARI ------------------------------------

      //H1726 04.11.14 TST +++++++++++++++++++++++++++++++++++++++
      IF GUIALLOWED AND NOT SupressMessage THEN BEGIN
      //H1726 04.11.14 TST ---------------------------------------
        Window.CLOSE;
        EndingDateTime := CURRENTDATETIME;
        DurationOfExecution := ROUND(((EndingDateTime - StartingDateTime) / 1000 / 60),1); // minutes
        MESSAGE(TextHME013+
                TextHME014+
                TextHME015+
                TextHME016,
                StartingDateTime,
                EndingDateTime,
                DurationOfExecution);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE "CYCLECOUNTPOST(Y/N)"@5("MARC SKU"@1000 : Record 50059) : Boolean;
    VAR
      Item@1002 : Record 27;
      Post@1001 : Boolean;
    BEGIN
      Post := TRUE;
      Item.INIT;

      IF NOT Item.GET("MARC SKU"."No.") THEN
        Post := FALSE;

      IF Item.Blocked THEN
        Post := FALSE;

      EXIT(Post);
    END;

    PROCEDURE GetQtyRHENUS@1000000000(ItemNo@1000000004 : Code[20];Type@1000000003 : 'Good,Defect';Branch@1000000000 : Code[20];BestandsartV@1000000005 : Text[1]) : Decimal;
    VAR
      Qty@1000000002 : Decimal;
      DDMaterialL@1000000001 : Record 50059;
    BEGIN
      // GetQtyRHENUS
      Qty:=0;
      DDMaterialL.RESET;
      DDMaterialL.SETCURRENTKEY("Record ID",Direction,"No.","Trans. Status","Branch Code",Bestandsart);

      //H1627 28.10.14 TST ++++++++++++++++++++++++++++++++++++
      DDMaterialL.SETRANGE("Record ID",'BMP');
      DDMaterialL.SETRANGE(Bestandsart,BestandsartV);
      //H1627 28.10.14 TST ------------------------------------
      DDMaterialL.SETRANGE(Direction,DDMaterialL.Direction::"in");
      DDMaterialL.SETRANGE("Trans. Status",DDMaterialL."Trans. Status"::new);
      DDMaterialL.SETRANGE("No.",ItemNo);
      DDMaterialL.SETRANGE("Branch Code",Branch);
      //H1627 28.10.14 TST ++++++++++++++++++++++++++++++++++++
      IF NOT DDMaterialL.ISEMPTY THEN BEGIN
        DDMaterialL.CALCSUMS("Confirmed Inventory");
        Qty := DDMaterialL."Confirmed Inventory";
        IF Qty = 0 THEN
          DDMaterialL.MODIFYALL("Trans. Status",DDMaterialL."Trans. Status"::canceled);
      END;

      //H1627 28.10.14 TST ------------------------------------
      EXIT(Qty);
    END;

    PROCEDURE GetQtyDD@1000000014(ItemNo@1000000000 : Code[20];Type@1000000003 : 'Good,Defect') : Decimal;
    VAR
      Qty@1000000002 : Decimal;
      DDItem@1000000001 : Record 50059;
    BEGIN

      WITH DDItem DO BEGIN
        Qty:=0;
        RESET;
        SETCURRENTKEY("Record ID",Direction,"No.","Trans. Status");
        SETRANGE("Record ID",'11');
        SETRANGE(Direction,Direction::"in");
        SETRANGE("Trans. Status",DDItem."Trans. Status"::new);
        SETRANGE("No.",ItemNo);
        IF NOT ISEMPTY THEN BEGIN
          IF Type=Type::Good THEN BEGIN
            DDItem.CALCSUMS("Confirmed Inventory");
            Qty:=DDItem."Confirmed Inventory";
          END ELSE BEGIN
            DDItem.CALCSUMS("DD Qty Defect");
            Qty:=DDItem."DD Qty Defect";
          END;
        END;
      END;
      EXIT(Qty);
    END;

    PROCEDURE GetQtyRETURN@1000000001(ItemNoV@1000000000 : Code[20];LocationV@1000000003 : Code[10]) : Decimal;
    VAR
      RecReturn@1000000004 : Record 50113;
      ReturnsLocationInventoryL@1000000001 : Record 50113;
    BEGIN
      // GetQtyRETURN
      IF ReturnsLocationInventoryL.GET(ItemNoV,LocationV) THEN BEGIN
        EXIT(ReturnsLocationInventoryL.Inventory);
      END ELSE BEGIN
        EXIT(0);
      END;
    END;

    PROCEDURE GetLineNo@1000000002(PhysInvtRecordingLineV@1000000000 : Record 5005353) LineNo : Integer;
    VAR
      RecordingLine@1000000001 : Record 5005353;
    BEGIN
      //H0601 22.11.2013 ARI ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      RecordingLine.SETRANGE("Order No.", PhysInvtRecordingLineV."Order No.");
      RecordingLine.SETRANGE("Recording No.",1);

      IF RecordingLine.FIND('+') THEN BEGIN
        LineNo :=  RecordingLine."Line No." + 10000;
      END ELSE
        LineNo := 10000;
      //H0601 22.11.2013 ARI ------------------------------------------------------------------------------
    END;

    PROCEDURE CalcQtyPerLocation@1000000007(ItemNoV@1000000003 : Code[20]);
    BEGIN
      // CalcQtyPerLocation
      //H0601 13.12.13 HCN +++++++++++++++++++++++++++++
      CLEAR(ItemRHE);
      ItemRHE.SETRANGE("No.",ItemNoV);
      ItemRHE.SETFILTER("Date Filter",'..'+FORMAT(InventorySetup."Posting Date Phys. Inventory"));
      ItemRHE.SETFILTER("Location Filter",InventorySetup."Location Code Rhenus 1");
      ItemRHE.FINDFIRST;
      ItemRHE.CALCFIELDS(Inventory);

      CLEAR(ItemRHECD);
      ItemRHECD.SETRANGE("No.",ItemNoV);
      ItemRHECD.SETFILTER("Date Filter",'..'+FORMAT(InventorySetup."Posting Date Phys. Inventory"));
      ItemRHECD.SETFILTER("Location Filter",InventorySetup."Location Code Rhenus 1 CD");
      ItemRHECD.FINDFIRST;
      ItemRHECD.CALCFIELDS(Inventory);

      CLEAR(ItemRHEGB);
      ItemRHEGB.SETRANGE("No.",ItemNoV);
      ItemRHEGB.SETFILTER("Date Filter",'..'+FORMAT(InventorySetup."Posting Date Phys. Inventory"));
      ItemRHEGB.SETFILTER("Location Filter",InventorySetup."Location Code Rhenus 2");
      ItemRHEGB.FINDFIRST;
      ItemRHEGB.CALCFIELDS(Inventory);

      CLEAR(ItemRHEGBCD);
      ItemRHEGBCD.SETRANGE("No.",ItemNoV);
      ItemRHEGBCD.SETFILTER("Date Filter",'..'+FORMAT(InventorySetup."Posting Date Phys. Inventory"));
      ItemRHEGBCD.SETFILTER("Location Filter",InventorySetup."Location Code Rhenus 2 CD");
      ItemRHEGBCD.FINDFIRST;
      ItemRHEGBCD.CALCFIELDS(Inventory);
      //H0601 13.12.13 HCN -----------------------------
    END;

    PROCEDURE EvaluateCountedvsExpectedQty@1000000010(ItemNoV@1000000003 : Code[20]);
    BEGIN
      // EvaluateCountedvsExpectedQty
      //H0601 13.12.13 HCN +++++++++++++++++++++++++++++

      // DDSetup."DD Good Location":
      IF (QtyGoodDD <> 0) THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location DD",QtyGoodDD);
        CounterCountedItemsProcessed += 1;
      END;

      // Rhenus Locations:
      EvaluateCountvsExpectQtyRHE(ItemNoV,
                                  InventorySetup."Location Code Rhenus 1",
                                  InventorySetup."Location Code Rhenus 1 CD",
                                  FPCGeneralSetup."Branch Rhenus Freienbrink");
      EvaluateCountvsExpectQtyRHE(ItemNoV,
                                  InventorySetup."Location Code Rhenus 2",
                                  InventorySetup."Location Code Rhenus 2 CD",
                                  FPCGeneralSetup."Branch Rhenus Grevenbroich");

      // 'Home24 1':
      IF (QtyReturnA <> 0) THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Home24 1",QtyReturnA);
        CounterCountedItemsProcessed += 1;
      END;

      // 'Home24 2':
      IF (QtyReturnB <> 0) THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Home24 2",QtyReturnB);
        CounterCountedItemsProcessed += 1;
      END;

      //H0819 21.01.14 ARI ++++++++++++++++++++++++++++++++++++
      // 'Home24 3':
      IF (QtyReturnC <> 0) THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Home24 3",QtyReturnC);
        CounterCountedItemsProcessed += 1;
      END;

      //H0819 21.01.14 ARI ------------------------------------

      //H1627 28.10.14 TST ++++++++++++++++++++++++++++++++++++
      IF QtyGoodRhenus633UN <> 0 THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Rhenus 1 UN",QtyGoodRhenus633UN);
        CounterCountedItemsProcessed += 1;
      END;
      IF QtyGoodRhenus639UN <> 0 THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Rhenus 2 UN",QtyGoodRhenus639UN);
        CounterCountedItemsProcessed += 1;
      END;
      IF QtyReturnLWF <> 0 THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Ludwigsfelde",QtyReturnLWF);
        CounterCountedItemsProcessed += 1;
      END;
      IF QtyReturnLWFUN <> 0 THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Ludwigsfelde UN",QtyReturnLWFUN);
        CounterCountedItemsProcessed += 1;
      END;
      //H1627 28.10.14 TST ------------------------------------
      //H1770 07.11.14 TST +++++++++++++++++++++++++++++++++++++++
      IF QtyReturnPL <> 0 THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Poland",QtyReturnPL);
        CounterCountedItemsProcessed += 1;
      END;
      IF QtyReturnPLUN <> 0 THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Poland UN",QtyReturnPLUN);
        CounterCountedItemsProcessed += 1;
      END;
      //H1770 07.11.14 TST ---------------------------------------
      //H1859 28.11.14 TST +++++++++++++++++++++++++++++++++++++++
      IF QtyReturnBRA <> 0 THEN BEGIN
        CreatePhysInvtRecordingLine(ItemNoV,InventorySetup."Location Code Brazil/LWF",QtyReturnBRA);
        CounterCountedItemsProcessed += 1;
      END;
      //H1859 28.11.14 TST ---------------------------------------


      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(5,CounterCountedItemsProcessed);
      END;
      //H0601 13.12.13 HCN -----------------------------
    END;

    PROCEDURE CreatePhysInvtRecordingLine@1000000012(ItemNoV@1000000003 : Code[20];LocationCodeV@1000000002 : Code[10];QtyCountedCorrectedV@1000000001 : Decimal);
    VAR
      DDMaterialL@1000000004 : Record 50059;
      RecordIDL@1000000005 : Code[10];
      BranchL@1000000006 : Code[10];
      DoDocumentReferenceL@1000000007 : Boolean;
      PhysInvtReferenceL@1000000000 : Text[35];
    BEGIN
      // CreatePhysInvtRecordingLine
      //H0601 16.12.13 HCN +++++++++++++++++++++++++++++
      CLEAR(PhysInventoryOrderHeader);
      PhysInventoryOrderHeader.SETCURRENTKEY("Posting Date","Location Code");
      PhysInventoryOrderHeader.SETRANGE("Posting Date",InventorySetup."Posting Date Phys. Inventory");
      PhysInventoryOrderHeader.SETRANGE("Location Code",LocationCodeV);
      PhysInventoryOrderHeader.SETRANGE(Status,PhysInventoryOrderHeader.Status::Open);
      IF PhysInventoryOrderHeader.FINDFIRST THEN BEGIN
        CLEAR(PhysInvtRecordingHeader);
        PhysInvtRecordingHeader.SETCURRENTKEY("Order No.","Recording No.");
        PhysInvtRecordingHeader.SETRANGE("Order No.",PhysInventoryOrderHeader."No.");
        PhysInvtRecordingHeader.SETRANGE("Recording No.",1);
        PhysInvtRecordingHeader.SETRANGE("Location Code",LocationCodeV);
        IF PhysInvtRecordingHeader.FINDFIRST THEN BEGIN
          PhysInvtRecordingLine.INIT;
          PhysInvtRecordingLine."Order No." := PhysInventoryOrderHeader."No.";
          PhysInvtRecordingLine."Recording No." := 1;
          PhysInvtRecordingLine."Line No." := GetLineNo(PhysInvtRecordingLine);
          PhysInvtRecordingLine.VALIDATE("Item No.",ItemNoV);
          PhysInvtRecordingLine.VALIDATE("Location Code",LocationCodeV);
          PhysInvtRecordingLine.VALIDATE(Quantity,QtyCountedCorrectedV);
          PhysInvtRecordingLine.INSERT;
        END;
      END;
      PhysInvtReferenceL := PhysInvtRecordingLine."Order No."+'-'+
                            FORMAT(PhysInvtRecordingLine."Recording No.")+'-'+
                            FORMAT(PhysInvtRecordingLine."Line No.");


      // document reference of phys. inventory recording line => DD Material
      DoDocumentReferenceL := TRUE;
      CASE LocationCodeV OF
        //H1627 28.10.14 TST ++++++++++++++++++++++++++++++++++++
        InventorySetup."Location Code Rhenus 1",
        InventorySetup."Location Code Rhenus 1 CD",
        InventorySetup."Location Code Rhenus 1 UN":
          BEGIN
            RecordIDL := 'BMP';
            BranchL := FPCGeneralSetup."Branch Rhenus Freienbrink";
          END;
        InventorySetup."Location Code Rhenus 2",
        InventorySetup."Location Code Rhenus 2 CD",
        InventorySetup."Location Code Rhenus 2 UN":
          BEGIN
            RecordIDL := 'BMP';
            BranchL := FPCGeneralSetup."Branch Rhenus Grevenbroich";
          END;
        InventorySetup."Location Code Ludwigsfelde",
        InventorySetup."Location Code Ludwigsfelde UN":
          BEGIN
            RecordIDL := 'BMP';
            BranchL := FPCGeneralSetup."Branch Ludwigsfelde";
          END;
        //H1627 28.10.14 TST ------------------------------------
        //H1770 07.11.14 TST +++++++++++++++++++++++++++++++++++++++
        InventorySetup."Location Code Poland",
        InventorySetup."Location Code Poland UN":
          BEGIN
            RecordIDL := 'BMP';
            BranchL := FPCGeneralSetup."Branch Poland";
          END;
        //H1770 07.11.14 TST ---------------------------------------
        //H1859 28.11.14 TST +++++++++++++++++++++++++++++++++++++++
        InventorySetup."Location Code Brazil/LWF":
          BEGIN
            RecordIDL := 'BMP';
            BranchL := FPCGeneralSetup."Branch Brazil/LWF";
          END;
        //H1859 28.11.14 TST ---------------------------------------

        DDSetup."DD Good Location":
          BEGIN
            RecordIDL := '11';
            BranchL := '';
          END;
        InventorySetup."Location Code Home24 1",
      //H0819 23.01.14 ARI +++++++++++++++++++++++++++++++++++
      {
        InventorySetup."Location Code Home24 2":
      }
        InventorySetup."Location Code Home24 2",
        InventorySetup."Location Code Home24 3":
      //H0819 23.01.14 ARI -----------------------------------
          BEGIN
            DoDocumentReferenceL := FALSE;
          END;
        InventorySetup."Location Code Home24 1",
      //H0819 23.01.14 ARI +++++++++++++++++++++++++++++++++++
      {
        InventorySetup."Location Code Home24 2":
      }
        InventorySetup."Location Code Home24 2",
        InventorySetup."Location Code Home24 3":
      //H0819 23.01.14 ARI -----------------------------------
          BEGIN
            DoDocumentReferenceL := FALSE;
          END;
        ELSE BEGIN
          ERROR(TextHME001,LocationCodeV);
        END;
      END;

      IF DoDocumentReferenceL THEN BEGIN
        CLEAR(DDMaterialL);
        DDMaterialL.SETCURRENTKEY("Record ID",Direction,"No.","Trans. Status","Branch Code",Bestandsart);
        DDMaterialL.SETRANGE("Record ID",RecordIDL);
        DDMaterialL.SETRANGE(Direction,DDMaterialL.Direction::"in");
        DDMaterialL.SETRANGE("Trans. Status",DDMaterialL."Trans. Status"::new);
        DDMaterialL.SETRANGE("No.",ItemNoV);
        DDMaterialL.SETRANGE("Branch Code",BranchL);
        DDMaterialL.MODIFYALL("Trans. Status",DDMaterialL."Trans. Status"::Journal);
        CASE LocationCodeV OF
          InventorySetup."Location Code Rhenus 1",
          InventorySetup."Location Code Rhenus 2",
          //H1627 28.10.14 TST ++++++++++++++++++++++++++++++++++++
          InventorySetup."Location Code Rhenus 1 UN",
          InventorySetup."Location Code Rhenus 2 UN",
          InventorySetup."Location Code Ludwigsfelde",
          InventorySetup."Location Code Ludwigsfelde UN",
          //H1627 28.10.14 TST ------------------------------------
          //H1770 07.11.14 TST +++++++++++++++++++++++++++++++++++++++
          InventorySetup."Location Code Poland",
          InventorySetup."Location Code Poland UN",
          //H1770 07.11.14 TST ---------------------------------------
          //H1859 28.11.14 TST +++++++++++++++++++++++++++++++++++++++
          InventorySetup."Location Code Brazil/LWF",
          //H1859 28.11.14 TST ---------------------------------------
          InventorySetup."Location DD":
            BEGIN
              DDMaterialL.MODIFYALL("Phys.Invt. Reference 1",PhysInvtReferenceL);
            END;
          InventorySetup."Location Code Rhenus 1 CD",
          InventorySetup."Location Code Rhenus 2 CD":
            BEGIN
              DDMaterialL.MODIFYALL("Phys.Invt. Reference 2",PhysInvtReferenceL);
            END;
          ELSE BEGIN
            ERROR(TextHME001,LocationCodeV);
          END;
        END;
      END;
      //H0601 16.12.13 HCN -----------------------------
    END;

    PROCEDURE EvaluateCountvsExpectQtyRHE@1000000005(ItemNoV@1000000003 : Code[20];LocationV@1000000000 : Code[10];LocationCDV@1000000001 : Code[10];BranchL@1000000008 : Code[10]);
    VAR
      DeltaQtyL@1000000006 : Decimal;
      QtyCountedL@1000000007 : Decimal;
      QtyExpectedL@1000000002 : Integer;
      QuantityL@1000000004 : Decimal;
      QuantityCDL@1000000005 : Decimal;
    BEGIN
      // EvaluateCountvsExpectQtyRHE
      //H0601 13.12.13 HCN +++++++++++++++++++++++++++++
      CASE BranchL OF
        FPCGeneralSetup."Branch Rhenus Freienbrink":
          BEGIN
            IF (QtyGoodRhenus633 = 0) THEN BEGIN
              EXIT;
            END;
          END;
        FPCGeneralSetup."Branch Rhenus Grevenbroich":
          BEGIN
            IF (QtyGoodRhenus639 = 0) THEN BEGIN
              EXIT;
            END;
          END;
        ELSE BEGIN
          EXIT;
        END;
      END;

      CASE LocationV OF
        InventorySetup."Location Code Rhenus 1":
          BEGIN
            QuantityL := ItemRHE.Inventory;
            QuantityCDL := ItemRHECD.Inventory;
            QtyCountedL := QtyGoodRhenus633;
          END;
        InventorySetup."Location Code Rhenus 2":
          BEGIN
            QuantityL := ItemRHEGB.Inventory;
            QuantityCDL := ItemRHEGBCD.Inventory;
            QtyCountedL := QtyGoodRhenus639;
          END;
        ELSE BEGIN
          EXIT;
        END;
      END;
      QtyExpectedL := QuantityL + QuantityCDL;
      DeltaQtyL := QtyExpectedL - QtyCountedL;

      CASE TRUE OF

        (QuantityCDL < 0):
          BEGIN
            CreatePhysInvtRecordingLine(ItemNoV,LocationV,QtyCountedL);
            CreatePhysInvtRecordingLine(ItemNoV,LocationCDV,0);
          END;

        (DeltaQtyL = 0):
          BEGIN
            CreatePhysInvtRecordingLine(ItemNoV,LocationV,QuantityL);
            CreatePhysInvtRecordingLine(ItemNoV,LocationCDV,QuantityCDL);
          END;

        (DeltaQtyL > 0):
          BEGIN
            CASE TRUE OF
              (DeltaQtyL < QuantityL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,LocationV,QuantityL - DeltaQtyL);
                  CreatePhysInvtRecordingLine(ItemNoV,LocationCDV,QuantityCDL);
                END;

              (DeltaQtyL > QuantityL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,LocationV,0);
                  CreatePhysInvtRecordingLine(ItemNoV,LocationCDV,QtyCountedL);
                END;

              (DeltaQtyL = QuantityL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,LocationV,0);
                  CreatePhysInvtRecordingLine(ItemNoV,LocationCDV,QtyCountedL);
                END;
            END;
          END;

        (DeltaQtyL < 0):
          BEGIN
            CASE TRUE OF
              (QtyCountedL > QuantityCDL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,LocationV,QtyCountedL - QuantityCDL);
                  CreatePhysInvtRecordingLine(ItemNoV,LocationCDV,QuantityCDL);
                END;

              (QtyCountedL = QuantityCDL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,LocationV,0);
                  CreatePhysInvtRecordingLine(ItemNoV,LocationCDV,QuantityCDL);
                END;

              (QtyCountedL < QuantityCDL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,LocationV,0);
                  CreatePhysInvtRecordingLine(ItemNoV,LocationCDV,QtyCountedL);
                END;
            END;
          END;

        ELSE BEGIN
        END;
      END;
      CounterCountedItemsProcessed += 1;
      //H0601 13.12.13 HCN -----------------------------
    END;

    PROCEDURE CheckExistPhysInvtOrderHeader@1000000016();
    VAR
      PhysInventoryOrderHeaderL@1000000001 : Record 5005350;
      PhysInventoryOrderHeader2L@1000000004 : Record 5005350;
      PhysInvtRecordingHeaderL@1000000003 : Record 5005352;
      PhysInvtRecordingHeader2L@1000000005 : Record 5005352;
      PhysInvtOrderReopenL@1000000000 : Codeunit 5005357;
      PhysInvtRecReopenL@1000000006 : Codeunit 5005353;
      NoOfPhysInvtOrderHeadersL@1000000002 : Integer;
    BEGIN
      // CheckExistPhysInvtOrderHeader
      //H0601 18.12.13 HCN +++++++++++++++++++++++++++++
      CLEAR(PhysInventoryOrderHeaderL);
      PhysInventoryOrderHeaderL.SETCURRENTKEY("Posting Date","Location Code");
      PhysInventoryOrderHeaderL.SETRANGE("Posting Date",InventorySetup."Posting Date Phys. Inventory");
      NoOfPhysInvtOrderHeadersL := PhysInventoryOrderHeaderL.COUNT;
      IF (NoOfPhysInvtOrderHeadersL > 0) THEN BEGIN
        IF CONFIRM(TextHME002,FALSE,
                   NoOfPhysInvtOrderHeadersL,
                   PhysInventoryOrderHeaderL.TABLECAPTION,
                   FORMAT(InventorySetup."Posting Date Phys. Inventory"))
        THEN BEGIN
          IF CONFIRM(TextHME004,FALSE,
                     PhysInventoryOrderHeaderL.TABLECAPTION,
                     FORMAT(InventorySetup."Posting Date Phys. Inventory"))
          THEN BEGIN
            IF PhysInventoryOrderHeaderL.FIND('-') THEN BEGIN
              REPEAT
                PhysInventoryOrderHeader2L := PhysInventoryOrderHeaderL;
                IF (PhysInventoryOrderHeaderL.Status = PhysInventoryOrderHeaderL.Status::Finished) THEN BEGIN
                  CLEAR(PhysInvtOrderReopenL);
                  PhysInvtOrderReopenL.RUN(PhysInventoryOrderHeader2L);
                END;
                CLEAR(PhysInvtRecordingHeaderL);
                PhysInvtRecordingHeaderL.SETCURRENTKEY("Order No.","Recording No.");
                PhysInvtRecordingHeaderL.SETRANGE("Order No.",PhysInventoryOrderHeaderL."No.");
                IF PhysInvtRecordingHeaderL.FIND('-') THEN BEGIN
                  REPEAT
                    IF (PhysInvtRecordingHeaderL.Status = PhysInvtRecordingHeaderL.Status::Finished) THEN BEGIN
                      CLEAR(PhysInvtRecReopenL);
                      PhysInvtRecReopenL.RUN(PhysInvtRecordingHeaderL);
                    END;
                  UNTIL PhysInvtRecordingHeaderL.NEXT = 0;
                END;
                PhysInventoryOrderHeader2L.DELETE(TRUE);
              UNTIL PhysInventoryOrderHeaderL.NEXT = 0;
            END;
            //H1726 04.11.14 TST +++++++++++++++++++++++++++++++++++++++
            IF GUIALLOWED AND NOT SupressMessage THEN
            //H1726 04.11.14 TST ---------------------------------------
              MESSAGE(TextHME005,
                      NoOfPhysInvtOrderHeadersL,
                      PhysInventoryOrderHeaderL.TABLECAPTION,
                      FORMAT(InventorySetup."Posting Date Phys. Inventory"));
          END ELSE BEGIN
            ERROR(TextHME003);
          END;
        END ELSE BEGIN
          ERROR(TextHME003);
        END;
      END;
      COMMIT;
      //H0601 18.12.13 HCN -----------------------------
    END;

    PROCEDURE DeleteInsertPhysInvtOrders@1000000003();
    VAR
      InvLogL@1000000000 : Record 50208;
    BEGIN
      // DeleteInsertPhysInvtOrders
      //H0601 20.12.13 HCN +++++++++++++++++++++++++++++
      CheckExistPhysInvtOrderHeader();
      PhysInventoryOrderHeader.LOCKTABLE;
      PhysInvtRecordingHeader.LOCKTABLE;

      CLEAR(Location);
      Location.SETRANGE("Phys. Inventory Location",TRUE);
      InvPostingSetup.GET;
      IF Location.FIND('-') THEN BEGIN
        REPEAT
          PhysInventoryOrderHeader.INIT;
          PhysInventoryOrderHeader."No." := NoSeriesMngt.GetNextNo(InvPostingSetup."Phys. Inv. Order Nos.",0D,TRUE);
          PhysInventoryOrderHeader.VALIDATE("Location Code",Location.Code);
          PhysInventoryOrderHeader.Description := InventorySetup."Description Phys. Inventory" + ' ' + Location.Code;
          PhysInventoryOrderHeader."Order Date" := WORKDATE;
          PhysInventoryOrderHeader."Posting Date" := InventorySetup."Posting Date Phys. Inventory";
          //H1792 12.11.14 TST +++++++++++++++++++++++++++++++++++++++
          PhysInventoryOrderHeader."Inventory Log Header No." := InventoryLogNo;
          //H1792 12.11.14 TST ---------------------------------------
          //H1959 19.01.15 TST +++++++++++++++++++++++++++++++++++
          IF InvLogL.GET(InventoryLogNo) THEN
            PhysInventoryOrderHeader."Simulated Phys. Inventory" := InvLogL."Simulated Phys. Inventory";
          //H1959 19.01.15 TST -----------------------------------

          PhysInventoryOrderHeader.INSERT;

          PhysInvtRecordingHeader.INIT;
          PhysInvtRecordingHeader."Order No." := PhysInventoryOrderHeader."No.";
          PhysInvtRecordingHeader.Description := PhysInventoryOrderHeader.Description;
          PhysInvtRecordingHeader.VALIDATE("Location Code",Location.Code);
          PhysInvtRecordingHeader."Recording without order permit" := TRUE;
          PhysInvtRecordingHeader.INSERT(TRUE);
        UNTIL Location.NEXT = 0;
        COMMIT;
      END;

      // Calculate expected quantity for all (counted) lines in Phys. Invt Order
      CLEAR(CalcQtyExpectedAllLines);
      CalcQtyExpectedAllLines.SetSelectionAllLines();
      CalcQtyExpectedAllLines.RUN(PhysInventoryOrderHeader);
      //H0601 20.12.13 HCN -----------------------------
    END;

    PROCEDURE FinishPhysInvtOrders@1000000006();
    BEGIN
      //H0807 15.01.2014 ARI ++++++++++++++++++++++++++++++++++
      COMMIT;
      //H0807 15.01.2014 ARI ----------------------------------

      // FinishPhysInvtOrders
      //H0601 20.12.13 HCN +++++++++++++++++++++++++++++
      IF Location.FIND('-') THEN BEGIN
        PhysInventoryOrderHeader.RESET;
        PhysInventoryOrderHeader.SETCURRENTKEY("Posting Date","Location Code");
        PhysInventoryOrderHeader.SETRANGE("Posting Date",InventorySetup."Posting Date Phys. Inventory");
        PhysInventoryOrderHeader.SETRANGE(Status,PhysInventoryOrderHeader.Status::Open);

        PhysInvtRecordingHeader.RESET;
        PhysInvtRecordingHeader.SETCURRENTKEY("Order No.","Recording No.");

        REPEAT
          DoDeletePhysInvtRecordHeader := FALSE;
          PhysInventoryOrderHeader.SETRANGE("No.");
          PhysInventoryOrderHeader.SETRANGE("Location Code",Location.Code);
          PhysInventoryOrderHeader.FINDFIRST;

          //Finish Inventory Recordings => transfer recording lines to invt. order lines
          PhysInvtRecordingHeader.SETRANGE("Order No.",PhysInventoryOrderHeader."No.");
          PhysInvtRecordingHeader.SETRANGE("Location Code",Location.Code);
          IF PhysInvtRecordingHeader.FINDFIRST THEN BEGIN
            CLEAR(PhysInvtRecordingLine);
            PhysInvtRecordingLine.SETCURRENTKEY("Order No.","Recording No.","Line No.");
            PhysInvtRecordingLine.SETRANGE("Order No.",PhysInvtRecordingHeader."Order No.");
            PhysInvtRecordingLine.SETRANGE("Recording No.",1);
            IF PhysInvtRecordingLine.FINDFIRST THEN BEGIN
              CLEAR(PhysInvtRecordingFinish);
              PhysInvtRecordingFinish.RUN(PhysInvtRecordingHeader);
            END ELSE BEGIN
              IF (PhysInvtRecordingHeader.Status = PhysInvtRecordingHeader.Status::Finished) THEN BEGIN
                CLEAR(PhysInvtRecReopen);
                PhysInvtRecReopen.RUN(PhysInvtRecordingHeader);
              END;
              DoDeletePhysInvtRecordHeader := TRUE;
            END;
          END;

          //Create Lines in Phys Inventory Order for all Items not counted yet but with expected inventory <> 0
          CLEAR(CalcPhysInvtOrderLines);
          CalcPhysInvtOrderLines.SetPhysInvtOrderHeader(PhysInventoryOrderHeader);
          CalcPhysInvtOrderLines.InitializeRequest(FALSE,FALSE);
          CalcPhysInvtOrderLines.USEREQUESTFORM(FALSE);
          CalcPhysInvtOrderLines.SetHideValidationDialog(TRUE);
          CalcPhysInvtOrderLines.SetLocationFilter(Location.Code);
          CalcPhysInvtOrderLines.RUN;

          //Create new Recordings for new lines and validate Qty with 0
          PhysInventoryOrderHeader.SETRECFILTER;
          CLEAR(CreateNewRecording);
          CreateNewRecording.SETTABLEVIEW(PhysInventoryOrderHeader);
          CreateNewRecording.SetData(FALSE,TRUE);
          CreateNewRecording.USEREQUESTFORM(FALSE);
          CreateNewRecording.RUN;
          COMMIT;
          PhysInvtRecordingLine2.SETRANGE("Order No.",PhysInventoryOrderHeader."No.");
          PhysInvtRecordingLine2.SETRANGE("Recording No.",2);
          PhysInvtRecordingLine2.SETRANGE("Location Code",Location.Code);
          IF PhysInvtRecordingLine2.FIND('-') THEN BEGIN
            REPEAT
              PhysInvtRecordingLine2.VALIDATE(Quantity,0);
              PhysInvtRecordingLine2.MODIFY;
            UNTIL PhysInvtRecordingLine2.NEXT = 0;
            PhysInvtRecordingHeader2.GET(PhysInvtRecordingLine2."Order No.",2);
            CLEAR(PhysInvtRecordingFinish);
            PhysInvtRecordingFinish.RUN(PhysInvtRecordingHeader2);
            PhysInvtRecordingHeader2.Description :=
              COPYSTR((InventorySetup."Description Phys. Inventory" + ' ' + Location.Code + ' ' + Text50000),1,50);
            PhysInvtRecordingHeader2.MODIFY;
          END;

          // Calculate expected quantity for all Phys. Inventory Order Lines
          CLEAR(CalcQtyExpectedAllLines);
          CalcQtyExpectedAllLines.SetSelectionAllLines;
          CalcQtyExpectedAllLines.RUN(PhysInventoryOrderHeader);

      //H0807 15.01.2014 ARI ++++++++++++++++++++++++++++++++++
          IF DoDeletePhysInvtRecordHeader THEN BEGIN
            PhysInvtRecordingHeader.DELETE(TRUE);
          END;
      //H0807 15.01.2014 ARI ----------------------------------

        UNTIL Location.NEXT = 0;
      END;
      //H0601 20.12.13 HCN -----------------------------

      //H0807 15.01.2014 ARI ++++++++++++++++++++++++++++++++++
      COMMIT;
      //H0807 15.01.2014 ARI ----------------------------------
    END;

    PROCEDURE DetermNoCountedItemsToBeProces@1000000009() : Integer;
    VAR
      DDMaterialL@1000000000 : Record 50059;
      ReturnsLocationInventoryL@1000000002 : Record 50113;
      TotalNoOfRecordsL@1000000001 : Integer;
    BEGIN
      // DetermNoCountedItemsToBeProces
      //H0601 06.01.14 HCN +++++++++++++++++++++++++++++
      CLEAR(DDMaterialL);
      DDMaterialL.SETCURRENTKEY("Record ID",Direction,"No.","Trans. Status","Branch Code",Bestandsart);
      //H1627 28.10.14 TST ++++++++++++++++++++++++++++++++++++
      DDMaterialL.SETFILTER("Record ID",'%1|%2','BMP','11');
      DDMaterialL.SETRANGE(Direction,DDMaterialL.Direction::"in");
      DDMaterialL.SETRANGE("Trans. Status",DDMaterialL."Trans. Status"::new);
      DDMaterialL.SETFILTER(Bestandsart,'%1|%2','V','N');
      //H1627 28.10.14 TST ------------------------------------

      TotalNoOfRecordsL := DDMaterialL.COUNT;

      CLEAR(ReturnsLocationInventoryL);
      TotalNoOfRecordsL += ReturnsLocationInventoryL.COUNT;

      EXIT(TotalNoOfRecordsL);
      //H0601 06.01.14 HCN -----------------------------
    END;

    PROCEDURE VerifySetup@1000000017();
    BEGIN
      // VerifySetup
      //H0601 10.01.14 HCN +++++++++++++++++++++++++++++
      DDSetup.GET;
      DDSetup.TESTFIELD("DD Defect Location");
      DDSetup.TESTFIELD("DD Good Location");

      FPCGeneralSetup.GET;
      FPCGeneralSetup.TESTFIELD("Branch Rhenus Freienbrink");
      FPCGeneralSetup.TESTFIELD("Branch Rhenus Grevenbroich");
      //H1627 28.10.14 TST +++++++++++++++++++++++++++++++++++++++
      FPCGeneralSetup.TESTFIELD("Branch Ludwigsfelde");
      //H1627 28.10.14 TST ---------------------------------------
      //H1770 07.11.14 TST +++++++++++++++++++++++++++++++++++++++
      FPCGeneralSetup.TESTFIELD("Branch Poland");
      //H1770 07.11.14 TST ---------------------------------------
      //H1859 28.11.14 TST +++++++++++++++++++++++++++++++++++++++
      FPCGeneralSetup.TESTFIELD("Branch Brazil/LWF");
      //H1859 28.11.14 TST ---------------------------------------

      StartingDateTime := CURRENTDATETIME;
      InventorySetup.GET;
      InventorySetup.TESTFIELD("Posting Date Phys. Inventory");
      InventorySetup.TESTFIELD("Description Phys. Inventory");
      InventorySetup.TESTFIELD("Location DD");
      InventorySetup.TESTFIELD("Location Code Rhenus 1");
      InventorySetup.TESTFIELD("Location Code Rhenus 1 CD");
      InventorySetup.TESTFIELD("Location Code Rhenus 2");
      InventorySetup.TESTFIELD("Location Code Rhenus 2 CD");
      InventorySetup.TESTFIELD("Location Code Home24 1");
      InventorySetup.TESTFIELD("Location Code Home24 2");
      //H0601 10.01.14 HCN -----------------------------
      //H1627 28.10.14 TST +++++++++++++++++++++++++++++++++++++++
      InventorySetup.TESTFIELD("Location Code Rhenus 1 UN");
      InventorySetup.TESTFIELD("Location Code Rhenus 2 UN");
      InventorySetup.TESTFIELD("Location Code Ludwigsfelde");
      // InventorySetup.TESTFIELD("Location Code Ludwigsfelde UN"); not used yet
      //H1627 28.10.14 TST ---------------------------------------
      //H1770 07.11.14 TST +++++++++++++++++++++++++++++++++++++++
      InventorySetup.TESTFIELD("Location Code Poland");
      // InventorySetup.TESTFIELD("Location Code Poland UN"); not used yet
      //H1770 07.11.14 TST ---------------------------------------
      //H1859 28.11.14 TST +++++++++++++++++++++++++++++++++++++++
      InventorySetup.TESTFIELD("Location Code Brazil/LWF");
      //H1859 28.11.14 TST ---------------------------------------
    END;

    PROCEDURE SetupStatusWindow@1000000024();
    BEGIN
      // SetupStatusWindow
      //H0601 10.01.14 HCN +++++++++++++++++++++++++++++
      IF GUIALLOWED THEN BEGIN
        // TextHME007: ... processing stockcounting results\
        // TextHME008: Currently processing item:       #1#################\
        // TextHME009: Items to be processed:           #2#################\
        // TextHME010: Items processed:                 #3#################\\
        // TextHME011: Counted items to be processed:   #4#################\
        // TextHME012: Counted items processed:         #5#################
        Window.OPEN(TextHME007+
                    TextHME008+
                    TextHME009+
                    TextHME010+
                    TextHME011+
                    TextHME012,
                    Item."No.",
                    NoOfItemsToBeProcessed,
                    CounterItemsProcessed,
                    NoOfCountedItemsToBeProcessed,
                    CounterCountedItemsProcessed);
        NoOfItemsToBeProcessed := Item.COUNT;
        NoOfCountedItemsToBeProcessed := DetermNoCountedItemsToBeProces();
        Window.UPDATE(2,NoOfItemsToBeProcessed);
        Window.UPDATE(4,NoOfCountedItemsToBeProcessed);
      END;
      //H0601 10.01.14 HCN -----------------------------
    END;

    PROCEDURE PostAllInventoryOrders@1000000004();
    VAR
      PostPhysInvOrderL@1000000000 : Codeunit 5005359;
      PhysInvOrderHeaderL@1000000001 : Record 5005350;
    BEGIN
      //H0819 20.01.14 ARI +++++++++++++++++++++++++++++++++++
      InventorySetup.GET;
      //H0819 20.01.14 ARI -----------------------------------

      //H0807 15.01.14 ARI ++++++++++++++++++++++++++++++++++++
      PhysInvOrderHeaderL.SETCURRENTKEY("Posting Date","Location Code");
      PhysInvOrderHeaderL.SETRANGE("Posting Date",InventorySetup."Posting Date Phys. Inventory");
      PhysInvOrderHeaderL.SETRANGE(Status,PhysInvOrderHeaderL.Status::Finished);
      IF PhysInvOrderHeaderL.FIND('-') THEN
      REPEAT
        //H1959 19.01.15 TST +++++++++++++++++++++++++++++++++++
        IF NOT PhysInvOrderHeaderL."Simulated Phys. Inventory" THEN BEGIN
        //H1959 19.01.15 TST -----------------------------------
          PostPhysInvOrderL.RUN(PhysInvOrderHeaderL);
          COMMIT;
        //H1959 19.01.15 TST +++++++++++++++++++++++++++++++++++
        END;
        //H1959 19.01.15 TST -----------------------------------
      UNTIL PhysInvOrderHeaderL.NEXT = 0;
      //H0807 15.01.14 ARI ------------------------------------
    END;

    PROCEDURE SetSuppressMessage@1000000011();
    BEGIN
      SupressMessage := TRUE;
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________

      H0601       22.11.13 HCN       Object completely reworked (old version saved as C50236)
                                     Use Inventory Order to Import Data
      H0807       15.01.14 ARI       Batch Adjustments
      H0819       21.01.14 ARI       New Location Added and fixes for H0807
      H1627       28.10.14 TST       process BMP
      H1726       04.11.14 TST       suppress Message
      H1770       07.11.14 TST       Process BMP for Poland, correction filter for counter
      H1792       12.11.14 TST       Inventory Log No
      H1859       28.11.14 TST       Process BMP for Brazil/LWF
      H1959       19.01.15 TST       Don't post simulated inventory orders
      H2128       11.02.15 TST       Bugfix: Remove filter aon Active Item
    }
    END.
  }
}

