OBJECT Codeunit 50712 Test: Sales Order GER-3
{
  OBJECT-PROPERTIES
  {
    Date=03.12.14;
    Time=12:00:00;
    Version List=HME1541;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1000000035 : Codeunit 50200;
      LibrarySales@1000000004 : Codeunit 50701;
      LibraryPurchase@1000000011 : Codeunit 50702;
      SalesProcessHelper@1000000005 : Codeunit 50715;
      RHDInterfaceHelper@1000000001 : Codeunit 50716;
      ChannelCode@1000000007 : Code[10];
      MaxOrdersCount@1000000002 : Integer;
      isInitialized@1000000016 : Boolean;
      NoProperOrdersErr@1000000000 : TextConst 'ENU=There are no Sales Orders match to the filter.';
      EntryNotFoundErr@1000000010 : TextConst 'ENU=There is no %1 Entry for the Document %2.';

    LOCAL PROCEDURE Initialize@1000000034();
    VAR
      BackupMgt@1001 : Codeunit 50201;
    BEGIN
      RANDOMIZE;
      IF isInitialized THEN
        EXIT;

      isInitialized := TRUE;
      ChannelCode := 'GER-3';
      MaxOrdersCount := 1;
      SalesProcessHelper.InitializeHelper(1);
      COMMIT;
    END;

    [Test]
    PROCEDURE GER3_CreateSOVerifyDim@1000000074();
    BEGIN
      // Check Dimentions in Sales Header and Lines for imported Sales Order.
      Initialize;
      SalesProcessHelper.CreateSOVerifyDim(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_CreatePurchOrder@1000000004();
    BEGIN
      // Create Purchase Order for Sales Order.
      Initialize;
      SalesProcessHelper.CreatePurchOrder(ChannelCode);
    END;

    [Test]
    [HandlerFunctions(SalesPackListReportHandler)]
    PROCEDURE GER3_CreateDHLLableForPO@1000000013();
    BEGIN
      // Send Purchase Email and check DHL lable.
      Initialize;
      SalesProcessHelper.CreateDHLLableForPO(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_InvoiceSingleLineSO@1000000006();
    BEGIN
      // Ship and Invoice single line Sales Order.
      Initialize;
      SalesProcessHelper.InvoiceSingleLineSO(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_InvoiceMultiLineSO@1000000014();
    BEGIN
      // Ship and Invoice multi line Sales Order.
      Initialize;
      SalesProcessHelper.InvoiceMultiLineSO(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_InvoiceSOWithResource@1000000028();
    BEGIN
      // Ship and Invoice Sales Order with a Resource Line.
      Initialize;
      SalesProcessHelper.InvoiceSOWithResource(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_InvoiceSalesOrderKK@1000000027();
    BEGIN
      // Ship and Invoice Sales Order with Payment Method 'KK'.
      Initialize;
      SalesProcessHelper.InvoiceSalesOrderKK(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_InvoiceSalesOrderVORK@1000000020();
    BEGIN
      // Ship and Invoice Sales Order with Payment Method 'VORK'.
      Initialize;
      SalesProcessHelper.InvoiceSalesOrderVORK(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_InvoiceSalesOrderPP@1000000029();
    BEGIN
      // Ship and Invoice Sales Order with Payment Method 'PP'.
      Initialize;
      SalesProcessHelper.InvoiceSalesOrderPP(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_InvoiceSalesOrderRECHNUNG@1000000031();
    BEGIN
      // Ship and Invoice Sales Order with Payment Method 'RECHNUNG'.
      Initialize;
      SalesProcessHelper.InvoiceSalesOrderRECHNUNG(ChannelCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GER3_CreateReturnOrder@1000000023();
    BEGIN
      // Create Return Order for Sales Order.
      Initialize;
      SalesProcessHelper.CreateReturnOrder(ChannelCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GER3_PostReturnOrder@1000000052();
    BEGIN
      // Post Return Order.
      Initialize;
      SalesProcessHelper.PostReturnOrder(ChannelCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GER3_PostReturnOrderWithRes@1000000033();
    BEGIN
      // Post Return Order with Resource Line.
      Initialize;
      SalesProcessHelper.PostReturnOrderWithRes(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_ReturnWithDiscount@1000000030();
    BEGIN
      // Create Return Order with Prevention Discount and type Cancelation.
      Initialize;
      SalesProcessHelper.ReturnWithDiscount(ChannelCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GER3_ReturnOrderWithoutPrev@1000000040();
    BEGIN
      // Create Return Order without Prevention and type Return.
      Initialize;
      SalesProcessHelper.ReturnOrderWithoutPrev(ChannelCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GER3_ReturnOrderWithPrev@1000000046();
    BEGIN
      // Create Return Order with Prevention Discount and type Return.
      Initialize;
      SalesProcessHelper.ReturnOrderWithPrev(ChannelCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GER3_ChangeOfGoods@1000000047();
    BEGIN
      // Create Return Order with type Change of Goods.
      Initialize;
      SalesProcessHelper.ChangeOfGoods(ChannelCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GER3_SparePartOfGoods@1000000064();
    BEGIN
      // Create Return Order with type Spare Part.
      Initialize;
      SalesProcessHelper.SparePartOfGoods(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_CancelSalesLine@1000000049();
    BEGIN
      // Cancel Sales Line.
      // SO -> Create Purchase Order -> Modify Line -> Create Return Order -> Cancel Sales Line.
      Initialize;
      SalesProcessHelper.CancelSalesLine(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_CancelSalesOrder@1000000066();
    BEGIN
      // Cancel Sales Order.
      Initialize;
      SalesProcessHelper.CancelSalesOrder(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_CancelSOWithResource@1000000051();
    BEGIN
      // Cancel Sales Order with Resource Line.
      Initialize;
      SalesProcessHelper.CancelSOWithResource(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_CancelShippedSalesLine@1000000053();
    BEGIN
      // Cancel shipped Sales Line (negative).
      Initialize;
      SalesProcessHelper.CancelShippedSalesLine(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_CancelPurchOrderDifVend@1000000056();
    BEGIN
      // Cancel one out of two Purchase Orders.
      Initialize;
      SalesProcessHelper.CancelPurchOrderDifVend(ChannelCode);
    END;

    [Test]
    PROCEDURE GER3_CreateKADFile@1000000000();
    BEGIN
      // Create KAD File.
      // SO -> Create Purchase Order -> Create KAD File.
      Initialize;
      RHDInterfaceHelper.CreateKADFile(ChannelCode,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE GER3_CreateRHDExportDocument@1000000062();
    VAR
      TestBuff@1000000004 : Record 80008;
      SalesHeader@1000000003 : Record 36;
      OrderCount@1000000001 : Integer;
    BEGIN
      // Create RHD Export Document File.
      // SO -> Create Purchase Order -> Create KAD File -> Create RHD Export Document File.
      Initialize;
      OrderCount := 0;
      SetTestBufferFilter(TestBuff,TestBuff."Entry Type"::SalesOrder);
      IF TestBuff.FINDSET THEN
        REPEAT
          IF SalesHeader.GET(SalesHeader."Document Type"::Order,TestBuff."Entry Value Code") THEN
            IF SalesProcessHelper.CheckSalesHeader(SalesHeader,ChannelCode,SalesHeader."Payment Method Code",FALSE,FALSE) THEN BEGIN
              // Check Status.
              LibrarySales.CheckReleaseSalesOrder(SalesHeader);

              // Create Purchase Order, create KAD File, RHD Export File.
              LibrarySales.CreatePurchDocument(SalesHeader);
              RHDInterfaceHelper.CreateRHDKADFile(SalesHeader);
              LibrarySales.CreateRHDExportHeader(SalesHeader."No.");

              // Verify:
              VerifyRHDExportHeader(LibrarySales.GetFirstPurchOrderNo(SalesHeader."No."));
              OrderCount += 1;
            END;
        UNTIL (TestBuff.NEXT = 0) OR (OrderCount = MaxOrdersCount);

      IF OrderCount = 0 THEN
        Assert.Fail(NoProperOrdersErr);
    END;

    [Test]
    PROCEDURE GER3_ExportWEAFile@1000000065();
    VAR
      TestBuff@1000000004 : Record 80008;
      SalesHeader@1000000003 : Record 36;
      OrderCount@1000000001 : Integer;
    BEGIN
      // Export WEA File.
      // SO -> Create Purchase Order -> Create KAD File -> Create RHD Export Document File -> Create WEA File.
      Initialize;
      OrderCount := 0;
      SetTestBufferFilter(TestBuff,TestBuff."Entry Type"::SalesOrder);
      IF TestBuff.FINDSET THEN
        REPEAT
          IF SalesHeader.GET(SalesHeader."Document Type"::Order,TestBuff."Entry Value Code") THEN
            IF SalesProcessHelper.CheckSalesHeader(SalesHeader,ChannelCode,SalesHeader."Payment Method Code",FALSE,FALSE) THEN BEGIN
              // Check Status.
              LibrarySales.CheckReleaseSalesOrder(SalesHeader);

              // Create Purchase Order, create KAD File, WEA File.
              LibrarySales.CreatePurchDocument(SalesHeader);
              RHDInterfaceHelper.CreateRHDKADFile(SalesHeader);
              LibrarySales.CreateRHDExportHeader(SalesHeader."No.");
              RHDInterfaceHelper.CreateRHDWEAFile(SalesHeader);

              // Verify:
              VerifyWEAFileCreated(LibrarySales.GetFirstPurchOrderNo(SalesHeader."No."));
              OrderCount += 1;
            END;
        UNTIL (TestBuff.NEXT = 0) OR (OrderCount = MaxOrdersCount);

      IF OrderCount = 0 THEN
        Assert.Fail(NoProperOrdersErr);
    END;

    [Test]
    PROCEDURE GER3_ImportWEMFile@1000000002();
    VAR
      TestBuff@1000000004 : Record 80008;
      SalesHeader@1000000003 : Record 36;
      OrderCount@1000000001 : Integer;
      PurchOrderCode@1000000005 : Code[20];
    BEGIN
      // Import WEM File.
      // SO -> Create Purchase Order -> Create KAD File -> Create RHD Export Document File -> Create WEA File -> Import WEM File.
      Initialize;
      OrderCount := 0;
      SetTestBufferFilter(TestBuff,TestBuff."Entry Type"::SalesOrder);
      IF TestBuff.FINDSET THEN
        REPEAT
          IF SalesHeader.GET(SalesHeader."Document Type"::Order,TestBuff."Entry Value Code") THEN
            IF SalesProcessHelper.CheckSalesHeader(SalesHeader,ChannelCode,SalesHeader."Payment Method Code",FALSE,FALSE) THEN BEGIN
              // Check Status.
              LibrarySales.CheckReleaseSalesOrder(SalesHeader);

              // Create Purchase Order, create KAD File, WEA File.
              PurchOrderCode := LibrarySales.CreatePurchDocument(SalesHeader);
              RHDInterfaceHelper.CreateRHDKADFile(SalesHeader);
              LibrarySales.CreateRHDExportHeader(SalesHeader."No.");
              RHDInterfaceHelper.CreateRHDWEAFile(SalesHeader);

              // Create WEM file.
              LibraryPurchase.CreateRHDWEMFile(PurchOrderCode,'0');
              SalesProcessHelper.RunJobQueue(50154,'WEM');
              SalesProcessHelper.RunJobQueue(50154,'WEM_PROCESS');

              // Verify:
              VerifyRHDPurchaseImport(PurchOrderCode);
              OrderCount += 1;
            END;
        UNTIL (TestBuff.NEXT = 0) OR (OrderCount = MaxOrdersCount);

      IF OrderCount = 0 THEN
        Assert.Fail(NoProperOrdersErr);
    END;

    LOCAL PROCEDURE SetTestBufferFilter@1000000025(VAR TestBuffer@1000000000 : Record 80008;EntryType@1000000001 : Option);
    BEGIN
      TestBuffer.SETRANGE("Entry Type",EntryType);
      TestBuffer.SETRANGE("Use for Test",TRUE);
    END;

    LOCAL PROCEDURE VerifyWEAFileCreated@1000000011(DocNo@1000000000 : Code[20]);
    VAR
      RHDPurchExportHeader@1000000002 : Record 50178;
    BEGIN
      WITH RHDPurchExportHeader DO BEGIN
        SETCURRENTKEY("Document Type","Document No.");
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",DocNo);
        FINDFIRST;
        TESTFIELD(Filename);
      END;
    END;

    LOCAL PROCEDURE VerifyRHDExportHeader@1000000060(DocNo@1000000000 : Code[20]);
    VAR
      RHDPurchExportHeader@1000000001 : Record 50178;
    BEGIN
      WITH RHDPurchExportHeader DO BEGIN
        SETCURRENTKEY("Document Type","Document No.");
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",DocNo);
        Assert.IsTrue(FINDFIRST,STRSUBSTNO(EntryNotFoundErr,TABLECAPTION,DocNo));
      END;
    END;

    LOCAL PROCEDURE VerifyRHDPurchaseImport@1000000009(PurchOrderCode@1000000003 : Code[20]);
    VAR
      RHDSetup@1000000001 : Record 50177;
      RHDPurchImport@1000000000 : Record 50180;
      RHDPurchExportHeader@1000000002 : Record 50178;
    BEGIN
      RHDSetup.GET;
      RHDPurchExportHeader.SETRANGE("Document Type",RHDPurchExportHeader."Document Type"::Order);
      RHDPurchExportHeader.SETRANGE("Document No.",PurchOrderCode);
      RHDPurchExportHeader.FINDLAST;

      RHDPurchImport.SETRANGE("Record Type",RHDSetup."Record Type WEM");
      RHDPurchImport.SETRANGE("Receipt No.",RHDPurchExportHeader."Rhenus Order No.");
      RHDPurchImport.FINDFIRST;
      RHDPurchImport.TESTFIELD("Import Status",RHDPurchImport."Import Status"::Processed);
      RHDPurchImport.TESTFIELD("Error Description 1",'');
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1000000001(Msg@1000000000 : Text[1024]);
    BEGIN
    END;

    [ReportHandler]
    PROCEDURE SalesPackListReportHandler@1000000003(VAR SalesPackingListRep@1000000000 : Report 50020);
    BEGIN
      SalesPackingListRep.SAVEASXML('C:\test.xml');
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      *** Module: TestTool ***
      H0939       14.03.14  MM        Testautomation: Main business cases - Channel 3
      H1541       28.11.14  MM        Testautomation: Cover Rhenus Interface

      Base Tests for Order Process (Channel GER-3):
      1.  Check Dimentions in Sales Header and Lines for imported Sales Order.
      2.  Create Purchase Order for Sales Order.
      3.  Send Purchase Email and check DHL lable.
      4.  Ship and Invoice single line Sales Order.
      5.  Ship and Invoice multi line Sales Order.
      6.  Ship and Invoice Sales Order with a Resource Line.
      7.  Ship and Invoice Sales Order with Payment Method 'KK'.
      8.  Ship and Invoice Sales Order with Payment Method 'VORK'.
      9.  Ship and Invoice Sales Order with Payment Method 'PP'.
      10. Ship and Invoice Sales Order with Payment Method 'RECHNUNG'.
      11. Create Return Order for Sales Order.
      12. Post Return Order.
      13. Post Return Order with Resource Line.
      14. Create Return Order with Prevention Discount and type Cancelation.
      15. Create Return Order without Prevention and type Return.
      16. Create Return Order with Prevention Discount and type Return.
      17. Create Return Order with type Change of Goods.
      18. Create Return Order with type Spare Part.
      19. Cancel Sales Line.
      20. Cancel Sales Order.
      21. Cancel Sales Order with Resource Line.
      22. Cancel shipped Sales Line (negative).
      23. Cancel one out of two Purchase Orders.
      24. Create KAD File.
      25. Create RHD Export Document File.
      26. Export WEA File.
      27. Import WEM File.
    }
    END.
  }
}

