OBJECT Codeunit 90101 Execute SQL (SQLCMD)
{
  OBJECT-PROPERTIES
  {
    Date=16.12.11;
    Time=12:00:00;
    Version List=SSI/PTB#CMD1.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Server@1000000005 : Record 2000000047;
      Databases@1000000006 : Record 2000000048;
      Statement@1000000007 : Text[1024];
      ReturnValue@1000000014 : Integer;
      Window@1000000009 : Dialog;
      Text001@1000000013 : TextConst 'ENU=You have exceeded the maximum line length of 1000 characters.';
      Text002@1000000012 : TextConst 'ENU=The ADO connection to the database has been closed.';
      Text003@1000000011 : TextConst 'ENU=There is no SQL Connection setup.';
      Text004@1000000010 : TextConst 'ENU=The SQL Connection information specified is incorrect.  Please verify the User ID and Password.';
      Text005@1000000008 : TextConst 'ENU=Attempting to Connect to the SQL Server ...';
      Text006@1000000004 : TextConst 'ENU=Connection Established.';
      Text007@1000000003 : TextConst 'ENU=A Server Name must be entered.';
      Text010@1000000002 : TextConst 'ENU=No SQL statement defined.';
      Text011@1000000000 : TextConst 'ENU=The SQL statement returned an Error.';
      Text012@1000000001 : TextConst 'ENU=Execute SQL Statement ...\#1###############################################';
      PTBSetup@1000000015 : Record 90100;

    PROCEDURE ExecuteStatement@1000000000(InStatement@1000000000 : Text[1024];OutputFile@1000000001 : Text[1024]);
    BEGIN
      IF (InStatement = '') THEN
        ERROR(Text010);

      PTBSetup.GET;
      PTBSetup.TESTFIELD("SQL Server Name");
      IF (PTBSetup."Authentication Mode" = PTBSetup."Authentication Mode"::"SQL Server") THEN
        PTBSetup.TESTFIELD("Login Name");

      Statement := InStatement;

      IF GUIALLOWED THEN BEGIN
        Window.OPEN(Text012);
        Window.UPDATE(1, Statement);
      END;

      CASE PTBSetup."Authentication Mode" OF
        PTBSetup."Authentication Mode"::Windows: BEGIN
          IF OutputFile <> '' THEN
            Statement := STRSUBSTNO('sqlcmd -S "%1" -d "%2" -E -Q "%3" -o "%4"',
                         GetCurrentServer, GetCurrentDatabase, InStatement, OutputFile)
          ELSE
            Statement := STRSUBSTNO('sqlcmd -S "%1" -d "%2" -E -Q "%3"',
                         GetCurrentServer, GetCurrentDatabase, InStatement);
        END;

        PTBSetup."Authentication Mode"::"SQL Server": BEGIN
          IF OutputFile <> '' THEN
            Statement := STRSUBSTNO('sqlcmd -S "%1" -d "%2" -U "%3" -P "%4" -Q "%5" -o "%6"',
                         GetCurrentServer, GetCurrentDatabase, PTBSetup."Login Name", PTBSetup.Password, InStatement, OutputFile)
          ELSE
            Statement := STRSUBSTNO('sqlcmd -S "%1" -d "%2" -U "%3" -P "%4" -Q "%5"',
                         GetCurrentServer, GetCurrentDatabase, PTBSetup."Login Name", PTBSetup.Password, InStatement);
        END;
      END;


      ReturnValue := RunCommand(Statement, 0, TRUE);

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ReturnValue <> 0 THEN
        ERROR(Text011)
      ELSE IF GUIALLOWED AND (OutputFile <> '') AND EXISTS(OutputFile) THEN
        RunCommand(STRSUBSTNO('notepad.exe %1', OutputFile), 1, FALSE);
    END;

    PROCEDURE ExecuteStatement2@1000000003(InStatement@1000000000 : Text[1024];OutputFile@1000000001 : Text[1024]);
    BEGIN
      IF (InStatement = '') THEN
        ERROR(Text010);

      Statement := InStatement;

      IF GUIALLOWED THEN BEGIN
        Window.OPEN(Text012);
        Window.UPDATE(1, Statement);
      END;

      CASE PTBSetup."Authentication Mode" OF
        PTBSetup."Authentication Mode"::Windows: BEGIN
          IF OutputFile <> '' THEN
            Statement := STRSUBSTNO('sqlcmd -S "%1" -d "%2" -E -Q "%3" -o "%4"',
                         GetCurrentServer, GetCurrentDatabase, InStatement, OutputFile)
          ELSE
            ERROR('Outputfile must be specified.');
        END;

        PTBSetup."Authentication Mode"::"SQL Server": BEGIN
          IF OutputFile <> '' THEN
            Statement := STRSUBSTNO('sqlcmd -S "%1" -d "%2" -U "%3" -P "%4" -Q "%5" -o "%6"',
                         GetCurrentServer, GetCurrentDatabase, PTBSetup."Login Name", PTBSetup.Password, InStatement, OutputFile)
          ELSE
            ERROR('Outputfile must be specified.');
        END;
      END;

      ReturnValue := RunCommand(Statement, 0, TRUE);

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF ReturnValue <> 0 THEN
        ERROR(Text011);
    END;

    PROCEDURE GetCurrentServer@1020013() : Text[250];
    BEGIN
      PTBSetup.GET;
      EXIT(PTBSetup."SQL Server Name");

      //Server.SETRANGE("My Server", TRUE);
      //Server.FINDFIRST;
      //EXIT(Server."Server Name");
    END;

    PROCEDURE GetCurrentDatabase@1000000001() : Text[250];
    BEGIN
      Databases.SETRANGE("My Database", TRUE);
      Databases.FINDFIRST;
      EXIT(Databases."Database Name");
    END;

    PROCEDURE RunCommand@1000000002(Command@1000000000 : Text[1024];WindowStyle@1000000001 : Variant;WaitOnReturn@1000000002 : Variant) ReturnCode : Integer;
    VAR
      WSH_Shell@1000000003 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
    BEGIN
      IF Command = '' THEN
        EXIT;

      IF ISCLEAR(WSH_Shell) THEN
        CREATE(WSH_Shell);

      ReturnCode := WSH_Shell.Run(Command, WindowStyle, WaitOnReturn);
      IF GUIALLOWED THEN
        YIELD;

      EXIT(ReturnCode);
    END;

    BEGIN
    {
      *********************************************************
      ***              STRYK System Improvement             ***
      ***    Performance Optimization & Troubleshooting     ***
      ***  (c) 2007, STRYK System Improvement, J”rg Stryk   ***
      ***               Contact: www.stryk.info             ***
      *********************************************************

      sqlcmd [
      { { -U login_id [ -P password ] } | ÍE }
      ]
      [-S server_name [ \ instance_name ] ] [ -H wksta_name ] [ -d db_name ]
      [ -l time_out ] [ -t time_out ] [ -h headers ]
      [ -s col_separator ] [ -w column_width ] [ -a packet_size ]
      [ -e ] [ -I ]
      [ -c cmd_end ] [ -L [ c ] ] [ -q "query" ] [ -Q "query" ]
      [ -m error_level ] [ -V ] [ -W ] [ -u ] [ -r [ 0 | 1 ] ]
      [ -i input_file ] [ -o output_file ]
      [ -f < codepage > | i: < codepage > [ < , o: < codepage > ]
      [ -k [ 1 | 2 ] ]
      [ -y display_width ] [-Y display_width ]
      [ -p [ 1 ] ] [ -R ] [ -b ] [ -v ] [ -A ] [ -X [ 1 ] ] [ -x ]
      [ -? ]
      ]
    }
    END.
  }
}

