OBJECT Codeunit 50163 CYCC
{
  OBJECT-PROPERTIES
  {
    Date=19.03.15;
    Time=12:00:00;
    Modified=Yes;
    Version List=#HME2128;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=&Liefern,&Fakturieren,Liefern &und fakturieren;ENU=&Ship,&Invoice,Ship &and Invoice';
      Text001@1001 : TextConst 'DEU=M”chten Sie die %1 buchen?;ENU=Do you want to post the %1?';
      Text002@1002 : TextConst 'DEU=&Liefern,&Fakturieren,Liefern &und fakturieren;ENU=&Receive,&Invoice,Receive &and Invoice';
      DocumentNo@1008 : Code[20];
      Item@1000000063 : Record 27;
      ItemRHE@1000000020 : Record 27;
      ItemRHECD@1000000023 : Record 27;
      ItemRHEGB@1000000022 : Record 27;
      ItemRHEGBCD@1000000021 : Record 27;
      Location@1000000006 : Record 14;
      PhysInventoryOrderHeader@1000000007 : Record 5005350;
      PhysInvtRecordingHeader@1000000009 : Record 5005352;
      InvPostingSetup@1000000017 : Record 313;
      PhysInvtRecordingLine@1000000016 : Record 5005353;
      CreateNewRecording@1000000015 : Report 5005361;
      CalcPhysInvtOrderLines@1000000013 : Report 5005360;
      PhysInvtRecordingLine2@1000000012 : Record 5005353;
      PhysInvtRecordingHeader2@1000000011 : Record 5005352;
      NoSeriesMngt@1000000010 : Codeunit 396;
      PhysInvtRecordingFinish@1000000014 : Codeunit 5005351;
      Text50000@1000000018 : TextConst 'DEU=Ausgleich erwarteter NAV Mengen;ENU=corr. expect. Qty NAV';
      CalcQtyExpectedAllLines@1000000039 : Codeunit 5005362;
      PhysInvtRecReopen@1000000040 : Codeunit 5005353;
      TextHME001@1000000034 : TextConst 'ENU=Undefined Location Code in C50057: "%1".';
      TextHME002@1000000019 : TextConst 'ENU=%1 "%2"-records for posting date %3 has/have been found.\Do you want to delete them ?';
      TextHME003@1000000024 : TextConst 'ENU=Execution of function aborted.';
      TextHME004@1000000036 : TextConst 'ENU=All "%2"-records with posting date %2 will now be deleted !\Do you really want to continue ?';
      TextHME005@1000000037 : TextConst 'ENU=%1 "%2"-records with posting date %3 has/have been deleted now.';
      Window@1000000048 : Dialog;
      EndingDateTime@1000000057 : DateTime;
      StartingDateTime@1000000053 : DateTime;
      Qty@1000000030 : Decimal;
      QtyGood@1000000027 : Decimal;
      TextHME007@1000000042 : TextConst 'ENU=... processing stockcounting results\';
      TextHME008@1000000043 : TextConst 'ENU=Currently processing item:       #1#################\';
      TextHME009@1000000044 : TextConst 'ENU=Items to be processed:           #2#################\';
      TextHME010@1000000045 : TextConst 'ENU=Items processed:                 #3#################\\';
      TextHME011@1000000051 : TextConst 'ENU=Counted items to be processed:   #4#################\';
      TextHME012@1000000046 : TextConst 'ENU=Counted items processed:         #5#################';
      CounterItemsProcessed@1000000050 : Integer;
      NoOfItemsToBeProcessed@1000000049 : Integer;
      TextHME013@1000000041 : TextConst 'ENU=Execution of function\';
      TextHME014@1000000054 : TextConst 'ENU=- started at %1\';
      TextHME015@1000000055 : TextConst 'ENU=- successfully finished at %2\';
      TextHME016@1000000056 : TextConst 'ENU=- lasted for %3 minutes.';
      DurationOfExecution@1000000058 : Integer;
      TextHME017@1000000061 : TextConst 'ENU=Do you want to start the manual cycle count?';
      PhysInvOrderHeader@1000000064 : Record 5005350;
      FinishInventoryOrders@1000000066 : Codeunit 5005355;
      SupressMessage@1000000073 : Boolean;
      InventoryLogNo@1000000078 : Integer;
      CDLocation633@1000000000 : Record 14;
      CDLocation639@1000000001 : Record 14;
      Location633@1000000002 : Record 14;
      Location639@1000000003 : Record 14;
      InvLogHeader@1000000004 : Record 50208;
      PhysInvSetup@1000000005 : Record 50336;

    PROCEDURE PostCycleCount@1000000008(InventoryLogNoV@1000000005 : Integer;LocationV@1000000000 : Record 14) OK : Boolean;
    BEGIN
      IF GUIALLOWED THEN
        IF NOT SupressMessage THEN BEGIN
          IF NOT CONFIRM(TextHME017,FALSE) THEN BEGIN
            EXIT;
          END;
        END;

      Location := LocationV;
      InvPostingSetup.GET;
      PhysInvSetup.GET;

      PhysInventoryOrderHeader.RESET;
      PhysInventoryOrderHeader.SETRANGE("Location Code",LocationV.Code);
      IF PhysInventoryOrderHeader.ISEMPTY THEN BEGIN

        IF Location."Branch Code" IN ['633','639'] THEN BEGIN
          CLEAR(Location633);
          Location633.SETRANGE("Branch Code",'633');
          Location633.SETRANGE("Phys. Inventory Location",TRUE);
          Location633.SETRANGE("Is Unsellable Location",FALSE);
          Location633.SETRANGE("Rhenus Crossdock Location",FALSE);
          IF Location633.FINDFIRST THEN;

          CLEAR(CDLocation633);
          CDLocation633.SETRANGE("Branch Code",'633');
          CDLocation633.SETRANGE("Phys. Inventory Location",TRUE);
          CDLocation633.SETRANGE("Rhenus Crossdock Location",TRUE);
          IF CDLocation633.FINDFIRST THEN;

          CLEAR(Location639);
          Location639.SETRANGE("Branch Code",'639');
          Location639.SETRANGE("Phys. Inventory Location",TRUE);
          Location639.SETRANGE("Is Unsellable Location",FALSE);
          Location639.SETRANGE("Rhenus Crossdock Location",FALSE);
          IF Location639.FINDFIRST THEN;

          CLEAR(CDLocation639);
          CDLocation639.SETRANGE("Branch Code",'639');
          CDLocation639.SETRANGE("Phys. Inventory Location",TRUE);
          CDLocation639.SETRANGE("Rhenus Crossdock Location",TRUE);
          IF CDLocation639.FINDFIRST THEN;
        END;

        InventoryLogNo := InventoryLogNoV;

        CASE Location."Branch Code" OF
          '633': BEGIN
                   InsertPhysInvtOrder(Location633);
                   InsertPhysInvtOrder(CDLocation633);
                 END;
          '639': BEGIN
                   InsertPhysInvtOrder(Location639);
                   InsertPhysInvtOrder(CDLocation639);
                 END;
          ELSE
            InsertPhysInvtOrder(Location);
        END;

        CLEAR(Item);

        SetupStatusWindow();
        InvLogHeader.GET(InventoryLogNoV);

        //H2128 11.02.15 TST +++++++++++++++++++++++++++++
        //H2128 11.02.15 TST -----------------------------

        IF Item.FIND('-') THEN BEGIN;
          REPEAT
            CounterItemsProcessed += 1;
            IF GUIALLOWED THEN BEGIN
              Window.UPDATE(1,Item."No.");
              Window.UPDATE(3,CounterItemsProcessed);
            END;
            QtyGood := GetQty(Item."No.");

            IF ABS(QtyGood) <> 0
            THEN BEGIN
              CalcQtyPerLocation(Item."No.");
              EvaluateCountedvsExpectedQty(Item."No.");
            END;
          UNTIL Item.NEXT = 0;  // Item-Loop
        END;
        FinishPhysInvtOrder(Location);

        PhysInvOrderHeader.SETCURRENTKEY("Posting Date","Location Code");
        PhysInvOrderHeader.SETRANGE("Posting Date",PhysInvSetup."Posting Date Phys. Inventory");
        PhysInvOrderHeader.SETRANGE(Status,PhysInvOrderHeader.Status::Open);
        PhysInvOrderHeader.SETRANGE("Location Code",Location.Code);
        IF PhysInvOrderHeader.FIND('-') THEN
          REPEAT
            FinishInventoryOrders.RUN(PhysInvOrderHeader);
            COMMIT;
          UNTIL PhysInvOrderHeader.NEXT = 0;

        IF GUIALLOWED THEN
          IF NOT SupressMessage THEN BEGIN
            Window.CLOSE;
            EndingDateTime := CURRENTDATETIME;
            DurationOfExecution := ROUND(((EndingDateTime - StartingDateTime) / 1000 / 60),1); // minutes
            MESSAGE(TextHME013+
                    TextHME014+
                    TextHME015+
                    TextHME016,
                    StartingDateTime,
                    EndingDateTime,
                    DurationOfExecution);
          END;
      END ELSE BEGIN
        FinishPhysInvtOrder(Location);

        PhysInvOrderHeader.SETCURRENTKEY("Posting Date","Location Code");
        PhysInvOrderHeader.SETRANGE("Posting Date",PhysInvSetup."Posting Date Phys. Inventory");
        PhysInvOrderHeader.SETRANGE(Status,PhysInvOrderHeader.Status::Open);
        PhysInvOrderHeader.SETRANGE("Location Code",Location.Code);
        IF PhysInvOrderHeader.FIND('-') THEN
          REPEAT
            FinishInventoryOrders.RUN(PhysInvOrderHeader);
            COMMIT;
          UNTIL PhysInvOrderHeader.NEXT = 0;

        IF GUIALLOWED THEN
          IF NOT SupressMessage THEN BEGIN
            Window.CLOSE;
            EndingDateTime := CURRENTDATETIME;
            DurationOfExecution := ROUND(((EndingDateTime - StartingDateTime) / 1000 / 60),1); // minutes
            MESSAGE(TextHME013+
                    TextHME014+
                    TextHME015+
                    TextHME016,
                    StartingDateTime,
                    EndingDateTime,
                    DurationOfExecution);
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE "CYCLECOUNTPOST(Y/N)"@5(MARCSKUV@1000 : Record 50813) : Boolean;
    VAR
      ItemL@1002 : Record 27;
      PostL@1001 : Boolean;
    BEGIN
      PostL := TRUE;
      Item.INIT;

      IF NOT Item.GET(MARCSKUV."No.") THEN
        PostL := FALSE;

      IF Item.Blocked THEN
        PostL := FALSE;

      EXIT(PostL);
    END;

    LOCAL PROCEDURE GetQty@1000000000(ItemNoV@1000000004 : Code[20]) : Decimal;
    VAR
      QtyL@1000000002 : Decimal;
      InventoryRecordingL@1000000001 : Record 50813;
    BEGIN
      // GetQty
      QtyL:=0;
      InventoryRecordingL.RESET;
      InventoryRecordingL.SETCURRENTKEY("Location Code");
      InventoryRecordingL.SETRANGE("Trans. Status",InventoryRecordingL."Trans. Status"::new);
      InventoryRecordingL.SETRANGE("No.",ItemNoV);
      InventoryRecordingL.SETRANGE("Location Code",Location.Code);
      IF NOT InventoryRecordingL.ISEMPTY THEN BEGIN
        InventoryRecordingL.CALCSUMS("Confirmed Inventory");
        QtyL := InventoryRecordingL."Confirmed Inventory";
        IF QtyL = 0 THEN
          InventoryRecordingL.MODIFYALL("Trans. Status",InventoryRecordingL."Trans. Status"::canceled);
      END;

      EXIT(QtyL);
    END;

    LOCAL PROCEDURE GetLineNo@1000000002(PhysInvtRecordingLineV@1000000000 : Record 5005353) LineNo : Integer;
    VAR
      RecordingLineL@1000000001 : Record 5005353;
    BEGIN
      RecordingLineL.SETRANGE("Order No.", PhysInvtRecordingLineV."Order No.");
      RecordingLineL.SETRANGE("Recording No.",1);

      IF RecordingLineL.FIND('+') THEN BEGIN
        LineNo :=  RecordingLineL."Line No." + 10000;
      END ELSE
        LineNo := 10000;
    END;

    LOCAL PROCEDURE CalcQtyPerLocation@1000000007(ItemNoV@1000000003 : Code[20]);
    VAR
      LocationV@1000000000 : Record 14;
    BEGIN
      // CalcQtyPerLocation
      CLEAR(ItemRHE);
      CLEAR(ItemRHECD);
      CLEAR(ItemRHEGB);
      CLEAR(ItemRHEGBCD);
      CASE Location."Branch Code" OF
        '633': BEGIN
                ItemRHE.SETRANGE("No.",ItemNoV);
                ItemRHE.SETFILTER("Date Filter",'..'+FORMAT(PhysInvSetup."Posting Date Phys. Inventory"));
                ItemRHE.SETFILTER("Location Filter",Location.Code);
                ItemRHE.FINDFIRST;
                ItemRHE.CALCFIELDS(Inventory);

                IF CDLocation633.Code <> '' THEN BEGIN
                  ItemRHECD.SETRANGE("No.",ItemNoV);
                  ItemRHECD.SETFILTER("Date Filter",'..'+FORMAT(PhysInvSetup."Posting Date Phys. Inventory"));
                  ItemRHECD.SETFILTER("Location Filter",CDLocation633.Code);
                  ItemRHECD.FINDFIRST;
                  ItemRHECD.CALCFIELDS(Inventory);
                END;
              END;

        '639': BEGIN
                ItemRHEGB.SETRANGE("No.",ItemNoV);
                ItemRHEGB.SETFILTER("Date Filter",'..'+FORMAT(PhysInvSetup."Posting Date Phys. Inventory"));
                ItemRHEGB.SETFILTER("Location Filter",Location.Code);
                ItemRHEGB.FINDFIRST;
                ItemRHEGB.CALCFIELDS(Inventory);

                IF CDLocation639.Code <> '' THEN BEGIN
                  ItemRHEGBCD.SETRANGE("No.",ItemNoV);
                  ItemRHEGBCD.SETFILTER("Date Filter",'..'+FORMAT(PhysInvSetup."Posting Date Phys. Inventory"));
                  ItemRHEGBCD.SETFILTER("Location Filter",Location.Code);
                  ItemRHEGBCD.FINDFIRST;
                  ItemRHEGBCD.CALCFIELDS(Inventory);
                END;
              END;
      END;
    END;

    LOCAL PROCEDURE EvaluateCountedvsExpectedQty@1000000010(ItemNoV@1000000003 : Code[20]);
    BEGIN
      // EvaluateCountedvsExpectedQty

      // Rhenus Locations:
      IF EvaluateCountvsExpectQtyRHE(ItemNoV) THEN
        EXIT;

      IF (QtyGood <> 0) THEN
        CreatePhysInvtRecordingLine(ItemNoV,Location.Code,QtyGood);
    END;

    LOCAL PROCEDURE CreatePhysInvtRecordingLine@1000000012(ItemNoV@1000000003 : Code[20];LocationCodeV@1000000002 : Code[10];QtyCountedCorrectedV@1000000001 : Decimal);
    VAR
      RecordIDL@1000000005 : Code[10];
      BranchL@1000000006 : Code[10];
      InvRecordingInL@1000000000 : Record 50813;
    BEGIN
      // CreatePhysInvtRecordingLine
      CLEAR(PhysInventoryOrderHeader);
      PhysInventoryOrderHeader.SETCURRENTKEY("Posting Date","Location Code");
      PhysInventoryOrderHeader.SETRANGE("Posting Date",PhysInvSetup."Posting Date Phys. Inventory");
      PhysInventoryOrderHeader.SETRANGE("Location Code",LocationCodeV);
      PhysInventoryOrderHeader.SETRANGE(Status,PhysInventoryOrderHeader.Status::Open);
      IF PhysInventoryOrderHeader.FINDFIRST THEN BEGIN
        CLEAR(PhysInvtRecordingHeader);
        PhysInvtRecordingHeader.SETCURRENTKEY("Order No.","Recording No.");
        PhysInvtRecordingHeader.SETRANGE("Order No.",PhysInventoryOrderHeader."No.");
        PhysInvtRecordingHeader.SETRANGE("Recording No.",1);
        PhysInvtRecordingHeader.SETRANGE("Location Code",LocationCodeV);
        IF PhysInvtRecordingHeader.FINDFIRST THEN BEGIN
          PhysInvtRecordingLine.INIT;
          PhysInvtRecordingLine."Order No." := PhysInventoryOrderHeader."No.";
          PhysInvtRecordingLine."Recording No." := 1;
          PhysInvtRecordingLine."Line No." := GetLineNo(PhysInvtRecordingLine);
          PhysInvtRecordingLine.VALIDATE("Item No.",ItemNoV);
          PhysInvtRecordingLine.VALIDATE("Location Code",LocationCodeV);
          PhysInvtRecordingLine.VALIDATE(Quantity,QtyCountedCorrectedV);
          PhysInvtRecordingLine.INSERT;
        END;
      END;

      InvRecordingInL.RESET;
      InvRecordingInL.SETRANGE("Location Code",LocationCodeV);
      InvRecordingInL.SETRANGE("Trans. Status",InvRecordingInL."Trans. Status"::new);
      InvRecordingInL.SETRANGE("No.",ItemNoV);
      InvRecordingInL.MODIFYALL("Trans. Status",InvRecordingInL."Trans. Status"::Journal);
    END;

    LOCAL PROCEDURE EvaluateCountvsExpectQtyRHE@1000000005(ItemNoV@1000000003 : Code[20]) : Boolean;
    VAR
      DeltaQtyL@1000000006 : Decimal;
      QtyCountedL@1000000007 : Decimal;
      QtyExpectedL@1000000002 : Integer;
      QuantityL@1000000004 : Decimal;
      QuantityCDL@1000000005 : Decimal;
      CDLocationCodeL@1000000000 : Code[10];
    BEGIN
      // EvaluateCountvsExpectQtyRHE
      CASE Location."Branch Code" OF
        '633':
          BEGIN
            IF (QtyGood = 0) THEN
              EXIT(TRUE);
            QuantityL := ItemRHE.Inventory;
            QuantityCDL := ItemRHECD.Inventory;
            QtyCountedL := QtyGood;
            CDLocationCodeL := CDLocation633.Code;
          END;
        '639':
          BEGIN
            IF (QtyGood = 0) THEN
              EXIT(TRUE);
            QuantityL := ItemRHEGB.Inventory;
            QuantityCDL := ItemRHEGBCD.Inventory;
            QtyCountedL := QtyGood;
            CDLocationCodeL := CDLocation639.Code;
          END;
        ELSE
          EXIT(FALSE);
      END;
      QtyExpectedL := QuantityL + QuantityCDL;
      DeltaQtyL := QtyExpectedL - QtyCountedL;

      CASE TRUE OF

        (QuantityCDL < 0):
          BEGIN
            CreatePhysInvtRecordingLine(ItemNoV,Location.Code,QtyCountedL);
            CreatePhysInvtRecordingLine(ItemNoV,CDLocationCodeL,0);
          END;

        (DeltaQtyL = 0):
          BEGIN
            CreatePhysInvtRecordingLine(ItemNoV,Location.Code,QuantityL);
            CreatePhysInvtRecordingLine(ItemNoV,CDLocationCodeL,QuantityCDL);
          END;

        (DeltaQtyL > 0):
          BEGIN
            CASE TRUE OF
              (DeltaQtyL < QuantityL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,Location.Code,QuantityL - DeltaQtyL);
                  CreatePhysInvtRecordingLine(ItemNoV,CDLocationCodeL,QuantityCDL);
                END;

              (DeltaQtyL > QuantityL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,Location.Code,0);
                  CreatePhysInvtRecordingLine(ItemNoV,CDLocationCodeL,QtyCountedL);
                END;

              (DeltaQtyL = QuantityL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,Location.Code,0);
                  CreatePhysInvtRecordingLine(ItemNoV,CDLocationCodeL,QtyCountedL);
                END;
            END;
          END;

        (DeltaQtyL < 0):
          BEGIN
            CASE TRUE OF
              (QtyCountedL > QuantityCDL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,Location.Code,QtyCountedL - QuantityCDL);
                  CreatePhysInvtRecordingLine(ItemNoV,CDLocationCodeL,QuantityCDL);
                END;

              (QtyCountedL = QuantityCDL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,Location.Code,0);
                  CreatePhysInvtRecordingLine(ItemNoV,CDLocationCodeL,QuantityCDL);
                END;

              (QtyCountedL < QuantityCDL):
                BEGIN
                  CreatePhysInvtRecordingLine(ItemNoV,Location.Code,0);
                  CreatePhysInvtRecordingLine(ItemNoV,CDLocationCodeL,QtyCountedL);
                END;
            END;
          END;

        ELSE BEGIN
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InsertPhysInvtOrder@1000000003(LocationV@1000000001 : Record 14);
    VAR
      InvLogL@1000000000 : Record 50208;
    BEGIN
      // InsertPhysInvtOrders
      PhysInventoryOrderHeader.LOCKTABLE;
      PhysInvtRecordingHeader.LOCKTABLE;

      PhysInventoryOrderHeader.RESET;
      PhysInventoryOrderHeader.SETRANGE("Location Code",LocationV.Code);
      IF PhysInventoryOrderHeader.FINDFIRST THEN
        EXIT;

      PhysInventoryOrderHeader.RESET;

      PhysInventoryOrderHeader.INIT;
      PhysInventoryOrderHeader."No." := NoSeriesMngt.GetNextNo(InvPostingSetup."Phys. Inv. Order Nos.",0D,TRUE);
      PhysInventoryOrderHeader.VALIDATE("Location Code",LocationV.Code);
      PhysInventoryOrderHeader.Description := PhysInvSetup."Description Phys. Inventory" + ' ' + LocationV.Code;
      PhysInventoryOrderHeader."Order Date" := WORKDATE;
      PhysInventoryOrderHeader."Posting Date" := PhysInvSetup."Posting Date Phys. Inventory";
      PhysInventoryOrderHeader."Inventory Log Header No." := InventoryLogNo;
      IF InvLogL.GET(InventoryLogNo) THEN
        PhysInventoryOrderHeader."Simulated Phys. Inventory" := InvLogL."Simulated Phys. Inventory";
      PhysInventoryOrderHeader.INSERT;

      PhysInvtRecordingHeader.INIT;
      PhysInvtRecordingHeader."Order No." := PhysInventoryOrderHeader."No.";
      PhysInvtRecordingHeader.Description := PhysInventoryOrderHeader.Description;
      PhysInvtRecordingHeader.VALIDATE("Location Code",LocationV.Code);
      PhysInvtRecordingHeader."Recording without order permit" := TRUE;
      PhysInvtRecordingHeader.INSERT(TRUE);
        COMMIT;

      // Calculate expected quantity for all (counted) lines in Phys. Invt Order
      CLEAR(CalcQtyExpectedAllLines);
      CalcQtyExpectedAllLines.SetSelectionAllLines();
      CalcQtyExpectedAllLines.RUN(PhysInventoryOrderHeader);
    END;

    LOCAL PROCEDURE FinishPhysInvtOrder@1000000006(LocationV@1000000001 : Record 14);
    VAR
      DoDeletePhysInvtRecordHeaderL@1000000000 : Boolean;
    BEGIN
      COMMIT;

      // FinishPhysInvtOrders
      PhysInventoryOrderHeader.RESET;
      PhysInventoryOrderHeader.SETCURRENTKEY("Posting Date","Location Code");
      PhysInventoryOrderHeader.SETRANGE("Posting Date",PhysInvSetup."Posting Date Phys. Inventory");
      PhysInventoryOrderHeader.SETRANGE(Status,PhysInventoryOrderHeader.Status::Open);
      PhysInventoryOrderHeader.SETRANGE("Location Code",LocationV.Code);
      IF PhysInventoryOrderHeader.FINDFIRST THEN BEGIN
        PhysInvtRecordingHeader.RESET;
        PhysInvtRecordingHeader.SETCURRENTKEY("Order No.","Recording No.");

        DoDeletePhysInvtRecordHeaderL := FALSE;

        //Finish Inventory Recordings => transfer recording lines to invt. order lines
        PhysInvtRecordingHeader.SETRANGE("Order No.",PhysInventoryOrderHeader."No.");
        PhysInvtRecordingHeader.SETRANGE("Location Code",Location.Code);
        IF PhysInvtRecordingHeader.FINDFIRST THEN BEGIN
          CLEAR(PhysInvtRecordingLine);
          PhysInvtRecordingLine.SETCURRENTKEY("Order No.","Recording No.","Line No.");
          PhysInvtRecordingLine.SETRANGE("Order No.",PhysInvtRecordingHeader."Order No.");
          PhysInvtRecordingLine.SETRANGE("Recording No.",1);
          IF PhysInvtRecordingLine.FINDFIRST THEN BEGIN
            CLEAR(PhysInvtRecordingFinish);
            PhysInvtRecordingFinish.RUN(PhysInvtRecordingHeader);
          END ELSE BEGIN
            IF (PhysInvtRecordingHeader.Status = PhysInvtRecordingHeader.Status::Finished) THEN BEGIN
              CLEAR(PhysInvtRecReopen);
              PhysInvtRecReopen.RUN(PhysInvtRecordingHeader);
            END;
            DoDeletePhysInvtRecordHeaderL := TRUE;
          END;
        END;

        //Create Lines in Phys Inventory Order for all Items not counted yet but with expected inventory <> 0
        CLEAR(CalcPhysInvtOrderLines);
        CalcPhysInvtOrderLines.SetPhysInvtOrderHeader(PhysInventoryOrderHeader);
        CalcPhysInvtOrderLines.InitializeRequest(FALSE,FALSE);
        CalcPhysInvtOrderLines.USEREQUESTFORM(FALSE);
        CalcPhysInvtOrderLines.SetHideValidationDialog(TRUE);
        CalcPhysInvtOrderLines.SetLocationFilter(Location.Code);
        CalcPhysInvtOrderLines.RUN;

        //Create new Recordings for new lines and validate Qty with 0
        PhysInventoryOrderHeader.SETRECFILTER;
        CLEAR(CreateNewRecording);
        CreateNewRecording.SETTABLEVIEW(PhysInventoryOrderHeader);
        CreateNewRecording.SetData(FALSE,TRUE);
        CreateNewRecording.USEREQUESTFORM(FALSE);
        CreateNewRecording.RUN;
        COMMIT;
        PhysInvtRecordingLine2.SETRANGE("Order No.",PhysInventoryOrderHeader."No.");
        PhysInvtRecordingLine2.SETRANGE("Recording No.",2);
        PhysInvtRecordingLine2.SETRANGE("Location Code",Location.Code);
        IF PhysInvtRecordingLine2.FIND('-') THEN BEGIN
          REPEAT
            PhysInvtRecordingLine2.VALIDATE(Quantity,0);
            PhysInvtRecordingLine2.MODIFY;
          UNTIL PhysInvtRecordingLine2.NEXT = 0;
          PhysInvtRecordingHeader2.GET(PhysInvtRecordingLine2."Order No.",2);
          CLEAR(PhysInvtRecordingFinish);
          PhysInvtRecordingFinish.RUN(PhysInvtRecordingHeader2);
          PhysInvtRecordingHeader2.Description :=
            COPYSTR((PhysInvSetup."Description Phys. Inventory" + ' ' + Location.Code + ' ' + Text50000),1,50);
          PhysInvtRecordingHeader2.MODIFY;
        END;

        // Calculate expected quantity for all Phys. Inventory Order Lines
        CLEAR(CalcQtyExpectedAllLines);
        CalcQtyExpectedAllLines.SetSelectionAllLines;
        CalcQtyExpectedAllLines.RUN(PhysInventoryOrderHeader);

        IF DoDeletePhysInvtRecordHeaderL THEN BEGIN
          PhysInvtRecordingHeader.DELETE(TRUE);
        END;
      END;

      COMMIT;
    END;

    LOCAL PROCEDURE SetupStatusWindow@1000000024();
    BEGIN
      // SetupStatusWindow
      IF GUIALLOWED THEN BEGIN
        Window.OPEN(TextHME007+
                    TextHME008+
                    TextHME009+
                    TextHME010,
                    Item."No.",
                    NoOfItemsToBeProcessed,
                    CounterItemsProcessed);
        NoOfItemsToBeProcessed := Item.COUNT;
        Window.UPDATE(2,NoOfItemsToBeProcessed);
      END;
    END;

    PROCEDURE PostAllInventoryOrders@1000000004();
    VAR
      PostPhysInvOrderL@1000000000 : Codeunit 5005359;
      PhysInvOrderHeaderL@1000000001 : Record 5005350;
    BEGIN
      PhysInvSetup.GET;

      PhysInvOrderHeaderL.SETCURRENTKEY("Posting Date","Location Code");
      PhysInvOrderHeaderL.SETRANGE("Posting Date",PhysInvSetup."Posting Date Phys. Inventory");
      PhysInvOrderHeaderL.SETRANGE(Status,PhysInvOrderHeaderL.Status::Finished);
      IF PhysInvOrderHeaderL.FIND('-') THEN
      REPEAT
        IF NOT PhysInvOrderHeaderL."Simulated Phys. Inventory" THEN BEGIN
          PostPhysInvOrderL.RUN(PhysInvOrderHeaderL);
          COMMIT;
        END;
      UNTIL PhysInvOrderHeaderL.NEXT = 0;
    END;

    PROCEDURE SetSuppressMessage@1000000011();
    BEGIN
      SupressMessage := TRUE;
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________

      H1794       29.01.15 TST       New codeunit - replaces 50057 DD CYCC
      H2128       11.02.15 TST       Remove Filter on active item
    }
    END.
  }
}

