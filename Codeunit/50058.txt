OBJECT Codeunit 50058 DD Print
{
  OBJECT-PROPERTIES
  {
    Date=12.07.12;
    Time=11:29:05;
    Version List=DD1.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            LMSetup.GET;
            IF LMSetup."Auto Print Documents" THEN
              PrintInit;
          END;

  }
  CODE
  {
    VAR
      Company@1000000000 : Record 2000000006;
      ReportSelection@1000000001 : Record 77;
      LMHeader@1000000002 : Record 76058;
      OrderNo@1000000003 : Code[20];
      OrderNoNav@1000000004 : Code[20];
      LMSetup@1000000005 : Record 76030;
      Cust@1000000011 : Record 18;
      SalesSetup@1000000010 : Record 311;
      MarcHeader@1000000009 : Record 76058;
      LastNoSeriesLine@1000000008 : Record 309;
      WarningNoSeriesCode@1000000007 : Code[10];
      TryNoSeriesCode@1000000006 : Code[10];
      Text004@1000000017 : TextConst 'DEU=Sie kînnen keine neuen Nummern aus der Nummernserie %1 auf %2 zuweisen.;ENU=You cannot assign new numbers from the number series %1 on %2.;FRA=Vous ne pouvez pas attribuer de nouveaux numÇros Ö partir de la souche de numÇros %1 dans %2.;ITA=Impossibile assegnare nuovi numeri dalla numerazione %1 su %2.';
      Text005@1000000016 : TextConst 'DEU=Sie kînnen keine neuen Nummern aus der Nummernserie %1 zuweisen.;ENU=You cannot assign new numbers from the number series %1.;FRA=Vous ne pouvez pas attribuer de nouveaux numÇros Ö partir de la souche de numÇros %1.;ITA=Impossibile assegnare nuovi numeri dalla numerazione %1.';
      Text007@1000000015 : TextConst 'DEU=Sie kînnen keine Nummern grî·er als %1 aus der Nummernserie %2 zuweisen.;ENU=You cannot assign numbers greater than %1 from the number series %2.;FRA=Vous ne pouvez pas attribuer de numÇros supÇrieurs Ö %1 Ö partir de la souche de numÇros %2.;ITA=Impossibile assegnare numeri superiori a %1 dalla numerazione %2.';
      Text006@1000000014 : TextConst 'DEU=Sie kînnen keine neuen Nummern aus der Nummernserie %1 an einem Datum vor %2 zuweisen.;ENU=You cannot assign new numbers from the number series %1 on a date before %2.;FRA=Vous ne pouvez pas attribuer de nouveaux numÇros Ö partir de la souche de numÇros %1 pour une date antÇrieure au %2.;ITA=Impossibile assegnare nuovi numeri dalla numerazione %1 in data anteriore a %2.';
      Text008@1000000013 : TextConst 'DEU=%1 muss eine Nummer enthalten.;ENU=%1 must contain a number.;FRA=Le champ %1 doit contenir un numÇro.;ITA=%1 deve contenere un numero.';
      Text010@1000000012 : TextConst 'DEU=Die Nummer %1 kann nicht mehr als 20 Zeichen umfassen.;ENU=The number %1 cannot be extended to more than 20 characters.;FRA=Le numÇro %1 ne peut pas àtre Çtendu Ö plus de 20 caractäres.;ITA=Il numero %1 non puï essere esteso a pió di 20 caratteri.';
      test@1000000018 : Codeunit 76027;
      GlobalJobQueueEntry@1115500000 : Record 472;

    PROCEDURE PrintInit@1000000001();
    VAR
      Found@1000000000 : Boolean;
      LMHeaderLoc@1000000001 : Record 76058;
    BEGIN
      OrderNoNav := DELSTR(OrderNo,1,STRPOS(OrderNo,'-'));

      LMHeader.RESET;
      LMHeader.SETRANGE("Record ID",'ROE');
      LMHeader.SETFILTER("Trans. Status",'%1|%2',LMHeader."Trans. Status"::"3",LMHeader."Trans. Status"::"2");
      LMHeader.SETRANGE("Print Status",LMHeader."Print Status"::"0");
      LMHeader.LOCKTABLE; //GOB-SFE/19.03.2009
      IF LMHeader.FIND('-') THEN BEGIN
        Found:=TRUE;
        MESSAGE('%1 Orders found for printout',LMHeader.COUNT);
        REPEAT
          Print(LMHeader);
          IF LMHeader."Trans. Status"<>LMHeader."Trans. Status"::"4" THEN BEGIN
            LMHeader."Print Status":=LMHeader."Print Status"::"1";
            LMHeader.MODIFY;
          END;
        UNTIL LMHeader.NEXT=0;
        COMMIT;
      END;

      //In LM Outbound Interface verlagert
      //Dort werden pdf mit passenden syn und dat files hochgeladen
      {
      LMSetup.GET;
      IF LMSetup."LM Upload Printouts" THEN
        UploadPrintouts;
      }

      COMMIT;
    END;

    PROCEDURE PrintInitJobQueue@1115500001(JobQueueEntry@1115500000 : Record 472);
    VAR
      Found@1000000000 : Boolean;
      LMHeaderLoc@1000000001 : Record 76058;
      i@1115500001 : Integer;
    BEGIN
      GlobalJobQueueEntry:=JobQueueEntry;

      OrderNoNav := DELSTR(OrderNo,1,STRPOS(OrderNo,'-'));

      LMHeader.RESET;
      LMHeader.SETRANGE("Record ID",'ROE');
      LMHeader.SETFILTER("Trans. Status",'%1|%2',LMHeader."Trans. Status"::"3",LMHeader."Trans. Status"::"2");
      LMHeader.SETRANGE("Print Status",LMHeader."Print Status"::"0");
      LMHeader.LOCKTABLE; //GOB-SFE/19.03.2009
      IF LMHeader.FIND('-') THEN BEGIN
        Found:=TRUE;
        CreateLogEntry('40',STRSUBSTNO('%1 Orders to print',LMHeader.COUNT));
        i:=0;
        REPEAT
          i:=i+1;
          Print(LMHeader);
          IF LMHeader."Trans. Status"<>LMHeader."Trans. Status"::"4" THEN BEGIN
            LMHeader."Print Status":=LMHeader."Print Status"::"1";
            LMHeader.MODIFY;
          END;
        UNTIL LMHeader.NEXT=0;
        CreateLogEntry('40',STRSUBSTNO('%1 Orders printed',i));
        COMMIT;
      END;

      //In LM Outbound Interface verlagert
      //Dort werden pdf mit passenden syn und dat files hochgeladen
      {
      LMSetup.GET;
      IF LMSetup."LM Upload Printouts" THEN
        UploadPrintouts;
      }

      COMMIT;
    END;

    PROCEDURE Print@1000000002(VAR LMHeader@1000000008 : Record 76058);
    VAR
      DocType@1000000000 : 'Shipment,Invoice';
      gobTXT1@1000000003 : TextConst 'DEU=KANEBO\;ENU=KANEBO\';
      DocConv@1000000005 : Codeunit 81165;
      Doc1@1000000002 : Automation "{EFE9E105-2215-4C88-9EF7-338B23C1E681} 3.0:{525CA8D6-81EE-4AED-B95C-9C4DBAD5980B}:Unknown Automation Server.Unknown Class";
      Doc2@1000000001 : Automation "{EFE9E105-2215-4C88-9EF7-338B23C1E681} 3.0:{525CA8D6-81EE-4AED-B95C-9C4DBAD5980B}:Unknown Automation Server.Unknown Class";
      WshFileSystem@1000000004 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      WshFolder@1000000006 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B3-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.Folder";
    BEGIN
      LMSetup.GET;

      IF (LMHeader.Company = 'KCI') THEN
        PrintLMReport(ReportSelection.Usage::"65")
      ELSE
        PrintLMReport(ReportSelection.Usage::"66");

      IF LMHeader."Posting Type"=LMHeader."Posting Type"::"1" THEN
        PrintLMReport(ReportSelection.Usage::"64");


        CLEAR(Doc1);
        CREATE(Doc1);
        SetLicense(Doc1);
        MESSAGE('PDF erstellen fÅr : '+LMHeader."No.");
        Doc1.Open(LMSetup."Initerface Tmp Folder"+'\temp_ship.pdf','');
        IF EXISTS(LMSetup."Initerface Tmp Folder"+'\temp_inv.pdf') THEN
          Doc1.Append(LMSetup."Initerface Tmp Folder"+'\temp_inv.pdf','');
        SLEEP(1000);
        //MESSAGE(LMSetup."Printout Folder"+'\'+LMHeader."Order No. Navision"+'.pdf');
        Doc1.Save(LMSetup."Printout Folder"+'\'+LMHeader."Order No. Navision"+'.pdf',1);
        CLEAR(Doc1);
        DocConv.PrintConvClose(0);

        IF EXISTS(LMSetup."Initerface Tmp Folder"+'\temp_inv.pdf') THEN
          ERASE(LMSetup."Initerface Tmp Folder"+'\temp_inv.pdf');
        IF EXISTS(LMSetup."Initerface Tmp Folder"+'\temp_ship.pdf') THEN
          ERASE(LMSetup."Initerface Tmp Folder"+'\temp_ship.pdf');
    END;

    LOCAL PROCEDURE PrintLMReport@1000000007(ReportUsage@1000 : Integer);
    VAR
      PrinterID@1000000000 : Text[250];
      PrinterSelection2@1000000001 : Record 78;
      DocConv@1000000002 : Codeunit 81165;
      Counter@1000000003 : Integer;
    BEGIN

      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportUsage);
      ReportSelection.FIND('-');
      REPEAT
        //Counter:=Counter+1;
        ReportSelection.TESTFIELD("Report ID");
        IF ReportSelection.Usage=ReportSelection.Usage::"66" THEN
          DocConv.PrintLM(LMHeader,ReportSelection."Report ID",'temp_ship');
        IF ReportSelection.Usage=ReportSelection.Usage::"65" THEN
          DocConv.PrintLM(LMHeader,ReportSelection."Report ID",'temp_ship');
        IF ReportSelection.Usage=ReportSelection.Usage::"64" THEN
          DocConv.PrintLM(LMHeader,ReportSelection."Report ID",'temp_inv');

      UNTIL ReportSelection.NEXT = 0;
    END;

    PROCEDURE UploadPrintouts@1000000003();
    VAR
      FTPMngt@1000000000 : Codeunit 76022;
      LMSetup@1000000001 : Record 76030;
      FileRec@1000000002 : Record 2000000022;
      par@1000000003 : Text[250];
      TextVar@1000000004 : TextConst 'DEU=%1';
      WshFileSystem@1000000005 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      WshFolder@1000000006 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B3-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.Folder";
    BEGIN
      //wird nicht mehr durchlaufen. In LM outbound verlagert.

      LMSetup.GET;
      IF LMSetup."Operational mode"=LMSetup."Operational mode"::"0" THEN BEGIN
        MESSAGE('FTP Interface not activated!');
        EXIT;
      END;
      CREATE(WshFileSystem);
      WshFolder:=WshFileSystem.GetFolder(LMSetup."Printout Folder");
      IF FORMAT(WshFolder.Size)<>'0' THEN BEGIN
        MESSAGE('upload printouts');
        FTPMngt.SetFTP;
        FTPMngt.PutFile2('*.pdf',LMSetup."Printout Folder",'incoming'); //Alle pdf hochladen
        WshFileSystem.CopyFile(LMSetup."Printout Folder"+'\*.pdf',LMSetup."Interface Backup Folder",TRUE);
        WshFileSystem.DeleteFile(LMSetup."Printout Folder"+'\*.pdf',TRUE);
        CLEAR(WshFileSystem);
      END;
    END;

    PROCEDURE GOB_GetPostingNo@1000000000(VAR LMHeaderVar@1000000002 : Record 76058);
    VAR
      SalesHeader@1000000000 : Record 36;
      NoSeriesMgt@1000000001 : Codeunit 396;
    BEGIN
      //A/GOB-SFE/07.01.05
      LMHeader:=LMHeaderVar;

      Cust.CHANGECOMPANY(LMHeader.Company);
      SalesHeader.CHANGECOMPANY(LMHeader.Company);
      Cust.GET(LMHeader."Sell-to Customer No.");

      IF NOT SalesHeader.GET(SalesHeader."Document Type"::Order,LMHeaderVar."Order No. Navision") THEN BEGIN
        MESSAGE('Auftrag fÅr Lieferschein Druck nicht gefunden: %1!',LMHeaderVar."Order No. Navision");
        //LMHeaderVar."Trans. Status":=LMHeaderVar."Trans. Status"::error;
        //LMHeaderVar."Error Description":='Original sales order not found';
        //LMHeaderVar.MODIFY;
      END ELSE BEGIN
        //A/GOB-SFE/08.04.09/V1.01
        {
        IF (Cust."Posting Type" = Cust."Posting Type"::ship) THEN BEGIN
          IF SalesHeader."Shipping No." = '' THEN
            SalesHeader.TESTFIELD("Shipping No. Series");
          SalesHeader."Shipping No." := GetNextNo(SalesHeader."Shipping No. Series",SalesHeader."Posting Date",TRUE);
        END;
        }
        //IF (Cust."Posting Type" = Cust."Posting Type"::Invoice) THEN BEGIN
          IF SalesHeader."Shipping No." = '' THEN
            SalesHeader.TESTFIELD("Shipping No. Series");
          SalesHeader."Shipping No." := GetNextNo(SalesHeader."Shipping No. Series",SalesHeader."Posting Date",TRUE);
          IF (SalesHeader."Posting No." = '') AND (UPPERCASE(LMHeader.Company)<>'KCI') THEN BEGIN
            SalesHeader.TESTFIELD("Posting No. Series");
            SalesHeader."Posting No." := GetNextNo(SalesHeader."Posting No. Series",SalesHeader."Posting Date",TRUE);
          END;
        //END;
        //A/GOB-SFE/08.04.09/V1.01
        SalesHeader.MODIFY;
      END;
      //E/GOB-SFE/07.01.05
    END;

    PROCEDURE GetNextNo@12(NoSeriesCode@1000 : Code[10];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean) : Code[20];
    VAR
      NoSeriesLine@1003 : Record 309;
      NoSeries@1000000000 : Record 308;
    BEGIN
      NoSeries.CHANGECOMPANY(LMHeader.Company);
      NoSeriesLine.CHANGECOMPANY(LMHeader.Company);

      IF SeriesDate = 0D THEN
        SeriesDate := WORKDATE;

      IF ModifySeries OR (LastNoSeriesLine."Series Code" = '') THEN BEGIN
        IF ModifySeries THEN
          NoSeriesLine.LOCKTABLE;
        NoSeries.GET(NoSeriesCode);
        SetNoSeriesLineFilter(NoSeriesLine,NoSeriesCode,SeriesDate);
        IF NOT NoSeriesLine.FIND('-') THEN BEGIN
          NoSeriesLine.SETRANGE("Starting Date");
          IF NoSeriesLine.FIND('-') THEN
            ERROR(
              Text004,
              NoSeriesCode,SeriesDate);
          ERROR(
            Text005,
            NoSeriesCode);
        END;
      END ELSE
        NoSeriesLine := LastNoSeriesLine;

      IF NoSeries."Date Order" AND (SeriesDate < NoSeriesLine."Last Date Used") THEN
        ERROR(
          Text006,
          NoSeries.Code,NoSeriesLine."Last Date Used");
      NoSeriesLine."Last Date Used" := SeriesDate;
      IF NoSeriesLine."Last No. Used" = '' THEN BEGIN
        NoSeriesLine.TESTFIELD("Starting No.");
        NoSeriesLine."Last No. Used" := NoSeriesLine."Starting No.";
      END ELSE
        IF NoSeriesLine."Increment-by No." <= 1 THEN
          NoSeriesLine."Last No. Used" := INCSTR(NoSeriesLine."Last No. Used")
        ELSE
          IncrementNoText(NoSeriesLine."Last No. Used",NoSeriesLine."Increment-by No.");
      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Last No. Used" > NoSeriesLine."Ending No.")
      THEN
        ERROR(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Warning No." <> '') AND
         (NoSeriesLine."Last No. Used" >= NoSeriesLine."Warning No.") AND
         (NoSeriesCode <> WarningNoSeriesCode) AND
         (TryNoSeriesCode = '')
      THEN BEGIN
        WarningNoSeriesCode := NoSeriesCode;
        MESSAGE(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      END;
      NoSeriesLine.VALIDATE(Open);

      IF ModifySeries THEN
        NoSeriesLine.MODIFY
      ELSE
        LastNoSeriesLine := NoSeriesLine;
      EXIT(NoSeriesLine."Last No. Used");
    END;

    PROCEDURE SetNoSeriesLineFilter@11(VAR NoSeriesLine@1000 : Record 309;NoSeriesCode@1001 : Code[10];StartDate@1002 : Date);
    BEGIN
      IF StartDate = 0D THEN
        StartDate := WORKDATE;
      NoSeriesLine.RESET;
      NoSeriesLine.CHANGECOMPANY(LMHeader.Company);
      NoSeriesLine.SETCURRENTKEY("Series Code","Starting Date");
      NoSeriesLine.SETRANGE("Series Code",NoSeriesCode);
      NoSeriesLine.SETRANGE("Starting Date",0D,StartDate);
      IF NoSeriesLine.FIND('+') THEN BEGIN
        NoSeriesLine.SETRANGE("Starting Date",NoSeriesLine."Starting Date");
        NoSeriesLine.SETRANGE(Open,TRUE);
      END;
    END;

    LOCAL PROCEDURE IncrementNoText@20(VAR No@1000 : Code[20];IncrementByNo@1001 : Decimal);
    VAR
      DecimalNo@1002 : Decimal;
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      NewNo@1005 : Text[30];
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      EVALUATE(DecimalNo,COPYSTR(No,StartPos,EndPos - StartPos + 1));
      NewNo := FORMAT(DecimalNo + IncrementByNo,0,1);
      ReplaceNoText(No,NewNo,0,StartPos,EndPos);
    END;

    LOCAL PROCEDURE GetIntegerPos@4(No@1000 : Code[20];VAR StartPos@1001 : Integer;VAR EndPos@1002 : Integer);
    VAR
      IsDigit@1003 : Boolean;
      i@1004 : Integer;
    BEGIN
      StartPos := 0;
      EndPos := 0;
      IF No <> '' THEN BEGIN
        i := STRLEN(No);
        REPEAT
          IsDigit := No[i] IN ['0'..'9'];
          IF IsDigit THEN BEGIN
            IF EndPos = 0 THEN
              EndPos := i;
            StartPos := i;
          END;
          i := i - 1;
        UNTIL (i = 0) OR (StartPos <> 0) AND NOT IsDigit;
      END;
    END;

    LOCAL PROCEDURE ReplaceNoText@7(VAR No@1000 : Code[20];NewNo@1001 : Code[20];FixedLength@1002 : Integer;StartPos@1003 : Integer;EndPos@1004 : Integer);
    VAR
      StartNo@1005 : Code[20];
      EndNo@1006 : Code[20];
      ZeroNo@1007 : Code[20];
      NewLength@1008 : Integer;
      OldLength@1009 : Integer;
    BEGIN
      IF StartPos > 1 THEN
        StartNo := COPYSTR(No,1,StartPos - 1);
      IF EndPos < STRLEN(No) THEN
        EndNo := COPYSTR(No,EndPos + 1);
      NewLength := STRLEN(NewNo);
      OldLength := EndPos - StartPos + 1;
      IF FixedLength > OldLength THEN
        OldLength := FixedLength;
      IF OldLength > NewLength THEN
        ZeroNo := PADSTR('',OldLength - NewLength,'0');
      IF STRLEN(StartNo) + STRLEN(ZeroNo) + STRLEN(NewNo) + STRLEN(EndNo)  > 20 THEN
        ERROR(
          Text010,
          No);
      No := StartNo + ZeroNo + NewNo + EndNo;
    END;

    PROCEDURE SetLicense@1111500000(VAR pdfCreator@1000 : Automation "{EFE9E105-2215-4C88-9EF7-338B23C1E681} 3.0:{525CA8D6-81EE-4AED-B95C-9C4DBAD5980B}:Unknown Automation Server.Unknown Class");
    BEGIN
        pdfCreator.SetLicenseKey(
          'GOB Software & Systeme GmbH & Co. KG',
      //A/GOB-TL/15.03.05/GOB3.60.256
      { 20-sec-license
          '07EFCDAB010001008C7BA85F6E6AB0AD3315861F822916721BC6792C691B2A61B42A5FAE7107A45A49A7DE600F116A686FD4B53D9CF7D2CED09EA'+
          '04CCF6263AA404D6AA7B315341E0C7133F1C412DB70FF65F96E786B6EA92B5A206A3F7286438436D1D07CDA0FDD9697EDF3A96FC4FD1E34CA4929');
      }
      {
        '07EFCDAB010001008C7BA85FE264B0AD3515861F82290662CBC7792C691B0A2FB42A5FAE7107A45A49A7DE600F116A686FD4B53D9CF7D2CED09EA' +
        '04CCF6263AA404D6AA7B315341E1C714E9CBD67A1199E58C45D364121971979725D356EF1260950B4E310A385BBFFB5BDB7EF74878F7B5DBE245B' +
        '7C20BF8F8E1F');
        }
      {
      //A/GOB-SLI/31.03.05
        '07EFCDAB010001008C7BA85F3E64B0AD3515861F82290662CBC7792C691B0A2FB42A5FAE7107A45A49A7DE600F116A686FD4B53D9CF7D2CED09EA' +
        '04CCF6263AA404D6AA7B315341E1C71729CBD67A1199E58C45D364121971979725D356EF1260950B4E310A385BBFFB5BDB7EF74878F7B5DBE245B' +
        '7C20BF8F8E1F')
      }
      //E/GOB-TL/15.03.05/GOB3.60.256
      //E/GOB-SLI/31.03.05
      //A/GOB-SPI/13.06.08
        '07EFCDAB010001008C7BA85FD675B0AD4315861F86E501F2E3DF792C691B0A2FB42A7FAE0A48' +
        'E67A1BC8B915788F190D4FFA956DE584A6A2BDFB8003A2032B8A666429C89D');
      //E/GOB-SPI/13.06.08
    END;

    PROCEDURE CreateLogEntry@1115500004(MsgCode@1115500001 : Code[10];MsgText@1115500000 : Text[50]);
    VAR
      JobQueueEntry@1115500004 : Record 472;
      Msg@1115500003 : Text[50];
      JobDispatcher@1115500002 : Codeunit 448;
    BEGIN
      JobDispatcher.InsertLogEntryGOB(GlobalJobQueueEntry,MsgCode,MsgText);
    END;

    BEGIN
    {

      +----------------------------------------------+
      | GOB Software & Systeme                       |
      +----------------------------------------------+
      | Allgemeine Programmierung                    |
      | Kanebo                                       |
      +----------------------------------------------+

      Version Bemerkung
      ------------------------------------------------
      V1.00   25.09.2007    GOB-SFE   Objekt erstellt
      V1.01   09.04.2008    GOB-SFE   GetPostingNo. Funktion geÑndert
      V1.02   19.03.2009    GOB-SFE   Locktable gesetzt, es gab Problem mit öberschneidungen mit dem 2ten NAS Server
    }
    END.
  }
}

