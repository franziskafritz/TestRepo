OBJECT Codeunit 6085591 TIFF Image Capture UI Proxy
{
  OBJECT-PROPERTIES
  {
    Date=24.11.13;
    Time=01:00:00;
    Version List=DCW13.70.00.3.50.05;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Document@1000000002 : Record 6085590;
      ActiveField@1000000006 : Record 6085580;
      NAVUtil@1000000014 : Codeunit 6085590;
      CaptureMgnt@1000000015 : Codeunit 6085576;
      CaptureUI@1000000000 : Automation "{E1C03AD2-0CD6-4286-A1D0-E5496F916725} 2.0:{444F7B1F-C2B9-3F75-B379-8FC2BE785802}:'Continia Document Capture for Dynamics Nav Classic - UI Object Library'.CaptureUI" WITHEVENTS;
      MessageReceiver@1000000001 : Automation "{E1C03AD2-0CD6-4286-A1D0-E5496F916725} 2.0:{52B3D52A-0FA2-38D8-957F-5107672408CC}:'Continia Document Capture for Dynamics Nav Classic - UI Object Library'.MessageReceiver";
      LastCaptureTop@1000000011 : Integer;
      LastCaptureLeft@1000000010 : Integer;
      LastCaptureBottom@1000000012 : Integer;
      LastCaptureRight@1000000013 : Integer;
      ActiveSubForm@1000000005 : 'None,Header,Line';
      CaptureType@1000000009 : 'CaptureField,CaptureText';
      CurrentPageNo@1000000008 : Integer;
      ActiveLineNo@1000000007 : Integer;

    PROCEDURE SetDocument@1000000014(NewDocument@1000000000 : Record 6085590);
    BEGIN
      Document := NewDocument;
    END;

    PROCEDURE Show@1000000002(WindowName@1000000000 : Text[1024];SetFocusToCallingApp@1000000001 : Boolean) : Boolean;
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        CREATE(CaptureUI);

      EXIT(CaptureUI.Show(WindowName,SetFocusToCallingApp));
    END;

    PROCEDURE ClearImage@1000000003();
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;
      CaptureUI.ClearImage;
    END;

    PROCEDURE LoadImageFromFile@1000000004(Filename@1000000000 : Text[1024]);
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;
      CaptureUI.LoadImageFromFile(Filename);
    END;

    PROCEDURE ScrollToTop@1000000005();
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;
      CaptureUI.ScrollToTop;
    END;

    PROCEDURE ScrollToLeftEnd@1000000006();
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;
      CaptureUI.ScrollToLeftEnd;
    END;

    PROCEDURE SetActivePage@1000000007(NewPage@1000000000 : Integer);
    BEGIN
      CurrentPageNo := NewPage;
      IF NewPage <> 0 THEN
        CaptureUI.SetActivePage(NewPage);
    END;

    PROCEDURE StartCapture@1000000008(NewCaptureType@1000000002 : 'CaptureField,CaptureText';CaptionFieldName@1000000000 : Text[1024];ValueFieldName@1000000001 : Text[1024]);
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;
      CaptureType := NewCaptureType;
      CaptureUI.StartCapture(CaptionFieldName,ValueFieldName);
    END;

    PROCEDURE StopCapture@1000000009();
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;
      CaptureUI.StopCapture;
    END;

    PROCEDURE SetMessageReceiver@1000000000(VAR NewReceiver@1000000000 : Automation "{E1C03AD2-0CD6-4286-A1D0-E5496F916725} 2.0:{52B3D52A-0FA2-38D8-957F-5107672408CC}:'Continia Document Capture for Dynamics Nav Classic - UI Object Library'.MessageReceiver" WITHEVENTS);
    BEGIN
      MessageReceiver := NewReceiver;
    END;

    PROCEDURE SetZoomPct@1000000010(NewPct@1000000000 : Decimal);
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;
      CaptureUI.ZoomPct := NewPct;
    END;

    PROCEDURE RemoveAllFields@1000000011();
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;
      CaptureUI.RemoveAllFields;
    END;

    PROCEDURE DrawField@1000000012(FieldName@1000000000 : Text[1024];IsValue@1000000001 : Boolean;Top@1000000002 : Integer;Left@1000000003 : Integer;Bottom@1000000004 : Integer;Right@1000000005 : Integer);
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;

      IF (Top = 0) AND (Left = 0) AND (Bottom = 0) AND (Right = 0) THEN
        EXIT;

      CaptureUI.DrawField(FieldName,IsValue,Top,Left,Bottom,Right);
    END;

    PROCEDURE Close@1000000013();
    BEGIN
      IF ISCLEAR(CaptureUI) THEN
        EXIT;
      CaptureUI.Close;
    END;

    PROCEDURE SetActive@1000000017(NewActiveField@1000000000 : Record 6085580;NewActiveLineNo@1000000002 : Integer;NewActiveSubForm@1000000001 : Integer);
    BEGIN
      ActiveField := NewActiveField;
      ActiveLineNo := NewActiveLineNo;
      ActiveSubForm := NewActiveSubForm;
    END;

    PROCEDURE SetLastCaptureRect@1000000001(Top@1000000003 : Integer;Left@1000000002 : Integer;Bottom@1000000001 : Integer;Right@1000000000 : Integer);
    BEGIN
      LastCaptureTop := Top;
      LastCaptureLeft := Left;
      LastCaptureBottom := Bottom;
      LastCaptureRight := Right;
    END;

    PROCEDURE GetLastCaptureRect@1000000015(VAR Top@1000000003 : Integer;VAR Left@1000000002 : Integer;VAR Bottom@1000000001 : Integer;VAR Right@1000000000 : Integer);
    BEGIN
      Top := LastCaptureTop;
      Left := LastCaptureLeft;
      Bottom := LastCaptureBottom;
      Right := LastCaptureRight;
    END;

    PROCEDURE SetActiveSubForm@1000000016(NewActiveSubForm@1000000000 : Integer);
    BEGIN
      ActiveSubForm := NewActiveSubForm;
    END;

    EVENT CaptureUI@1000000000::MouseReleased@50(scrolling@1000000000 : Boolean);
    BEGIN
      NAVUtil.SetFocusToTopForm;

      IF NOT scrolling THEN
        MessageReceiver.SendMessage(0,'UPDATE' + UPPERCASE(FORMAT(ActiveSubForm)));
    END;

    EVENT CaptureUI@1000000000::CaptureEnded@51(fieldName@1000000005 : Text[1024];isValue@1000000004 : Boolean;top@1000000003 : Integer;left@1000000002 : Integer;bottom@1000000001 : Integer;right@1000000000 : Integer);
    VAR
      Template@1000000012 : Record 6085579;
      Page@1000000011 : Record 6085591;
      Value@1000000010 : Record 6085593;
      Words@1000000009 : TEMPORARY Record 6085592;
      Word@1000000008 : Text[1024];
      xLeft@1000000007 : Integer;
      xRight@161024012 : Integer;
      Width@1000000006 : Integer;
    BEGIN
      SetLastCaptureRect(top,left,bottom,right);

      IF CaptureType = CaptureType::CaptureText THEN
        EXIT;

      Page.GET(Document."No.",CurrentPageNo);

      IF (ActiveSubForm = ActiveSubForm::Header) OR (NOT isValue) THEN
        ActiveLineNo := 0;

      IF (ActiveSubForm = ActiveSubForm::Line) AND (NOT isValue) THEN BEGIN
        IF right - left > 20 THEN BEGIN
          xLeft := ROUND(left,1);
          xRight := ROUND(right,1);
          Width := ROUND(right - left,1);
        END;
      END;

      ActiveField.FIND('=');

      IF isValue THEN
        CaptureMgnt.UpdateFieldValue(Document."No.",Page."Page No.",ActiveLineNo,ActiveField,'',TRUE);

      Word := CaptureMgnt.CaptureFromPos(Page,ActiveField,ActiveLineNo,isValue,top,left,bottom,right,Value);

      IF isValue THEN
        CaptureMgnt.UpdateFieldValue(Document."No.",Page."Page No.",ActiveLineNo,ActiveField,Word,FALSE);

      IF isValue AND (NOT (CaptureMgnt.IsValidValue(ActiveField,Document."No.",ActiveLineNo))) THEN BEGIN
        IF ActiveField."Data Type" = ActiveField."Data Type"::Text THEN
          CaptureMgnt.UpdateFieldValue(Document."No.",Page."Page No.",ActiveLineNo,ActiveField,Word,TRUE)
        ELSE BEGIN
          IF CaptureMgnt.TryUpdateFieldRuleFromMaster(ActiveField,Word) THEN
            Word := CaptureMgnt.CaptureFromPos(Page,ActiveField,ActiveLineNo,isValue,top,left,bottom,right,Value)
          ELSE
            CaptureMgnt.UpdateFieldValue(Document."No.",Page."Page No.",ActiveLineNo,ActiveField,Word,TRUE);
        END;
      END;

      IF (ActiveSubForm = ActiveSubForm::Line) AND (NOT isValue) THEN BEGIN
        IF (xLeft > 0) AND (xLeft < left) THEN
          ActiveField."Caption Offset X" := xLeft - left
        ELSE
          ActiveField."Caption Offset X" := 0;

        IF xRight > right THEN
          ActiveField."Typical Field Width" := xRight - left - ActiveField."Caption Offset X"
        ELSE
          ActiveField."Typical Field Width" := right - left - ActiveField."Caption Offset X"
      END;

      IF isValue THEN BEGIN
        IF ActiveField.Type <> ActiveField.Type::Line THEN BEGIN
          IF (right - left) > 0 THEN
            ActiveField."Typical Field Width" := right - left;
          IF (bottom - top) > 0 THEN
            ActiveField."Typical Field Height" := bottom - top;
          ActiveField.MODIFY;
        END;
      END ELSE BEGIN
        IF ActiveField."Auto Update Caption" THEN BEGIN
          CaptureMgnt.UpdateFieldCaption(ActiveField,Word);
          ActiveField."Search for Value" := Word <> '';
          ActiveField.MODIFY(TRUE);
        END;

        IF ActiveSubForm = ActiveSubForm::Line THEN BEGIN
          Template.GET(Document."Template No.");
          IF Template."Recognize Lines" = Template."Recognize Lines"::No THEN BEGIN
            Template."Recognize Lines" := Template."Recognize Lines"::Yes;
            Template.MODIFY;
          END;
        END;
      END;

      IF ActiveLineNo = 0 THEN
        CaptureMgnt.UpdateCaptionOffset(ActiveField,Document."No.");

      IF CurrentPageNo = 1 THEN
        ActiveField."Default Page Source" := ActiveField."Default Page Source"::"First Page"
      ELSE
        ActiveField."Default Page Source" := ActiveField."Default Page Source"::"Last Page";
      ActiveField.MODIFY(TRUE);

      IF (right - left > 0) AND (bottom - top > 0) THEN
        CaptureUI.DrawField(fieldName,isValue,top,left,bottom,right);

      COMMIT;
    END;

    EVENT MessageReceiver@1000000001::MessageReceived@50(type@1000000001 : Integer;text@1000000000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

