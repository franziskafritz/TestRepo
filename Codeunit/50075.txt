OBJECT Codeunit 50075 SC Web Service In
{
  OBJECT-PROPERTIES
  {
    Date=18.04.13;
    Time=13:59:31;
    Modified=Yes;
    Version List=HME0016;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Mail was send with warning!';
      Text002@1000000001 : TextConst 'ENU=The Customer %1 does not exist!';
      Text003@1000000002 : TextConst 'ENU=The Customer %2 has no E-Mail Adress!';
      Text004@1000000003 : TextConst 'ENU=Mail was not send!';

    PROCEDURE EmailStatusUpdate@1000000000(QueueIdV@1000000000 : Integer;OrderNumberV@1000000001 : Code[20];CustomerNumberV@1000000002 : Code[20];StatusV@1000000003 : Code[50];MailTypeV@1000000004 : Code[50];LinkV@1000000005 : Text[1000]) return_value : Text[10];
    VAR
      SCQueueLogL@1000000006 : Record 50103;
      SCQueueLog2L@1000000010 : Record 50103;
      SCQueueLineLogL@1000000014 : Record 50104;
      SCQueueLogArchL@1000000007 : Record 50105;
      SCQueueLogArch2L@1000000013 : Record 50105;
      SCQueueLineLogArchL@1000000015 : Record 50106;
      SalesHeaderL@1000000008 : Record 36;
      SalesHeaderArchL@1000000009 : Record 5107;
      CustomerL@1000000012 : Record 18;
      ContactL@1000000011 : Record 5050;
    BEGIN
      //H0016  08.10.12  ABR  ++++++++++++++++++++++++++++++++++++++++
      IF (OrderNumberV = '') AND (CustomerNumberV = '') THEN BEGIN
        return_value := 'ok';
        EXIT;
      END;
      //H0016  08.10.12  ABR  ----------------------------------------

      //Check If Mail Entry Exist
      SCQueueLogL.RESET;
      SCQueueLogArchL.RESET;
      //A/gob-adb/18.04.13
      SCQueueLogL.SETCURRENTKEY("Mail Queue ID",Direction);
      //E/gob-adb/18.04.13
      SCQueueLogL.SETRANGE("Mail Queue ID",QueueIdV);
      SCQueueLogL.SETRANGE(Direction,SCQueueLogL.Direction::Outgoing);
      IF SCQueueLogL.FINDLAST THEN BEGIN
        CASE StatusV OF
          'SUCCESS':
            BEGIN
              SCQueueLogL.Status := SCQueueLogL.Status::Commited;
              SCQueueLogL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
              SCQueueLogL."Mail Link" := LinkV;
              SCQueueLogL."Mail Status" := StatusV;
              SCQueueLogL.Send := TRUE;
              SCQueueLogL."Error Text" := '';
              SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::" ";
              SCQueueLogL.MODIFY;
              SCQueueLineLogL.SETRANGE("Attached to Entry No.",SCQueueLogL."Entry No.");
              IF NOT SCQueueLineLogL.ISEMPTY THEN
                SCQueueLineLogL.MODIFYALL(Status,SCQueueLogL.Status);
              return_value := 'ok';
              EXIT;
            END;
          'WARNING':
            BEGIN
              SCQueueLogL.Status := SCQueueLogL.Status::Warning;
              SCQueueLogL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
              SCQueueLogL."Mail Link" := LinkV;
              SCQueueLogL."Mail Status" := StatusV;
              SCQueueLogL.Send := TRUE;
              SCQueueLogL."Error Text" := Text001;
              SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::UMS;
              SCQueueLogL.MODIFY;
              SCQueueLineLogL.SETRANGE("Attached to Entry No.",SCQueueLogL."Entry No.");
              IF NOT SCQueueLineLogL.ISEMPTY THEN
                SCQueueLineLogL.MODIFYALL(Status,SCQueueLogL.Status);
              return_value := 'ok';
              EXIT;
            END;
          'ERROR','ACKNOWLEDGE':
            BEGIN
              SCQueueLogL.Status := SCQueueLogL.Status::Error;
              SCQueueLogL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
              SCQueueLogL."Mail Link" := LinkV;
              SCQueueLogL."Mail Status" := StatusV;
              SCQueueLogL.Send := FALSE;
              SCQueueLogL."Error Text" := Text004;
              SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::UMS;
              SCQueueLogL.MODIFY;
              SCQueueLineLogL.SETRANGE("Attached to Entry No.",SCQueueLogL."Entry No.");
              IF NOT SCQueueLineLogL.ISEMPTY THEN
                SCQueueLineLogL.MODIFYALL(Status,SCQueueLogL.Status);
              return_value := 'ok';
              EXIT;
            END;
        END;
      END;

      //A/gob-adb/18.04.13
      SCQueueLogArchL.SETCURRENTKEY("Mail Queue ID",Direction);
      //E/gob-adb/18.04.13
      SCQueueLogArchL.SETRANGE("Mail Queue ID",QueueIdV);
      SCQueueLogArchL.SETRANGE(Direction,SCQueueLogArchL.Direction::Outgoing);
      IF SCQueueLogArchL.FINDLAST THEN BEGIN
        CASE StatusV OF
          'SUCCESS':
            BEGIN
              SCQueueLogArchL.Status := SCQueueLogArchL.Status::Commited;
              SCQueueLogArchL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
              SCQueueLogArchL."Mail Link" := LinkV;
              SCQueueLogArchL."Mail Status" := StatusV;
              SCQueueLogArchL.Send := TRUE;
              SCQueueLogArchL."Error Text" := '';
              SCQueueLogArchL."Error Source" := SCQueueLogArchL."Error Source"::" ";
              SCQueueLogArchL.MODIFY;
              SCQueueLineLogArchL.SETRANGE("Attached to Entry No.",SCQueueLogArchL."Entry No.");
              IF NOT SCQueueLineLogArchL.ISEMPTY THEN
                SCQueueLineLogArchL.MODIFYALL(Status,SCQueueLogArchL.Status);
              return_value := 'ok';
              EXIT;
            END;
          'WARNING':
            BEGIN
              SCQueueLogArchL.Status := SCQueueLogArchL.Status::Warning;
              SCQueueLogArchL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
              SCQueueLogArchL."Mail Link" := LinkV;
              SCQueueLogArchL."Mail Status" := StatusV;
              SCQueueLogArchL.Send := TRUE;
              SCQueueLogArchL."Error Text" := Text001;
              SCQueueLogArchL."Error Source" := SCQueueLogArchL."Error Source"::UMS;
              SCQueueLogArchL.MODIFY;
              SCQueueLineLogArchL.SETRANGE("Attached to Entry No.",SCQueueLogArchL."Entry No.");
              IF NOT SCQueueLineLogArchL.ISEMPTY THEN
                SCQueueLineLogArchL.MODIFYALL(Status,SCQueueLogArchL.Status);
              return_value := 'ok';
              EXIT;
            END;
          'ERROR','ACKNOWLEDGE':
            BEGIN
              SCQueueLogArchL.Status := SCQueueLogArchL.Status::Error;
              SCQueueLogArchL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
              SCQueueLogArchL."Mail Link" := LinkV;
              SCQueueLogArchL."Mail Status" := StatusV;
              SCQueueLogArchL.Send := FALSE;
              SCQueueLogArchL."Error Text" := Text004;
              SCQueueLogArchL."Error Source" := SCQueueLogArchL."Error Source"::UMS;
              SCQueueLogArchL.MODIFY;
              SCQueueLineLogArchL.SETRANGE("Attached to Entry No.",SCQueueLogArchL."Entry No.");
              IF NOT SCQueueLineLogArchL.ISEMPTY THEN
                SCQueueLineLogArchL.MODIFYALL(Status,SCQueueLogArchL.Status);
              return_value := 'ok';
              EXIT;
            END;
        END;
      END;

      SCQueueLogL.RESET;

      //Create Customer Mail
      IF OrderNumberV = '' THEN BEGIN
        SCQueueLogL.INIT;
        //A/gob-adb/18.04.13
        SCQueueLog2L.LOCKTABLE;
        //E/gob-adb/18.04.13
        IF SCQueueLog2L.FINDLAST THEN
          SCQueueLogL."Entry No." := SCQueueLog2L."Entry No." +1
        ELSE
          SCQueueLogL."Entry No." := 1;

        SCQueueLogL."Mail Queue ID" := QueueIdV;
        SCQueueLogL.Direction := SCQueueLogL.Direction::Incoming;
        SCQueueLogL.Action := SCQueueLogL.Action::Automatic;
        SCQueueLogL."Created at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogL."Processed at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogL."Source Type" := DATABASE::Customer;
        SCQueueLogL."Source ID" := CustomerNumberV;
        SCQueueLogL."Recipient Type" := SCQueueLogL."Recipient Type"::Customer;
        SCQueueLogL."Recipient No." := CustomerNumberV;
        IF NOT CustomerL.GET(CustomerNumberV) THEN BEGIN
          SCQueueLogL.Status := SCQueueLogL.Status::Warning;
          SCQueueLogL."Error Text" := STRSUBSTNO(Text002,CustomerNumberV);
          SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::NAV;
        END ELSE BEGIN
          SCQueueLogL."Recipient E-Mail Adress" := CustomerL."E-Mail";
          IF (SCQueueLogL."Recipient E-Mail Adress" = '') AND
             (ContactL.GET(CustomerL."Primary Contact No.")) THEN
            SCQueueLogL."Recipient E-Mail Adress" := ContactL."E-Mail";

          IF SCQueueLogL."Recipient E-Mail Adress" = '' THEN BEGIN
            SCQueueLogL.Status := SCQueueLogL.Status::Warning;
            SCQueueLogL."Error Text" := STRSUBSTNO(Text003,CustomerNumberV);
            SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::NAV;
          END;
        END;

        SCQueueLogL."Shop Connector Code" := COPYSTR(MailTypeV,1,MAXSTRLEN(SCQueueLogL."Shop Connector Code"));
        SCQueueLogL."Mail Link" := LinkV;

        CASE StatusV OF
          'SUCCESS':
            BEGIN
              SCQueueLogL.Status := SCQueueLogL.Status::Commited;
              SCQueueLogL.Send := TRUE;
              SCQueueLogL."Error Text" := '';
              SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::" ";
            END;
          'WARNING':
            BEGIN
              SCQueueLogL.Status := SCQueueLogArchL.Status::Warning;
              SCQueueLogL.Send := TRUE;
              SCQueueLogL."Error Text" := Text001;
              SCQueueLogL."Error Source" := SCQueueLogArchL."Error Source"::UMS;
            END;
          'ERROR','ACKNOWLEDGE':
            BEGIN
              SCQueueLogL.Status := SCQueueLogL.Status::Error;
              SCQueueLogL.Send := FALSE;
              SCQueueLogL."Error Text" := Text004;
              SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::UMS;
            END;
        END;

        SCQueueLogL."Mail Status" := StatusV;
        SCQueueLogL.INSERT;

        return_value := 'ok';
        EXIT;
      END;

      //Create Mail for Sales Header Archvie
      SalesHeaderArchL.SETRANGE("Document Type",SalesHeaderArchL."Document Type"::Order);
      SalesHeaderArchL.SETRANGE("No.", OrderNumberV);
      IF SalesHeaderArchL.FINDLAST THEN BEGIN
        SCQueueLogArchL.INIT;
        IF SCQueueLogArch2L.FINDLAST THEN
          SCQueueLogArchL."Entry No." := SCQueueLogArch2L."Entry No." +1
        ELSE
          SCQueueLogArchL."Entry No." := 1;

        SCQueueLogArchL."Mail Queue ID" := QueueIdV;
        SCQueueLogArchL."Website No." := SalesHeaderArchL."Website No.";
        SCQueueLogArchL.Direction := SCQueueLogArchL.Direction::Incoming;
        SCQueueLogArchL.Action := SCQueueLogArchL.Action::Automatic;
        SCQueueLogArchL."Created at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogArchL."Processed at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogArchL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogArchL."Source Type" := DATABASE::"Sales Header Archive";
        SCQueueLogArchL."Source Subtype" := SalesHeaderArchL."Document Type";
        SCQueueLogArchL."Source ID" := SalesHeaderArchL."No.";
        SCQueueLogArchL."Source Doc. No. Occurrence" := SalesHeaderArchL."Doc. No. Occurrence";
        SCQueueLogArchL."Source Version No." := SalesHeaderArchL."Version No.";
        SCQueueLogArchL."Recipient Type" := SCQueueLogArchL."Recipient Type"::Customer;
        SCQueueLogArchL."Recipient No." := SalesHeaderArchL."Sell-to Customer No.";
        IF NOT CustomerL.GET(SalesHeaderArchL."Sell-to Customer No.") THEN BEGIN
          SCQueueLogArchL.Status := SCQueueLogArchL.Status::Error;
          SCQueueLogArchL."Error Text" := STRSUBSTNO(Text002,SalesHeaderArchL."Sell-to Customer No.");
          SCQueueLogArchL."Error Source" := SCQueueLogArchL."Error Source"::NAV;
        END ELSE BEGIN
          SCQueueLogArchL."Recipient E-Mail Adress" := CustomerL."E-Mail";
          IF (SCQueueLogArchL."Recipient E-Mail Adress" = '') AND
             (ContactL.GET(CustomerL."Primary Contact No.")) THEN
            SCQueueLogArchL."Recipient E-Mail Adress" := ContactL."E-Mail";

          IF SCQueueLogArchL."Recipient E-Mail Adress" = '' THEN BEGIN
            SCQueueLogArchL.Status := SCQueueLogArchL.Status::Error;
            SCQueueLogArchL."Error Text" := STRSUBSTNO(Text003,SalesHeaderArchL."Sell-to Customer No.");
            SCQueueLogArchL."Error Source" := SCQueueLogArchL."Error Source"::NAV;
          END;
        END;

        SCQueueLogArchL."Shop Connector Code" := COPYSTR(MailTypeV,1,MAXSTRLEN(SCQueueLogArchL."Shop Connector Code"));
        SCQueueLogArchL."Mail Link" := LinkV;

        CASE StatusV OF
          'SUCCESS':
            BEGIN
              SCQueueLogArchL.Status := SCQueueLogArchL.Status::Commited;
              SCQueueLogArchL.Send := TRUE;
              SCQueueLogArchL."Error Text" := '';
              SCQueueLogArchL."Error Source" := SCQueueLogL."Error Source"::" ";
            END;
          'WARNING':
            BEGIN
              SCQueueLogArchL.Status := SCQueueLogArchL.Status::Warning;
              SCQueueLogArchL.Send := TRUE;
              SCQueueLogArchL."Error Text" := Text001;
              SCQueueLogArchL."Error Source" := SCQueueLogArchL."Error Source"::UMS;
            END;
          'ERROR','ACKNOWLEDGE':
            BEGIN
              SCQueueLogArchL.Status := SCQueueLogArchL.Status::Error;
              SCQueueLogArchL.Send := FALSE;
              SCQueueLogArchL."Error Text" := Text004;
              SCQueueLogArchL."Error Source" := SCQueueLogArchL."Error Source"::UMS;
            END;
        END;

        SCQueueLogArchL."Mail Status" := StatusV;
        SCQueueLogArchL.INSERT;

        return_value := 'ok';
        EXIT;
      END;

      //Create Mail for Sales Header
      IF SalesHeaderL.GET(SalesHeaderL."Document Type"::Order,OrderNumberV) THEN BEGIN
        SCQueueLogL.INIT;
        //A/gob-adb/18.04.13
        SCQueueLog2L.LOCKTABLE;
        //E/gob-adb/18.04.13
        IF SCQueueLog2L.FINDLAST THEN
          SCQueueLogL."Entry No." := SCQueueLog2L."Entry No." +1
        ELSE
          SCQueueLogL."Entry No." := 1;

        SCQueueLogL."Mail Queue ID" := QueueIdV;
        SCQueueLogL."Website No." := SalesHeaderL."Website No.";
        SCQueueLogL.Direction := SCQueueLogL.Direction::Incoming;
        SCQueueLogL.Action := SCQueueLogL.Action::Automatic;
        SCQueueLogL."Created at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogL."Processed at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogL."Source Type" := DATABASE::"Sales Header";
        SCQueueLogL."Source Subtype" := SalesHeaderL."Document Type";
        SCQueueLogL."Source ID" := SalesHeaderL."No.";
        SCQueueLogL."Recipient Type" := SCQueueLogL."Recipient Type"::Customer;
        SCQueueLogL."Recipient No." := SalesHeaderL."Sell-to Customer No.";
        IF NOT CustomerL.GET(SalesHeaderL."Sell-to Customer No.") THEN BEGIN
          SCQueueLogL.Status := SCQueueLogL.Status::Error;
          SCQueueLogL."Error Text" := STRSUBSTNO(Text002,SalesHeaderL."Sell-to Customer No.");
          SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::NAV;
        END ELSE BEGIN
          SCQueueLogL."Recipient E-Mail Adress" := CustomerL."E-Mail";
          IF (SCQueueLogL."Recipient E-Mail Adress" = '') AND
             (ContactL.GET(CustomerL."Primary Contact No.")) THEN
            SCQueueLogL."Recipient E-Mail Adress" := ContactL."E-Mail";

          IF SCQueueLogL."Recipient E-Mail Adress" = '' THEN BEGIN
            SCQueueLogL.Status := SCQueueLogL.Status::Error;
            SCQueueLogL."Error Text" := STRSUBSTNO(Text003,SalesHeaderL."Sell-to Customer No.");
            SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::NAV;
          END;
        END;

        SCQueueLogL."Shop Connector Code" := COPYSTR(MailTypeV,1,MAXSTRLEN(SCQueueLogL."Shop Connector Code"));
        SCQueueLogL."Mail Link" := LinkV;

        CASE StatusV OF
          'SUCCESS':
            BEGIN
              SCQueueLogL.Status := SCQueueLogL.Status::Commited;
              SCQueueLogL.Send := TRUE;
              SCQueueLogL."Error Text" := '';
              SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::" ";
            END;
          'WARNING':
            BEGIN
              SCQueueLogL.Status := SCQueueLogArchL.Status::Warning;
              SCQueueLogL.Send := TRUE;
              SCQueueLogL."Error Text" := Text001;
              SCQueueLogL."Error Source" := SCQueueLogArchL."Error Source"::UMS;
            END;
          'ERROR','ACKNOWLEDGE':
            BEGIN
              SCQueueLogL.Status := SCQueueLogL.Status::Error;
              SCQueueLogL.Send := FALSE;
              SCQueueLogL."Error Text" := Text004;
              SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::UMS;
            END;
        END;

        SCQueueLogL."Mail Status" := StatusV;
        SCQueueLogL.INSERT;

        return_value := 'ok';
        EXIT;
      END ELSE BEGIN
        SalesHeaderL.INIT;
        SCQueueLogL.INIT;
        //A/gob-adb/18.04.13
        SCQueueLog2L.LOCKTABLE;
        //E/gob-adb/18.04.13
        IF SCQueueLog2L.FINDLAST THEN
          SCQueueLogL."Entry No." := SCQueueLog2L."Entry No." +1
        ELSE
          SCQueueLogL."Entry No." := 1;

        SCQueueLogL."Mail Queue ID" := QueueIdV;
        SCQueueLogL."Website No." := SalesHeaderL."Website No.";
        SCQueueLogL.Direction := SCQueueLogL.Direction::Incoming;
        SCQueueLogL.Action := SCQueueLogL.Action::Automatic;
        SCQueueLogL."Created at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogL."Processed at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogL."Commitet at" := CREATEDATETIME(WORKDATE,TIME);
        SCQueueLogL."Source Type" := DATABASE::"Sales Header";
        SCQueueLogL."Source Subtype" := SalesHeaderL."Document Type"::Order;
        SCQueueLogL."Source ID" := OrderNumberV;
        SCQueueLogL."Recipient Type" := SCQueueLogL."Recipient Type"::Customer;
        SCQueueLogL."Recipient No." := CustomerNumberV;
        IF NOT CustomerL.GET(CustomerNumberV) THEN BEGIN
          SCQueueLogL.Status := SCQueueLogL.Status::Warning;
          SCQueueLogL."Error Text" := STRSUBSTNO(Text002,CustomerNumberV);
          SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::NAV;
        END ELSE BEGIN
          SCQueueLogL."Recipient E-Mail Adress" := CustomerL."E-Mail";
          IF (SCQueueLogL."Recipient E-Mail Adress" = '') AND
             (ContactL.GET(CustomerL."Primary Contact No.")) THEN
            SCQueueLogL."Recipient E-Mail Adress" := ContactL."E-Mail";

          IF SCQueueLogL."Recipient E-Mail Adress" = '' THEN BEGIN
            SCQueueLogL.Status := SCQueueLogL.Status::Warning;
            SCQueueLogL."Error Text" := STRSUBSTNO(Text003,CustomerNumberV);
            SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::NAV;
          END;
        END;

        SCQueueLogL."Shop Connector Code" := COPYSTR(MailTypeV,1,MAXSTRLEN(SCQueueLogL."Shop Connector Code"));
        SCQueueLogL."Mail Link" := LinkV;

        CASE StatusV OF
          'SUCCESS':
            BEGIN
              SCQueueLogL.Status := SCQueueLogL.Status::Commited;
              SCQueueLogL.Send := TRUE;
              SCQueueLogL."Error Text" := '';
              SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::" ";
            END;
          'WARNING':
            BEGIN
              SCQueueLogL.Status := SCQueueLogArchL.Status::Warning;
              SCQueueLogL.Send := TRUE;
              SCQueueLogL."Error Text" := Text001;
              SCQueueLogL."Error Source" := SCQueueLogArchL."Error Source"::UMS;
            END;
          'ERROR','ACKNOWLEDGE':
            BEGIN
              SCQueueLogL.Status := SCQueueLogL.Status::Error;
              SCQueueLogL.Send := FALSE;
              SCQueueLogL."Error Text" := Text004;
              SCQueueLogL."Error Source" := SCQueueLogL."Error Source"::UMS;
            END;
        END;

        SCQueueLogL."Mail Status" := StatusV;
        SCQueueLogL.INSERT;

        return_value := 'ok';
        EXIT;

      END;
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________

      *** Module: Shop Connector - Create Shipping Mails ***
      H0007       27.09.12 ABR       Created
      H0016       08.10.12 ABR       Exit if Empty

      *** Module: Miscellaneous
      P0890       18.04.13 gob-adb   LOCKTABLE inserted


      ## Information ############################
      Possible Mail Types:

      orderConfirmation
      newsletterDeregistration
      newsletterRegistration
      newsletterConfirmation
      registration
      passwordReset
      contact
      shippingInformation
      prePaymentFirstReminder
      prePaymentSecondReminder
      redirectPaymentFirstReminder
      redirectPaymentSecondReminder
      paymentConfirmation
    }
    END.
  }
}

