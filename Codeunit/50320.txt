OBJECT Codeunit 50320 Tracking Importer Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=27.03.15;
    Time=18:43:32;
    Modified=Yes;
    Version List=HME2120;
  }
  PROPERTIES
  {
    OnRun=VAR
            ValidateFieldRefL@1000000000 : FieldRef;
          BEGIN
            CASE ActionToTake OF
              'Validate':
                BEGIN
                  ValidateFieldRefL := ValidateRecRef.FIELD(ValidateFieldNo);
                  ValidateFieldRefL.VALIDATE(ValidateValue);
                END;
              'Process':
                BEGIN
                  ProcessRecords;
                END;
            END;
          END;

  }
  CODE
  {
    VAR
      ProcessingTrackingImporterData@1000000027 : Record 50321;
      ValidateRecRef@1000000021 : RecordRef;
      ValidateValue@1000000025 : Variant;
      CsvSeparator@1000000000 : Text[1];
      TextHME001@1000000001 : TextConst 'ENU=Select csv file to import.';
      TextHME002@1000000002 : TextConst 'ENU=CSV files|*.csv';
      TextHME003@1000000003 : TextConst 'ENU="File %1 could not be opened. "';
      CsvStringQualifier@1000000006 : Text[1];
      StringLineToProcess@1000000005 : Text[1000];
      TextHME004@1000000008 : TextConst 'ENU=%1 does not exist.';
      ActionToTake@1000000020 : Text[30];
      FileName@1000000007 : Text[80];
      TextHME005@1000000011 : TextConst 'ENU=Error while importing line %1.';
      TextHME006@1000000010 : TextConst 'ENU=Finished.';
      TextHME007@1000000029 : TextConst 'ENU=Unable to match line with sales/purchase line.';
      TextHME008@1000000031 : TextConst 'ENU=Date';
      TextHME009@1000000032 : TextConst 'ENU=DateTime';
      TextHME010@1000000033 : TextConst 'ENU=Wrong date format, day, month, year, hour, minute and second  has 0 value!!!';
      TextHME015@1000000023 : TextConst 'ENU=Please check %1 column in file.';
      TextHME016@1000000026 : TextConst 'ENU=There is not setup for %1 %2.';
      TextHME017@1000000004 : TextConst 'ENU=Processing tracking information''s ... please wait...';
      TextHME018@1000000009 : TextConst 'ENU=Validation of column %1 failed.';
      TextHME019@1000000022 : TextConst 'ENU=There is not %1 defined!';
      TextHME020@1000000030 : TextConst 'ENU=%1 is not the same format as it is defined in %2!';
      TextHME050@1000000012 : TextConst 'ENU=YYYY';
      TextHME051@1000000013 : TextConst 'ENU=MM';
      TextHME052@1000000014 : TextConst 'ENU=DD';
      TextHME053@1000000019 : TextConst 'ENU=hh';
      TextHME054@1000000015 : TextConst 'ENU=mm';
      TextHME055@1000000016 : TextConst 'ENU=ss';
      TextHME056@1000000017 : TextConst 'ENU=zz';
      TextHME057@1000000018 : TextConst 'ENU=YY';
      ProcessingUserId@1000000028 : Text[30];
      ValidateFieldNo@1000000024 : Integer;
      CSVImportSetupCode@1000000034 : Code[10];
      IsAviseDateImport@1000000035 : Boolean;

    PROCEDURE InitiateProcessing@1000000012();
    VAR
      TrackingImporterDataL@1000000001 : Record 50321;
      TrackingImporterData2L@1000000003 : Record 50321;
      CSVImportSetupL@1000000004 : Record 50322;
      TrackingImporterMgtL@1000000000 : Codeunit 50320;
      WindowL@1000000007 : Dialog;
      TimePointL@1000000006 : Time;
      FactorL@1000000005 : Decimal;
      CounterL@1000000008 : Integer;
    BEGIN
      TrackingImporterMgtL.SetParameters('','','','','Process',UPPERCASE(USERID));

      TrackingImporterDataL.RESET;
      TrackingImporterDataL.SETRANGE(Processed, FALSE);
      TrackingImporterDataL.SETRANGE("Has Error", FALSE);
      TrackingImporterDataL.SETRANGE("User ID",UPPERCASE(USERID));
      IF TrackingImporterDataL.COUNT>0 THEN
        FactorL := 9999 / TrackingImporterDataL.COUNT;
      IF TrackingImporterDataL.FINDSET THEN BEGIN
        WindowL.OPEN('#1#######################  ' + '@2@@@@@@@@@@');
        TimePointL := TIME;
        REPEAT
          WindowL.UPDATE(1,TextHME017);
          CounterL += 1;
          IF (TIME-TimePointL) > 2000 THEN BEGIN
            WindowL.UPDATE(2,(CounterL * FactorL) DIV 1);
            TimePointL := TIME;
          END;

          TrackingImporterMgtL.SetProcessingRecord(TrackingImporterDataL);

          IF NOT TrackingImporterMgtL.RUN THEN BEGIN
            TrackingImporterData2L.GET(TrackingImporterDataL."Entry No.");
            IF TrackingImporterData2L."Error Message" = '' THEN
              TrackingImporterData2L."Error Message" := COPYSTR(GETLASTERRORTEXT,1,250)
            ELSE
              IF TrackingImporterData2L."Error Message 2" = '' THEN
                TrackingImporterData2L."Error Message 2" := COPYSTR(GETLASTERRORTEXT,1,250)
              ELSE
                IF TrackingImporterData2L."Error Message 3" = '' THEN
                  TrackingImporterData2L."Error Message 3" := COPYSTR(GETLASTERRORTEXT,1,250);
            TrackingImporterData2L."No. of Processing Attempts" := TrackingImporterData2L."No. of Processing Attempts" + 1;

            TrackingImporterData2L."Has Error" := TRUE;
            TrackingImporterData2L.MODIFY;
            COMMIT;
            CLEARLASTERROR;
          END ELSE BEGIN
            TrackingImporterData2L.GET(TrackingImporterDataL."Entry No.");
            TrackingImporterData2L."No. of Processing Attempts" := TrackingImporterData2L."No. of Processing Attempts" + 1;
            TrackingImporterData2L.Processed := TrackingImporterMgtL.GetProcessingResult;
            TrackingImporterData2L.MODIFY;
            COMMIT;
          END;
        UNTIL TrackingImporterDataL.NEXT = 0;

        CSVImportSetupL.GET(TrackingImporterData2L."CSV Import Setup Code");
        IF CSVImportSetupL."Delete Records on Processing" THEN BEGIN
          TrackingImporterDataL.RESET;
          TrackingImporterDataL.SETRANGE(Processed,TRUE);
          TrackingImporterDataL.SETRANGE("CSV Import Setup Code",TrackingImporterData2L."CSV Import Setup Code");
          TrackingImporterDataL.DELETEALL;
        END;
        WindowL.CLOSE;
      END;

      IF GUIALLOWED THEN
        MESSAGE(TextHME006);
    END;

    PROCEDURE InitiateProcessCSVFile@1000000000();
    VAR
      CSVImportSetupL@1000000006 : Record 50322;
      CSVImportFieldSetupL@1000000003 : Record 50323;
      OMCommonDialogL@1000000000 : Codeunit 11102059;
      CSVImportSetupListL@1000000013 : Form 50412;
      RecordRefL@1000000012 : RecordRef;
      FieldRefL@1000000011 : FieldRef;
      LocalFileL@1000000002 : File;
      ErrorMessagesL@1000000014 : ARRAY [10] OF Text[1024];
      FilenameL@1000000001 : Text[1000];
      CleanFileNameL@1000000010 : Text[80];
      StringL@1000000005 : Text[1000];
      SavedErrorNoL@1000000009 : Integer;
      LineNoL@1000000004 : Integer;
    BEGIN
      OMCommonDialogL.SetDialogProperties(TextHME001, TextHME002, '', 1,0);

      IF NOT OMCommonDialogL.RUN THEN
        EXIT;

      FilenameL := OMCommonDialogL.GetDialogFileName;
      IF FilenameL = '' THEN
        EXIT;

      //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
      IF CSVImportSetupCode <> '' THEN
        CSVImportSetupL.GET(CSVImportSetupCode)
      ELSE BEGIN
        CSVImportSetupL.RESET;
        CSVImportSetupL.SETRANGE("Import Type",CSVImportSetupL."Import Type"::"Tracking Import");
        IF FORM.RUNMODAL(FORM::"CSV Import Setup List",CSVImportSetupL) <> ACTION::LookupOK THEN
          ERROR('');
      END;
      IsAviseDateImport := CSVImportSetupL."Import Type" = CSVImportSetupL."Import Type"::"AVISE Date Import";
      //H2120   10.03.15 DMO --------------------------------

      LocalFileL.TEXTMODE(TRUE);
      LocalFileL.WRITEMODE(FALSE);
      CleanFileNameL := GetFileNameWithoutPath(FilenameL);
      FileName := CleanFileNameL;

      IF LocalFileL.OPEN(FilenameL) THEN BEGIN
        REPEAT
          LocalFileL.READ(StringL);
          LineNoL := LineNoL + 1;

          IF NOT CSVImportSetupL."Has Caption Line" OR (CSVImportSetupL."Has Caption Line" AND (LineNoL > 1))
          THEN BEGIN

            RecordRefL.CLOSE;
            RecordRefL.OPEN(CSVImportSetupL."Table No.");
            RecordRefL.INIT;

            //Check Setup
            CSVImportFieldSetupL.RESET;
            CSVImportFieldSetupL.SETRANGE(Code, CSVImportSetupL.Code);
            IF CSVImportFieldSetupL.ISEMPTY THEN
              ERROR(TextHME016, CSVImportSetupL.FIELDCAPTION(Code),CSVImportSetupL.Code);


            //Set Imported flag
            CSVImportFieldSetupL.RESET;
            CSVImportFieldSetupL.SETRANGE(Code, CSVImportSetupL.Code);
            CSVImportFieldSetupL.SETRANGE("Imported Flag Field", TRUE);
            IF CSVImportFieldSetupL.FINDFIRST THEN BEGIN
              FieldRefL := RecordRefL.FIELD(CSVImportFieldSetupL."Field No.");
              FieldRefL.VALUE(TRUE);
            END;

            //Set UserId
            CSVImportFieldSetupL.RESET;
            CSVImportFieldSetupL.SETRANGE(Code, CSVImportSetupL.Code);
            CSVImportFieldSetupL.SETRANGE("User ID Field", TRUE);
            IF CSVImportFieldSetupL.FINDFIRST THEN BEGIN
              FieldRefL := RecordRefL.FIELD(CSVImportFieldSetupL."Field No.");
              FieldRefL.VALUE(UPPERCASE(USERID));
            END;

            //Set Filename
            CSVImportFieldSetupL.RESET;
            CSVImportFieldSetupL.SETRANGE(Code, CSVImportSetupL.Code);
            CSVImportFieldSetupL.SETRANGE(CSVImportFieldSetupL."File Name Field", TRUE);
            IF CSVImportFieldSetupL.FINDFIRST THEN BEGIN
              FieldRefL := RecordRefL.FIELD(CSVImportFieldSetupL."Field No.");
              FieldRefL.VALUE(CleanFileNameL);
            END;

            //Set Tracking importer mapping code
            CSVImportFieldSetupL.RESET;
            CSVImportFieldSetupL.SETRANGE(Code, CSVImportSetupL.Code);
            CSVImportFieldSetupL.SETRANGE(CSVImportFieldSetupL."CSV Import Setup Code Field", TRUE);
            IF CSVImportFieldSetupL.FINDFIRST THEN BEGIN
              FieldRefL := RecordRefL.FIELD(CSVImportFieldSetupL."Field No.");
              FieldRefL.VALUE(CSVImportSetupL.Code);
            END;
            CLEARLASTERROR;

            SetParameters(
              CSVImportSetupL."Field Separator",
              CSVImportSetupL."String Qualifier",StringL,CleanFileNameL,'Import',UPPERCASE(USERID));

            IF NOT ProcessImportLine(RecordRefL,ErrorMessagesL,CSVImportSetupL.Code) THEN BEGIN
              //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
              IF IsAviseDateImport THEN BEGIN
                FieldRefL := RecordRefL.FIELD(11); //Status
                FieldRefL.VALUE(2);
              END ELSE BEGIN
              //H2120   10.03.15 DMO --------------------------------
                //Set Error flag
                CSVImportFieldSetupL.RESET;
                CSVImportFieldSetupL.SETRANGE(Code, CSVImportSetupL.Code);
                CSVImportFieldSetupL.SETRANGE(CSVImportFieldSetupL."Error Flag Field", TRUE);
                IF CSVImportFieldSetupL.FINDFIRST THEN BEGIN
                  FieldRefL := RecordRefL.FIELD(CSVImportFieldSetupL."Field No.");
                  FieldRefL.VALUE(TRUE);
                END;
              //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
              END;
              //H2120   10.03.15 DMO --------------------------------
              //Set ERROR message
              FOR SavedErrorNoL := 1 TO 10 DO BEGIN
                IF ErrorMessagesL[SavedErrorNoL] <> '' THEN BEGIN
                  CSVImportFieldSetupL.RESET;
                  CSVImportFieldSetupL.SETRANGE(Code, CSVImportSetupL.Code);
                  CSVImportFieldSetupL.SETRANGE(CSVImportFieldSetupL."Error Field", TRUE);
                  IF CSVImportFieldSetupL.FINDFIRST THEN BEGIN
                    REPEAT
                      FieldRefL := RecordRefL.FIELD(CSVImportFieldSetupL."Field No.");
                      IF FORMAT(FieldRefL.VALUE) = '' THEN BEGIN
                        FieldRefL.VALUE(COPYSTR(ErrorMessagesL[SavedErrorNoL],1,FieldRefL.LENGTH));
                        CSVImportFieldSetupL.FINDLAST;
                      END;
                    UNTIL CSVImportFieldSetupL.NEXT = 0;
                  END;
                END;
              END;
            END;
            RecordRefL.INSERT(TRUE);
            COMMIT;
            CLEAR(ErrorMessagesL);
          END;
        UNTIL LocalFileL.POS = LocalFileL.LEN;
      END ELSE
        IF GUIALLOWED THEN
          ERROR(TextHME003,CleanFileNameL);
    END;

    PROCEDURE ProcessImportLine@1000000009(VAR RecordRefR@1000000018 : RecordRef;VAR ErrorMessagesR@1000000020 : ARRAY [10] OF Text[1024];CSVImportSetupCodeV@1000000005 : Code[10]) SuccessO : Boolean;
    VAR
      CSVImportSetupL@1000000016 : Record 50322;
      CSVImportFieldSetupL@1000000015 : Record 50323;
      CSVImportFieldSetup2L@1000000019 : Record 50323;
      TrackingImporterDataL@1000000017 : Record 50321;
      TrackingImporterMgtL@1000000013 : Codeunit 50320;
      FieldRefL@1000000012 : FieldRef;
      FieldRef2L@1000000021 : FieldRef;
      DateTimeValueL@1000000010 : DateTime;
      DateValueL@1000000011 : Date;
      DateValue2L@1000000022 : Date;
      TimeValueL@1000000009 : Time;
      TempTextValueL@1000000008 : Text[30];
      TextValueL@1000000007 : Text[250];
      FieldRefTypeL@1000000006 : Text[30];
      ErrorTextL@1000000014 : Text[250];
      CodeValueL@1000000004 : Code[20];
      DecimalValueL@1000000003 : Decimal;
      BigIntValueL@1000000002 : BigInteger;
      IntegerValueL@1000000001 : Integer;
      BooleanValueL@1000000000 : Boolean;
    BEGIN
      SuccessO := TRUE;

      CSVImportFieldSetupL.RESET;
      CSVImportFieldSetupL.SETRANGE(Code,CSVImportSetupCodeV);
      CSVImportFieldSetupL.SETRANGE("Skip Field",FALSE);
      IF CSVImportFieldSetupL.FIND('-') THEN BEGIN
        REPEAT
          CSVImportFieldSetup2L.RESET;
          CSVImportFieldSetup2L.SETRANGE(Code, CSVImportFieldSetupL.Code);
          CSVImportFieldSetup2L.SETRANGE("Required Flag Field",TRUE);
          IF NOT CSVImportFieldSetup2L.ISEMPTY AND CSVImportFieldSetup2L.Required THEN BEGIN
            CSVImportFieldSetup2L.FINDFIRST;
            FieldRefL := RecordRefR.FIELD(CSVImportFieldSetup2L."Field No.");
            FieldRefL.VALUE(CSVImportFieldSetup2L.Required);
          END;

          FieldRefL := RecordRefR.FIELD(CSVImportFieldSetupL."Field No.");
          FieldRefTypeL := FORMAT(FieldRefL.TYPE);
          CSVImportFieldSetupL.CALCFIELDS("Field Name");
          TrackingImporterMgtL.SetParameters('','','','','Validate',UPPERCASE(USERID));
          CASE FieldRefTypeL OF
            'Date':
              BEGIN
                IF CSVImportFieldSetupL."Date Format" <> '' THEN BEGIN
                  IF NOT
                       EVALUATE(
                         DateValueL,
                         FORMAT(
                           FormatDate2Date(
                             CSVImportFieldSetupL."Date Format",
                             GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier), ErrorTextL)))
                  THEN
                    ERROR(TextHME015, CSVImportFieldSetupL."Field Name");
                END ELSE
                  IF NOT EVALUATE(DateValueL, GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier)) THEN
                    ERROR(TextHME015, CSVImportFieldSetupL."Field Name");

                IF ErrorTextL <> '' THEN BEGIN
                  //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                  IF IsAviseDateImport THEN
                    SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                  ELSE
                  //H2120   10.03.15 DMO --------------------------------
                    AddErrorToArray(ErrorMessagesR,ErrorTextL);
                  ErrorTextL := '';
                  SuccessO := FALSE;
                END ELSE BEGIN
                  IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                    TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,DateValueL);
                    IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                      SuccessO := FALSE;
                      //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                      IF IsAviseDateImport THEN
                        SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                      ELSE
                      //H2120   10.03.15 DMO --------------------------------
                        AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                    END ELSE
                      FieldRefL.VALIDATE(DateValueL);
                  END ELSE
                    FieldRefL.VALUE(DateValueL);
                END;
              END;
            'DateTime':
              BEGIN
                IF CSVImportFieldSetupL."Date Format" <> '' THEN BEGIN
                  IF NOT
                       EVALUATE(
                         DateTimeValueL,
                         FORMAT(
                           FormatDate2DateTime(
                             CSVImportFieldSetupL."Date Format",
                             GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier),ErrorTextL)))
                  THEN
                    ERROR(TextHME015, CSVImportFieldSetupL."Field Name");
                END ELSE
                  IF NOT EVALUATE(DateTimeValueL, GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier)) THEN
                    ERROR(TextHME015, CSVImportFieldSetupL."Field Name");

                IF ErrorTextL <> '' THEN BEGIN
                  //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                  IF IsAviseDateImport THEN
                    SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                  ELSE
                  //H2120   10.03.15 DMO --------------------------------
                    AddErrorToArray(ErrorMessagesR,ErrorTextL);
                  ErrorTextL := '';
                  SuccessO := FALSE;
                END ELSE
                  IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                    TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,DateTimeValueL);
                    IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                      SuccessO := FALSE;
                      //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                      IF IsAviseDateImport THEN
                        SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                      ELSE
                      //H2120   10.03.15 DMO --------------------------------
                        AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                    END ELSE
                      FieldRefL.VALIDATE(DateTimeValueL);
                  END ELSE
                    FieldRefL.VALUE(DateTimeValueL);
              END;
            'Time':
              BEGIN
                EVALUATE(TimeValueL, GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier));
                IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                  TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,TimeValueL);
                  IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                    SuccessO := FALSE;
                    //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                    IF IsAviseDateImport THEN
                      SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                    ELSE
                    //H2120   10.03.15 DMO --------------------------------
                      AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                  END ELSE
                    FieldRefL.VALIDATE(TimeValueL);
                END ELSE
                  FieldRefL.VALUE(TimeValueL);
              END;
            'Text':
              BEGIN
                //H1987,H1527 21.01.15 DMA +++++++++++++++++++++++++++++++++++++
                EVALUATE(TextValueL, GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier));
                IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                  TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,TextValueL);
                  IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                    SuccessO := FALSE;
                    //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                    IF IsAviseDateImport THEN
                      SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                    ELSE
                    //H2120   10.03.15 DMO --------------------------------
                      AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                  END ELSE
                    FieldRefL.VALIDATE(TextValueL);
                END ELSE
                  FieldRefL.VALUE(TextValueL);
                //H1987,H1527 21.01.15 DMA -------------------------------------
              END;
            'Code':
              BEGIN
                EVALUATE(CodeValueL, GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier));
                IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                  TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,CodeValueL);
                  IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                    SuccessO := FALSE;
                    //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                    IF IsAviseDateImport THEN
                      SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                    ELSE
                    //H2120   10.03.15 DMO --------------------------------
                      AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                  END ELSE
                    FieldRefL.VALIDATE(CodeValueL);
                END ELSE
                  FieldRefL.VALUE(CodeValueL);
              END;
            'Decimal':
              BEGIN
                TempTextValueL := GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier);
                IF TempTextValueL = '' THEN
                  TempTextValueL := '0';
                EVALUATE(DecimalValueL,TempTextValueL);
                IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                  TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,DecimalValueL);
                  IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                    SuccessO := FALSE;
                    //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                    IF IsAviseDateImport THEN
                      SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                    ELSE
                    //H2120   10.03.15 DMO --------------------------------
                      AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                  END ELSE
                    FieldRefL.VALIDATE(DecimalValueL);
                END ELSE
                  FieldRefL.VALUE(DecimalValueL);
              END;
            'Option':
              BEGIN
                EVALUATE(TextValueL, GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier));
                IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                  TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,TextValueL);
                  IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                    SuccessO := FALSE;
                    //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                    IF IsAviseDateImport THEN
                      SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                    ELSE
                    //H2120   10.03.15 DMO --------------------------------
                      AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                  END ELSE
                    FieldRefL.VALIDATE(TextValueL);
                END ELSE
                  FieldRefL.VALUE(TextValueL);
              END;
            'Integer':
              BEGIN
                TempTextValueL := GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier);
                IF TempTextValueL = '' THEN
                  TempTextValueL := '0';
                EVALUATE(IntegerValueL, TempTextValueL);
                IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                  TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,IntegerValueL);
                  IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                    SuccessO := FALSE;
                    //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                    IF IsAviseDateImport THEN
                      SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                    ELSE
                    //H2120   10.03.15 DMO --------------------------------
                      AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                  END ELSE
                    FieldRefL.VALIDATE(IntegerValueL);
                END ELSE
                  FieldRefL.VALUE(IntegerValueL);
              END;
            'BigInteger':
              BEGIN
                TempTextValueL := GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier);
                IF TempTextValueL = '' THEN
                  TempTextValueL := '0';
                EVALUATE(BigIntValueL, TempTextValueL);
                IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                  TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,BigIntValueL);
                  IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                    SuccessO := FALSE;
                    //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                    IF IsAviseDateImport THEN
                      SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                    ELSE
                    //H2120   10.03.15 DMO --------------------------------
                      AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                  END ELSE
                    FieldRefL.VALIDATE(BigIntValueL);
                END ELSE
                  FieldRefL.VALUE(BigIntValueL);
              END;
            'Boolean':
              BEGIN
                EVALUATE(BooleanValueL, GetValueFromCsvString(StringLineToProcess,CsvSeparator,CsvStringQualifier));
                IF CSVImportFieldSetupL."Validate Field" THEN BEGIN
                  TrackingImporterMgtL.SetValidation(RecordRefR,FieldRefL.NUMBER,BigIntValueL);
                  IF NOT TrackingImporterMgtL.RUN THEN BEGIN
                    SuccessO := FALSE;
                    //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
                    IF IsAviseDateImport THEN
                      SetErrorMsg(RecordRefR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION) + COPYSTR(GETLASTERRORTEXT,1,950))
                    ELSE
                    //H2120   10.03.15 DMO --------------------------------
                      AddErrorToArray(ErrorMessagesR,STRSUBSTNO(TextHME018,FieldRefL.CAPTION));
                  END ELSE
                    FieldRefL.VALIDATE(BigIntValueL);
                END ELSE
                  FieldRefL.VALUE(BooleanValueL);
              END;
          END;
        UNTIL CSVImportFieldSetupL.NEXT = 0;
      END ELSE
        ERROR(TextHME004, CSVImportFieldSetupL.TABLECAPTION);

      //Replace dummy date in case of our table 50322
      IF CSVImportSetupL.GET(CSVImportSetupCodeV) THEN
        IF CSVImportSetupL."Table No." = DATABASE::"Tracking Importer Data" THEN BEGIN
          CSVImportFieldSetupL.RESET;
          CSVImportFieldSetupL.SETRANGE(Code,CSVImportSetupCodeV);
          CSVImportFieldSetupL.SETRANGE("Main Date Field", TRUE);
          IF CSVImportFieldSetupL.FINDFIRST THEN BEGIN
            CSVImportFieldSetup2L.RESET;
            CSVImportFieldSetup2L.SETRANGE(Code,CSVImportSetupCodeV);
            CSVImportFieldSetup2L.SETRANGE("Main Date Field", FALSE);
            CSVImportFieldSetup2L.SETFILTER("Date Format", '<>%1','');
            IF CSVImportFieldSetup2L.FINDFIRST THEN BEGIN
              FieldRefL := RecordRefR.FIELD(CSVImportFieldSetupL."Field No.");
              TextValueL := FORMAT(FieldRefL.VALUE);
              DateValue2L := ConvertTextToDate(TextValueL);

              REPEAT
                FieldRef2L := RecordRefR.FIELD(CSVImportFieldSetup2L."Field No.");
                TextValueL := FORMAT(FieldRef2L.VALUE);
                DateValueL := ConvertTextToDate(TextValueL);
                TimeValueL := ConvertTextToTime(TextValueL);
                IF DateValueL = DMY2DATE(1,1,1754) THEN
                  FieldRef2L.VALUE := CREATEDATETIME(DateValue2L,TimeValueL)
              UNTIL CSVImportFieldSetup2L.NEXT = 0;
            END;
          END;
        END;

      EXIT(SuccessO);
    END;

    PROCEDURE ProcessRecords@1000000010();
    VAR
      ParcelStatusHistoryMgtL@1000000001 : Codeunit 80011;
      RecordReferenceL@1000000003 : RecordRef;
      FieldReferenceL@1000000000 : FieldRef;
      DocumentNoL@1000000014 : Code[20];
      LineNoL@1000000013 : Integer;
      EntryNoL@1000000018 : Integer;
      HowToHandleStatusDescriptionL@1000000002 : ' ,Fill Parcel Status Description,See Comments';
      DocumentTypeL@1000000015 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      UsedInterfaceL@1000000008 : ' ,EDI,DHL,DocData,Drop Shipment,Rhenus,UPS,DPD,WHSLF,Importer';
      InfoDirectionL@1000000011 : 'Incoming,Outgoing';
      IsInArchiveL@1000000016 : Boolean;
    BEGIN
      CLEAR(ParcelStatusHistoryMgtL);

      IF (ProcessingTrackingImporterData."Order No." <> '') AND (ProcessingTrackingImporterData."Line No." <> 0)
      THEN BEGIN //Order No.,Line No.
        RecordReferenceL.CLOSE;
        RecordReferenceL.OPEN(37);
        FieldReferenceL := RecordReferenceL.FIELD(1);
        FieldReferenceL.SETRANGE(1);
        FieldReferenceL := RecordReferenceL.FIELD(3);
        FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Order No.");
        FieldReferenceL := RecordReferenceL.FIELD(4);
        FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Line No.");
        IF NOT RecordReferenceL.FINDFIRST THEN BEGIN
          RecordReferenceL.CLOSE;
          RecordReferenceL.OPEN(5108);
          FieldReferenceL := RecordReferenceL.FIELD(1);
          FieldReferenceL.SETRANGE(1);
          FieldReferenceL := RecordReferenceL.FIELD(3);
          FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Order No.");
          FieldReferenceL := RecordReferenceL.FIELD(4);
          FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Line No.");
          FieldReferenceL := RecordReferenceL.FIELD(5047);
          FieldReferenceL.SETRANGE(1);
          FieldReferenceL := RecordReferenceL.FIELD(5048);
          FieldReferenceL.SETRANGE(1);
          IF NOT RecordReferenceL.FINDFIRST THEN
            ERROR(TextHME007);
        END;
        ParcelStatusHistoryMgtL.SetDateTimeGlobal(ProcessingTrackingImporterData."Event Timestamp");
        ParcelStatusHistoryMgtL.SetDateGlobals(
          ProcessingTrackingImporterData."Pickup Date",ProcessingTrackingImporterData."Delivery Date",0D);
        ParcelStatusHistoryMgtL.SetFileNameGlobal(ProcessingTrackingImporterData."File Name");
        ParcelStatusHistoryMgtL.FillHistoryByDocLine(
          RecordReferenceL,1,InfoDirectionL::Incoming,UsedInterfaceL::Importer,
          ProcessingTrackingImporterData."Shipping Agent Code",ProcessingTrackingImporterData."Tracking No.", '',
          ProcessingTrackingImporterData."Status Code",
          ProcessingTrackingImporterData."Status Sub Code",
          ProcessingTrackingImporterData."Status Description",
          HowToHandleStatusDescriptionL::"See Comments");

        CreateRhenusSalesImport(ProcessingTrackingImporterData, RecordReferenceL);

        ProcessingTrackingImporterData.Processed := TRUE;

      END ELSE
        IF (ProcessingTrackingImporterData."Purchase Document No." <> '') AND
           (ProcessingTrackingImporterData."Purch. Doc. Line No." <> 0)
        THEN BEGIN //PO Order No.,PO Line No.
          RecordReferenceL.CLOSE;
          RecordReferenceL.OPEN(39);
          FieldReferenceL := RecordReferenceL.FIELD(1);
          FieldReferenceL.SETRANGE(1);
          FieldReferenceL := RecordReferenceL.FIELD(3);
          FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Purchase Document No.");
          FieldReferenceL := RecordReferenceL.FIELD(4);
          FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Purch. Doc. Line No.");
          IF NOT RecordReferenceL.FINDFIRST THEN BEGIN
            RecordReferenceL.CLOSE;
            RecordReferenceL.OPEN(5110);
            FieldReferenceL := RecordReferenceL.FIELD(1);
            FieldReferenceL.SETRANGE(1);
            FieldReferenceL := RecordReferenceL.FIELD(3);
            FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Order No.");
            FieldReferenceL := RecordReferenceL.FIELD(4);
            FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Line No.");
            RecordReferenceL.FINDFIRST;
            FieldReferenceL := RecordReferenceL.FIELD(50001);
            DocumentNoL := FieldReferenceL.VALUE;
            FieldReferenceL := RecordReferenceL.FIELD(50002);
            LineNoL := FieldReferenceL.VALUE;
          END ELSE BEGIN
            FieldReferenceL := RecordReferenceL.FIELD(50001);
            DocumentNoL := FieldReferenceL.VALUE;
            FieldReferenceL := RecordReferenceL.FIELD(50002);
            LineNoL := FieldReferenceL.VALUE;
          END;

          IF (DocumentNoL <> '') AND (LineNoL <> 0) THEN BEGIN
            RecordReferenceL.CLOSE;
            RecordReferenceL.OPEN(37);
            FieldReferenceL := RecordReferenceL.FIELD(1);
            FieldReferenceL.SETRANGE(1);
            FieldReferenceL := RecordReferenceL.FIELD(3);
            FieldReferenceL.SETRANGE(DocumentNoL);
            FieldReferenceL := RecordReferenceL.FIELD(4);
            FieldReferenceL.SETRANGE(LineNoL);
            IF NOT RecordReferenceL.FINDFIRST THEN BEGIN
              RecordReferenceL.CLOSE;
              RecordReferenceL.OPEN(5108);
              FieldReferenceL := RecordReferenceL.FIELD(1);
              FieldReferenceL.SETRANGE(1);
              FieldReferenceL := RecordReferenceL.FIELD(3);
              FieldReferenceL.SETRANGE(DocumentNoL);
              FieldReferenceL := RecordReferenceL.FIELD(4);
              FieldReferenceL.SETRANGE(LineNoL);
              FieldReferenceL := RecordReferenceL.FIELD(5047);
              FieldReferenceL.SETRANGE(1);
              FieldReferenceL := RecordReferenceL.FIELD(5048);
              FieldReferenceL.SETRANGE(1);
              RecordReferenceL.FINDFIRST;
            END;
          END ELSE
            ERROR(TextHME007);

          ParcelStatusHistoryMgtL.SetDateTimeGlobal(ProcessingTrackingImporterData."Event Timestamp");
          ParcelStatusHistoryMgtL.SetDateGlobals(
            ProcessingTrackingImporterData."Pickup Date",ProcessingTrackingImporterData."Delivery Date",0D);
          ParcelStatusHistoryMgtL.SetFileNameGlobal(ProcessingTrackingImporterData."File Name");
          ParcelStatusHistoryMgtL.FillHistoryByDocLine(
            RecordReferenceL, 1,
            InfoDirectionL::Incoming,UsedInterfaceL::Importer,
            ProcessingTrackingImporterData."Shipping Agent Code",
            ProcessingTrackingImporterData."Tracking No.", '',
            ProcessingTrackingImporterData."Status Code",
            ProcessingTrackingImporterData."Status Sub Code",
            ProcessingTrackingImporterData."Status Description",
            HowToHandleStatusDescriptionL::"See Comments");

          CreateRhenusSalesImport(ProcessingTrackingImporterData, RecordReferenceL);

          ProcessingTrackingImporterData.Processed := TRUE;

        END ELSE
          IF (ProcessingTrackingImporterData."Order No." <> '') AND (ProcessingTrackingImporterData."Item No." <> '')
          THEN BEGIN //Order No., Item No.
            RecordReferenceL.CLOSE;
            RecordReferenceL.OPEN(37);
            FieldReferenceL := RecordReferenceL.FIELD(1);
            FieldReferenceL.SETRANGE(1);
            FieldReferenceL := RecordReferenceL.FIELD(3);
            FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Order No.");
            FieldReferenceL := RecordReferenceL.FIELD(6);
            FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Item No.");
            IF RecordReferenceL.COUNT = 1 THEN BEGIN
              RecordReferenceL.FINDFIRST;
              ParcelStatusHistoryMgtL.SetDateTimeGlobal(ProcessingTrackingImporterData."Event Timestamp");
              ParcelStatusHistoryMgtL.SetDateGlobals(
                ProcessingTrackingImporterData."Pickup Date",
                ProcessingTrackingImporterData."Delivery Date",0D);
              ParcelStatusHistoryMgtL.SetFileNameGlobal(ProcessingTrackingImporterData."File Name");
              ParcelStatusHistoryMgtL.FillHistoryByDocLine(
                RecordReferenceL, 1, InfoDirectionL::Incoming,UsedInterfaceL::Importer,
                ProcessingTrackingImporterData."Shipping Agent Code", ProcessingTrackingImporterData."Tracking No.", '',
                ProcessingTrackingImporterData."Status Code",
                ProcessingTrackingImporterData."Status Sub Code",
                ProcessingTrackingImporterData."Status Description",
                HowToHandleStatusDescriptionL::"See Comments");

              CreateRhenusSalesImport(ProcessingTrackingImporterData, RecordReferenceL);
              ProcessingTrackingImporterData.Processed := TRUE;
            END ELSE BEGIN
              RecordReferenceL.CLOSE;
              RecordReferenceL.OPEN(5108);
              FieldReferenceL := RecordReferenceL.FIELD(1);
              FieldReferenceL.SETRANGE(1);
              FieldReferenceL := RecordReferenceL.FIELD(3);
              FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Order No.");
              FieldReferenceL := RecordReferenceL.FIELD(6);
              FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Item No.");
              FieldReferenceL := RecordReferenceL.FIELD(5047);
              FieldReferenceL.SETRANGE(1);
              FieldReferenceL := RecordReferenceL.FIELD(5048);
              FieldReferenceL.SETRANGE(1);
              IF RecordReferenceL.COUNT = 1 THEN BEGIN
                RecordReferenceL.FINDFIRST;
                ParcelStatusHistoryMgtL.SetDateTimeGlobal(ProcessingTrackingImporterData."Event Timestamp");
                ParcelStatusHistoryMgtL.SetDateGlobals(
                  ProcessingTrackingImporterData."Pickup Date",
                  ProcessingTrackingImporterData."Delivery Date",0D);
                ParcelStatusHistoryMgtL.SetFileNameGlobal(ProcessingTrackingImporterData."File Name");
                ParcelStatusHistoryMgtL.FillHistoryByDocLine(
                  RecordReferenceL,1,
                  InfoDirectionL::Incoming,UsedInterfaceL::Importer,
                  ProcessingTrackingImporterData."Shipping Agent Code",
                  ProcessingTrackingImporterData."Tracking No.", '',
                  ProcessingTrackingImporterData."Status Code",
                  ProcessingTrackingImporterData."Status Sub Code",
                  ProcessingTrackingImporterData."Status Description",
                  HowToHandleStatusDescriptionL::"See Comments");

                CreateRhenusSalesImport(ProcessingTrackingImporterData, RecordReferenceL);

                ProcessingTrackingImporterData.Processed := TRUE;
              END ELSE
                ERROR(TextHME007);
            END;
          END ELSE
            IF (ProcessingTrackingImporterData."Tracking No." <> '') THEN BEGIN //Order No., Tracking No.
              RecordReferenceL.CLOSE;
              RecordReferenceL.OPEN(80013);
              FieldReferenceL := RecordReferenceL.FIELD(54);
              FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Tracking No.");
              IF RecordReferenceL.FINDFIRST THEN BEGIN
                FieldReferenceL := RecordReferenceL.FIELD(10);
                DocumentTypeL := FieldReferenceL.VALUE;
                FieldReferenceL := RecordReferenceL.FIELD(11);
                DocumentNoL := FieldReferenceL.VALUE;
                FieldReferenceL := RecordReferenceL.FIELD(12);
                LineNoL := FieldReferenceL.VALUE;
              END ELSE BEGIN
                RecordReferenceL.CLOSE;
                RecordReferenceL.OPEN(50187);
                FieldReferenceL := RecordReferenceL.FIELD(54);
                FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Tracking No.");
                RecordReferenceL.FINDFIRST;
                FieldReferenceL := RecordReferenceL.FIELD(10);
                DocumentTypeL := FieldReferenceL.VALUE;
                FieldReferenceL := RecordReferenceL.FIELD(11);
                DocumentNoL := FieldReferenceL.VALUE;
                FieldReferenceL := RecordReferenceL.FIELD(12);
                LineNoL := FieldReferenceL.VALUE;
                IsInArchiveL := TRUE
              END;

              IF (DocumentNoL <> '') AND (LineNoL <> 0) THEN BEGIN
                IF NOT IsInArchiveL THEN BEGIN
                  RecordReferenceL.CLOSE;
                  RecordReferenceL.OPEN(37);
                END ELSE BEGIN
                  RecordReferenceL.CLOSE;
                  RecordReferenceL.OPEN(5108);
                  FieldReferenceL := RecordReferenceL.FIELD(5047);
                  FieldReferenceL.SETRANGE(1);
                  FieldReferenceL := RecordReferenceL.FIELD(5048);
                  FieldReferenceL.SETRANGE(1);
                END;
                FieldReferenceL := RecordReferenceL.FIELD(1);
                FieldReferenceL.SETRANGE(1);
                FieldReferenceL := RecordReferenceL.FIELD(3);
                FieldReferenceL.SETRANGE(DocumentNoL);
                FieldReferenceL := RecordReferenceL.FIELD(4);
                FieldReferenceL.SETRANGE(LineNoL);
                RecordReferenceL.FINDFIRST;

                ParcelStatusHistoryMgtL.SetDateTimeGlobal(ProcessingTrackingImporterData."Event Timestamp");
                ParcelStatusHistoryMgtL.SetDateGlobals(
                  ProcessingTrackingImporterData."Pickup Date",
                  ProcessingTrackingImporterData."Delivery Date",0D);
                ParcelStatusHistoryMgtL.SetFileNameGlobal(ProcessingTrackingImporterData."File Name");
                ParcelStatusHistoryMgtL.FillHistoryByDocLine(
                  RecordReferenceL, 1,
                  InfoDirectionL::Incoming,UsedInterfaceL::Importer,
                  ProcessingTrackingImporterData."Shipping Agent Code",
                  ProcessingTrackingImporterData."Tracking No.", '',
                  ProcessingTrackingImporterData."Status Code",
                  ProcessingTrackingImporterData."Status Sub Code",
                  ProcessingTrackingImporterData."Status Description",
                  HowToHandleStatusDescriptionL::"See Comments");
                CreateRhenusSalesImport(ProcessingTrackingImporterData, RecordReferenceL);
                ProcessingTrackingImporterData.Processed := TRUE;
              END ELSE
                ERROR(TextHME007);
            END ELSE
              IF (ProcessingTrackingImporterData."Purchase Document No." <> '') AND
                 (ProcessingTrackingImporterData."Item No." <> '')
              THEN BEGIN //PO No., Item No.
                RecordReferenceL.CLOSE;
                RecordReferenceL.OPEN(39);
                FieldReferenceL := RecordReferenceL.FIELD(1);
                FieldReferenceL.SETRANGE(1);
                FieldReferenceL := RecordReferenceL.FIELD(3);
                FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Purchase Document No.");
                FieldReferenceL := RecordReferenceL.FIELD(6);
                FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Item No.");
                IF RecordReferenceL.COUNT = 1 THEN BEGIN
                  RecordReferenceL.FINDFIRST;
                  FieldReferenceL := RecordReferenceL.FIELD(50001);
                  DocumentNoL := FieldReferenceL.VALUE;
                  FieldReferenceL := RecordReferenceL.FIELD(50002);
                  LineNoL := FieldReferenceL.VALUE;
                END ELSE BEGIN
                  RecordReferenceL.CLOSE;
                  RecordReferenceL.OPEN(5110);
                  FieldReferenceL := RecordReferenceL.FIELD(1);
                  FieldReferenceL.SETRANGE(1);
                  FieldReferenceL := RecordReferenceL.FIELD(3);
                  FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Purchase Document No.");
                  FieldReferenceL := RecordReferenceL.FIELD(6);
                  FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Item No.");
                  IF RecordReferenceL.COUNT = 1 THEN BEGIN
                    RecordReferenceL.FINDFIRST;
                    FieldReferenceL := RecordReferenceL.FIELD(50001);
                    DocumentNoL := FieldReferenceL.VALUE;
                    FieldReferenceL := RecordReferenceL.FIELD(50002);
                    LineNoL := FieldReferenceL.VALUE;
                  END;
                END;

                IF (DocumentNoL <> '') AND (LineNoL <> 0) THEN BEGIN
                  RecordReferenceL.CLOSE;
                  RecordReferenceL.OPEN(37);
                  FieldReferenceL := RecordReferenceL.FIELD(1);
                  FieldReferenceL.SETRANGE(1);
                  FieldReferenceL := RecordReferenceL.FIELD(3);
                  FieldReferenceL.SETRANGE(DocumentNoL);
                  FieldReferenceL := RecordReferenceL.FIELD(4);
                  FieldReferenceL.SETRANGE(LineNoL);
                  IF NOT RecordReferenceL.FINDFIRST THEN BEGIN
                    RecordReferenceL.CLOSE;
                    RecordReferenceL.OPEN(5108);
                    FieldReferenceL := RecordReferenceL.FIELD(1);
                    FieldReferenceL.SETRANGE(1);
                    FieldReferenceL := RecordReferenceL.FIELD(3);
                    FieldReferenceL.SETRANGE(DocumentNoL);
                    FieldReferenceL := RecordReferenceL.FIELD(4);
                    FieldReferenceL.SETRANGE(LineNoL);
                    FieldReferenceL := RecordReferenceL.FIELD(5047);
                    FieldReferenceL.SETRANGE(1);
                    FieldReferenceL := RecordReferenceL.FIELD(5048);
                    FieldReferenceL.SETRANGE(1);
                    RecordReferenceL.FINDFIRST;
                  END;

                  ParcelStatusHistoryMgtL.SetDateTimeGlobal(ProcessingTrackingImporterData."Event Timestamp");
                  ParcelStatusHistoryMgtL.SetDateGlobals(
                    ProcessingTrackingImporterData."Pickup Date",ProcessingTrackingImporterData."Delivery Date",0D);
                  ParcelStatusHistoryMgtL.SetFileNameGlobal(ProcessingTrackingImporterData."File Name");
                  ParcelStatusHistoryMgtL.FillHistoryByDocLine(
                    RecordReferenceL, 1, InfoDirectionL::Incoming,UsedInterfaceL::Importer,
                    ProcessingTrackingImporterData."Shipping Agent Code",
                    ProcessingTrackingImporterData."Tracking No.", '',
                    ProcessingTrackingImporterData."Status Code",
                    ProcessingTrackingImporterData."Status Sub Code",
                    ProcessingTrackingImporterData."Status Description",
                    HowToHandleStatusDescriptionL::"See Comments");

                  CreateRhenusSalesImport(ProcessingTrackingImporterData, RecordReferenceL);
                  ProcessingTrackingImporterData.Processed := TRUE;
                END ELSE
                  ERROR(TextHME007);
              END ELSE
                IF (ProcessingTrackingImporterData."Purchase Document No." <> '') THEN BEGIN //PO No.
                  RecordReferenceL.CLOSE;
                  RecordReferenceL.OPEN(39);
                  FieldReferenceL := RecordReferenceL.FIELD(1);
                  FieldReferenceL.SETRANGE(1);
                  FieldReferenceL := RecordReferenceL.FIELD(3);
                  FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Purchase Document No.");
                  IF RecordReferenceL.COUNT = 1 THEN BEGIN
                    RecordReferenceL.FINDFIRST;
                    FieldReferenceL := RecordReferenceL.FIELD(50001);
                    DocumentNoL := FieldReferenceL.VALUE;
                    FieldReferenceL := RecordReferenceL.FIELD(50002);
                    LineNoL := FieldReferenceL.VALUE;
                  END ELSE BEGIN
                    RecordReferenceL.CLOSE;
                    RecordReferenceL.OPEN(5110);
                    FieldReferenceL := RecordReferenceL.FIELD(1);
                    FieldReferenceL.SETRANGE(1);
                    FieldReferenceL := RecordReferenceL.FIELD(3);
                    FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Purchase Document No.");
                    IF RecordReferenceL.COUNT = 1 THEN BEGIN
                      RecordReferenceL.FINDFIRST;
                      FieldReferenceL := RecordReferenceL.FIELD(50001);
                      DocumentNoL := FieldReferenceL.VALUE;
                      FieldReferenceL := RecordReferenceL.FIELD(50002);
                      LineNoL := FieldReferenceL.VALUE;
                    END;
                  END;

                  IF (DocumentNoL <> '') AND (LineNoL <> 0) THEN BEGIN
                    RecordReferenceL.CLOSE;
                    RecordReferenceL.OPEN(37);
                    FieldReferenceL := RecordReferenceL.FIELD(1);
                    FieldReferenceL.SETRANGE(1);
                    FieldReferenceL := RecordReferenceL.FIELD(3);
                    FieldReferenceL.SETRANGE(DocumentNoL);
                    FieldReferenceL := RecordReferenceL.FIELD(4);
                    FieldReferenceL.SETRANGE(LineNoL);
                    IF NOT RecordReferenceL.FINDFIRST THEN BEGIN
                      RecordReferenceL.CLOSE;
                      RecordReferenceL.OPEN(5108);
                      FieldReferenceL := RecordReferenceL.FIELD(1);
                      FieldReferenceL.SETRANGE(1);
                      FieldReferenceL := RecordReferenceL.FIELD(3);
                      FieldReferenceL.SETRANGE(DocumentNoL);
                      FieldReferenceL := RecordReferenceL.FIELD(4);
                      FieldReferenceL.SETRANGE(LineNoL);
                      FieldReferenceL := RecordReferenceL.FIELD(5047);
                      FieldReferenceL.SETRANGE(1);
                      FieldReferenceL := RecordReferenceL.FIELD(5048);
                      FieldReferenceL.SETRANGE(1);
                      RecordReferenceL.FINDFIRST;
                    END;

                    ParcelStatusHistoryMgtL.SetDateTimeGlobal(ProcessingTrackingImporterData."Event Timestamp");
                    ParcelStatusHistoryMgtL.SetDateGlobals(
                      ProcessingTrackingImporterData."Pickup Date",
                      ProcessingTrackingImporterData."Delivery Date",0D);
                    ParcelStatusHistoryMgtL.SetFileNameGlobal(ProcessingTrackingImporterData."File Name");
                    ParcelStatusHistoryMgtL.FillHistoryByDocLine(
                      RecordReferenceL,1,
                      InfoDirectionL::Incoming,UsedInterfaceL::Importer,
                      ProcessingTrackingImporterData."Shipping Agent Code",
                      ProcessingTrackingImporterData."Tracking No.", '',
                      ProcessingTrackingImporterData."Status Code",
                      ProcessingTrackingImporterData."Status Sub Code",
                      ProcessingTrackingImporterData."Status Description",
                      HowToHandleStatusDescriptionL::"See Comments");

                    CreateRhenusSalesImport(ProcessingTrackingImporterData, RecordReferenceL);
                    ProcessingTrackingImporterData.Processed := TRUE;
                  END ELSE
                    ERROR(TextHME007);
                END ELSE
                  IF ProcessingTrackingImporterData."Long Order No." <> '' THEN BEGIN //Long Order No.
                    RecordReferenceL.CLOSE;
                    RecordReferenceL.OPEN(50181);
                    FieldReferenceL := RecordReferenceL.FIELD(5);
                    FieldReferenceL.SETRANGE(ProcessingTrackingImporterData."Long Order No.");
                    IF RecordReferenceL.FINDFIRST THEN BEGIN
                      FieldReferenceL := RecordReferenceL.FIELD(1);
                      EntryNoL := FieldReferenceL.VALUE;
                      RecordReferenceL.CLOSE;
                      RecordReferenceL.OPEN(50182);
                      FieldReferenceL := RecordReferenceL.FIELD(1);
                      FieldReferenceL.SETRANGE(EntryNoL);

                      IF RecordReferenceL.FINDFIRST THEN
                        REPEAT
                          FieldReferenceL := RecordReferenceL.FIELD(4);
                          DocumentNoL := FieldReferenceL.VALUE;
                          FieldReferenceL := RecordReferenceL.FIELD(8);
                          LineNoL := FieldReferenceL.VALUE;

                          RecordReferenceL.CLOSE;
                          RecordReferenceL.OPEN(37);
                          FieldReferenceL := RecordReferenceL.FIELD(1);
                          FieldReferenceL.SETRANGE(1);
                          FieldReferenceL := RecordReferenceL.FIELD(3);
                          FieldReferenceL.SETRANGE(DocumentNoL);
                          FieldReferenceL := RecordReferenceL.FIELD(4);
                          FieldReferenceL.SETRANGE(LineNoL * 10000);
                          IF NOT RecordReferenceL.FINDFIRST THEN BEGIN
                            RecordReferenceL.CLOSE;
                            RecordReferenceL.OPEN(5108);
                            FieldReferenceL := RecordReferenceL.FIELD(1);
                            FieldReferenceL.SETRANGE(1);
                            FieldReferenceL := RecordReferenceL.FIELD(3);
                            FieldReferenceL.SETRANGE(DocumentNoL);
                            FieldReferenceL := RecordReferenceL.FIELD(4);
                            FieldReferenceL.SETRANGE(LineNoL * 10000);
                            FieldReferenceL := RecordReferenceL.FIELD(5047);
                            FieldReferenceL.SETRANGE(1);
                            FieldReferenceL := RecordReferenceL.FIELD(5048);
                            FieldReferenceL.SETRANGE(1);
                            IF NOT RecordReferenceL.FINDFIRST THEN
                              ERROR(TextHME007);
                          END;
                          ParcelStatusHistoryMgtL.SetDateTimeGlobal(ProcessingTrackingImporterData."Event Timestamp");
                          ParcelStatusHistoryMgtL.SetDateGlobals(
                            ProcessingTrackingImporterData."Pickup Date",
                            ProcessingTrackingImporterData."Delivery Date",0D);
                          ParcelStatusHistoryMgtL.SetFileNameGlobal(ProcessingTrackingImporterData."File Name");
                          ParcelStatusHistoryMgtL.FillHistoryByDocLine(
                            RecordReferenceL,
                            1,
                            InfoDirectionL::Incoming,
                            UsedInterfaceL::Importer,
                            ProcessingTrackingImporterData."Shipping Agent Code",
                            ProcessingTrackingImporterData."Tracking No.", '',
                            ProcessingTrackingImporterData."Status Code",
                            ProcessingTrackingImporterData."Status Sub Code",
                            ProcessingTrackingImporterData."Status Description",
                            HowToHandleStatusDescriptionL::"See Comments");

                          CreateRhenusSalesImport(ProcessingTrackingImporterData, RecordReferenceL);
                          ProcessingTrackingImporterData.Processed := TRUE;
                        UNTIL RecordReferenceL.NEXT = 0;
                    END ELSE
                      ERROR(TextHME007);
                  END ELSE
                    ERROR(TextHME007);
    END;

    PROCEDURE CreateRhenusSalesImport@1000000011(TrackingImporterDataV@1000000000 : Record 50321;RecordReferenceV@1000000002 : RecordRef);
    VAR
      RhdSalesImportL@1000000001 : Record 50183;
      RhdSetupL@1000000013 : Record 50177;
      SalesHeaderL@1000000008 : Record 36;
      SalesLineL@1000000010 : Record 37;
      SalesHeaderArchiveL@1000000009 : Record 5107;
      SalesLineArchiveL@1000000011 : Record 5108;
      RhdGeneralManagementL@1000000012 : Codeunit 50157;
      FieldReferenceL@1000000003 : FieldRef;
      OrderDateL@1000000007 : Date;
      DocumentNoL@1000000004 : Code[20];
      QuantityL@1000000006 : Decimal;
      LineNoL@1000000005 : Integer;
    BEGIN
      IF (TrackingImporterDataV."Delivery Date Slot Start" <> CREATEDATETIME(0D,0T)) OR
         (TrackingImporterDataV."Delivery Date Slot End" <> CREATEDATETIME(0D,0T))
      THEN BEGIN
        CASE RecordReferenceV.NUMBER OF
          DATABASE::"Sales Line",DATABASE::"Sales Line Archive" : //SO, SOA
            BEGIN
              FieldReferenceL := RecordReferenceV.FIELD(3);
              DocumentNoL     := FieldReferenceL.VALUE;
              FieldReferenceL := RecordReferenceV.FIELD(4);
              LineNoL         := FieldReferenceL.VALUE;
              FieldReferenceL := RecordReferenceV.FIELD(15);
              QuantityL       := FieldReferenceL.VALUE;
              IF NOT SalesHeaderL.GET(1,DocumentNoL) THEN BEGIN
                SalesHeaderArchiveL.GET(1,DocumentNoL,1,1);
                OrderDateL := SalesHeaderArchiveL."Order Date";
              END ELSE
                OrderDateL := SalesHeaderL."Order Date";
            END;
          DATABASE::"Purchase Line",DATABASE::"Purchase Line Archive" : //PO, POA
            BEGIN
              SalesLineL.RESET;
              SalesLineL.SETRANGE("Document Type", SalesLineL."Document Type"::Order);
              FieldReferenceL := RecordReferenceV.FIELD(50001);
              DocumentNoL := FieldReferenceL.VALUE;
              SalesLineL.SETRANGE("Document No.", DocumentNoL);
              FieldReferenceL := RecordReferenceV.FIELD(50002);
              LineNoL := FieldReferenceL.VALUE;
              SalesLineL.SETRANGE("Line No.", LineNoL);
              LineNoL := 0;
              DocumentNoL := '';
              IF SalesLineL.ISEMPTY THEN BEGIN
                DocumentNoL     := SalesLineL."Document No.";
                LineNoL         := SalesLineL."Line No.";
                QuantityL       := SalesLineL.Quantity;
              END ELSE BEGIN
                SalesLineArchiveL.RESET;
                SalesLineArchiveL.SETRANGE("Document Type", SalesLineArchiveL."Document Type"::Order);
                FieldReferenceL := RecordReferenceV.FIELD(50001);
                DocumentNoL := FieldReferenceL.VALUE;
                SalesLineArchiveL.SETRANGE("Document No.", DocumentNoL);
                FieldReferenceL := RecordReferenceV.FIELD(50002);
                LineNoL := FieldReferenceL.VALUE;
                SalesLineArchiveL.SETRANGE("Line No.", LineNoL);
                IF SalesLineArchiveL.FINDFIRST THEN BEGIN
                  DocumentNoL     := SalesLineArchiveL."Document No.";
                  LineNoL         := SalesLineArchiveL."Line No.";
                  QuantityL       := SalesLineArchiveL.Quantity;
                END;
              END;
              FieldReferenceL := RecordReferenceV.FIELD(5795);
              OrderDateL     := FieldReferenceL.VALUE;
            END;
        END;

        RhdSetupL.GET;
        RhdSalesImportL.INIT;
        RhdSalesImportL."Entry No."            := RhdGeneralManagementL.GetNextEntryNo(50183);
        RhdSalesImportL."Import Timestamp"     := CREATEDATETIME(TODAY,TIME);
        RhdSalesImportL."Import Status"        := RhdSalesImportL."Import Status"::Processed;
        RhdSalesImportL."Process Timestamp"    := CREATEDATETIME(TODAY,TIME);
        RhdSalesImportL."Record Type"          := RhdSetupL."Record Type STA";
        RhdSalesImportL."Client Identifier"    := RhdSetupL."Rhenus Client Identifier";
        RhdSalesImportL."Customer Order No."   := DocumentNoL + '001';
        RhdSalesImportL."Customer Order No. 2" := DocumentNoL;
        RhdSalesImportL."Transmission No."     := '1';
        RhdSalesImportL."Order Pos. No."       := LineNoL / 10000;
        RhdSalesImportL."Order Type"           := 1;
        RhdSalesImportL."Item No."             := TrackingImporterDataV."Item No.";
        RhdSalesImportL.Quantity               := QuantityL;
        RhdSalesImportL."Stock Type"           := 'M';
        RhdSalesImportL."Order Status"         := TrackingImporterDataV."Status Code";
        RhdSalesImportL."Order Date"           := FORMAT(OrderDateL);
        RhdSalesImportL."Order Period From"    := FORMAT(TrackingImporterDataV."Delivery Date Slot Start");
        RhdSalesImportL."Order Period To"      := FORMAT(TrackingImporterDataV."Delivery Date Slot End");
        RhdSalesImportL.Timestamp              := FORMAT(CREATEDATETIME(TODAY,TIME));
        RhdSalesImportL.Filename               := COPYSTR(TrackingImporterDataV."File Name",1,MAXSTRLEN(RhdSalesImportL.Filename));
        RhdSalesImportL.INSERT;

      END;
    END;

    PROCEDURE GetValueFromCsvString@1000000006(VAR StringLineP@1000000002 : Text[1000];CSVSeparatorV@1000000001 : Text[1];CSVTextQualifierV@1000000000 : Text[1]) ValueO : Text[250];
    VAR
      TempStringL@1000000005 : Text[500];
      CharCRL@1000000003 : Char;
      CharLFL@1000000004 : Char;
    BEGIN
      //H1987,H1527 21.01.15 DMA +++++++++++++++++++++++++++++++
      IF STRPOS(StringLineP,CSVSeparatorV) > 0 THEN
        TempStringL := COPYSTR(StringLineP,1,STRPOS(StringLineP,CSVSeparatorV))
      ELSE
        TempStringL := COPYSTR(StringLineP,1,STRLEN(StringLineP));

      TempStringL := DELCHR(TempStringL, '<',CSVTextQualifierV);
      TempStringL := DELCHR(TempStringL, '>',CSVSeparatorV);
      TempStringL := DELCHR(TempStringL, '>',CSVTextQualifierV);

      ValueO := COPYSTR(TempStringL,1,250);

      IF STRPOS(StringLineP,CSVSeparatorV) <> 0 THEN
        StringLineP := COPYSTR(StringLineP,STRPOS(StringLineP,CSVSeparatorV) + 1)
      //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
      ELSE
        StringLineP := COPYSTR(StringLineP,STRLEN(StringLineP) + 1);
      //H2120   10.03.15 DMO --------------------------------
      EXIT(ValueO);
      //H1987,H1527 21.01.15 DMA -------------------------------
    END;

    PROCEDURE GetFileNameWithoutPath@1000000005(FilePathV@1000000000 : Text[1000]) FileNameO : Text[80];
    VAR
      DoneL@1000000001 : Boolean;
      IndexL@1000000002 : Integer;
    BEGIN
      REPEAT
        IndexL := STRPOS(FilePathV, '\');
        IF IndexL > 0 THEN
          FilePathV := COPYSTR(FilePathV, IndexL+1, STRLEN(FilePathV) - IndexL)
        ELSE BEGIN
          FileNameO := FilePathV;
          DoneL := TRUE;
        END;
      UNTIL DoneL;

      EXIT(FileNameO);
    END;

    PROCEDURE GetProcessingResult@1000000002() : Boolean;
    BEGIN
      EXIT(ProcessingTrackingImporterData.Processed);
    END;

    PROCEDURE SetParameters@1000000004(CsvSeparatorV@1000000002 : Text[1];CsvStringQualifierV@1000000001 : Text[1];StringLineToProcessV@1000000000 : Text[1000];ImportFileNameV@1000000003 : Text[80];ActionToTakeV@1000000004 : Text[30];UserId@1000000005 : Text[30]);
    BEGIN
      CsvSeparator := CsvSeparatorV;
      CsvStringQualifier := CsvStringQualifierV;
      StringLineToProcess := StringLineToProcessV;
      FileName := ImportFileNameV;
      ActionToTake := ActionToTakeV;
      ProcessingUserId := UserId;
    END;

    PROCEDURE SetValidation@1000000017(VAR RecRefR@1000000002 : RecordRef;FieldNoV@1000000000 : Integer;ValueV@1000000001 : Variant);
    BEGIN
      ValidateFieldNo := FieldNoV;
      ValidateValue := ValueV;
      ValidateRecRef := RecRefR;
    END;

    PROCEDURE SetProcessingRecord@1000000015(TrackingImporterDataV@1000000000 : Record 50321);
    BEGIN
      ProcessingTrackingImporterData := TrackingImporterDataV;
    END;

    PROCEDURE AddErrorToArray@1000000025(VAR ErrorArrayR@1000000000 : ARRAY [10] OF Text[1024];ErrorMessageV@1000000001 : Text[1024]);
    VAR
      ArrayCounterL@1000000002 : Integer;
      DoneL@1000000003 : Boolean;
    BEGIN
      FOR ArrayCounterL := 1 TO 10 DO BEGIN
        IF ErrorArrayR[ArrayCounterL] = '' THEN BEGIN
          ErrorArrayR[ArrayCounterL] := ErrorMessageV;
          DoneL := TRUE;
        END;
        IF DoneL THEN
          ArrayCounterL := 10;
      END;
    END;

    PROCEDURE FormatDate2Date@1000000007(DateFormatV@1000000000 : Text[30];ValueV@1000000001 : Text[30];VAR ErrorMessageR@1000000002 : Text[250]) FormatedDateO : Date;
    VAR
      YearL@1000000003 : Integer;
      MonthL@1000000004 : Integer;
      DayL@1000000005 : Integer;
    BEGIN
      IF DELCHR(ValueV, '=',' ') = '' THEN BEGIN
        FormatedDateO := 0D;
        EXIT(FormatedDateO);
      END;

      CheckDateFormatIsCorrect(ValueV,DateFormatV,TextHME008, ErrorMessageR);

      IF ErrorMessageR = '' THEN BEGIN
        IF STRPOS(DateFormatV, TextHME050) > 0 THEN
          EVALUATE(YearL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME050), STRLEN(TextHME050)));
        IF YearL = 0 THEN
          IF STRPOS(DateFormatV, TextHME056) > 0 THEN BEGIN
            EVALUATE(YearL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME056), STRLEN(TextHME056)));
          END;
        IF STRPOS(DateFormatV, TextHME051) > 0 THEN
          EVALUATE(MonthL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME051), STRLEN(TextHME051)));

        IF STRPOS(DateFormatV, TextHME052) > 0 THEN
          EVALUATE(DayL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME052), STRLEN(TextHME052)));

        IF (DayL = 0) OR (MonthL = 0) OR (YearL = 0) THEN BEGIN
          ErrorMessageR := TextHME010;
          FormatedDateO := 0D;
          EXIT(FormatedDateO);
        END;

        FormatedDateO := DMY2DATE(DayL, MonthL, YearL);
        EXIT(FormatedDateO);
      END;
    END;

    PROCEDURE FormatDate2DateTime@1000000008(DateFormatV@1000000001 : Text[30];ValueV@1000000000 : Text[30];VAR ErrorMessageR@1000000011 : Text[250]) FormatedDateO : DateTime;
    VAR
      TempTimeL@1000000010 : Time;
      TempTimeStringL@1000000008 : Text[30];
      YearL@1000000007 : Integer;
      MonthL@1000000006 : Integer;
      DayL@1000000005 : Integer;
      HourL@1000000009 : Integer;
      MinuteL@1000000004 : Integer;
      SecondsL@1000000003 : Integer;
      MilisecondsL@1000000002 : Integer;
      CharIndexL@1000000012 : Integer;
      PositionL@1000000013 : Integer;
    BEGIN
      CheckDateFormatIsCorrect(ValueV,DateFormatV,TextHME009, ErrorMessageR);
      IF ValueV = '' THEN BEGIN
        FormatedDateO := 0DT;
        EXIT;
      END;

      //H1987 21.01.15 DMA +++++++++++++++++++++++++
      CharIndexL := 1;
      REPEAT
        IF FORMAT(ValueV[CharIndexL]) IN ['1'..'9'] THEN
          PositionL := CharIndexL;

        CharIndexL := CharIndexL + 1;
      UNTIL (CharIndexL = STRLEN(ValueV)) OR (PositionL <> 0);

      IF PositionL = 0 THEN BEGIN
        FormatedDateO := 0DT;
        EXIT(FormatedDateO);
      END;
      //H1987 21.01.15 DMA -------------------------

      IF ErrorMessageR = '' THEN BEGIN
        IF STRPOS(DateFormatV, TextHME050) > 0 THEN
          EVALUATE(YearL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME050), STRLEN(TextHME050)));
        IF YearL = 0 THEN
          IF STRPOS(DateFormatV, TextHME056) > 0 THEN
            EVALUATE(YearL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME056), STRLEN(TextHME056)));
        IF STRPOS(DateFormatV, TextHME051) > 0 THEN
          EVALUATE(MonthL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME051), STRLEN(TextHME051)));

        IF STRPOS(DateFormatV, TextHME052) > 0 THEN
          EVALUATE(DayL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME052), STRLEN(TextHME052)));

        IF STRPOS(DateFormatV, TextHME053) > 0 THEN
          EVALUATE(HourL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME053), STRLEN(TextHME053)));
        IF STRPOS(DateFormatV, TextHME054) > 0 THEN
          EVALUATE(MinuteL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME054), STRLEN(TextHME054)));
        IF STRPOS(DateFormatV, TextHME055) > 0 THEN
          EVALUATE(SecondsL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME055), STRLEN(TextHME055)));
        IF STRPOS(DateFormatV, TextHME056) > 0 THEN
          EVALUATE(MilisecondsL, COPYSTR(ValueV, STRPOS(DateFormatV, TextHME056), STRLEN(TextHME056)));

        IF (DayL = 0) AND (MonthL = 0) AND (YearL = 0) AND (HourL=0) AND (MinuteL=0) AND (SecondsL = 0) AND (MilisecondsL = 0)
        THEN BEGIN
          ErrorMessageR := TextHME010;
          FormatedDateO := 0DT;
          EXIT(FormatedDateO);
        END;

        TempTimeStringL := FORMAT(HourL) + ':' + FORMAT(MinuteL) + ':' + FORMAT(SecondsL) + ':' + FORMAT(MilisecondsL);
        EVALUATE(TempTimeL, TempTimeStringL);

        IF (DayL = 0) OR (MonthL = 0) OR (YearL = 0) THEN
          FormatedDateO := CREATEDATETIME(DMY2DATE(1,1,1754),TempTimeL)
        ELSE
          FormatedDateO := CREATEDATETIME(DMY2DATE(DayL, MonthL, YearL), TempTimeL);

        EXIT(FormatedDateO);

      END;
    END;

    PROCEDURE CheckDateFormatIsCorrect@1000000001(ValueTextV@1000000000 : Text[30];DateFormatTextV@1000000001 : Text[30];CoulmnTypeV@1000000002 : Text[30];VAR ErrorMessageR@1000000004 : Text[250]);
    VAR
      TrackingImporterMappingL@1000000003 : Record 50322;
    BEGIN
      DateFormatTextV := CONVERTSTR(DateFormatTextV,TextHME050,'    ');
      DateFormatTextV := CONVERTSTR(DateFormatTextV,TextHME051,'  ');
      DateFormatTextV := CONVERTSTR(DateFormatTextV,TextHME052,'  ');
      DateFormatTextV := CONVERTSTR(DateFormatTextV,TextHME053,'  ');
      DateFormatTextV := CONVERTSTR(DateFormatTextV,TextHME054,'  ');
      DateFormatTextV := CONVERTSTR(DateFormatTextV,TextHME055,'  ');
      DateFormatTextV := CONVERTSTR(DateFormatTextV,TextHME056,'  ');
      DateFormatTextV := CONVERTSTR(DateFormatTextV,TextHME057,'  ');

      DateFormatTextV := DELCHR(DateFormatTextV,'=',' ');
      IF DateFormatTextV <> '' THEN
        IF STRPOS(ValueTextV, COPYSTR(DateFormatTextV,1,1)) = 0 THEN
          ErrorMessageR := STRSUBSTNO(TextHME020,CoulmnTypeV,TrackingImporterMappingL.TABLECAPTION);
    END;

    PROCEDURE ConvertTextToDate@1000000003(DateStringV@1000000003 : Text[30]) ConvertedDateO : Date;
    VAR
      DayL@1000000000 : Integer;
      MonthL@1000000001 : Integer;
      YearL@1000000002 : Integer;
    BEGIN
      IF DateStringV = '' THEN BEGIN
        ConvertedDateO := 0D;
        EXIT;
      END;
      IF STRLEN(DateStringV) = 8 THEN
        EVALUATE(ConvertedDateO, DateStringV)
      ELSE BEGIN
        EVALUATE(DayL, COPYSTR(DateStringV,1,2));
        EVALUATE(MonthL, COPYSTR(DateStringV,4,2));

        IF STRLEN(DateStringV) > 8 THEN BEGIN
          IF COPYSTR(DateStringV,9,1) = ' ' THEN
            EVALUATE(YearL, COPYSTR(DateStringV,7,2))
          ELSE
            EVALUATE(YearL, COPYSTR(DateStringV,7,4));
        END ELSE
          EVALUATE(YearL, COPYSTR(DateStringV,7,2));
        ConvertedDateO := DMY2DATE(DayL, MonthL, YearL);
      END;
    END;

    PROCEDURE ConvertTextToTime@1000000013(TimeStringV@1000000000 : Text[30]) ConvertedTimeO : Time;
    BEGIN
      IF NOT EVALUATE(ConvertedTimeO,COPYSTR(TimeStringV,10,5)) THEN
        EVALUATE(ConvertedTimeO,COPYSTR(TimeStringV,12,5))
    END;

    PROCEDURE SetCSVImportSetupCode@1000000014(CSVImportSetupCodeV@1000000000 : Code[10]);
    BEGIN
      //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
      CSVImportSetupCode := CSVImportSetupCodeV;
      //H2120   10.03.15 DMO --------------------------------
    END;

    PROCEDURE SetErrorMsg@1000000016(VAR RecordRefR@1000000001 : RecordRef;ErrorMsgV@1000000000 : Text[1000]);
    VAR
      FieldRefL@1000000002 : FieldRef;
      i@1000000004 : Integer;
    BEGIN
      //H2120   10.03.15 DMO ++++++++++++++++++++++++++++++++
      FOR i := 1 TO 4 DO BEGIN
        FieldRefL := RecordRefR.FIELD(11 + i);  //Error field
        IF FORMAT(FieldRefL.VALUE) = '' THEN BEGIN
          FieldRefL.VALUE(COPYSTR(ErrorMsgV,1,250));
          ErrorMsgV := COPYSTR(ErrorMsgV,251);
        END;
      END;

      CLEARLASTERROR;
      //H2120   10.03.15 DMO --------------------------------
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________
      H1527       19.09.14 DMA       CSV Tracking Importer, OBJECT CREATED
      H1987       21.01.15 DMA       CSV Tracking Importer Improvements for Hermes
      H2120       10.03.15 DMO       New SetCSVImportSetupCode function is added;InitiateProcessCSVFile is modified
    }
    END.
  }
}

