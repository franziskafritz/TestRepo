OBJECT Codeunit 50112 DPD General Management
{
  OBJECT-PROPERTIES
  {
    Date=27.11.14;
    Time=12:00:00;
    Modified=Yes;
    Version List=GOB,HME1769;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UserSetup@1000000000 : Record 91;
      ServiceText@1000000001 : Text[10];
      GOBText001@1000000002 : TextConst 'DEU=Das PackstÅck wiegt mehr als 31,5 kg;ENU=The package weights more than 31,5 kg';
      Barcode128Klartext@1000000003 : Text[50];
      sEDIPath@1000000004 : Text[250];

    PROCEDURE ManualDepotsImport@1000000009();
    VAR
      UserCanceledError@1000000000 : TextConst 'ENU=User cancelled';
      DeleteAllDepotsText@1000000001 : TextConst 'ENU=Before you Import the new Depots all old Depots are deleted.\Do you want to continue?';
      Filename@1000000002 : Text[1024];
      CommonDialogManagement@1000000003 : Codeunit 412;
    BEGIN
      Filename := CommonDialogManagement.OpenFile('Select Depot File','DEPOTS',4,'All Files (*.*)|*.*',0);
      IF Filename <> '' THEN BEGIN
        IF NOT CONFIRM(DeleteAllDepotsText,FALSE) THEN
          ERROR(UserCanceledError);
        DepotsImport(Filename);
      END;
    END;

    PROCEDURE DepotsImport@1000000001(p_Filename@1000000003 : Text[1024]);
    VAR
      DPDDepots@1000000002 : Record 50241;
      FileReader@1000000000 : File;
      TextLine@1000000001 : Text[1024];
      DPDSCANINFOManagement@1000000004 : Codeunit 50274;
      SIIGeneralManagement@1000000005 : Codeunit 50120;
    BEGIN
      DPDDepots.DELETEALL;
      FileReader.TEXTMODE(TRUE);
      FileReader.WRITEMODE(FALSE);
      FileReader.OPEN(p_Filename);
      SIIGeneralManagement.OpenWindow(FileReader.LEN,'Depot Import\');
      REPEAT
        FileReader.READ(TextLine);
        SIIGeneralManagement.UpdateWindow(FileReader.POS);
        IF (TextLine <> '') AND (TextLine[1] <> '#') THEN BEGIN
          DPDDepots.INIT;
          DPDDepots.GeoPostDepotNumber := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.IATALikeCode := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.GroupID := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.Name1 := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.Name2 := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.Address1 := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.Address2 := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.PostCode := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.CityName := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots."ISO-Alpha2CountryCode" := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.Phone := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.Fax := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.Mail := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.WEB := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDDepots.INSERT;
        END;
      UNTIL FileReader.POS = FileReader.LEN;
      SIIGeneralManagement.CloseWindow;
    END;

    PROCEDURE ManualServicesImport@1000000002();
    VAR
      UserCanceledError@1000000001 : TextConst 'ENU=User cancelled';
      DeleteAllServicesText@1000000000 : TextConst 'ENU=Before you Import the new Services all old Services are deleted.\Do you want to continue?';
      Filename@1000000002 : Text[1024];
      CommonDialogManagement@1000000003 : Codeunit 412;
    BEGIN
      Filename := CommonDialogManagement.OpenFile('Select Service File','SERVICE',4,'All Files (*.*)|*.*',0);
      IF Filename <> '' THEN BEGIN
        IF NOT CONFIRM(DeleteAllServicesText,FALSE) THEN
          ERROR(UserCanceledError);
        ServicesImport(Filename);
      END;
    END;

    PROCEDURE ServicesImport@1000000000(p_Filename@1000000000 : Text[1024]);
    VAR
      DPDServices@1000000001 : Record 50240;
      FileReader@1000000002 : File;
      SIIGeneralManagement@1000000003 : Codeunit 50120;
      TextLine@1000000004 : Text[1024];
      DPDSCANINFOManagement@1000000005 : Codeunit 50274;
    BEGIN
      DPDServices.DELETEALL;
      FileReader.TEXTMODE(TRUE);
      FileReader.WRITEMODE(FALSE);
      FileReader.OPEN(p_Filename);
      SIIGeneralManagement.OpenWindow(FileReader.LEN,'Services Import\');
      REPEAT
        FileReader.READ(TextLine);
        SIIGeneralManagement.UpdateWindow(FileReader.POS);
        IF (TextLine <> '') AND (TextLine[1] <> '#') THEN BEGIN
          DPDServices.INIT;
          DPDServices.ServiceCode := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDServices.ServiceText := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDServices.ServiceMark := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDServices.ServiceElements := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDServices.INSERT;
        END;
      UNTIL FileReader.POS = FileReader.LEN;
      SIIGeneralManagement.CloseWindow;
    END;

    PROCEDURE ManualRoutesImport@1000000004();
    VAR
      UserCanceledError@1000000001 : TextConst 'ENU=User cancelled';
      DeleteAllRoutesText@1000000000 : TextConst 'ENU=Before you Import the new Routes all old Routes are deleted.\Do you want to continue?';
      Filename@1000000002 : Text[1024];
      CommonDialogManagement@1000000003 : Codeunit 412;
    BEGIN
      Filename := CommonDialogManagement.OpenFile('Select Routes File','ROUTES',4,'All Files (*.*)|*.*',0);
      IF Filename <> '' THEN BEGIN
        IF NOT CONFIRM(DeleteAllRoutesText,FALSE) THEN
          ERROR(UserCanceledError);
        RoutesImport(Filename);
      END;
    END;

    PROCEDURE RoutesImport@1000000003(p_Filename@1000000000 : Text[1024]);
    VAR
      DPDRoutes@1000000001 : Record 50242;
      FileReader@1000000002 : File;
      SIIGeneralManagement@1000000003 : Codeunit 50120;
      TextLine@1000000004 : Text[1024];
      DPDSCANINFOManagement@1000000005 : Codeunit 50274;
      GOBText001@1000000006 : TextConst 'DEU="Bitte tragen Sie die neuste DPD Routen DB Version in das DPD Setup ein. ";ENU=Please insert the latest DPD routes db version into the DPD setup.';
    BEGIN
      DPDRoutes.DELETEALL;
      FileReader.TEXTMODE(TRUE);
      FileReader.WRITEMODE(FALSE);
      FileReader.OPEN(p_Filename);
      SIIGeneralManagement.OpenWindow(FileReader.LEN,'Routes Import\');
      REPEAT
        FileReader.READ(TextLine);
        SIIGeneralManagement.UpdateWindow(FileReader.POS);
        IF (TextLine <> '') AND (TextLine[1] <> '#') THEN BEGIN
          DPDRoutes.INIT;
          DPDRoutes."Entry No." := DPDRoutes.GetNextEntryNo;
          DPDRoutes.DestinationCountry := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes.BeginPostCode := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes.EndPostCode := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes.ServiceCodes := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes.RoutingPlaces := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes.SendingDate := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes."O-Sort" := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes."D-Depot" := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes.GroupingPriority := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes."D-Sort" := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes.BarcodeID := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDRoutes.INSERT;
        END;
      UNTIL FileReader.POS = FileReader.LEN;
      SIIGeneralManagement.CloseWindow;
      COMMIT;

      //Open DPD Setup
      FORM.RUN(FORM::"DPD Setup");
      MESSAGE(GOBText001);
    END;

    PROCEDURE ManualCountryImport@1000000006();
    VAR
      UserCanceledError@1000000000 : TextConst 'ENU=User cancelled';
      DeleteAllCountriesText@1000000001 : TextConst 'ENU=Before you Import the new Countries all old Countries are deleted.\Do you want to continue?';
      Filename@1000000002 : Text[1024];
      CommonDialogManagement@1000000003 : Codeunit 412;
    BEGIN
      Filename := CommonDialogManagement.OpenFile('Select Country File','COUNTRY',4,'All Files (*.*)|*.*',0);
      IF Filename <> '' THEN BEGIN
        IF NOT CONFIRM(DeleteAllCountriesText,FALSE) THEN
          ERROR(UserCanceledError);
        CountryImport(Filename);
      END;
    END;

    PROCEDURE CountryImport@1000000005(p_Filename@1000000003 : Text[1024]);
    VAR
      DPDCountries@1000000002 : Record 50243;
      FileReader@1000000000 : File;
      TextLine@1000000001 : Text[1024];
      DPDSCANINFOManagement@1000000004 : Codeunit 50274;
      SIIGeneralManagement@1000000005 : Codeunit 50120;
    BEGIN
      DPDCountries.DELETEALL;
      FileReader.TEXTMODE(TRUE);
      FileReader.WRITEMODE(FALSE);
      FileReader.OPEN(p_Filename);
      SIIGeneralManagement.OpenWindow(FileReader.LEN,'Country Import\');
      REPEAT
        FileReader.READ(TextLine);
        SIIGeneralManagement.UpdateWindow(FileReader.POS);
        IF (TextLine <> '') AND (TextLine[1] <> '#') THEN BEGIN
          DPDCountries.INIT;
          DPDCountries."ISO-NumCountryCode" := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDCountries."ISO-Alpha2CountryCode" := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDCountries."ISO-Alpha3CountryCode" := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDCountries.DestinationLanguages := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDCountries.FlagPostCodeNo := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDCountries.INSERT;
        END;
      UNTIL FileReader.POS = FileReader.LEN;
      SIIGeneralManagement.CloseWindow;
    END;

    PROCEDURE ManualServicesDescDEImport@1000000011();
    VAR
      UserCanceledError@1000000001 : TextConst 'ENU=User cancelled';
      DeleteAllServicesText@1000000000 : TextConst 'ENU=Before you Import the new Services all old Services are deleted.\Do you want to continue?';
      Filename@1000000002 : Text[1024];
      CommonDialogManagement@1000000003 : Codeunit 412;
    BEGIN
      Filename := CommonDialogManagement.OpenFile('Select Serv. Desc. File. DE File','SERVICE.DE',4,'All Files (*.*)|*.*',0);
      IF Filename <> '' THEN BEGIN
        ServicesDescDEImport(Filename);
      END;
    END;

    PROCEDURE ServicesDescDEImport@1000000010(p_Filename@1000000000 : Text[1024]);
    VAR
      DPDServices@1000000001 : Record 50240;
      FileReader@1000000002 : File;
      SIIGeneralManagement@1000000003 : Codeunit 50120;
      TextLine@1000000004 : Text[1024];
      DPDSCANINFOManagement@1000000005 : Codeunit 50274;
    BEGIN
      FileReader.TEXTMODE(TRUE);
      FileReader.WRITEMODE(FALSE);
      FileReader.OPEN(p_Filename);
      SIIGeneralManagement.OpenWindow(FileReader.LEN,'Serv. Desc. DE Import\');
      REPEAT
        FileReader.READ(TextLine);
        SIIGeneralManagement.UpdateWindow(FileReader.POS);
        IF (TextLine <> '') AND (TextLine[1] <> '#') THEN BEGIN
          DPDServices.GET(UPPERCASE(DPDSCANINFOManagement.GetNextLineValue(TextLine,'|')));
          DPDServices."Description GER" := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDServices.MODIFY;
        END;
      UNTIL FileReader.POS = FileReader.LEN;
      SIIGeneralManagement.CloseWindow;
    END;

    PROCEDURE ManualServicesDescENImport@1000000023();
    VAR
      UserCanceledError@1000000001 : TextConst 'ENU=User cancelled';
      DeleteAllServicesText@1000000000 : TextConst 'ENU=Before you Import the new Services all old Services are deleted.\Do you want to continue?';
      Filename@1000000002 : Text[1024];
      CommonDialogManagement@1000000003 : Codeunit 412;
    BEGIN
      Filename := CommonDialogManagement.OpenFile('Select Serv. Desc. File. N File','SERVICE.EN',4,'All Files (*.*)|*.*',0);
      IF Filename <> '' THEN BEGIN
        ServicesDescENImport(Filename);
      END;
    END;

    PROCEDURE ServicesDescENImport@1000000022(p_Filename@1000000000 : Text[1024]);
    VAR
      DPDServices@1000000001 : Record 50240;
      FileReader@1000000002 : File;
      SIIGeneralManagement@1000000003 : Codeunit 50120;
      TextLine@1000000004 : Text[1024];
      DPDSCANINFOManagement@1000000005 : Codeunit 50274;
    BEGIN
      FileReader.TEXTMODE(TRUE);
      FileReader.WRITEMODE(FALSE);
      FileReader.OPEN(p_Filename);
      SIIGeneralManagement.OpenWindow(FileReader.LEN,'Serv. Desc. EN Import\');
      REPEAT
        FileReader.READ(TextLine);
        SIIGeneralManagement.UpdateWindow(FileReader.POS);
        IF (TextLine <> '') AND (TextLine[1] <> '#') THEN BEGIN
          DPDServices.GET(DPDSCANINFOManagement.GetNextLineValue(TextLine,'|'));
          DPDServices."Description ENU" := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDServices.MODIFY;
        END;
      UNTIL FileReader.POS = FileReader.LEN;
      SIIGeneralManagement.CloseWindow;
    END;

    PROCEDURE ManualPickupCutoffImport@1000000015();
    VAR
      UserCanceledError@1000000001 : TextConst 'ENU=User cancelled';
      DeleteAllPickupCutoffText@1000000000 : TextConst 'ENU=Before you Import the new Pickup Cutoff data all old data are deleted.\Do you want to continue?';
      Filename@1000000002 : Text[1024];
      CommonDialogManagement@1000000003 : Codeunit 412;
    BEGIN
      Filename := CommonDialogManagement.OpenFile('Select Pickup Cutoff File','Pickup Cutoff',4,'All Files (*.*)|*.*',0);
      IF Filename <> '' THEN BEGIN
        IF NOT CONFIRM(DeleteAllPickupCutoffText,FALSE) THEN
          ERROR(UserCanceledError);
        PickupCutoffImport(Filename);
      END;
    END;

    PROCEDURE PickupCutoffImport@1000000020(p_Filename@1000000000 : Text[1024]);
    VAR
      DPDPickupCutoff@1000000001 : Record 50234;
      FileReader@1000000002 : File;
      SIIGeneralManagement@1000000003 : Codeunit 50120;
      TextLine@1000000004 : Text[1024];
      DPDSCANINFOManagement@1000000005 : Codeunit 50274;
    BEGIN

      DPDPickupCutoff.DELETEALL;
      FileReader.TEXTMODE(TRUE);
      FileReader.WRITEMODE(FALSE);
      FileReader.OPEN(p_Filename);
      SIIGeneralManagement.OpenWindow(FileReader.LEN,'Pickup Cutoff Import\');
      REPEAT
        FileReader.READ(TextLine);
        SIIGeneralManagement.UpdateWindow(FileReader.POS);
        IF (TextLine <> '') AND (TextLine[1] <> '#') THEN BEGIN
          DPDPickupCutoff.INIT;
          DPDPickupCutoff."Entry No." := DPDPickupCutoff.GetNextEntryNo;
          DPDPickupCutoff.PickUpCountry := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDPickupCutoff.PickupPostCode := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDPickupCutoff.PickupCity := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDPickupCutoff.SendingDepot := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDPickupCutoff.AvisCutoffTime := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDPickupCutoff.PickupCutoffTime := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDPickupCutoff.AvisCutoffTimeClassic := DPDSCANINFOManagement.GetNextLineValue(TextLine,'|');
          DPDPickupCutoff.INSERT;
        END;
      UNTIL FileReader.POS = FileReader.LEN;
      SIIGeneralManagement.CloseWindow;
      COMMIT;
    END;

    PROCEDURE FillDPDLabelWithData@1000000007(pPurchHeader@1000000016 : Record 38) : Text[1024];
    VAR
      ","@1000000000 : Automation "{B2457449-CF57-472E-BA13-C6CEC7BBB7C0} 7.5:{68577E76-D698-4F28-8845-3AD2A8006F87}:'TFORMer 7.5 Runtime Type Library'.ITFORMer";
      PrintJob@1000000001 : Automation "{B2457449-CF57-472E-BA13-C6CEC7BBB7C0} 7.5:{DA4D2DAE-EA27-4AEB-9AC9-BB21AA87AF65}:'TFORMer 7.5 Runtime Type Library'.IJob";
      PrintJobData@1000000002 : Automation "{B2457449-CF57-472E-BA13-C6CEC7BBB7C0} 7.5:{4B2238FB-7965-47C4-8371-61A8B664FB38}:'TFORMer 7.5 Runtime Type Library'.IJobDataRecordSet";
      PurchLine@1000000011 : Record 39;
      FPCGeneralSetup@1000000044 : Record 50055;
      DPDSetup@1000000005 : Record 50221;
      DPDDepots@1000000006 : Record 50241;
      DPDDepots2@1000000053 : Record 50241;
      DPDRoutes@1000000014 : Code[10];
      DPDRoutesRec@1000000028 : Record 50242;
      DPDPickupCutoff@1000000052 : Record 50234;
      TFORMer@1000000003 : Automation "{B2457449-CF57-472E-BA13-C6CEC7BBB7C0} 7.5:{909444B6-E724-49CD-8711-E78E129A9FAD}:'TFORMer 7.5 Runtime Type Library'.tformer";
      PurchRcptHeader@1000000007 : Record 120;
      PurchInvHeader@1000000008 : Record 122;
      GenLedSetup@1000000009 : Record 98;
      DPDLabelMgt@1000000010 : Codeunit 50269;
      DPDGeneralMgt@1000000012 : Codeunit 50112;
      NumberOfRecord@1000000013 : Decimal;
      CompanyInfo@1000000015 : Record 79;
      Location@1000000045 : Record 14;
      Item@1000000004 : Record 27;
      Cust@1000000046 : Record 18;
      ParcelStatusHistory@1000000054 : Record 80013;
      LabelCounter@1000000017 : Integer;
      MailIT@1000000023 : OCX "{C8C4804C-89BA-4291-AB58-4C6050B65175}:'ExpandIT.MailIT2'";
      ClientFso@1000000024 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      ClientUtil@1000000025 : Automation "{1639594D-2135-4248-BE9B-FB55210F8AD8} 1.0:{D7CD856D-3889-4F19-BBBA-7608CF34EFB6}:'ExpandIT Dynamics Role Tailored Client Utility'.Utility";
      DivUtil@1000000027 : Automation "{2CD8D481-009C-4685-98EA-BC16452327B2} 1.0:{F1BBE10B-6E48-41B0-9EF6-F428C7A48655}:'Dynovus_SHA1Encryption'.SHA1EncryptAutomation";
      DocName@1000000022 : Text[250];
      ClientTempFolder@1000000021 : Text[250];
      ClientPdfFileName@1000000020 : Text[250];
      OldDefaultPrinter@1000000019 : Text[250];
      DefaultPrinterChanged@1000000018 : Boolean;
      JobID@1000000026 : Text[50];
      BarcodeText128@1000000029 : Text[30];
      Teil1@1000000030 : Text[4];
      Teil2@1000000031 : Text[3];
      Teil3@1000000032 : Text[4];
      Teil4@1000000033 : Text[4];
      Teil5@1000000034 : Text[4];
      Teil6@1000000035 : Text[2];
      Teil7@1000000036 : Text[3];
      Teil8@1000000037 : Text[3];
      Teil9@1000000039 : Text[1];
      TrackingNo@1000000038 : Text[30];
      TextGOB001@1000000040 : TextConst 'DEU=Depot;ENU=Depot';
      TextGOB002@1000000042 : TextConst 'DEU=Retourenlager;ENU=Return Location';
      TextGOB003@1000000043 : TextConst 'DEU=!  RELABEL  !;ENU=!  RELABEL  !';
      IsReturnLabel@1000000041 : Boolean;
      ServiceCode@1000000047 : Text[14];
      RouteCode@1000000048 : Text[170];
      ParcelCounter@1000000049 : Integer;
      NumberOfParcels@1000000050 : Integer;
      NumberOfParcelsWeight@1000000051 : Integer;
      "****HME***********************"@1000000055 : Integer;
      CompanyInfoL@1000000056 : Record 79;
      CountryNameL@1000000057 : Text[30];
      LanguageCodeL@1000000058 : Code[10];
      SalesHdrL@1000000059 : Record 36;
    BEGIN
      DPDSetup.GET;
      UserSetup.GET(USERID);
      FPCGeneralSetup.GET;

      CLEAR(TFORMer);
      CLEAR(PrintJob);
      CREATE(TFORMer);
      TFORMer.License('Home24 GmbH DE-10405',5,1,'5C030D7F6DE670D7F39826E683A0E717');
      LabelCounter := 0;

      CREATE(ClientFso,TRUE,TRUE);
      CREATE(ClientUtil,TRUE,TRUE);
      CREATE(DivUtil,TRUE,TRUE);
      //H1769 06.11.14 gob-rhg +++++++++++++++++++++++++++++
      //JobID := MailIT.CreateGUID();
      JobID := CREATEGUID;
      //H1769 06.11.14 gob-rhg -----------------------------

      // Temp folder for DPD-Label.pdf
      ClientTempFolder := ClientUtil.GetTempPath();
      IF ClientTempFolder = '' THEN
        ERROR('Unable to create the path of the temporary folder.');
      ClientTempFolder := ClientTempFolder + 'ExpMail';
      IF NOT ClientFso.FolderExists(ClientTempFolder) THEN
        ClientFso.CreateFolder(ClientTempFolder);
      ClientTempFolder := ClientTempFolder + '\' + JobID;
      IF NOT ClientFso.FolderExists(ClientTempFolder) THEN
        ClientFso.CreateFolder(ClientTempFolder);

      DocName := 'DPD_Labels_' + pPurchHeader."No.";
      ClientPdfFileName := ClientTempFolder + '\' + DocName + '.pdf';
      //S/P1272
      IF sEDIPath <> '' THEN
        ClientPdfFileName := sEDIPath;
      //E/P1272

      IF ClientFso.FileExists(ClientPdfFileName) THEN
        ClientFso.DeleteFile(ClientPdfFileName);
      //H1769 06.11.14 gob-rhg +++++++++++++++++++++++++++++
      {
      MailIT.PDFParameter('Output',ClientPdfFileName);
      MailIT.PDFParameter('ShowPDF','no');
      MailIT.PDFParameter('Title',DocName);
      MailIT.PDFParameter('Author',USERID);
      MailIT.PDFPreparePrinter();


      IF NOT DefaultPrinterChanged THEN BEGIN
        IF OldDefaultPrinter = '' THEN
          OldDefaultPrinter := MailIT.GetDefaultPrinter();
        IF OldDefaultPrinter <> UserSetup."PDF Creator" THEN BEGIN
          MailIT.SetDefaultPrinter(UserSetup."PDF Creator");
          DefaultPrinterChanged := TRUE;
        END;
      END;
      }
      //H1769 06.11.14 gob-rhg -----------------------------


      PurchLine.SETRANGE("Document No.",pPurchHeader."No.");
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      IF PurchLine.FIND('-') THEN BEGIN
        //H1769 06.11.14 gob-rhg +++++++++++++++++++++++++++++
        PrintJob := TFORMer.CreateJob();
        PrintJob.RepositoryName := DPDSetup."DPD Label Template Path";
        PrintJob.OutputName := ClientPdfFileName;
        PrintJob.PrinterType := 6;  //Output to Printer 6 = pdf File
        //H1769 06.11.14 gob-rhg -----------------------------


        PrintJobData := PrintJob.NewJobDataRecordSet();
        REPEAT
          Item.GET(PurchLine."No.");

          Item.CALCFIELDS("Parcels Number");
          IF Item."Parcels Number" = 0 THEN
            NumberOfParcels := 1
          ELSE
            NumberOfParcels := Item."Parcels Number";

          NumberOfParcelsWeight := NumberOfParcels;
          NumberOfParcels := NumberOfParcels * PurchLine.Quantity;

          ParcelCounter := 0;
          REPEAT
            ParcelCounter += 1;
            //New page
            PrintJobData.AddNewRecord();
            //Get Consignee
            Cust.GET(pPurchHeader."Sell-to Customer No.");
            //Int. captions for label
            IF pPurchHeader."Ship-to Country/Region Code" IN ['DE',''] THEN BEGIN
              PrintJobData.SetDataField('Caption1','EmpfÑnger');
              PrintJobData.SetDataField('Caption2','Absender');
              PrintJobData.SetDataField('Caption3','Lieferung');
              PrintJobData.SetDataField('Caption4','Datum');
              PrintJobData.SetDataField('Caption5','Auftragsnr.');
              // S/P1277
              PrintJobData.SetDataField('Caption5a','Bestellnr.');
              // E/P1277
              PrintJobData.SetDataField('Caption6','Gewicht (kg)');
              PrintJobData.SetDataField('Caption7','NN-Betrag');
              PrintJobData.SetDataField('Caption8','Inkasso-Art');
              IF Cust."Phone No." = '' THEN
                PrintJobData.SetDataField('Caption9','')
              ELSE
              PrintJobData.SetDataField('Caption9','Tel.:');

              PrintJobData.SetDataField('Caption10','Paket');
              PrintJobData.SetDataField('Caption11','Paket(e)');
              PrintJobData.SetDataField('Caption12','Home24 Art. Nr.');
              PrintJobData.SetDataField('Caption13','Herst. Art. Nr.');
            END ELSE BEGIN
              PrintJobData.SetDataField('Caption1','Consignee');
              PrintJobData.SetDataField('Caption2','Sender');
              PrintJobData.SetDataField('Caption3','Shipment');
              PrintJobData.SetDataField('Caption4','Date');
              PrintJobData.SetDataField('Caption5','Order No.');
              // S/P1277
              PrintJobData.SetDataField('Caption5a','Purch. Order No.');
              // E/P1277
              PrintJobData.SetDataField('Caption6','Weight (kg)');
              PrintJobData.SetDataField('Caption7','Currency');
              PrintJobData.SetDataField('Caption8','Pmt. Method');
              IF Cust."Phone No." = '' THEN
                PrintJobData.SetDataField('Caption9','')
              ELSE
                PrintJobData.SetDataField('Caption9','Phone:');

              PrintJobData.SetDataField('Caption10','Parcel');
              PrintJobData.SetDataField('Caption11','Parcel(s)');
              PrintJobData.SetDataField('Caption12','Home24 Item No.');
              PrintJobData.SetDataField('Caption13','Vendor Item No.');
            END;

            //Consignee
            PrintJobData.SetDataField('Empfaenger_Firma',pPurchHeader."Ship-to Name");
            // S/P1277
            PrintJobData.SetDataField('Empfaenger_Name2',pPurchHeader."Ship-to Name 2");
            // E/P1277
            PrintJobData.SetDataField('Empfaenger_Abteilung','');
            PrintJobData.SetDataField('Empfaenger_Adresse',pPurchHeader."Ship-to Address");
            PrintJobData.SetDataField('Empfaenger_Adresse2',pPurchHeader."Ship-to Address 2");
            PrintJobData.SetDataField('Empfaenger_LKZ',pPurchHeader."Ship-to Country/Region Code");
            PrintJobData.SetDataField('Empfaenger_PLZ',pPurchHeader."Ship-to Post Code");
            PrintJobData.SetDataField('Empfaenger_Stadt',pPurchHeader."Ship-to City");
            PrintJobData.SetDataField('Empfaenger_Telefon',Cust."Phone No.");

            //Sender
            //H1682 17.11.14 EHN +++++++++++++++++++++++++++++++++++++++++++++++++++
            CompanyInfo.GET();
            PrintJobData.SetDataField('Absender_Name',CompanyInfo."Dropship Sender Name");
            PrintJobData.SetDataField('Absender_Adresse',CompanyInfo."Dropship Sender Address");
            PrintJobData.SetDataField('Absender_Adresse2',CompanyInfo."Dropship Sender Postcode"+' '+CompanyInfo."Dropship Sender City")
      ;
            IF pPurchHeader."Language Code" = '' THEN
              IF SalesHdrL.GET(SalesHdrL."Document Type"::Order,PurchLine."Sales Order No.") THEN
                LanguageCodeL := SalesHdrL."Language Code";
            CountryNameL := CompanyInfo.GetCountryName(CompanyInfo."Dropship Sender Country/Region",LanguageCodeL);
            PrintJobData.SetDataField('Absender_LKZ',CountryNameL);
            //H1682 17.11.14 EHN ---------------------------------------------------

            //Shipping Depot
            // S/P1277
            //S/P1272
            //IF pPurchHeader."Buy-from Country/Region Code" = '' THEN
            //  DPDPickupCutoff.SETRANGE(PickUpCountry,'DE')
            //ELSE
            //E/P1272
              //DPDPickupCutoff.SETRANGE(PickUpCountry,pPurchHeader."Buy-from Country/Region Code");
            //DPDPickupCutoff.SETRANGE(PickupPostCode,pPurchHeader."Buy-from Post Code");
            //IF DPDPickupCutoff.FINDFIRST THEN
            //DPDDepots.GET(DPDPickupCutoff.SendingDepot);
            //PrintJobData.SetDataField('DPDVersanddepot_Name',TextGOB001 + ' ' + DPDDepots.GeoPostDepotNumber);
            PrintJobData.SetDataField('DPDVersanddepot_Name',TextGOB001 + ' ' + DPDSetup."Dispatch Depot");
            DPDDepots2.GET(DPDSetup."Dispatch Depot");
            // E//P1277
            PrintJobData.SetDataField('DPDVersanddepot_NameZwei',DPDDepots2.Name1);
            PrintJobData.SetDataField('DPDVersanddepot_Adresse',DPDDepots2.Address1);
            PrintJobData.SetDataField('DPDVersanddepot_PLZ',DPDDepots2.PostCode);
            PrintJobData.SetDataField('DPDVersanddepot_Stadt',DPDDepots2.CityName);
            PrintJobData.SetDataField('DPDVersanddepot_Land',DPDDepots2."ISO-Alpha2CountryCode");
            PrintJobData.SetDataField('DPDVersanddepot_Tel',DPDDepots2.Phone);

            PrintJobData.SetDataField('Home24_Item_No',PurchLine."No.");
            PrintJobData.SetDataField('Vendor_Item_No',Item."Vendor Item No.");
            PrintJobData.SetDataField('Auftragsnummer',PurchLine."Sales Order No.");
            // S/P1277
            PrintJobData.SetDataField('Bestellnr',PurchLine."Document No.");
            // E/P1277
            PrintJobData.SetDataField('Gewicht',FORMAT(DPDGeneralMgt.TotalWeight(PurchLine)));
            PrintJobData.SetDataField('NachnahmeBetrag','');
            IF pPurchHeader."Currency Code" <> '' THEN
              PrintJobData.SetDataField('NN_Betrag_Waehrung',pPurchHeader."Currency Code")
            ELSE
              GenLedSetup.GET;
              PrintJobData.SetDataField('NN_Betrag_Waehrung',GenLedSetup."LCY Code");
            IF pPurchHeader."Payment Method Code" <> '' THEN
              PrintJobData.SetDataField('Inkasso_Art',pPurchHeader."Payment Method Code")
            ELSE
              PrintJobData.SetDataField('Inkasso_Art','');




            //Barcode
            CLEAR(BarcodeText128);
            BarcodeText128 := DPDLabelMgt.CreateDPDBarcode128(PurchLine,Item,ParcelCounter);
            PrintJobData.SetDataField('BCPartA', BarcodeText128);
            BarcodeText128 := DELCHR(BarcodeText128,'=','%');
            TrackingNo := BarcodeText128;
            BarcodeText128 := BarcodeText128 + DPDLabelMgt.GetCheckDigit(BarcodeText128);
            //Tracking Nr.
            //TrackingNo := COPYSTR(TrackingNo,8,14);
            //TrackingNo := TrackingNo + DPDLabelMgt.GetCheckDigit(TrackingNo);
            //PrintJobData.SetDataField('TrackingNr',TrackingNo);


            IsReturnLabel := FALSE;
            DPDGeneralMgt.GetServiceText(Item,IsReturnLabel,ServiceCode);
            PrintJobData.SetDataField('ServiceCode',ServiceCode);
            PrintJobData.SetDataField('ServiceText',DPDGeneralMgt.GetServiceText(Item,IsReturnLabel,ServiceCode));

            //Tracking Nr.
            TrackingNo := COPYSTR(TrackingNo,8,14);
            TrackingNo := TrackingNo + DPDLabelMgt.GetCheckDigit(TrackingNo);
            PrintJobData.SetDataField('TrackingNr',TrackingNo);


            Teil1 := COPYSTR(BarcodeText128,1,4);
            Teil2 := COPYSTR(BarcodeText128,5,3);
            Teil3 := COPYSTR(BarcodeText128,8,4);
            Teil4 := COPYSTR(BarcodeText128,12,4);
            Teil5 := COPYSTR(BarcodeText128,16,4);
            Teil6 := COPYSTR(BarcodeText128,20,2);
            Teil7 := COPYSTR(BarcodeText128,22,3);
            Teil8 := COPYSTR(BarcodeText128,25,3);
            Teil9 := COPYSTR(BarcodeText128,28,1);
            Barcode128Klartext := Teil1 + ' ' + Teil2 + ' ' + Teil3 + ' ' + Teil4 + ' ' + Teil5 + ' ' +
                                  Teil6 + ' ' + Teil7 + ' ' +Teil8 + ' ' + Teil9;

            PrintJobData.SetDataField('BarcodeKlartext',Barcode128Klartext);

            //DPD Route
            DPDLabelMgt.GetRoute(pPurchHeader,DPDRoutesRec);

            DPDDepots.GET(DPDRoutesRec."D-Depot");
            IF (DPDRoutesRec."D-Depot" <> '') AND (DPDDepots.IATALikeCode <>'') AND (DPDRoutesRec.GroupingPriority <>'')  THEN
              PrintJobData.SetDataField('RouteCode',(DPDRoutesRec.DestinationCountry + '-' + DPDRoutesRec."D-Depot" + '-' +
              DPDDepots.IATALikeCode + DPDRoutesRec.GroupingPriority))
            ELSE
              PrintJobData.SetDataField('RouteCode',(DPDRoutesRec.DestinationCountry + '-' + DPDRoutesRec."D-Depot"));
              PrintJobData.SetDataField('AusgangsroutenSort',DPDRoutesRec."O-Sort");
              PrintJobData.SetDataField('RoutenDBVersion',DPDRoutesRec."D-Sort");

            //Label Origin
            PrintJobData.SetDataField('DPDRouteVersion',DPDSetup."DPD Routes DB Version");
            PrintJobData.SetDataField('LabelSoftware',DPDSetup."Label Software");
            //Origin code not needed
            //PrintJobData.SetDataField('OriginCode','');

          UNTIL ParcelCounter = NumberOfParcels;
        UNTIL PurchLine.NEXT = 0;

      PrintJob.PrintForm();

      END;
      //H1769 06.11.14 gob-rhg +++++++++++++++++++++++++++++
      //IF DefaultPrinterChanged THEN
      //  MailIT.SetDefaultPrinter(OldDefaultPrinter);
      //H1769 06.11.14 gob-rhg -----------------------------
      EXIT(ClientPdfFileName);
    END;

    PROCEDURE TotalWeight@1000000012(pPurchLine@1000000000 : Record 39) : Decimal;
    VAR
      rItem@1000000002 : Record 27;
      TotalWeight@1000000001 : Decimal;
      iNumberOfParcels@1000000003 : Integer;
    BEGIN
      IF pPurchLine.Type <> pPurchLine.Type::Item THEN
        EXIT(0);

      rItem.GET(pPurchLine."No.");

      rItem.CALCFIELDS("Parcels Number");
      IF rItem."Parcels Number" = 0 THEN
        iNumberOfParcels := 1
      ELSE
        iNumberOfParcels := rItem."Parcels Number";

      TotalWeight := rItem."Gross Weight" / iNumberOfParcels;
      IF TotalWeight = 0 THEN
        TotalWeight := 0.1;

      EXIT(TotalWeight);

      {
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",pPurchHeader);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      IF PurchaseLine.FIND('-') THEN BEGIN
        REPEAT
          IF Item.GET(PurchaseLine."No.") THEN BEGIN
            TotalWeight := TotalWeight + (Item."Gross Weight" * PurchaseLine.Quantity);
            IF TotalWeight = 0 THEN
              TotalWeight := 0.1;
          END;
        UNTIL PurchaseLine.NEXT = 0;
      END;

      EXIT(TotalWeight);
      }
    END;

    PROCEDURE GetServiceText@1000000014(p_Item@1000000001 : Record 27;p_IsReturn@1000000002 : Boolean;VAR p_ServiceCode@1000000004 : Text[14]) : Text[30];
    VAR
      DPDSetup@1000000000 : Record 50221;
      DPDServices@1000000003 : Record 50240;
      iNumberOfParcels@1000000005 : Integer;
      TotalWeight@1000000006 : Decimal;
    BEGIN
      DPDSetup.GET;

      //S,gob-Fuchs,17.09.14,P1277
      p_Item.CALCFIELDS("Parcels Number");
      IF p_Item."Parcels Number" = 0 THEN
        iNumberOfParcels := 1
      ELSE
        iNumberOfParcels := p_Item."Parcels Number";
      TotalWeight := p_Item."Gross Weight" / iNumberOfParcels;
      IF TotalWeight = 0 THEN
        TotalWeight := 0.1;
      //E,gob-Fuchs,17.09.14,P1277

      IF p_IsReturn THEN BEGIN
        DPDServices.GET(DPDSetup."Return Service Code");
        ServiceText := DPDServices.ServiceText;
        p_ServiceCode := DPDSetup."Return Service Code";
      END ELSE BEGIN
        IF TotalWeight > DPDSetup."Max Weight per Parcel" THEN //P1277
        ERROR(GOBText001)
      ELSE BEGIN
          IF TotalWeight <= DPDSetup."Max. Weight Small Parcel" THEN BEGIN //P1277
            DPDServices.GET(DPDSetup."Service Code Small Parcel");
            ServiceText := DPDServices.ServiceText;
            p_ServiceCode := DPDSetup."Service Code Small Parcel";
          END ELSE BEGIN
            DPDServices.GET(DPDSetup."Service Code Medium Parcel");
            ServiceText := DPDServices.ServiceText;
            p_ServiceCode := DPDSetup."Service Code Medium Parcel";
          END;
        END;
      END;

      EXIT(ServiceText);
    END;

    PROCEDURE GetDPDDepot@1000000016(pPurchHeader@1000000000 : Record 38;ServiceCode@1000000003 : Code[10]) : Code[10];
    VAR
      rDPDPickupCutoff@1000000001 : Record 50234;
    BEGIN
      //S/P1272
      IF pPurchHeader."Buy-from Country/Region Code" = '' THEN
        rDPDPickupCutoff.SETRANGE(PickUpCountry,'DE')
      ELSE
      //E/P1272
        rDPDPickupCutoff.SETRANGE(PickUpCountry,pPurchHeader."Buy-from Country/Region Code");
      rDPDPickupCutoff.SETRANGE(PickupPostCode,pPurchHeader."Buy-from Post Code");
      IF rDPDPickupCutoff.FINDFIRST THEN
        EXIT(rDPDPickupCutoff.SendingDepot)
      ELSE
        EXIT('');
    END;

    PROCEDURE SetEDIPath@1000000008(pEDIPath@1000000000 : Text[250]);
    BEGIN
      //P1272
      sEDIPath := pEDIPath;
    END;

    BEGIN
    {
      +--------------------------------------------------+
      |                   ∏  Copyright                   |
      |       GOB Software & Systeme GmbH & Co. KG       |
      +--------------------------------------------------+
      |                      home24                      |
      +--------------------------------------------------+

      Project   Date        Consultant  Comment
      ------------------------------------------------------
      P1243     25.04.14    gob-rste    Object Created
      P1243     29.04.14    gob-kmi     Funktion "FillDPDLabelWithData"
      P1243     25.07.14    gob-rhg     Direct TFORMer license transfer created
      P1243     31.07.14    gob-rhg     New Function "GetDPDDepot" for IFTMIN
      P1243     01.08.14    gob-rhg     Open DPD Setup after DPD Routes import in Function "RoutesImport"
      P1243     07.08.14    gob-rhg     Changed Weight calculation to use it for IFTMIN and DPD label generation
      P1243     12.08.14    gob-rhg     Added import function for pickup cutoff table:
                                        "ManualPickupCutoffImport"
                                        "PickupCutoffImport"
      P1272     08.09.14    gob-dst     Neue Funktion "SetEDIPath" fÅr EDI ORDERS mit DPD Label
      P1277     08.09.14    gob-kmi     - Das Versanddepot ist auf das statische Depot (0110) geÑndert
                                        - PO No. und Ship-to-Name 2 werden im Label angedruckt
      P1277     15.09.14    gob-rhg     - Get current tracking number if label is printed for the second time
      P1277     17.09.14    gob-Fuchs   Anpassungen GetServiceText auf TotalWeight Berechnung
      H1769     06.11.14    gob-rhg     Change DPD Label from A4 to A6 and use TFormer instead of the MailIT components
      H1682     17.11.14    EHN         Change Parcel Retour Address to WHSLF
    }
    END.
  }
}

