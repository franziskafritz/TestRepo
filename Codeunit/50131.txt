OBJECT Codeunit 50131 Client Monitor Mgt. HME
{
  OBJECT-PROPERTIES
  {
    Date=31.05.13;
    Time=14:54:45;
    Version List=DEBUGW13.10.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempTableInformation@1000 : TEMPORARY Record 2000000028;

    PROCEDURE OpenForm@7(VAR ClientMonitor@1000 : Record 50162);
    VAR
      RealClientMonitor@1001 : Record 2000000024;
    BEGIN
      IF RealClientMonitor.FIND('-') THEN BEGIN
        Update;
        ClientMonitor.SetConnectionFilter;
      END ELSE
        ClientMonitor.SetConditionalConnectionFilter;
    END;

    PROCEDURE Update@3();
    VAR
      RealClientMonitor@1002 : Record 2000000024;
      ClientMonitor@1001 : Record 50162;
      Session@1006 : Record 2000000009;
      LockedTable@1005 : TEMPORARY Record 2000000026;
      ClientMonitorToCALCode@1007 : Codeunit 50132;
      Window@1004 : Dialog;
      FirstEntryNo@1003 : Integer;
      LastEntryNo@1000 : Integer;
      TransactionNo@1009 : Integer;
    BEGIN
      ClientMonitorToCALCode.Update;

      RealClientMonitor.FIND('-');
      ClientMonitor.SetConnectionFilter;
      IF ClientMonitor.FIND('-') THEN;
      IF RealClientMonitor."Entry No." = ClientMonitor."Entry No." THEN
        IF (RealClientMonitor.Date = ClientMonitor.Date) AND (ABS(RealClientMonitor.Time - ClientMonitor.Time) < 1000) THEN BEGIN
          RealClientMonitor.FIND('+');
          ClientMonitor.FIND('+');
          IF (RealClientMonitor."Entry No." = ClientMonitor."Entry No.") AND
             (RealClientMonitor.Date = ClientMonitor.Date) AND
             (ABS(RealClientMonitor.Time - ClientMonitor.Time) < 1000)
          THEN
            EXIT;
        END;
      ClientMonitor.DELETEALL;

      IF RealClientMonitor.FIND('-') THEN;
      FirstEntryNo := RealClientMonitor."Entry No.";
      IF RealClientMonitor.FIND('+') THEN;
      LastEntryNo := RealClientMonitor."Entry No.";
      Window.OPEN(
        'Processing Client Monitor...\' +
        '@1@@@@@@@@@@@@@');
      Session.SETRANGE("My Session",TRUE);
      Session.FIND('-');

      TransactionNo := 1;
      RealClientMonitor.SETRANGE("Entry No.",0,LastEntryNo);
      IF RealClientMonitor.FIND('-') THEN
        REPEAT
          Window.UPDATE(1,ROUND((RealClientMonitor."Entry No." - FirstEntryNo + 1) / (LastEntryNo - FirstEntryNo + 1) * 10000,1));
          RealClientMonitor.SETRANGE("Entry No.",RealClientMonitor."Entry No.");
          ClientMonitor.INIT;
          ClientMonitor."Entry No." := RealClientMonitor."Entry No.";
          ClientMonitor.Date := RealClientMonitor.Date;
          ClientMonitor.Time := RealClientMonitor.Time;
          ClientMonitor."Function No." := RealClientMonitor."Function Name";
          ClientMonitor."Function Name" := FORMAT(RealClientMonitor."Function Name");
          ClientMonitor."Transaction No." := TransactionNo;
          REPEAT
            CASE RealClientMonitor.Parameter OF
              RealClientMonitor.Parameter::Table:
                BEGIN
                  ClientMonitor."Table ID" := RealClientMonitor.Number;
                  ClientMonitor."Table Name" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."Table Name"));
                END;
              RealClientMonitor.Parameter::Key:
                ClientMonitor.Key := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor.Key));
              RealClientMonitor.Parameter::Filter:
                ClientMonitor.Filter := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor.Filter));
              RealClientMonitor.Parameter::Order:
                ClientMonitor.Order := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor.Order));
              RealClientMonitor.Parameter::"Search Method":
                ClientMonitor."Search Method" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."Search Method"));
              RealClientMonitor.Parameter::"Search Result":
                ClientMonitor."Search Result" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."Search Result"));
              RealClientMonitor.Parameter::"Records Read":
                ClientMonitor."Records Read" := RealClientMonitor.Number;
              RealClientMonitor.Parameter::"Record Found":
                ClientMonitor."Record Found" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."Record Found"));
              RealClientMonitor.Parameter::Record:
                ClientMonitor.Record := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor.Record));
              RealClientMonitor.Parameter::"Server Time (ms)":
                ClientMonitor."Server Time (ms)" := RealClientMonitor.Number;
              RealClientMonitor.Parameter::"Elapsed Time (ms)":
                ClientMonitor."Elapsed Time (ms)" := RealClientMonitor.Number;
              RealClientMonitor.Parameter::Writes:
                ClientMonitor."Disk Writes" := RealClientMonitor.Number;
              RealClientMonitor.Parameter::Reads:
                ClientMonitor."Disk Reads" := RealClientMonitor.Number;
              RealClientMonitor.Parameter::"Records Deleted":
                ClientMonitor."Records Deleted" := RealClientMonitor.Number;
              RealClientMonitor.Parameter::Wait:
                ClientMonitor.Wait := RealClientMonitor.Number;
              RealClientMonitor.Parameter::Commit:
                ClientMonitor.Commit := RealClientMonitor.Number;
              RealClientMonitor.Parameter::"Sum Intervals":
                ClientMonitor."Sum Intervals" := RealClientMonitor.Number;
              RealClientMonitor.Parameter::"SQL Statement":
                ClientMonitor."SQL Statement" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."SQL Statement"));
              RealClientMonitor.Parameter::"SQL Status":
                ClientMonitor."SQL Status" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."SQL Status"));
              RealClientMonitor.Parameter::"SQL Plan":
                ClientMonitor."SQL Plan" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."SQL Plan"));
              RealClientMonitor.Parameter::"SQL Error":
                ClientMonitor."SQL Error" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."SQL Error"));
              RealClientMonitor.Parameter::SumIndexFields:
                ClientMonitor.SumIndexFields := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor.SumIndexFields));
              RealClientMonitor.Parameter::Sum:
                ClientMonitor.Sum := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor.Sum));
              RealClientMonitor.Parameter::"Source Object":
                ClientMonitor."Source Object" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."Source Object"));
              RealClientMonitor.Parameter::"Source Trigger/Function":
                ClientMonitor."Source Function/Trigger" :=
                  COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."Source Function/Trigger"));
              RealClientMonitor.Parameter::"Source Text":
                ClientMonitor."Source Text" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."Source Text"));
              RealClientMonitor.Parameter::"Source Line No.":
                ClientMonitor."Source Line No." := RealClientMonitor.Number;
              RealClientMonitor.Parameter::"SQL Index":
                ClientMonitor."SQL Index" := COPYSTR(RealClientMonitor.Data,1,MAXSTRLEN(ClientMonitor."SQL Index"));
            END;
          UNTIL RealClientMonitor.NEXT = 0;
          IF (ClientMonitor.Key = '') AND (ClientMonitor.Order <> '') THEN
            ClientMonitor.Key := ClientMonitor.Order;

          IF ClientMonitor."Source Function/Trigger" = '' THEN
            ClientMonitor."Source Text" := '';
          SetTableSizeAndName(ClientMonitor);
          ClientMonitor."Connection ID" := Session."Connection ID";
          ClientMonitor."Login Date" := Session."Login Date";
          ClientMonitor."Login Time" := 000000T + ROUND(Session."Login Time" - 000000T,1000);
          ClientMonitor."User ID" := Session."User ID";
          IF ClientMonitor."Function No." = RealClientMonitor."Function Name"::COMMIT THEN BEGIN
            TransactionNo := TransactionNo + 1;
            ClientMonitor.Locking := TRUE;
            LockedTable.DELETEALL;
          END ELSE BEGIN
            IF ClientMonitor."Function No." = RealClientMonitor."Function Name"::LOCKTABLE THEN
              IF NOT LockedTable.GET(ClientMonitor."Table ID") THEN BEGIN
                LockedTable.Number := ClientMonitor."Table ID";
                LockedTable.INSERT;
              END;
            ClientMonitor.Locking := LockedTable.GET(ClientMonitor."Table ID");
          END;
          IF (ClientMonitor."Function No." <> RealClientMonitor."Function Name"::"COUNT RANGE") AND
             (ClientMonitor.Key <> '') AND ((ClientMonitor.Order = '') OR (ClientMonitor.Filter <> ''))
          THEN
            CheckKeyUsage(ClientMonitor);
          ClientMonitor."SQL Index Conflict" := (ClientMonitor."SQL Plan" <> '') AND (ClientMonitor.Order <> ClientMonitor."SQL Index");
          IF (ClientMonitor."Function No." = RealClientMonitor."Function Name"::"FIND/NEXT") AND
             (ClientMonitor."Search Method" IN ['<','>'])
          THEN BEGIN
            ClientMonitor."Cache Usage Checked" := TRUE;
            IF STRPOS(ClientMonitor."SQL Statement",'SELECT') <> 0 THEN BEGIN
              ClientMonitor."Check Cache Usage" := TRUE;
              ClientMonitor."Problem Description" := 'NEXT caused SELECT statement';
            END;
          END;
          ClientMonitor.INSERT;
          RealClientMonitor.SETRANGE("Entry No.",0,LastEntryNo);
        UNTIL RealClientMonitor.NEXT = 0;

      RealClientMonitor.DELETEALL;

      LockedTable.DELETEALL;
      ClientMonitor.SetConnectionFilter;
      IF ClientMonitor.FIND('+') THEN
        REPEAT
          IF ClientMonitor."Function No." = RealClientMonitor."Function Name"::COMMIT THEN
            LockedTable.DELETEALL
          ELSE BEGIN
            IF ClientMonitor.Locking THEN BEGIN
              IF NOT LockedTable.GET(ClientMonitor."Table ID") THEN BEGIN
                LockedTable.Number := ClientMonitor."Table ID";
                LockedTable.INSERT;
              END;
            END ELSE
              IF LockedTable.GET(ClientMonitor."Table ID") THEN BEGIN
                ClientMonitor."Optimistic Read" := TRUE;
                ClientMonitor.MODIFY;
              END;
          END;
        UNTIL ClientMonitor.NEXT(-1) = 0;
    END;

    PROCEDURE SetTableSizeAndName@5(VAR ClientMonitor@1000 : Record 50162);
    VAR
      TableInformation@1001 : Record 2000000028;
      Object@1002 : Record 2000000058;
      RealObject@1003 : Record 2000000001;
    BEGIN
      WITH ClientMonitor DO BEGIN
        "Table Size (Current)" := 0;
        IF "Table ID" <> 0 THEN BEGIN
          TempTableInformation.SETRANGE("Table No.","Table ID");
          TempTableInformation.SETFILTER("Company Name",'%1|%2','',COMPANYNAME);
          IF NOT TempTableInformation.FIND('-') THEN BEGIN
            TableInformation.INIT;
            TableInformation."Table No." := "Table ID";
            TableInformation."Company Name" := COMPANYNAME;
            IF NOT TableInformation.FIND THEN BEGIN
              TableInformation."Company Name" := '';
              IF NOT TableInformation.FIND THEN
                IF "Table ID" = 2000000001 THEN
                  TableInformation."No. of Records" := RealObject.COUNTAPPROX;
            END;
            TempTableInformation := TableInformation;
            IF Object.GET(Object."Object Type"::Table,TempTableInformation."Table No.") THEN
              TempTableInformation."Table Name" := COPYSTR(Object."Object Caption",1,MAXSTRLEN(TempTableInformation."Table Name"));
            TempTableInformation.INSERT;
          END;
          "Table Size (Current)" := TempTableInformation."No. of Records";
          "Table Name" := TempTableInformation."Table Name";
        END;
      END;
    END;

    PROCEDURE CheckKeyUsage@6(VAR ClientMonitor@1013 : Record 50162);
    VAR
      RealClientMonitor@1001 : Record 2000000024;
      KeyField@1002 : ARRAY [20] OF Text[250];
      KeyValue@1006 : ARRAY [20] OF Text[250];
      NoOfKeyFields@1004 : Integer;
      FilterField@1009 : ARRAY [20] OF Text[250];
      FilterValue@1008 : ARRAY [20] OF Text[250];
      NoOfFilterFields@1007 : Integer;
      Stop@1005 : Boolean;
      Found@1012 : Boolean;
      NoOfFilteredKeyFields@1010 : Integer;
      i@1003 : Integer;
      j@1011 : Integer;
    BEGIN
      WITH ClientMonitor DO BEGIN
        "Check Key Usage" := FALSE;
        "No. of Fil. Order By Fields" := 0;
        "Good Filtered Start of Key" := '';
        "Key Remainder" := '';
        "Key Candidate Fields" := '';
        IF ("Function No." = RealClientMonitor."Function Name"::CALCSUMS) AND
           ("SQL Index" <> '')
        THEN
          SplitFields("SQL Index",KeyField,KeyValue,NoOfKeyFields)
        ELSE
          SplitFields(Key,KeyField,KeyValue,NoOfKeyFields);
        IF Order = '' THEN
          FOR i := 1 TO NoOfKeyFields DO BEGIN
            IF Order <> '' THEN
              Order := Order + ',';
            Order := Order + KeyField[i];
          END;
        IF Filter <> '' THEN BEGIN
          SplitFields(Filter,FilterField,FilterValue,NoOfFilterFields);
          Stop := FALSE;
          FOR i := 1 TO NoOfKeyFields DO
            IF NOT Stop THEN BEGIN
              Stop := TRUE;
              FOR j := 1 TO NoOfFilterFields DO
                IF FilterField[j] = KeyField[i] THEN
                  IF UniqueFilterValue(FilterValue[j]) THEN BEGIN
                    Stop := FALSE;
                    "No. of Fil. Order By Fields" := "No. of Fil. Order By Fields" + 1;
                    IF "Good Filtered Start of Key" <> '' THEN
                      "Good Filtered Start of Key" := "Good Filtered Start of Key" + ',';
                    "Good Filtered Start of Key" := "Good Filtered Start of Key" + KeyField[i];
                  END;
            END;
        END ELSE
          NoOfFilterFields := 0;
        FOR i := "No. of Fil. Order By Fields" + 1 TO NoOfKeyFields DO BEGIN
          IF "Key Remainder" <> '' THEN
            "Key Remainder" := "Key Remainder" + ',';
          "Key Remainder" := "Key Remainder" + KeyField[i];
        END;

        FOR j := 1 TO NoOfFilterFields DO BEGIN
          Found := FALSE;
          FOR i := 1 TO "No. of Fil. Order By Fields" DO
            IF FilterField[j] = KeyField[i] THEN
              Found := TRUE;
          IF NOT Found THEN
            IF UniqueFilterValue(FilterValue[j]) THEN BEGIN
              IF "Key Candidate Fields" <> '' THEN
                "Key Candidate Fields" := "Key Candidate Fields" + ',';
              "Key Candidate Fields" := "Key Candidate Fields" + FilterField[j];
            END;
        END;

        IF (ClientMonitor."Key Remainder" <> '') AND ("Key Candidate Fields" <> '') THEN
          "Check Key Usage" := TRUE;
      END;
    END;

    PROCEDURE SplitFields@9(VAR FieldString@1000 : Text[250];VAR Field@1004 : ARRAY [20] OF Text[250];VAR Value@1002 : ARRAY [20] OF Text[250];VAR FieldIndex@1001 : Integer);
    VAR
      Comma@1006 : Boolean;
      Stop@1005 : Boolean;
      i@1003 : Integer;
    BEGIN
      FieldIndex := 1;
      Field[FieldIndex] := '';
      Value[FieldIndex] := '';
      i := 1;
      WHILE STRLEN(FieldString) >= i DO
        CASE FieldString[i] OF
          ':','=':
            BEGIN
              Stop := FALSE;
              i := i + 1;
              REPEAT
                IF i > STRLEN(FieldString) THEN
                  Stop := TRUE
                ELSE BEGIN
                  Comma := FieldString[i] = ',';
                  IF Comma THEN
                    IF STRLEN(FieldString) > i THEN
                      IF FieldString[i + 1] IN ['0'..'9'] THEN
                        Comma := FALSE;
                  IF Comma THEN BEGIN
                    Stop := TRUE;
                    i := i + 1;
                    IF STRLEN(FieldString) > i THEN
                      WHILE (STRLEN(FieldString) > i) AND (FieldString[i] = ' ') DO
                        i := i + 1;
                    FieldIndex := FieldIndex + 1;
                    Field[FieldIndex] := '';
                    Value[FieldIndex] := '';
                  END ELSE BEGIN
                    Value[FieldIndex] := Value[FieldIndex] + COPYSTR(FieldString,i,1);
                    i := i + 1;
                  END;
                END;
              UNTIL Stop;
            END;
          ELSE BEGIN
            Comma := FieldString[i] = ',';
            IF Comma THEN
              IF STRLEN(FieldString) > i THEN
                IF FieldString[i + 1] IN ['0'..'9'] THEN
                  Comma := FALSE;
            IF Comma THEN BEGIN
              FieldIndex := FieldIndex + 1;
              Field[FieldIndex] := '';
              Value[FieldIndex] := '';
              i := i + 1;
              IF STRLEN(FieldString) > i THEN
                WHILE (STRLEN(FieldString) > i) AND (FieldString[i] = ' ') DO
                  i := i + 1;
            END ELSE BEGIN
              Field[FieldIndex] := Field[FieldIndex] + COPYSTR(FieldString,i,1);
              i := i + 1;
            END;
          END;
        END;
    END;

    PROCEDURE UniqueFilterValue@4(VAR Filter@1000 : Text[250]) : Boolean;
    BEGIN
      EXIT((Filter = DELCHR(Filter,'=','@<>|*?')) AND (STRPOS(Filter,'..') = 0));
    END;

    PROCEDURE CheckBlocking@2(VAR ClientMonitor@1006 : Record 50162);
    VAR
      RealClientMonitor@1000 : Record 2000000024;
      TempSession@1001 : TEMPORARY Record 2000000009;
      CommitClientMonitorLine@1004 : TEMPORARY Record 50162;
      MarkForCommits@1002 : Boolean;
      Finished@1005 : Boolean;
      ShowCommit@1003 : Boolean;
    BEGIN
      WITH ClientMonitor DO BEGIN
        OpenForm(ClientMonitor);
        RESET;
        SETRANGE("Blocking Checked",FALSE);
        Finished := ISEMPTY;
        SETRANGE("Blocking Checked");
        IF Finished THEN
          EXIT;

        SETCURRENTKEY(Date,Time);
        IF FIND('+') THEN
          REPEAT
            "Blocking Checked" := TRUE;
            "Check Blocking" := FALSE;
            IF "Function No." = RealClientMonitor."Function Name"::COMMIT THEN BEGIN
              IF (CommitClientMonitorLine."Entry No." <> 0) AND ShowCommit THEN
                CommitClientMonitorLine.INSERT;
              CommitClientMonitorLine := ClientMonitor;
              ShowCommit := FALSE;
              TempSession.DELETEALL;
              MarkForCommits := TRUE;
              TempSession."Connection ID" := "Connection ID";
              TempSession.INSERT;
            END ELSE
              IF MarkForCommits THEN
                IF NOT TempSession.GET("Connection ID") THEN BEGIN
                  TempSession."Connection ID" := "Connection ID";
                  TempSession.INSERT;
                  IF Locking THEN BEGIN
                    "Check Blocking" := TRUE;
                    ShowCommit := TRUE;
                  END;
                END;
            IF "SQL Error" <> '' THEN
              "Check Blocking" := TRUE;
            MODIFY;
          UNTIL NEXT(-1) = 0;
        IF (CommitClientMonitorLine."Entry No." <> 0) AND ShowCommit THEN
          CommitClientMonitorLine.INSERT;

        IF CommitClientMonitorLine.FIND('-') THEN
          REPEAT
            ClientMonitor := CommitClientMonitorLine;
            FIND;
            "Check Blocking" := TRUE;
            MODIFY;
          UNTIL CommitClientMonitorLine.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

