OBJECT Codeunit 414 Release Sales Document
{
  OBJECT-PROPERTIES
  {
    Date=06.07.15;
    Time=17:32:26;
    Modified=Yes;
    Version List=NAVW16.00.01,eBay1.02.31,chrmu,DHL,DN(1),GOB,HME4042;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=VAR
            SalesLine@1000 : Record 37;
            TempVATAmountLine0@1001 : TEMPORARY Record 290;
            TempVATAmountLine1@1002 : TEMPORARY Record 290;
            NotOnlyDropShipment@1003 : Boolean;
            "---eBay"@5095800 : Boolean;
            eBaySetup@5095801 : Record 5095800;
            DHLMgt@1000000002 : Codeunit 50020;
            LT_BatchPostDoc@1000000000 : Record 50043;
            LC_BatchAutomProcess@1000000001 : Codeunit 50031;
            NAVCMgt@1170000000 : Codeunit 5251544;
            SalesLineLoc@1108200000 : Record 37;
            locKommissionierstatus@1108200001 : Boolean;
            MNOTESTTabelle@1108200002 : Record 50066;
            LocText001@1108200003 : TextConst 'DEU=Nein;ENU=No';
            FPCManagement@1108200004 : Codeunit 50003;
            CancelOrder@1108200005 : Boolean;
            SalesCommentLine@1108200006 : Record 44;
            xRecRef@1108200007 : RecordRef;
            RecRef@1108200008 : RecordRef;
            ChangeLogManagement@1108200009 : Codeunit 423;
            UserSetup@1108200010 : Record 91;
            LocText002@1108200011 : TextConst 'DEU=Sie haben keine Berichtigung um Auftr„ge freizugeben.\Wenden Sie sich an das ERP Team.;ENU=You don''t have the permission to release a Sales Order.\Please contact the ERP Team.';
            FPCGeneralSetup@1000000003 : Record 50055;
            OrderDateCalcMgt@1000000004 : Codeunit 50086;
            InterfaceProcessMgt@1000000005 : Codeunit 50087;
            LineNoFilter@1000000006 : Text[1024];
            SalesLineIPL@1000000007 : Record 37;
            "**** HME *********************"@1000000008 : Integer;
            WhseLFSalesInterfaceMgtL@1000000009 : Codeunit 50303;
            CountryRegionL@1000000010 : Record 9;
            XMLExchMgmtCUL@1000000011 : Codeunit 50270;
            "****TEC***********************"@1000010010 : Integer;
            MPCommissionMgt@1000010011 : Codeunit 50502;
          BEGIN
            //A/P0107
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              //A/P0205/16.08.12/gob-rste
              IF NOT ISSERVICETIER THEN BEGIN
              //UserSetup.GET(USERID);
              UserSetup.GET(UPPERCASE(USERID));
              //E/P0205/16.08.12/gob-rste
                //A/P0758
                IF NOT "Cancel Without Interfaces" THEN
                //E/P0758
                IF NOT UserSetup."Release Sales Orders" THEN
                  ERROR(LocText002);
              END;
            END;
            //E/P0107

            //eBay#003
            eBaySetup.GET();
            //eBay#003

            //A/P0096
            xRecRef.GETTABLE(Rec);
            //E/P0096

            IF Status = Status::Released THEN
              EXIT;

            IF "Document Type" = "Document Type"::Quote THEN
              IF CheckCustomerCreated(TRUE) THEN
                GET("Document Type"::Quote,"No.")
              ELSE
                EXIT;

            TESTFIELD("Sell-to Customer No.");

            //eBay#001
            //TESTFIELD("Waiting for payment receipt", FALSE);
            //eBay#001

            //S/P0022
            //CheckPickingAllowed(TRUE,Rec.Kommissionierung);
            //locKommissionierstatus := Kommissionierung;
            //E/P0022

            //A/gob-rste/31.05.12/P0015
            //A/gob-rste/12.06.12/P0030
            //A/gob-rste/20.06.12/P0042
            //IF STRPOS(UPPERCASE("Sell-to Customer Name"),'TEST TEST') <> 0 THEN BEGIN
            //IF (STRPOS(UPPERCASE("Sell-to Customer Name"),'TEST TEST') <> 0) OR
               //(STRPOS(UPPERCASE("Sell-to Customer Name"),'TESTVORNAME TESTNACHNAME') <> 0) THEN BEGIN
            //E/gob-rste/12.06.12/P0030
            //A/P0313
            FPCGeneralSetup.GET;
            IF FPCGeneralSetup."Autom. Cancel Testorders" THEN BEGIN
            //E/P0313
              CancelOrder := FALSE;
              IF (FPCManagement.QtyStringUsedInString("Sell-to Customer Name",'TEST',TRUE) >= 2) OR
                 (FPCManagement.QtyStringUsedInString("Sell-to Customer Name 2",'TEST',TRUE) >=2) OR
                 (FPCManagement.QtyStringUsedInString("Bill-to Name",'TEST',TRUE) >= 2) OR
                 (FPCManagement.QtyStringUsedInString("Bill-to Name 2",'TEST',TRUE) >= 2) OR
                 (FPCManagement.QtyStringUsedInString("Ship-to Name",'TEST',TRUE) >= 2) OR
                 (FPCManagement.QtyStringUsedInString("Ship-to Name 2",'TEST',TRUE) >= 2) THEN
                CancelOrder := TRUE;

              SalesCommentLine.RESET;
              SalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Order);
              SalesCommentLine.SETRANGE("No.","No.");
              SalesCommentLine.SETRANGE("Document Line No.",0);
              //A/P0313
              SalesCommentLine.SETRANGE("Customer Comment Shop",TRUE);
              //E/P0313
              //S/P0076
              //IF (SalesCommentLine.FINDFIRST) AND (FPCManagement.QtyStringUsedInString(SalesCommentLine.Comment,'TEST',TRUE) >= 1) THEN
              IF (SalesCommentLine.FINDFIRST) AND (STRPOS(UPPERCASE(SalesCommentLine.Comment),'TEST') = 1) THEN
              //E/P0076
                CancelOrder := TRUE;

              IF CancelOrder THEN BEGIN
              //E/gob-rste/20.06.12/P0042
                SalesLineLoc.SETRANGE("Document No.","No.");
                SalesLineLoc.SETRANGE("Document Type","Document Type");
                IF SalesLineLoc.FIND('-') THEN
                  REPEAT
                    //A/gob-rste/05.10.12/P0414
                    //SalesLineLoc."Cancellation Reason Code" := 'TEST';
                    SalesLineLoc."Return Reason Code" := 'TEST';
                    //E/gob-rste/05.10.12/P0414
                    SalesLineLoc.MODIFY;
                  UNTIL SalesLineLoc.NEXT = 0;
                Rec.MagentoCancel;
                EXIT;
              END;
              //E/gob-rste/31.05.12/P0015
            //A/P0313
            END;
            //E/P0313

            // > DHL 26.09.11 On Release new call of CreateDHLProcessingRequest function
            IF ("Document Type" = "Document Type"::Order) AND Kommissionierung THEN
              DHLMgt.CreateDHLProcessingRequest(Rec);
            // < DHL 26.09.11 On Release new call of CreateDHLProcessingRequest function

            SalesLine.SETRANGE("Document Type","Document Type");
            SalesLine.SETRANGE("Document No.","No.");
            SalesLine.SETFILTER(Type,'>0');
            SalesLine.SETFILTER(Quantity,'<>0');
            IF NOT SalesLine.FIND('-') THEN
              ERROR(Text001,"Document Type","No.");

            // 2.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            {
            ELSE BEGIN
              SalesLine.SETRANGE(Type,SalesLine.Type::Item);
              IF SalesLine.FIND('-') THEN REPEAT
                NAVCMgt.getPurchCode('1',SalesLine);
                //SalesLine.GetPurchasingCode;
                SalesLine.MODIFY;
              UNTIL SalesLine.NEXT = 0;
              SalesLine.SETRANGE(Type);
            END;
            }

            BPSetup.GET;

            //PXXX eich 05.09.12 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            IF (BPSetup."Invoice Payment Filter" <> '') OR (BPSetup."Hire-purchase Payment Filter" <> '') THEN BEGIN
            //PXXX eich 05.09.12 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

              BPSetup.TESTFIELD("Invoice Payment Filter");
              BPSetup.TESTFIELD("Hire-purchase Payment Filter");
              IF BPSetup."Hire-purchase Payment Filter" = "Payment Method Code" THEN BEGIN
                BPTransactStatus.SETCURRENTKEY("Sales Header No.","Sales Header Type",Created);
                BPTransactStatus.SETRANGE("Sales Header No.","No.");
                BPTransactStatus.SETRANGE("Sales Header Type","Document Type");
                IF BPTransactStatus.ISEMPTY THEN BEGIN
                  SalesLine.SETFILTER("Payment Transaction No.",'<>%1','');
                  IF SalesLine.FINDFIRST THEN BEGIN
                    BPTransactStatus.INIT;
                    BPTransactStatus."Transaction No." := SalesLine."Payment Transaction No.";
                    BPTransactStatus.Created := CURRENTDATETIME;
                    BPTransactStatus."Transaction No. Txt" := SalesLine."Payment Transaction No.";
                    BPTransactStatus.Status := BPTransactStatus.Status::Captured;
                    BPTransactStatus."Sales Header Type" := "Document Type";
                    BPTransactStatus."Sales Header No." := "No.";
                    BPTransactStatus.INSERT;
                    SalesLine.SETRANGE("Payment Transaction No.");
                    "BillPay Last Status" := "BillPay Last Status"::Captured;
                    MODIFY;
                  END;
                END;
              END ELSE
                IF BPSetup."Invoice Payment Filter" = "Payment Method Code" THEN BEGIN
                  BPTransactStatus.SETCURRENTKEY("Sales Header No.","Sales Header Type",Created);
                  BPTransactStatus.SETRANGE("Sales Header No.","No.");
                  BPTransactStatus.SETRANGE("Sales Header Type","Document Type");
                  IF BPTransactStatus.FINDLAST THEN BEGIN
                    BPPlan.SETRANGE("Transaction No.",BPTransactStatus."Transaction No.");
                    //A/gob-adb/15.05.13
                    //IF BPPlan.FINDSET(TRUE,FALSE) THEN REPEAT
                    IF BPPlan.FIND('-') THEN REPEAT
                    //E/gob-adb/15.05.13
                      IF (BPPlan."Sales Document No." = '') THEN BEGIN
                        BPPlan."Sales Document Type" := BPTransactStatus."Sales Document Type";
                        BPPlan."Sales Document No." := BPTransactStatus."Sales Document No.";
                        BPPlan.MODIFY;
                      END;
                    UNTIL BPPlan.NEXT = 0;
                  END;
                END;

            //PXXX eich 05.09.12 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            END;
            //PXXX eich 05.09.12 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 2.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            InvtSetup.GET;
            IF InvtSetup."Location Mandatory" THEN BEGIN
              SalesLine.SETRANGE(Type,SalesLine.Type::Item);
              IF SalesLine.FIND('-') THEN
                REPEAT
                  SalesLine.TESTFIELD("Location Code");
                UNTIL SalesLine.NEXT = 0;
              SalesLine.SETFILTER(Type,'>0');
            END;
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            NotOnlyDropShipment := SalesLine.FINDFIRST;
            SalesLine.RESET;

            SalesSetup.GET;
            IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
              CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
              GET("Document Type","No.");
            END;

            // 1.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            IF TestPrepayment(Rec) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
              COMMIT;
              LC_BatchAutomProcess.PostSalesPrepmtInv(Rec,FALSE);
              GET("Document Type","No.");
            END;
            // 1.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            IF TestPrepayment(Rec) AND ("Document Type" = "Document Type"::Order) THEN BEGIN

              // 1.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
              IF "Order Release Date" = 0DT THEN
                "Order Release Date" := CURRENTDATETIME;
              // 1.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

              //S/P0022
              IF CheckPickingLinesPrepaym(Rec) THEN
                Kommissionierung := TRUE
              ELSE
                Kommissionierung := FALSE;
              //E/P0022
              //S/P0041
              IF (Kommissionierung) AND NOT("Interruption Checked") THEN BEGIN
                FPCManagement.CheckForPickingInterruption(Rec);
              END;
              IF ("Processing interrupted" <> "Processing interrupted"::No) AND NOT("Interruption Checked") THEN
                Kommissionierung := FALSE;
              //E/P0041

              Status := Status::"Pending Prepayment";
              //A/gob-rste/14.09.12/P0329
              IF (Kommissionierung) AND ("First Pick" = 0DT) THEN
                  "First Pick" := CURRENTDATETIME;
              IF (Kommissionierung) AND ("First Pick User" = '') THEN
                  "First Pick User" := USERID;
              //E/gob-rste/14.09.12/P0329
              MODIFY(TRUE);

              // 4.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
              PostExpCom("Document Type","No.");
              // 4.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

              //S/P0966
              InterfaceProcessMgt.PickOrderOnRelease(Rec);
              //E/P0966

              //S/P0966
              FPCGeneralSetup.TESTFIELD("Interface Code Rhenus");
              FPCGeneralSetup.TESTFIELD("Interface Code Crossdock");
              IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Rhenus") THEN BEGIN
                IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Crossdock") THEN BEGIN
              //E/P0966
                  // B chrmu >>>>>>>>>>>>>>>>>>>>>>>>>>>
                  //A/gob-rste/04.09.12/P0277
                  IF NOT "Cancel Without Interfaces" THEN
                  //E/gob-rste/04.09.12/P0277
                    IF Kommissionierung THEN
                      InsertExpLog(Rec);
                  // E chrmu <<<<<<<<<<<<<<<<<<<<<<<<<<<
              //S/P0966
                END;
              END;
              //E/P0966

              //S/P0966
              FPCGeneralSetup.TESTFIELD("Interface Code DocData");
              IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code DocData") THEN BEGIN
              //E/P0966
                //gob-sfe/A/09.07.2012
                //A/gob-rste/04.09.12/P0277
                IF NOT "Cancel Without Interfaces" THEN
                //E/gob-rste/04.09.12/P0277
                  IF Kommissionierung THEN
                    InitiateOrder2DDInterface(Rec,0);
                //gob-sfe/E/09.07.2012
              //S/P0966
              END;
              //E/P0966

              //H1408 12.08.14 DMA ++++++++++++++++++++++++++++++++++++
              FPCGeneralSetup.TESTFIELD("Interface Code Whse. LF");
              IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Whse. LF") THEN BEGIN
                IF NOT "Cancel Without Interfaces" THEN
                  IF Kommissionierung THEN
                    WhseLFSalesInterfaceMgtL.TriggerWhsLFFromSalesHeader(Rec);
              END;
              //H1408 12.08.14 DMA ++++++++++++++++++++++++++++++++++++

              //S/P0966
              FPCGeneralSetup.TESTFIELD("Interface Code Dropshipment");
              IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Dropshipment") THEN BEGIN
                // 2.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //A/gob-rste/04.09.12/P0277
                //IF NOT "Cancel Without Interfaces" THEN
                //E/gob-rste/04.09.12/P0277
                //IF Kommissionierung THEN //#####################
                //S/P0892
                  //IF "Ship-to Country/Region Code" IN ['DE',''] THEN
                    //LT_BatchPostDoc.CreatePurchOrder(Rec)
                  //ELSE
                    //LT_BatchPostDoc.CreateIntPurchOrder(Rec);
                //E/P0892
                // 2.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                IF NOT "Cancel Without Interfaces" THEN
                  IF Kommissionierung THEN BEGIN
                    LineNoFilter := '';
                    IF NOT InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Crossdock") THEN BEGIN
                      SalesLineIPL.RESET;
                      SalesLineIPL.SETRANGE("Document Type","Document Type");
                      SalesLineIPL.SETRANGE("Document No.","No.");
                      SalesLineIPL.SETRANGE(Type,SalesLineIPL.Type::Item);
                      SalesLineIPL.SETRANGE("Drop Shipment",TRUE);
                      IF NOT SalesLineIPL.ISEMPTY THEN BEGIN
                        SalesLineIPL.FINDSET;
                        REPEAT
                          IF LineNoFilter = '' THEN
                            LineNoFilter := FORMAT(SalesLineIPL."Line No.")
                          ELSE
                            LineNoFilter := LineNoFilter + '|' + FORMAT(SalesLineIPL."Line No.");
                        UNTIL SalesLineIPL.NEXT = 0;
                      END;
                    END;
                    IF (LineNoFilter <> '') OR
                      InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Crossdock")
                    THEN BEGIN
                      LT_BatchPostDoc.SetSalesLineFilter(LineNoFilter);
                      IF "Ship-to Country/Region Code" IN ['DE',''] THEN
                        LT_BatchPostDoc.CreatePurchOrder(Rec)
                      ELSE
                        //H1472 29.09.14  tec-rh +++++++++++
                        IF "Return Type" = "Return Type"::"Spare Part" THEN BEGIN
                          IF CountryRegionL.GET("Ship-to Country/Region Code") THEN
                            IF CountryRegionL."Status Spare Part" = CountryRegionL."Status Spare Part"::Shipping THEN
                              LT_BatchPostDoc.CreateIntPurchOrder(Rec);
                        END ELSE
                          LT_BatchPostDoc.CreateIntPurchOrder(Rec);
                        //H1472 29.09.14  tec-rh -----------
                      LT_BatchPostDoc.SetSalesLineFilter('');
                    END;
                  END;
                END;
                IF NOT InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Dropshipment") THEN BEGIN
                  IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Crossdock") THEN BEGIN
                    IF Kommissionierung THEN BEGIN
                      LineNoFilter := '';
                      SalesLineIPL.RESET;
                      SalesLineIPL.SETRANGE("Document Type","Document Type");
                      SalesLineIPL.SETRANGE("Document No.","No.");
                      SalesLineIPL.SETRANGE(Type,SalesLineIPL.Type::Item);
                      SalesLineIPL.SETRANGE("Special Order",TRUE);
                      IF NOT SalesLineIPL.ISEMPTY THEN BEGIN
                        SalesLineIPL.FINDSET;
                        REPEAT
                          IF LineNoFilter = '' THEN
                            LineNoFilter := FORMAT(SalesLineIPL."Line No.")
                          ELSE
                            LineNoFilter := LineNoFilter + '|' + FORMAT(SalesLineIPL."Line No.");
                        UNTIL SalesLineIPL.NEXT = 0;
                      END;
                      IF LineNoFilter <> '' THEN BEGIN
                        LT_BatchPostDoc.SetSalesLineFilter(LineNoFilter);
                        IF "Ship-to Country/Region Code" IN ['DE',''] THEN
                          LT_BatchPostDoc.CreatePurchOrder(Rec)
                        ELSE
                          LT_BatchPostDoc.CreateIntPurchOrder(Rec);
                        LT_BatchPostDoc.SetSalesLineFilter('');
                      END;
                    END;
                  END;
                END;
                //E/P0966
              EXIT;
            END
            //T0062 10.12.14 TEC-GH ++++++++++++++++++++++++++++++++++++++++++++++++++
            {
            //T0062 10.12.14 TEC-GH --------------------------------------------------
            ELSE
            //T0062 10.12.14 TEC-GH ++++++++++++++++++++++++++++++++++++++++++++++++++
            }
            ELSE BEGIN
            //T0062 10.12.14 TEC-GH --------------------------------------------------
              Status := Status::Released;
            //T0062 10.12.14 TEC-GH ++++++++++++++++++++++++++++++++++++++++++++++++++
              MPCommissionMgt.CheckOrderState(Rec);
            END;
            //T0062 10.12.14 TEC-GH --------------------------------------------------
            SalesLine.SetSalesHeader(Rec);
            SalesLine.CalcVATAmountLines(0,Rec,SalesLine,TempVATAmountLine0);
            SalesLine.CalcVATAmountLines(1,Rec,SalesLine,TempVATAmountLine1);
            SalesLine.UpdateVATOnLines(0,Rec,SalesLine,TempVATAmountLine0);
            SalesLine.UpdateVATOnLines(1,Rec,SalesLine,TempVATAmountLine1);

            // 1.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            IF "Order Release Date" = 0DT THEN
              "Order Release Date" := CURRENTDATETIME;
            // 1.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            //S/P0022
            CheckPickingAllowed(TRUE,Rec.Kommissionierung,Rec);
            //E/P0022

            //S/P0041
            IF (Kommissionierung) AND NOT("Interruption Checked") THEN BEGIN
              FPCManagement.CheckForPickingInterruption(Rec);
            END;
            IF ("Processing interrupted" <> "Processing interrupted"::No) AND NOT("Interruption Checked") THEN
              Kommissionierung := FALSE;
            //E/P0041
            //A/gob-rste/14.09.12/P0329
            IF (Kommissionierung) AND ("First Pick" = 0DT) THEN
                "First Pick" := CURRENTDATETIME;
            IF (Kommissionierung) AND ("First Pick User" = '') THEN
                "First Pick User" := USERID;
            //E/gob-rste/14.09.12/P0329

            MODIFY(TRUE);

            // 4.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            PostExpCom("Document Type","No.");
            // 4.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            IF NotOnlyDropShipment THEN
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
                WhseSalesRelease.Release(Rec);

            //S/P0022
            // Auskommentiert -> Neue Logik
            {
            //CHR120531 +
            calcKommi(Rec);
            //CHR120531 -
            }

            //S/P0966
            InterfaceProcessMgt.PickOrderOnRelease(Rec);
            //E/P0966

            //S/P0966
            FPCGeneralSetup.TESTFIELD("Interface Code Rhenus");
            FPCGeneralSetup.TESTFIELD("Interface Code Crossdock");
            IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Rhenus") THEN BEGIN
              IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Crossdock") THEN BEGIN
            //E/P0966
                //E/P0022
                // B chrmu >>>>>>>>>>>>>>>>>>>>>>>>>>>
                //A/gob-rste/04.09.12/P0277
                IF NOT "Cancel Without Interfaces" THEN
                //E/gob-rste/04.09.12/P0277
                  IF Kommissionierung THEN
                    InsertExpLog(Rec);
                // E chrmu <<<<<<<<<<<<<<<<<<<<<<<<<<<
            //S/P0966
              END;
            END;
            //E/P0966

            //S/P0966
            FPCGeneralSetup.TESTFIELD("Interface Code DocData");
            IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code DocData") THEN BEGIN
            //E/P0966
              //gob-sfe/A/09.07.2012
              //A/gob-rste/04.09.12/P0277
              IF NOT "Cancel Without Interfaces" THEN
              //E/gob-rste/04.09.12/P0277
                IF Kommissionierung THEN
                  InitiateOrder2DDInterface(Rec,0);
              //gob-sfe/E/09.07.2012
            //S/P0966
            END;
            //E/P0966

            //H1408 12.08.14 DMA ++++++++++++++++++++++++++++++++++++
            FPCGeneralSetup.TESTFIELD("Interface Code Whse. LF");
            IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Whse. LF") THEN BEGIN
              IF NOT "Cancel Without Interfaces" THEN
                IF Kommissionierung THEN
                  WhseLFSalesInterfaceMgtL.TriggerWhsLFFromSalesHeader(Rec);
            END;
            //H1408 12.08.14 DMA ++++++++++++++++++++++++++++++++++++


            //S/P0966
            FPCGeneralSetup.TESTFIELD("Interface Code Dropshipment");
            IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Dropshipment") THEN BEGIN
            //E/P0966
              // 2.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
              //A/gob-rste/04.09.12/P0277
              IF NOT "Cancel Without Interfaces" THEN
              //E/gob-rste/04.09.12/P0277
                //S/P0966
                //IF Kommissionierung THEN //#####################
                IF Kommissionierung THEN BEGIN
                  //S/P0966
                  LineNoFilter := '';
                  IF NOT InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Crossdock") THEN BEGIN
                    SalesLineIPL.RESET;
                    SalesLineIPL.SETRANGE("Document Type","Document Type");
                    SalesLineIPL.SETRANGE("Document No.","No.");
                    SalesLineIPL.SETRANGE(Type,SalesLineIPL.Type::Item);
                    SalesLineIPL.SETRANGE("Drop Shipment",TRUE);
                    IF NOT SalesLineIPL.ISEMPTY THEN BEGIN
                      SalesLineIPL.FINDSET;
                      REPEAT
                        IF LineNoFilter = '' THEN
                          LineNoFilter := FORMAT(SalesLineIPL."Line No.")
                        ELSE
                          LineNoFilter := LineNoFilter + '|' + FORMAT(SalesLineIPL."Line No.");
                      UNTIL SalesLineIPL.NEXT = 0;
                    END;
                  END;
                  //E/P0966
                  //S/P0892
                  //S/P0966
                  IF (LineNoFilter <> '') OR
                    (InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Crossdock"))
                  THEN BEGIN
                    LT_BatchPostDoc.SetSalesLineFilter(LineNoFilter);
                  //E/P0966
                    IF "Ship-to Country/Region Code" IN ['DE',''] THEN
                      LT_BatchPostDoc.CreatePurchOrder(Rec)
                    ELSE
                      LT_BatchPostDoc.CreateIntPurchOrder(Rec);
                  //E/P0892
                  //S/P0966
                    LT_BatchPostDoc.SetSalesLineFilter('');
                  END;
                  //E/P0966
                //S/P0966
                END;
                //E/P0966
              // 2.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            //S/P0966
            END;
            //E/P0966

            //S/P0966
            IF NOT InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Dropshipment") THEN BEGIN
              IF InterfaceProcessMgt.UseOldPicking(Rec,FPCGeneralSetup."Interface Code Crossdock") THEN BEGIN
                IF Kommissionierung THEN BEGIN
                  LineNoFilter := '';
                  SalesLineIPL.RESET;
                  SalesLineIPL.SETRANGE("Document Type","Document Type");
                  SalesLineIPL.SETRANGE("Document No.","No.");
                  SalesLineIPL.SETRANGE(Type,SalesLineIPL.Type::Item);
                  SalesLineIPL.SETRANGE("Special Order",TRUE);
                  IF NOT SalesLineIPL.ISEMPTY THEN BEGIN
                    SalesLineIPL.FINDSET;
                    REPEAT
                      IF LineNoFilter = '' THEN
                        LineNoFilter := FORMAT(SalesLineIPL."Line No.")
                      ELSE
                        LineNoFilter := LineNoFilter + '|' + FORMAT(SalesLineIPL."Line No.");
                    UNTIL SalesLineIPL.NEXT = 0;
                  END;
                  IF LineNoFilter <> '' THEN BEGIN
                    LT_BatchPostDoc.SetSalesLineFilter(LineNoFilter);
                    IF "Ship-to Country/Region Code" IN ['DE',''] THEN
                      LT_BatchPostDoc.CreatePurchOrder(Rec)
                    ELSE
                      LT_BatchPostDoc.CreateIntPurchOrder(Rec);
                    LT_BatchPostDoc.SetSalesLineFilter('');
                  END;
                END;
              END;
            END;
            //E/P0966

            //A/P0595
            OrderDateCalcMgt.CalcMaxOrderDateChangeOrder(Rec);
            //E/P0595

            //A/P0096
            RecRef.GETTABLE(Rec);
            ChangeLogManagement.LogModification(RecRef,xRecRef);
            //E/P0096
            //H4260 16.06.15 DMO ++++++++++++++++++++++++++++++
            IF NOT IsXMLSent THEN BEGIN
              CLEAR(XMLExchMgmtCUL);
              XMLExchMgmtCUL.CreateSalesReturnOrderXML(Rec);
            END;
            //H4260 16.06.15 DMO ------------------------------
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'DEU=Fr %1 %2 gibt es nichts freizugeben.;ENU=There is nothing to release for %1 %2.';
      SalesSetup@1002 : Record 311;
      InvtSetup@1000 : Record 313;
      BPSetup@1000000000 : Record 50000;
      BPTransactStatus@1000000001 : Record 50025;
      BPPlan@1000000002 : Record 50026;
      WhseSalesRelease@1004 : Codeunit 5771;
      Text002@1005 : TextConst 'DEU=Dieses Dokument kann nur freigegeben werden, wenn der Genehmigungsprozess abgeschlossen ist.;ENU=This document can only be released when the approval process is complete.';
      Text003@1003 : TextConst 'DEU=Zum erneuten ™ffnen dieses Dokuments muss der Genehmigungsprozess abgebrochen oder abgeschlossen werden.;ENU=The approval process must be cancelled or completed to reopen this document.';
      "------------------------------"@1000000003 : Integer;
      PurchSetup@1000000004 : Record 312;
      "***GOB****"@1000000008 : Integer;
      HeaderEntryNo@1000000007 : Integer;
      DDHeader@1000000006 : Record 50061;
      DDLine@1000000005 : Record 50062;
      GOBText001@1108200000 : TextConst 'DEU=Das Feld %1 hat den Wert %2. Sie mssen den Status berprfen und das Feld %1 manuell auf %3 stetzen.;ENU=The field %1 has value %2. You have to check the order and set the value manually to %3.';
      GlobalDDAction@1000000009 : 'n,d,c';
      GlobalCallbyMagCancel@1000000010 : Boolean;
      bIsCancelation@1000000011 : Boolean;
      GlobalAction2@1000000012 : Code[10];
      "*HME**************************"@1000000013 : Integer;
      FPCGeneralSetup@1000000016 : Record 50055;
      CancelInitiatedByCreateRO@1000000014 : Boolean;
      InterfaceInitiationSuccessful@1000000015 : Boolean;

    PROCEDURE Reopen@1(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      LC_BatchAutomProcess@1000000000 : Codeunit 50031;
      xRecRef@1000000001 : RecordRef;
      RecRef@1000000002 : RecordRef;
      ChangeLogManagement@1000000003 : Codeunit 423;
    BEGIN
      //A/gob-rste/06.09.12/P0289
      xRecRef.GETTABLE(SalesHeader);
      //E/gob-rste/06.09.12/P0289

      WITH SalesHeader DO BEGIN
        IF Status = Status::Open THEN
          EXIT;
        //a/gob-sfe/P0328/20.09.2012
        //gob-sfe/26.06.2012 Verhindern, das schon bearbeitete SO zurckgesetzt wird
        //A,gob-dst,10.10.2012,P0432,zur Verhinderung Doppelkommissionierung Prfung wieder aktiviert
        CheckSOStatus(SalesHeader);
        //E,gob-dst,10.10.2012,P0432,zur Verhinderung Doppelkommissionierung Prfung wieder aktiviert
        //a/gob-sfe/P0328/20.09.2012

        Status := Status::Open;
        SalesLine.SetSalesHeader(SalesHeader);
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETFILTER(Type,'>0');
        SalesLine.SETFILTER(Quantity,'<>0');
        IF RECORDLEVELLOCKING THEN
          SalesLine.LOCKTABLE;
        IF SalesLine.FIND('-') THEN
          REPEAT
            SalesLine.Amount := 0;
            SalesLine."Amount Including VAT" := 0;
            SalesLine."VAT Base Amount" := 0;
            SalesLine.InitOutstandingAmount;
            //A/P0184
            //A/P0214
            //SalesLine."Cancellation Reason Code" := '';
            //E/P0214
            SalesLine."Cancellation Date" := 0DT;
            SalesLine."Cancellation Qty." := 0;
            SalesLine."Qty. to Cancel" := 0;
            SalesLine."Line Status" := '';
            //E/P0184
            SalesLine.MODIFY;
          UNTIL SalesLine.NEXT = 0;
        SalesLine.RESET;

        // 1.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        COMMIT;
        //S/P0011
        IF (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) THEN
          LC_BatchAutomProcess.PostSalesPrepmtCrMemo(SalesHeader,FALSE);
        //E/P0011
        GET(SalesHeader."Document Type",SalesHeader."No.");
        Status := Status::Open;
        // 1.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // H4042       28.05.15 JM +++++++
        IF "Prepayment %" <> 0 THEN
          "Prepayment Status" := "Prepayment Status"::Open;
        // H4042       28.05.15 JM -------
        MODIFY(TRUE);

        IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
          WhseSalesRelease.Reopen(SalesHeader);
      END;

      //A/P0289
      RecRef.GETTABLE(SalesHeader);
      ChangeLogManagement.LogModification(RecRef,xRecRef);
      //E/P0289
    END;

    PROCEDURE PerformManualRelease@2(VAR SalesHeader@1002 : Record 36);
    VAR
      ApprovalEntry@1004 : Record 454;
      ApprovalManagement@1001 : Codeunit 439;
      ApprovedOnly@1005 : Boolean;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF ApprovalManagement.CheckApprSalesDocument(SalesHeader) THEN BEGIN
          CASE Status OF
            Status::"Pending Approval":
              ERROR(Text002);
            Status::Released,Status::"Pending Prepayment":
              CODEUNIT.RUN(414,SalesHeader);
            Status::Open:
              BEGIN
                ApprovedOnly := TRUE;
                ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                ApprovalEntry.SETRANGE("Document Type","Document Type");
                ApprovalEntry.SETRANGE("Document No.","No.");
                ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
                IF ApprovalEntry.FIND('-') THEN BEGIN
                  REPEAT
                    IF (ApprovedOnly = TRUE) AND (ApprovalEntry.Status <> ApprovalEntry.Status::Approved) THEN
                      ApprovedOnly := FALSE;
                  UNTIL ApprovalEntry.NEXT = 0;

                  IF ApprovedOnly = TRUE AND TestApprovalLimit(SalesHeader) THEN
                    CODEUNIT.RUN(414,SalesHeader)
                  ELSE
                    ERROR(Text002);
                END ELSE
                  ERROR(Text002);
              END;
          END;
        END ELSE
          CODEUNIT.RUN(414,SalesHeader);
      END;
    END;

    PROCEDURE PerformManualReopen@3(VAR SalesHeader@1002 : Record 36);
    VAR
      ApprovalManagement@1001 : Codeunit 439;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF ApprovalManagement.CheckApprSalesDocument(SalesHeader) THEN BEGIN
          CASE Status OF
            Status::"Pending Approval":
              ERROR(Text003);
            Status::Open,Status::Released,Status::"Pending Prepayment":
              Reopen(SalesHeader);
          END;
        END ELSE
          Reopen(SalesHeader);
      END;
    END;

    PROCEDURE TestPrepayment@31(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLines@1001 : Record 37;
    BEGIN
      SalesLines.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLines.SETRANGE("Document No.",SalesHeader."No.");
      SalesLines.SETFILTER("Prepmt. Line Amount",'<>%1',0);
      IF SalesLines.FIND('-') THEN BEGIN
        REPEAT
          IF SalesLines."Prepmt. Amt. Inv." <> SalesLines."Prepmt. Line Amount" THEN
            EXIT(TRUE);
        UNTIL SalesLines.NEXT = 0;
      END;
    END;

    PROCEDURE TestApprovalLimit@4(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      UserSetup@1004 : Record 91;
      AppManagement@1001 : Codeunit 439;
      AppAmount@1002 : Decimal;
      AppAmountLCY@1003 : Decimal;
    BEGIN
      AppManagement.CalcSalesDocAmount(SalesHeader,AppAmount,AppAmountLCY);
      UserSetup.GET(USERID);
      IF UserSetup."Unlimited Sales Approval" THEN
        EXIT(TRUE)
      ELSE BEGIN
        IF AppAmountLCY > UserSetup."Sales Amount Approval Limit" THEN
          ERROR(Text002)
        ELSE
          EXIT(TRUE);
      END;
    END;

    PROCEDURE InsertExpLog@1000000000(_SalesHeader@1000000000 : Record 36);
    VAR
      PurchSetup@1000000004 : Record 312;
      ProcessLog@1000000001 : Record 50070;
      SalesLine@1000000002 : Record 37;
      LocationL@1000000007 : Record 14;
      ItemL@1000000006 : Record 27;
      RHDSetupL@1000000005 : Record 50177;
      IFExportMgt@1000000003 : Codeunit 50010;
      ItemFunctionsL@1000000008 : Codeunit 50002;
    BEGIN
      // B chrmu >>>>>>>>>>>>>>>>>>>>>>>>>>>
      IF NOT _SalesHeader.Kommissionierung THEN EXIT;

      //A/gob-rste/04.09.12/P0277
      IF _SalesHeader."Cancel Without Interfaces" THEN
        EXIT;
      //E/gob-rste/04.09.12/P0277

      WITH _SalesHeader DO
        IF ("Document Type" = "Document Type"::Order) OR
           ("Document Type" = "Document Type"::"Return Order") THEN BEGIN
          CLEAR(ProcessLog);
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          SalesLine.SETRANGE(Type,SalesLine.Type::Item);
          SalesLine.SETFILTER(Quantity,'<>0');
          IF SalesLine.FIND('-') THEN
            REPEAT
              //H4008, H2056 07.04.15 EHN ++++++++++++++++++++++++++++++++
              IF (SalesLine."Return Type" <> SalesLine."Return Type"::"Spare Part") AND LocationL.GET(SalesLine."Location Code") THEN
                IF LocationL."Rhenus Location" THEN BEGIN
                  RHDSetupL.GET;
                  IF RHDSetupL."Upd. Item On WEA/KAD Creation" THEN BEGIN
                    IF ItemFunctionsL.UpdateItemForWEAKAD(
                         DATABASE::"Sales Line",SalesLine."Document Type",
                         SalesLine."Document No.",SalesLine."Line No.")
                    THEN BEGIN
                      IF ItemL.GET(SalesLine."No.") THEN BEGIN
                        SalesLine.Description := ItemL.Description;
                        SalesLine."Parcels Number" := ItemL."Parcels Number";
                        SalesLine."Unit Volume" := ItemL."Unit Volume";
                        SalesLine."Gross Weight" := ItemL."Gross Weight";
                        SalesLine."Net Weight" := ItemL."Net Weight";
                        ItemL.CALCFIELDS("Parcels Number");
                        IF ItemL."Parcels Number" <> 0 THEN
                          SalesLine."Units per Parcel" := 1 / ItemL."Parcels Number";
                        SalesLine."Item Category Code" := ItemL."Item Category Code";
                        SalesLine.MODIFY;
                      END;
                    END;
                  END;
                END;
              //H4008, H2056 07.04.15 EHN --------------------------------
              //TMI 3.00 IF IFExportMgt.IsRhenusLocation(SalesLine."Location Code") THEN BEGIN
              //TMI 3.00 B
              //A/gob-rste/07.09.12/P0298
              //IF IsRhenusLocation(SalesLine."Location Code") THEN BEGIN
              //E/gob-rste/07.09.12/P0298
              //TMI 3.00 E

                CLEAR(ProcessLog);
                PurchSetup.GET;
                IF SalesLine."Line Status" = PurchSetup."Magento Status for Correction" THEN
                // 090712 chrmu change doc log table >>>>
                  ProcessLog.AddSalesLog(_SalesHeader,'RHENUS',ProcessLog.Action::Cancelation)
                ELSE
                  ProcessLog.AddSalesLog(_SalesHeader,'RHENUS',ProcessLog.Action::New);

                  //ProcessLog.AddLog(0,"Document Type","No.",1,0,SalesLine."Location Code",'RHENUS');
                // 090712 chrmu change doc log table <<<<

                EXIT;
              //A/gob-rste/07.09.12/P0298
              //END;
              //E/gob-rste/07.09.12/P0298
            UNTIL SalesLine.NEXT = 0;
        END;
      // E chrmu <<<<<<<<<<<<<<<<<<<<<<<<<<<
    END;

    PROCEDURE PostExpCom@1000000001(_DocType@1000000002 : Integer;_DocNo@1000000001 : Code[20]);
    VAR
      LT_ComEntry@1000000000 : Record 50003;
      LC_ComMgt@1000000003 : Codeunit 50006;
    BEGIN
      // 4.00 B >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      PurchSetup.GET;
      IF PurchSetup."Post Exp. Commission" <> PurchSetup."Post Exp. Commission"::"On Release Order" THEN
        EXIT;

      LT_ComEntry.SETRANGE("Document No.",_DocNo);
      LT_ComEntry.SETRANGE("Document Type",_DocType);
      LT_ComEntry.SETFILTER("Acc. Status",'<=%1',LT_ComEntry."Acc. Status"::Error);
      IF LT_ComEntry.ISEMPTY THEN
        EXIT;

      LC_ComMgt.PostExpCommission(_DocType,_DocNo);
      // 4.00 E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    END;

    PROCEDURE IsRhenusLocation@1000000004(LocationCode@1000000000 : Code[10]) : Boolean;
    VAR
      Location@1000000001 : Record 14;
    BEGIN
      //TMI B
      IF STRPOS(LocationCode,'RHE') = 1 THEN
        EXIT(TRUE);
      EXIT(FALSE);
      //TMI E
    END;

    PROCEDURE calcKommi@1170000001(VAR salesHeader@1170000001 : Record 36);
    VAR
      eBayNavCSalesHeader@1170000000 : Record 5251571;
      eBayNavCWebshop@1170000003 : Record 5251553;
      salesLine@1170000002 : Record 37;
      Purchasing@1170000004 : Record 5721;
      Kommissionierung@1170000005 : Boolean;
    BEGIN
      //CHR120531 +
      Kommissionierung := TRUE;

      salesLine.RESET;
      salesLine.SETRANGE("Document Type",salesHeader."Document Type");
      salesLine.SETRANGE("Document No.",salesHeader."No.");
      salesLine.SETRANGE(Type,salesLine.Type::Item);
      IF salesLine.FIND('-') THEN
        REPEAT
          IF Purchasing.GET(salesLine."Purchasing Code") THEN
            IF NOT Purchasing.Kommisionierung THEN
              Kommissionierung := FALSE;
        UNTIL salesLine.NEXT = 0;
      IF Kommissionierung THEN
        salesHeader.VALIDATE(Kommissionierung,TRUE)
      ELSE
        salesHeader.VALIDATE(Kommissionierung,salesHeader."XML Kommissionierung");
      //CHR120531 -
    END;

    PROCEDURE "***GOB***"@1000000002();
    BEGIN
    END;

    PROCEDURE InsertOrder2DDInterface@1000000003(VAR SalesHeader@1000000000 : Record 36;SalesLine@1000000001 : Record 37;txtTableName@1000000002 : Text[50];LocationCode@1000000003 : Code[20]) : Integer;
    VAR
      SalesHeaderDD@1000000004 : Record 50061;
      SalesLineDD@1000000005 : Record 50062;
      SalesHeaderDD2@1000000007 : Record 50061;
      SalesLineDD2@1000000006 : Record 50062;
      Location@1000000008 : Record 14;
      DDInterfaceOut@1000000009 : Codeunit 50051;
      DDCheckfield@1000000010 : Codeunit 50053;
      EntryNo@1000000011 : Integer;
      DDSetup@1000000012 : Record 50060;
      DDPosTemp@1000000014 : Integer;
      gobError001@1000000013 : TextConst 'ENU=The sales order has already been processed at docdata warehouse!';
      Language@1000000015 : Record 8;
      cFPCManagement@1000000016 : Codeunit 50003;
      rSalesHeader@1000000017 : Record 36;
      rPurchasing@1000000018 : Record 5721;
      FPCMgt@1000000019 : Codeunit 50003;
      Customer@1000000020 : Record 18;
      DPDSetup@1000000021 : Record 50221;
    BEGIN
      // InsertOrder2DDInterface
      //gob-sfe/A

      EntryNo := 0;

      CASE txtTableName OF
        SalesHeader.TABLENAME:
           BEGIN

             IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Order THEN
               EXIT;

             DDCheckfield.CheckSalesHeader(SalesHeader);
             SalesHeaderDD.INIT;
             SalesHeaderDD.TRANSFERFIELDS(SalesHeader);
             //H1430, H1194 05.08.14 DMA +++++++++++++++++++++
             //S/P1230
             Customer.GET(SalesHeader."Sell-to Customer No.");
             SalesHeaderDD."Phone No." := Customer."Phone No.";
             SalesHeaderDD."E-Mail" := Customer."E-Mail";
             SalesHeaderDD."Auction ID" := '';
             //E/P1230
             //H1430, H1194 01.08.14 DMA ---------------------
             IF SalesHeaderDD."Currency Code" = '' THEN
              SalesHeaderDD."Currency Code" := 'EUR';

             SalesHeaderDD."Entry No." := DDInterfaceOut.GETORDHENTRYNO;
             SalesHeaderDD."Order No. Navision" := SalesHeader."No.";
             //cuDDInterfaceOut.SetOrderNoHeader(SalesHeaderDD);
             //A,gob-dst,20.09.2012,P0361
             SalesHeaderDD."Order No. Navision" := SalesHeader."No.";

             IF SalesHeader."DD Active Version No." = '' THEN BEGIN
               IF NOT bIsCancelation THEN
                 SalesHeader."DD Active Version No." := '901';
             END ELSE BEGIN
               IF (NOT bIsCancelation)
                 AND (GlobalAction2<>'HDR_CHANGE') //A/gob-sfe/18.12.12/P0668
                THEN
                 SalesHeader."DD Active Version No." := INCSTR(SalesHeader."DD Active Version No.");
             END;

             SalesHeaderDD."Active Version No." := SalesHeader."DD Active Version No.";

             //SalesHeaderDD."No." := SalesHeader."No.";
             SalesHeaderDD."No." := SalesHeader."No." + SalesHeader."DD Active Version No.";
             //E,gob-dst,20.09.2012,P0361

             SalesHeaderDD."Document Entry Type" := SalesHeaderDD."Document Entry Type"::Sales;
             SalesHeaderDD."Entry Date" := WORKDATE;
             SalesHeaderDD."Entry Time" := TIME;
             SalesHeaderDD.Company := COMPANYNAME;
             SalesHeaderDD."DD Status" := SalesHeaderDD."DD Status"::"in process";
             SalesHeaderDD.Direction := SalesHeaderDD.Direction::out;
             SalesHeaderDD."Shipment Date" := SalesHeader."Requested Delivery Date";

             //A,P0188,gob-dst,15.08.2012,P0884
             SalesHeaderDD."Bill-to Name" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Bill-to Name",TRUE);
             SalesHeaderDD."Bill-to Name 2" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Bill-to Name 2",TRUE);
             SalesHeaderDD."Bill-to Address" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Bill-to Address",TRUE);
             SalesHeaderDD."Bill-to Address 2" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Bill-to Address 2",TRUE);
             SalesHeaderDD."Bill-to City" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Bill-to City",TRUE);
             SalesHeaderDD."Sell-to Customer Name" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Sell-to Customer Name",TRUE);
             SalesHeaderDD."Sell-to Customer Name 2" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Sell-to Customer Name 2",TRUE);
             SalesHeaderDD."Sell-to Address" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Sell-to Address",TRUE);
             SalesHeaderDD."Sell-to Address 2" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Sell-to Address 2",TRUE);
             SalesHeaderDD."Sell-to City" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Sell-to City",TRUE);
             SalesHeaderDD."Ship-to Name" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Ship-to Name",TRUE);
             SalesHeaderDD."Ship-to Name 2" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Ship-to Name 2",TRUE);
             SalesHeaderDD."Ship-to Address" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Ship-to Address",TRUE);
             SalesHeaderDD."Ship-to Address 2" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Ship-to Address 2",TRUE);
             SalesHeaderDD."Ship-to City" := cFPCManagement.DeleteCRLF(SalesHeaderDD."Ship-to City",TRUE);
             //E,P0188,gob-dst,15.08.2012,P0884

             //A,gob-dst,27.09.2012,P0388
             SalesHeaderDD."Bill-to Name" := CONVERTSTR(SalesHeaderDD."Bill-to Name",'"|',''' ');
             SalesHeaderDD."Bill-to Name 2" := CONVERTSTR(SalesHeaderDD."Bill-to Name 2",'"|',''' ');
             SalesHeaderDD."Bill-to Address" := CONVERTSTR(SalesHeaderDD."Bill-to Address",'"|',''' ');
             SalesHeaderDD."Bill-to Address 2" := CONVERTSTR(SalesHeaderDD."Bill-to Address 2",'"|',''' ');
             SalesHeaderDD."Bill-to City" := CONVERTSTR(SalesHeaderDD."Bill-to City",'"|',''' ');
             SalesHeaderDD."Sell-to Customer Name" := CONVERTSTR(SalesHeaderDD."Sell-to Customer Name",'"|',''' ');
             SalesHeaderDD."Sell-to Customer Name 2" := CONVERTSTR(SalesHeaderDD."Sell-to Customer Name 2",'"|',''' ');
             SalesHeaderDD."Sell-to Address" := CONVERTSTR(SalesHeaderDD."Sell-to Address",'"|',''' ');
             SalesHeaderDD."Sell-to Address 2" := CONVERTSTR(SalesHeaderDD."Sell-to Address 2",'"|',''' ');
             SalesHeaderDD."Sell-to City" := CONVERTSTR(SalesHeaderDD."Sell-to City",'"|',''' ');
             SalesHeaderDD."Ship-to Name" := CONVERTSTR(SalesHeaderDD."Ship-to Name",'"|',''' ');
             SalesHeaderDD."Ship-to Name 2" := CONVERTSTR(SalesHeaderDD."Ship-to Name 2",'"|',''' ');
             SalesHeaderDD."Ship-to Address" := CONVERTSTR(SalesHeaderDD."Ship-to Address",'"|',''' ');
             SalesHeaderDD."Ship-to Address 2" := CONVERTSTR(SalesHeaderDD."Ship-to Address 2",'"|',''' ');
             SalesHeaderDD."Ship-to City" := CONVERTSTR(SalesHeaderDD."Ship-to City",'"|',''' ');
             //E,gob-dst,27.09.2012,P0388

             IF Language.GET(SalesHeader."Language Code") THEN BEGIN
               IF Language."DD Language ID" <> '' THEN
                 SalesHeaderDD."Language Code" := Language."DD Language ID"
               ELSE
                 SalesHeaderDD."Language Code" := 'en';
             END ELSE
               SalesHeaderDD."Language Code" := 'en';
             //a/gob-sfe/P0088

             //A,gob-dst,04.09.2012,P0274
             //SalesHeader.CALCFIELDS("Website No.");  //P0284  //P0316
             IF FORMAT(SalesHeader."Website No.")<>'0' THEN
               SalesHeaderDD."Web Site Code" := FORMAT(SalesHeader."Website No.")
             ELSE
               SalesHeaderDD."Web Site Code":= COPYSTR(SalesHeader."Sell-to Customer No.",1,1); //P0415/gob-sfe/24.10.12

             //E,gob-dst,04.09.2012,P0274
            //H1390 18.0814 MSL ++++++++++++++++++++++++++++++++++++++
            //SalesHeaderDD."Shipping Agent Code":=FPCMgt.CalcShippingAgent(SalesHeader,'DOCDATA'); //P0651/gob-sfe/05.12.12
            //H1390 18.0814 MSL --------------------------------------
             //S/P1230
             DPDSetup.GET;
             DPDSetup.TESTFIELD("Default Service Docdata");
             DPDSetup.TESTFIELD("Shipping Agent DPD");
             IF SalesHeaderDD."Shipping Agent Code" = DPDSetup."Shipping Agent DPD" THEN
               SalesHeaderDD.DPD_Service := DPDSetup."Default Service Docdata";
             //E/P1230
             CASE GlobalDDAction OF
               GlobalDDAction::n  : BEGIN
                IF SalesHeader."DD Entry No." <> 0 THEN BEGIN
                  IF SalesHeaderDD2.GET(SalesHeader."DD Entry No.") THEN BEGIN
                    IF (SalesHeaderDD2."DD Status" = SalesHeaderDD2."DD Status"::new) OR
                       (SalesHeaderDD2."DD Status" = SalesHeaderDD2."DD Status"::transmitted)
                    THEN
                      SalesHeaderDD."DD Action" := SalesHeaderDD."DD Action"::N;
                    //gob-sfe/a/14.09.12/P0328
                    //SalesHeaderDD2."DD Status" := SalesHeaderDD2."DD Status"::canceled; //old Sales Order marked for cancellation
                    //SalesHeaderDD2.MODIFY;
                    //gob-sfe/e/14.09.12/P0328
                  END ELSE
                    SalesHeaderDD."DD Action" := SalesHeaderDD."DD Action"::N;
                END ELSE
                  SalesHeaderDD."DD Action" := SalesHeaderDD."DD Action"::N;
               END;
               GlobalDDAction::d : BEGIN
                 IF SalesHeader."DD Entry No." <> 0 THEN BEGIN
                   IF SalesHeaderDD2.GET(SalesHeader."DD Entry No.") THEN BEGIN
                     IF (SalesHeaderDD2."DD Status" = SalesHeaderDD2."DD Status"::new) OR
                        (SalesHeaderDD2."DD Status" = SalesHeaderDD2."DD Status"::transmitted)
                     THEN
                       SalesHeaderDD."DD Action" := SalesHeaderDD."DD Action"::N;

                     //gob-sfe/a/14.09.12/P0328
                     //SalesHeaderDD2."DD Status" := SalesHeaderDD2."DD Status"::canceled; //old Sales Order marked for cancellation
                     //SalesHeaderDD2.MODIFY;
                     //gob-sfe/e/14.09.12/P0328
                   END ELSE
                     SalesHeaderDD."DD Action" := SalesHeaderDD."DD Action"::N;
                 END ELSE
                   SalesHeaderDD."DD Action" := SalesHeaderDD."DD Action"::N;

               END;
               GlobalDDAction::c : BEGIN
                IF SalesHeader."DD Entry No." <> 0 THEN BEGIN
                  IF SalesHeaderDD2.GET(SalesHeader."DD Entry No.") THEN BEGIN
                    IF (SalesHeaderDD2."DD Status" = SalesHeaderDD2."DD Status"::new) OR
                       (SalesHeaderDD2."DD Status" = SalesHeaderDD2."DD Status"::transmitted)
                    THEN
                      SalesHeaderDD."DD Action" := SalesHeaderDD."DD Action"::N;
                    //gob-sfe/a/14.09.12/P0328
                    //SalesHeaderDD2."DD Status" := SalesHeaderDD2."DD Status"::canceled; //old Sales Order marked for cancellation
                    //SalesHeaderDD2.MODIFY;
                    //gob-sfe/e/14.09.12/P0328
                  END ELSE
                    SalesHeaderDD."DD Action" := SalesHeaderDD."DD Action"::N;
                END ELSE
                  SalesHeaderDD."DD Action" := SalesHeaderDD."DD Action"::N;

               END;
             END;
             //e/gob-sfe/P0088
             //IF
              SalesHeaderDD.INSERT;
             // THEN
             HeaderEntryNo := SalesHeaderDD."Entry No.";
             EntryNo := SalesHeaderDD."Entry No.";

             //Bereits an DD versandte Positionen raussuchen: SalesLineDD
             SetPointerFilter(SalesLineDD,SalesHeaderDD2,SalesHeader);
             IF SalesLineDD.FIND('-') THEN
               REPEAT
                 //gegen den aktuellen Auftrag vergleichen und fehlende Positionen identifizieren
                 //und Storno Position fr DD erstellen
                 SetPointerFilter2(SalesLine,SalesLineDD);
                 IF NOT SalesLine.FIND('-') THEN BEGIN
                   IF (SalesLineDD."DD Status" = SalesLineDD."DD Status"::transmitted) OR
                     (SalesLineDD."DD Status" = SalesLineDD."DD Status"::new) THEN BEGIN
                     SalesLineDD2.INIT;
                     SalesLineDD2 := SalesLineDD;
                     SalesLineDD2."Entry No." := DDInterfaceOut.GETORDLENTRYNO;
                     SalesLineDD2."Document No." := SalesHeaderDD."No.";
                     SalesLineDD2."Order No. Navision" := SalesHeaderDD."Order No. Navision";
                     SalesLineDD2."DD Status" := SalesLineDD2."DD Status"::new;
                     SalesLineDD2."DD Action" := SalesLineDD2."DD Action"::D;
                     SalesLineDD2."Entry Date" := WORKDATE;
                     SalesLineDD2."Entry Time" := TIME;
                     SalesLineDD2."Header Entry No." := SalesHeaderDD."Entry No.";
                     SalesLineDD2.Quantity := 0;  //Kennzeichen fr Storno
                     SalesLineDD2."File Name" := '';
                     SalesLineDD2."Trans. No." := '';
                     SalesLineDD2."File Position" := 0;
                     SalesLineDD2.INSERT;
                   END;
                   //gob-sfe/a/14.09.12/P0328
                   //SalesLineDD."DD Status" := SalesLineDD."DD Status"::canceled;  //old Salesline set to cancel
                   //SalesLineDD.MODIFY;
                   //gob-sfe/a/14.09.12/P0328

                 END;
               UNTIL SalesLineDD.NEXT = 0;

           END;
        SalesLine.TABLENAME:
           BEGIN

             IF SalesLine."Document Type" <> SalesLine."Document Type"::Order THEN
               EXIT;
             //a/P0668/gob-sfe/19.12.12
             //IF SalesLine.Quantity = 0 THEN
             //  EXIT;
             //a/P0668/gob-sfe/19.12.12
             //A,gob-dst,21.09.2012,P0367/P0370
             //IF Location.GET(SalesLine."Location Code") THEN
             //  IF NOT Location."Docdata Location" THEN
             //    EXIT;
             rPurchasing.GET(SalesLine."Purchasing Code");
             Location.GET(rPurchasing."Location Code");
             IF NOT Location."Docdata Location"  THEN BEGIN
      //         rPurchasing.GET(SalesLine."Old Purchasing Code");
      //         Location.GET(rPurchasing."Location Code");
      //         IF NOT Location."Docdata Location" THEN
                 EXIT;
             END;
             //E,gob-dst,21.09.2012,P0367/P0370

             DDCheckfield.CheckSaleslIne(SalesLine);

             SalesLineDD.INIT;
             SalesLineDD.TRANSFERFIELDS(SalesLine);
             SalesLineDD."Entry No." := DDInterfaceOut.GETORDLENTRYNO;
             SalesLineDD."Order No. Navision" := SalesHeader."No.";
             //A,gob-dst,20.09.2012,P0361
             SalesLineDD."Document No." := SalesHeader."No." + SalesHeader."DD Active Version No.";
             SalesLineDD."Active Version No." := SalesHeader."DD Active Version No.";
             //E,gob-dst,20.09.2012,P0361
             //DDInterfaceOut.SetOrderNoLine(SalesLineDD);
             SalesLineDD."Document Entry Type" := SalesLineDD."Document Entry Type"::Sales;
             SalesLineDD."Entry Date" := WORKDATE;
             SalesLineDD."Entry Time" := TIME;
             SalesLineDD.Company := COMPANYNAME;
             SalesLineDD."Header Entry No." := HeaderEntryNo;
             SalesLineDD."DD Status" := SalesLineDD."DD Status"::new;
             SalesLineDD.Direction := SalesLineDD.Direction::out;
             SalesLineDD."DD Pos. No." := SalesLine."DD Pos No.";
             IF GlobalDDAction = GlobalDDAction::c THEN //gob-sfe/24.07.12
               SalesLineDD.Quantity := 0; //gob-sfe/24.07.12

             {//P0328/gob-sfe
             IF SalesLineDD2.GET(SalesLine."DD Entry No.") THEN BEGIN
               IF (SalesLineDD2."DD Status" = SalesLineDD2."DD Status"::new) OR
                  (SalesLineDD2."DD Status" = SalesLineDD2."DD Status"::transmitted) THEN
                 SalesLineDD."DD Action" := SalesLineDD."DD Action"::N;
               //gob-sfe/a/14.09.12/P0328
               //SalesLineDD2."DD Status" := SalesLineDD2."DD Status"::canceled;
               //SalesLineDD2.MODIFY;
               //gob-sfe/e/14.09.12/P0328
             END ELSE
               SalesLineDD."DD Action" := SalesLineDD."DD Action"::N;

             IF SalesLineDD."DD Action" = SalesLineDD."DD Action"::" " THEN
               SalesLineDD."DD Action" := SalesLineDD."DD Action"::N;
             }//P0328/gob-sfe

             //P0888,H0587 21.07.14 HCN +++++++++++++++++++++++++++++
             IF NOT SalesLine."Completely Shipped" THEN BEGIN
               IF (NOT bIsCancelation) AND
                  (SalesLine.Quantity <> 0) AND
                  NOT CheckIfIPLCancelExists(SalesLine)
               THEN BEGIN
                 SalesLineDD.INSERT;
               END ELSE BEGIN
                 IF bIsCancelation THEN BEGIN
                   IF DDInterfaceOut.IsCancelLineInDDOrder(SalesLine."Line No.",SalesLineDD."Document No.") THEN BEGIN
                     SalesLineDD.INSERT;
                     EntryNo := SalesLineDD."Entry No.";
                   END;
                 END;
               END;
             END;
             //P0888,H0587 21.07.14 HCN -----------------------------

             EntryNo := SalesLineDD."Entry No."

           END;
      END;

      EXIT(EntryNo);
      //gob-sfe/E
    END;

    PROCEDURE SetPointerFilter@1000000006(VAR recSalesLineDD@1000000000 : Record 50062;recSalesHeaderDD2@1000000001 : Record 50061;recSalesHeader@1000000002 : Record 36);
    BEGIN
      // SetPointerFilter
      //gob-sfe/A
      recSalesLineDD.SETCURRENTKEY(
        "Document Entry Type","Header Entry No.","Document Type","Document No.","Line No.","DD Status",Direction,Company);
      recSalesLineDD.SETRANGE("Document Entry Type",recSalesLineDD."Document Entry Type"::Sales);
      recSalesLineDD.SETRANGE("Header Entry No.", recSalesHeaderDD2."Entry No.");
      recSalesLineDD.SETRANGE("Document Type",recSalesHeader."Document Type");
      recSalesLineDD.SETRANGE("Document No.",recSalesHeaderDD2."No.");

      //A,gob-dst,21.09.12,P0367
      //recSalesLineDD.SETFILTER("DD Status",'%1|%2',recSalesLineDD."DD Status"::transmitted,
      //  recSalesLineDD."DD Status"::new);
      recSalesLineDD.SETFILTER("DD Status",'%1|%2|%3',recSalesLineDD."DD Status"::transmitted,
        recSalesLineDD."DD Status"::new,recSalesLineDD."DD Status"::"status change");
      //E,gob-dst,21.09.12,P0367
      recSalesLineDD.SETRANGE(Direction,recSalesLineDD.Direction::out);
      recSalesLineDD.SETRANGE(Company,COMPANYNAME);
      //gob-sfe/E
    END;

    PROCEDURE SetPointerFilter2@1000000007(VAR recSalesLine2@1000000000 : Record 37;recSalesLineDD2@1000000001 : Record 50062);
    VAR
      DDSetup@1000000002 : Record 50060;
    BEGIN
      // SetPointerFilter2
      //gob-sfe/A
      DDSetup.GET;
      recSalesLine2.RESET;
      recSalesLine2.SETCURRENTKEY("Document Type","Document No.","DD Pos No.");
      recSalesLine2.SETRANGE("Document Type",recSalesLineDD2."Document Type");
      //recSalesLine2.SETRANGE("Document No.",recSalesLIneDD2."Document No.");//P0088
      recSalesLine2.SETRANGE("Document No.",recSalesLineDD2."Order No. Navision");//P0361
      recSalesLine2.SETRANGE("DD Pos No.",recSalesLineDD2."DD Pos. No.");
      recSalesLine2.SETFILTER("Purchasing Code",DDSetup."Purchasing Code Filter"); //gob-sfe/a/14.09.12/P0328
      //gob-sfe/E
    END;

    PROCEDURE InitiateOrder2DDInterface@1000000010(VAR SalesHeader@1000000000 : Record 36;Action@1000000003 : 'n,d,c');
    VAR
      SalesLine@1000000001 : Record 37;
      PosNo@1000000002 : Integer;
      DDSetup@1000000004 : Record 50060;
      Location@1000000005 : Record 14;
      DoModify@1000000006 : Boolean;
      PurchasingActual@1000000007 : Record 5721;
      PurchasingOld@1000000008 : Record 5721;
      Proceed@1000000009 : Boolean;
      rDDLine@1000000010 : Record 50062;
      DDInterfaceOutbound@1000000011 : Codeunit 50051;
      SalesLine2@1000000012 : Record 37;
      tmpDDEntryNo@1000000013 : Integer;
    BEGIN
      // InitiateOrder2DDInterface
      // all change marks dated 2012 or older removed (H0587 11.04.14 HCN)

      WITH SalesHeader DO BEGIN
        DDSetup.GET;
        DDSetup.TESTFIELD("Purchasing Code Filter");
        IF (Action=Action::d) AND ("DD Entry No."=0) THEN
          EXIT;

        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        IF SalesLine.FIND('-') THEN BEGIN

          DDSetup.GET;
          IF NOT DDSetup."DD Interface active" THEN
            EXIT;

          GlobalAction2 := DDInterfaceOutbound.CheckIfOrderHasChanged(SalesHeader,bIsCancelation);
          IF (GlobalAction2 = 'FALSE') OR
             (GlobalAction2 = 'NOL_CHANGE') //No Line Change
          THEN
            EXIT;

          //zur Verhinderung Doppelkommissionierung Prfung
          IF NOT CheckSOStatus(SalesHeader) THEN
            EXIT;

          GlobalDDAction := Action;
          HeaderEntryNo := 0;
          DDHeader.LOCKTABLE;
          IF DDHeader.FINDLAST THEN;
            "DD Entry No." := InsertOrder2DDInterface(SalesHeader,SalesLine,TABLENAME,"Location Code");
          MODIFY;
          PosNo := GetDDPosNo(SalesHeader);

          REPEAT
            Proceed := FALSE;
            PurchasingActual.GET(SalesLine."Purchasing Code");
            Location.GET(PurchasingActual."Location Code");
            IF Location."Docdata Location"  THEN
              Proceed := TRUE;
            IF NOT Proceed THEN BEGIN
              IF PurchasingOld.GET(SalesLine."Old Purchasing Code") THEN BEGIN
                Location.GET(PurchasingOld."Location Code");
                IF Location."Docdata Location" THEN
                  Proceed := TRUE;
              END;
            END;

            IF Proceed THEN BEGIN
              IF SalesLine."DD Entry No."=0 THEN
                DoModify:=TRUE
              ELSE
                DoModify:=FALSE;
              IF SalesLine."DD Pos No." = 0 THEN BEGIN
                PosNo += 1;
                SalesLine."DD Pos No." := PosNo;
              END;
              SalesLine."DD Entry No." := InsertOrder2DDInterface(SalesHeader,SalesLine,SalesLine.TABLENAME,SalesLine."Location Code");
                SalesLine.MODIFY;
            END;
          UNTIL SalesLine.NEXT = 0;
        END;

        IF DDHeader.GET("DD Entry No.") THEN BEGIN
          rDDLine.RESET();
          rDDLine.SETRANGE("Header Entry No.",DDHeader."Entry No.");
          IF rDDLine.ISEMPTY THEN BEGIN
            DDHeader.DELETE(TRUE);
            "DD Entry No." := 0;
            MODIFY;
            //H0587 07.07.14 HCN +++++++++++++++++++++++++++++
            InterfaceInitiationSuccessful := FALSE;
            //H0587 07.07.14 HCN -----------------------------
          END ELSE BEGIN
            DDHeader."DD Status" := DDHeader."DD Status"::new;
            DDHeader.MODIFY;
            //H0587 07.07.14 HCN +++++++++++++++++++++++++++++
            InterfaceInitiationSuccessful := TRUE;
            //H0587 07.07.14 HCN -----------------------------
          END;
        END;
      END;
    END;

    PROCEDURE CheckSOStatus@1000000012(SalesHeader@1000000000 : Record 36) : Boolean;
    VAR
      Location@1000000002 : Record 14;
      gobError001@1000000003 : TextConst 'ENU=The process has been stopped!';
      gobText001@1000000004 : TextConst 'ENU=The sales order has already been processed at docdata warehouse!\Do you want to continue?';
      SalesLine@1000000005 : Record 37;
      LocText004@1000000001 : TextConst 'DEU=Sie k”nnen diese Position (%1) nicht mehr automatisiert ber das DocData Interface stornieren.\ Sie mssen bei DocData erfragen, ob eine Stornierung weiterhin m”glich ist. Wollen Sie fortfahren?;ENU=You can''t cancel this order line (%1) via DocData interface. You have to check if a cancelation is still possible. Continue?';
      DDInterfaceOut@1000000006 : Codeunit 50051;
      bReturnValue@1000000007 : Boolean;
    BEGIN
      // CheckSOStatus
      //A,gob-dst,11.10.2012,P0440
      bReturnValue := TRUE;
      //E,gob-dst,11.10.2012,P0440

      //A,gob-sfe,19.09.2012,P0328
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine.FIND('-') THEN
      REPEAT
        IF Location.GET(SalesLine."Location Code") THEN BEGIN
          IF Location."Docdata Location" THEN BEGIN
            IF SalesHeader.Kommissionierung THEN BEGIN
              IF NOT SalesHeader."Cancel Without Interfaces" THEN BEGIN
                IF NOT DDInterfaceOut.CheckUpdateAllowed(SalesLine) THEN BEGIN
                  //A,gob-dst,15.04.2013,P0888
                  IF NOT SalesLine."Completely Shipped" THEN BEGIN
                  //E,gob-dst,15.04.2013,P0888
                    IF GUIALLOWED THEN BEGIN
                      IF NOT CONFIRM(LocText004,FALSE,SalesLine."DD Pos No.") THEN
                        ERROR('Process canceled');
                    //A,gob-dst,11.10.2012,P0440
                    //END;
                    END ELSE
                      bReturnValue := FALSE;
                    //E,gob-dst,11.10.2012,P0440
                  //A,gob-dst,15.04.2013,P0888
                  END;
                  //E,gob-dst,15.04.2013,P0888
                END;
              END;
            END;
          END;
        END;
      UNTIL SalesLine.NEXT = 0;
      //E,gob-sfe,19.09.2012,P0328

      //A,gob-dst,11.10.2012,P0440
      EXIT(bReturnValue);
      //E,gob-dst,11.10.2012,P0440
    END;

    PROCEDURE CheckDDLocationInside@1000000008(SalesHeader@1000000000 : Record 36) : Boolean;
    VAR
      SalesLine@1000000001 : Record 37;
      Location@1000000002 : Record 14;
    BEGIN
      //gob-sfe/a/11.07.2012
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      //SalesLine.SETFILTER(Quantity,'<>0');
      IF SalesLine.FIND('-') THEN BEGIN
        REPEAT
          IF Location.GET(SalesLine."Location Code") THEN
            IF Location."Docdata Location" THEN
              EXIT(TRUE);
        UNTIL SalesLine.NEXT=0;
        EXIT(FALSE);
      END ELSE
        EXIT(FALSE);
      //gob-sfe/e/11.07.2012
    END;

    PROCEDURE CalledbyMagentoCancel@1000000005(IsCalledByMC@1000000000 : Boolean);
    BEGIN
      //A/P0216
      GlobalCallbyMagCancel := IsCalledByMC;
      //E/P0216
    END;

    PROCEDURE GetDDPosNo@1000000011(SalesHeaderLoc@1000000000 : Record 36) Pos : Integer;
    VAR
      SalesLine@1000000001 : Record 37;
    BEGIN
      //a/P0328/gob-sfe/18.09.12
      Pos:=0;
      SalesLine.SETCURRENTKEY("Document Type","Document No.","DD Pos No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type",SalesHeaderLoc."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeaderLoc."No.");
      IF SalesLine.FINDLAST THEN
        Pos:=SalesLine."DD Pos No.";
      EXIT(Pos)
      //e/P0328/gob-sfe/18.09.12
    END;

    PROCEDURE CheckDDLocationInside2@1000000089(SalesHeader@1000000000 : Record 36) : Boolean;
    VAR
      SalesLine@1000000001 : Record 37;
      Location@1000000002 : Record 14;
      Purchasing@1000000003 : Record 5721;
      DDSetup@1000000004 : Record 50060;
    BEGIN
      //gob-sfe/a/P0370
      DDSetup.GET;
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      //SalesLine.SETFILTER("Purchasing Code",DDSetup."Purchasing Code Filter");
      IF SalesLine.FIND('-') THEN BEGIN
        REPEAT
          Purchasing.GET(SalesLine."Purchasing Code");
            IF Location.GET(Purchasing."Location Code") THEN
              IF Location."Docdata Location" THEN
                EXIT(TRUE);
          Purchasing.GET(SalesLine."Old Purchasing Code");
            IF Location.GET(Purchasing."Location Code") THEN
              IF Location."Docdata Location" THEN
                EXIT(TRUE);
        UNTIL SalesLine.NEXT=0;
        EXIT(FALSE)
      END ELSE
        EXIT(FALSE);
      //gob-sfe/e/P0370
    END;

    PROCEDURE CalledFromCancel@1000000009(pIsCancelation@1000000000 : Boolean);
    BEGIN
      //P0361
      bIsCancelation := pIsCancelation;
    END;

    PROCEDURE "***HME************************"@1000000014();
    BEGIN
    END;

    PROCEDURE GetResultInterfaceInitiation@1000000016() : Boolean;
    BEGIN
      // GetResultInterfaceInitiation

      //H0587 07.07.14 HCN +++++++++++++++++++++++++++++
      EXIT(InterfaceInitiationSuccessful);
      //H0587 07.07.14 HCN -----------------------------
    END;

    PROCEDURE CheckIfIPLCancelExists@1000000013(SalesLineV@1000000000 : Record 37) : Boolean;
    VAR
      InterfaceProcessLogL@1000000001 : Record 50087;
    BEGIN
      // CheckIfIPLCancelExists
      //H0587 21.07.14 HCN +++++++++++++++++++++++++++++
      FPCGeneralSetup.GET;

      CLEAR(InterfaceProcessLogL);
      InterfaceProcessLogL.SETCURRENTKEY("Entry Type","Entry Subtype",
                                         "Document No.","Document Line No.",
                                         Interface,Status,"Process Status");
      InterfaceProcessLogL.SETRANGE("Entry Type",InterfaceProcessLogL."Entry Type"::Sales);
      InterfaceProcessLogL.SETRANGE("Entry Subtype",InterfaceProcessLogL."Entry Subtype"::Order);
      InterfaceProcessLogL.SETRANGE("Document No.",SalesLineV."Document No.");
      InterfaceProcessLogL.SETRANGE("Document Line No.",SalesLineV."Line No.");
      InterfaceProcessLogL.SETRANGE(Status,FPCGeneralSetup."Status Cancel");
      InterfaceProcessLogL.SETFILTER("Process Status",'<>%1',InterfaceProcessLogL."Process Status"::Information);
      InterfaceProcessLogL.SETRANGE(Trigger,FPCGeneralSetup."Trigger Magento Cancel Manual");
      IF InterfaceProcessLogL.ISEMPTY THEN BEGIN
        EXIT(FALSE);
      END ELSE BEGIN
        EXIT(TRUE);
      END;
      //H0587 21.07.14 HCN -----------------------------
    END;

    PROCEDURE IsWhseLFLocation@1000000015(LocationCode@1000000000 : Code[10]) : Boolean;
    VAR
      LocationL@1000000001 : Record 14;
    BEGIN
      //H1410 11.08.14 DMA +++++++++++++++++++++++++++++
      IF LocationL.GET(LocationCode) THEN BEGIN
        IF LocationL."Is LF Whse." THEN
        EXIT(TRUE);
      END;

      EXIT(FALSE);
      //H1410 11.08.14 DMA -----------------------------
    END;

    PROCEDURE InsertWhseLFExpLog@1000000017(SalesHeaderV@1000000000 : Record 36);
    VAR
      PurchSetupL@1000000004 : Record 312;
      SalesLineL@1000000002 : Record 37;
      ProcessLogL@1000000005 : Record 50315;
    BEGIN
      //H1408 03.09.14 EHN +++++++++++++++++++++++++++++++++++++++++++++++++++++++

      IF NOT SalesHeaderV.Kommissionierung THEN
        EXIT;

      IF SalesHeaderV."Cancel Without Interfaces" THEN
        EXIT;

      WITH SalesHeaderV DO
        IF ("Document Type" = "Document Type"::Order) OR
           ("Document Type" = "Document Type"::"Return Order") THEN BEGIN
          SalesLineL.RESET;
          SalesLineL.SETRANGE("Document Type","Document Type");
          SalesLineL.SETRANGE("Document No.","No.");
          SalesLineL.SETRANGE(Type,SalesLineL.Type::Item);
          SalesLineL.SETFILTER(Quantity,'<>0');
          IF SalesLineL.FIND('-') THEN
            REPEAT
              PurchSetup.GET;
              CLEAR(ProcessLogL);
              FPCGeneralSetup.GET();
              IF SalesLineL."Line Status" = PurchSetup."Magento Status for Correction" THEN
                ProcessLogL.AddSalesLog(SalesHeaderV,FPCGeneralSetup."Interface Code Whse. LF",ProcessLogL.Action::Cancelation)
              ELSE
                ProcessLogL.AddSalesLog(SalesHeaderV,FPCGeneralSetup."Interface Code Whse. LF",ProcessLogL.Action::New);
              EXIT;
            UNTIL SalesLineL.NEXT = 0;
        END;
      //H1408 03.09.14 EHN -------------------------------------------------------
    END;

    BEGIN
    {
      eBay1.00 eBay#001 "OnRun" Testfield "Waiting for payment receipt" hinzugefgt

      25.08.11  chrmu - on release - put the document in the Document Log for the interface processing
      DHL 26.09.11 On Release new call of CreateDHLProcessingRequest function

      1.00  10.11.11  eich -Reopen: post credit memo for prepayment
      2.00  25.11.11  eich -get purchasing code
      3.00  07.12.11  TMI  IsRhenusLocation function, for Anveo
      CHR120531        - Calculate Kommisionirung
      +-----------------------------------------------------+
      |               GOB Software & Systeme                |
      +-----------------------------------------------------+
      |                FP Commerce Anpassungen              |
      -------------------------------------------------------

      Version        Bemerkung
      -------------------------------------------------------
      P0001          GOB-SFE  23.05.12  Funktion: InsertOrder2DDInterface
      P0015          gob-rste 31.05.12  On Release Check for TEST TEST Orders an auto. Cancel
      P0022          gob-mno  08.06.12  Neue Funktion "CheckPickingAllowed", Funktion CalcKommi auskommentiert
      P0030          gob-rste 12.06.12  OnRelease also Check for TESTVORNAME TESTNACHNAME
      P0042          gob-rste 16.06.12  Check test oders for all languages, check test comment
      P0041          gob-rste 17.07.12  New Code for Picking Interruption
      P0076          gob-rste 23.07.12  Changed Cancel for Orders with Test Comment
      P0001          gob-sfe  24.07.12  CheckDDLocationInside Modifaction
      P0088          gob-sfe  25.07.12  Modfiy for Sales Header/Sales Line
      P0096          gob-rste 26.07.12  Fill Change Log Entry OnRelease
      P0107          gob-rste 30.07.12  New Check if User is Allowed to Release Sales Order
      P0188          gob-dst  15.08.12  DD Sales Order Export, CRLF und TAB aus Namens- und Adressfeldern entfernen
      P0184          gob-rste 15.08.12  New Code for Reset Cancel in Reopen, Fill Log Table
      P0205          gob-rste 16.08.12  Dont check if NAVConnector is releasing
      P0209          gob-sfe  17.08.12  Check SO State Bugfix
      P0214          gob-rste 22.08.12  Don't Cleat Cancelation reason code
      P0249          gob-dst  24.08.12  Anpassung "No change possible"-Rckmeldung von DD
      P0274          gob-dst  04.09.12  DD: Versand fr NL-9 und FR-9 erm”glichen
      PXXXX          eich     05.09.12  check billpay active
      P0289          gob-rste 05.09.12  Change Log Entry Reopen
      P0277          gob-rste 04.09.12  New Code for Cancel without interfaces
      P0298          gob-rste 07.09.12  Send all order to Rhenus Change Log
      P0313          gob-rste 12.09.12  New Code for Checking Testcomments
      P0328          gob-sfe  18.09.12  Bigfix Channel Switch/Cancel DD
      P0329          gob-rste 14.09.12  Set First Pick Date
      P0361          gob-dst  20.09.12  Anpassung Versionierung bei DD
      P0316          gob-dst  21.09.12  Žnderung Feld "Website No." von FF in physikalisches Feld
      P0367          gob-dst  21.09.12  Storno DD
      P0370          gob-sfe  24.09.12  Bugfix DD
      P0388          gob-dst  27.09.12  DD Export: Ersetzen von " und | in Namen und Adressen
      P0393          gob-dst  27.09.12  DD Bugfix: falsche Auftr„ge in der Schnittstelle
      P0414          gob-rste 05.10.12  Autom. Cancel Testorders
      P0432          gob-dst  10.10.12  Bugfix Doppelkommissionierung
      P0440          gob-dst  11.10.12  Hotfix DD šbertragung
      P0415          gob-sfe  24.10.12  Fehlende Affiliate ID fllen
      P0595          gob-mno  19.11.12  New Functioncall
      P0599          gob-rste 27.11.12  Check If DD Order has Changed
      P0610          gob-sfe  27.11.12  Locktable(true)
      20121206 P0651 : gob-sfe     GetShippingAgent
      P0668    20121211  DD Storno Bugfix
      P0758          gob-rste 23.01.13  Don't check release right on post with ignore interafces
      P0884          gob-dst  09.04.13  Bugfix Aufruf DeleteCRLF
      P0888          gob-dst  15.04.13  DD Order Bugfix
      P0914          gob-adb  16.05.13  Performance
      P0892          gob-mab  18.04.13  Erweiterung Int. Dropshipping
      P0966          gob-rste 17.07.13  IPL Don't Trigger Interface for Active Interfaces
      P1230          gob-rste 09.04.14  Transmit E-Mail and phone No. to DD Interface, Auction ID, DPD Service
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |     Cooperation Tectura & Home24 NAV Team  |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      T0062       10.12.14  TEC-GH    Transfer Order Release Date
      H1472       29.09.14  tec-rh    New Function for Commission Dummy Item
      H1472       30.10.14  cc-rst    Function to Sparepart Mngmt.

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________
      H0587       11.04.14 HCN       - Function "InitiateOrder2DDInterface", InsertOrder2DDInterface, CheckSOStatus: cleanup
                                     - Redesign cancellation process
      H1194       05.06.14 DMA       Part of the project P1230 is needed in oreder to deploy field changes
      H1408       12.08.14 DMA       Copy RHD Interface, rename and implement as Whs LF Interface, CODECHANGE
      H1390       18.08.14 MSL       Carrier via SMT: 4) Consolidation of Carriers
      H1410       29.08.14 EHN       Channel creation XX-14 and NAV-Connector adjustment
      H1430       01.08.14 DMA       Phone and Email field Switched Code Cleanup
      H2056       06.02.15 DMO       InsertExpLog function is modified to check if an Item must be updated
      H4260       16.06.15 DMO       Return WH: Return Orders Export part
      H4042       28.05.15 JM        Save Orders on NAVCSalesHeader without Processing
    }
    END.
  }
}

