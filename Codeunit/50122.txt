OBJECT Codeunit 50122 SII XML Services
{
  OBJECT-PROPERTIES
  {
    Date=26.02.15;
    Time=15:07:32;
    Modified=Yes;
    Version List=SII,T0009,HME1985;
  }
  PROPERTIES
  {
    OnRun=VAR
            SIILog@1000000000 : Record 50146;
            tempBlob@1000000001 : TEMPORARY Record 99008535;
            IntegerRec@1000000002 : TEMPORARY Record 2000000026;
          BEGIN
            IntegerRec.DELETEALL;
            IntegerRec.Number := 50140;
            IntegerRec.INSERT;

            //ExportSetup(IntegerRec);
            ImportSetup;
            MESSAGE('DOne');
          END;

  }
  CODE
  {
    VAR
      NormalCaseMode@1000000000 : Boolean;
      RefereceGroupArrayGLOB@1000000001 : ARRAY [1000] OF Text[1024];
      Text001@1000000004 : TextConst 'DAN=Der blev ikke dannet et PDF-dokument.;DEU=Es wurde kein PDF Dokument erzeugt.;ENU=No PDF Document was generated.;ESP=No se gener¢ ning£n documento PDF.;FRA=Aucun document PDF n''a ‚t‚ cr‚‚.;SVE=Inget PDF-dokument skapades.';
      TextHME001@1000000002 : TextConst 'ENU="Unable to create return label for ''Shipping Agent Code''=''%1''. Error occured in ''%2''."';

    PROCEDURE CreateXMLFileForLog@1000000006(VAR p_SIILog_Var@1000000000 : Record 50146;VAR p_TempBlob_Var@1000000001 : Record 99008535);
    VAR
      SIISetup@1000000002 : Record 50140;
      SIIActiveAction@1000000003 : Record 50143;
      ErrorNoActiveMessage@1000000004 : TextConst 'ENU=There''s no active message / action for %1';
    BEGIN
      CLEAR(p_TempBlob_Var);
      CreateXMLMessageStructureVers(p_SIILog_Var,p_TempBlob_Var);
      InsertXMLFileInLog(p_SIILog_Var,p_TempBlob_Var);
    END;

    PROCEDURE CreateXMLMessageStructureVers@1000000009(VAR p_SIILog_Var@1000000001 : Record 50146;VAR p_TempBlob_Var@1000000000 : Record 99008535);
    VAR
      DOMDocument@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      xmlProcessingInst@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      DOMNode@1000000006 : ARRAY [100] OF Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ErrorNoXMLStructure@1000000007 : TextConst 'ENU=There''s no XML Strucute for Message %1, Structure Version %2.';
      SIISetup@1000000013 : Record 50140;
      SIIMessage@1000000009 : Record 50141;
      SIIXMLStructure@1000000002 : Record 50148;
      SIIXMLStructureLine@1000000010 : Record 50149;
      ErrorNotActive@1000000014 : TextConst 'ENU=Log Entry No. %1 is not active.';
      XMLDOMManagement@1000000008 : Codeunit 6224;
      OutStream@1000000004 : OutStream;
      SIIXMLStructureLine2@1000000011 : Record 50149;
      SIILineLog@1000000015 : Record 50154;
      RecRef@1000000016 : RecordRef;
      SIILogActions@1000000017 : Record 50153;
      AddXML@1000000012 : Boolean;
      a@1000000018 : Integer;
      TEMPSIILogActions@1000000019 : TEMPORARY Record 50153;
      SIIXMLLog@1000000020 : Record 50145;
      Base64@1000000021 : Automation "{244B7B21-2FBE-4189-A6A8-B8E90E6F83B5} 6.0:{9CD92F3E-9F7C-4EE3-A5D0-724296F8790F}:'CG Request Client'.Base64";
      ClientFso@1000000023 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      TempFileName@1000000022 : Text[250];
      skipThisXMLElement@1000000024 : Boolean;
      i@1000000030 : Integer;
      LastLineNo@1000000029 : Integer;
      attachmentsRootNode@1000000028 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      tagName@1000000027 : Text[1024];
      tagText@1000000026 : Text[1024];
    BEGIN
      SIISetup.GET;
      IF (SIISetup.Mode = SIISetup.Mode::Inactive) OR (p_SIILog_Var.MessageMode = p_SIILog_Var.MessageMode::Inactive) THEN
        ERROR(ErrorNotActive,p_SIILog_Var."Entry No.");

      // Check if Structure Version Exists
      SIIXMLStructure.GET(p_SIILog_Var.AppDomain,
                          p_SIILog_Var."Message Code NAV",
                          p_SIILog_Var.MessageStructureVersion,
                          p_SIILog_Var."Message Code Shop");
      SIIXMLStructureLine.RESET;
      SIIXMLStructureLine.SETCURRENTKEY("Attached to Repeater");
      SIIXMLStructureLine.SETRANGE("Website No.",SIIXMLStructure."Website No.");
      SIIXMLStructureLine.SETRANGE("Message Code NAV",SIIXMLStructure."Message Code NAV");
      SIIXMLStructureLine.SETRANGE("Message Code Shop",p_SIILog_Var."Message Code Shop");
      SIIXMLStructureLine.SETRANGE("Structure Version",SIIXMLStructure."Structure Version");
      SIIXMLStructureLine.SETRANGE("Attached to Repeater",SIIXMLStructureLine."Attached to Repeater"::None);
      IF SIIXMLStructureLine.FINDSET THEN BEGIN
        // Create XML File Set Init Values
        CREATE(DOMDocument);
        //S/P0942
        //XMLDOMManagement.SetNormalCase;
        SetNormalCase;
        //E/P0942
        xmlProcessingInst := DOMDocument.createProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
        DOMNode[1] := DOMDocument.appendChild(xmlProcessingInst);
        DOMNode[1] := DOMDocument.createElement('update');
        DOMNode[1] := DOMDocument.appendChild(DOMNode[1]);
        REPEAT
          AddXML := TRUE;
          // Add XML Tags
          CLEAR(RecRef);
          RecRef.GETTABLE(p_SIILog_Var);
          CASE SIIXMLStructureLine.Type OF
            SIIXMLStructureLine.Type::Tag : BEGIN
              //S/P0942
              //XMLDOMManagement.AddElement(DOMNode[SIIXMLStructureLine.Level + 1],
              AddElement(DOMNode[SIIXMLStructureLine.Level + 1],
              //E/P0942
                         SIIXMLStructureLine.TagName,
                         '',
                          '',
                         DOMNode[SIIXMLStructureLine.Level + 2]);
            END;
            SIIXMLStructureLine.Type::Field : BEGIN
              IF SIIXMLStructureLine."Dont Add if Empty" THEN
                IF GetValueAsFormatText(RecRef,SIIXMLStructureLine) = '' THEN
                  AddXML := FALSE;
              IF AddXML THEN
                //S/P0942
                //XMLDOMManagement.AddElement(DOMNode[SIIXMLStructureLine.Level + 1],
                AddElement(DOMNode[SIIXMLStructureLine.Level + 1],
                //E/P0942
                           SIIXMLStructureLine.TagName,
                           GetValueAsFormatText(RecRef,SIIXMLStructureLine),
                           '',
                           DOMNode[SIIXMLStructureLine.Level + 2]);
            END;
            SIIXMLStructureLine.Type::Attribute : BEGIN
              IF SIIXMLStructureLine."Dont Add if Empty" THEN
                IF GetValueAsFormatText(RecRef,SIIXMLStructureLine) = '' THEN
                  AddXML := FALSE;
              IF AddXML THEN
                //S/P0942
                //XMLDOMManagement.AddAttribute(DOMNode[SIIXMLStructureLine.Level + 2],
                AddAttribute(DOMNode[SIIXMLStructureLine.Level + 2],
                //E/P0942
                             SIIXMLStructureLine.TagName,
                             GetValueAsFormatText(RecRef,SIIXMLStructureLine));
            END;
          END;
          // Add Order Item / Lines
          CASE SIIXMLStructureLine."Repeater for" OF
            SIIXMLStructureLine."Repeater for"::LogLine : BEGIN
              SIILineLog.RESET;
              SIILineLog.SETRANGE("Entry No.",p_SIILog_Var."Entry No.");
              IF SIILineLog.FINDSET THEN BEGIN
                REPEAT
                  AddXML := TRUE;
                  CLEAR(RecRef);
                  RecRef.GETTABLE(SIILineLog);
                  SIIXMLStructureLine2.RESET;
                  SIIXMLStructureLine2.SETCURRENTKEY("Attached to Repeater");
                  SIIXMLStructureLine2.SETRANGE("Website No.",SIIXMLStructureLine."Website No.");
                  SIIXMLStructureLine2.SETRANGE("Message Code NAV",SIIXMLStructureLine."Message Code NAV");
                  SIIXMLStructureLine2.SETRANGE("Structure Version",SIIXMLStructureLine."Structure Version");
                  SIIXMLStructureLine2.SETRANGE("Message Code Shop",SIIXMLStructureLine."Message Code Shop");
                  SIIXMLStructureLine2.SETRANGE("Attached to Repeater",SIIXMLStructureLine."Repeater for");
                  IF SIIXMLStructureLine2.FINDSET THEN BEGIN
                    REPEAT
                      //S/P0955
                      AddXML := TRUE;
                      //E/P0955
                      CASE SIIXMLStructureLine2.Type OF
                        SIIXMLStructureLine2.Type::Tag : BEGIN
                          //S/P0942
                          //XMLDOMManagement.AddElement(DOMNode[SIIXMLStructureLine2.Level + 1],
                          AddElement(DOMNode[SIIXMLStructureLine2.Level + 1],
                          //E/P0942
                                     SIIXMLStructureLine2.TagName,
                                     '',
                                     '',
                                     DOMNode[SIIXMLStructureLine2.Level + 2]);
                        END;
                        SIIXMLStructureLine2.Type::Field : BEGIN
                          IF SIIXMLStructureLine2."Dont Add if Empty" THEN
                            IF GetValueAsFormatText(RecRef,SIIXMLStructureLine2) = '' THEN
                              AddXML := FALSE;
                          IF AddXML THEN
                            //S/P0942
                            //XMLDOMManagement.AddElement(DOMNode[SIIXMLStructureLine2.Level + 1],
                            AddElement(DOMNode[SIIXMLStructureLine2.Level + 1],
                            //E/P0942
                                       SIIXMLStructureLine2.TagName,
                                       GetValueAsFormatText(RecRef,SIIXMLStructureLine2),
                                       '',
                                       DOMNode[SIIXMLStructureLine2.Level + 2]);
                        END;
                        SIIXMLStructureLine2.Type::Attribute : BEGIN
                          IF SIIXMLStructureLine2."Dont Add if Empty" THEN
                            IF GetValueAsFormatText(RecRef,SIIXMLStructureLine2) = '' THEN
                              AddXML := FALSE;
                          IF AddXML THEN
                            //S/P0942
                            //XMLDOMManagement.AddAttribute(DOMNode[SIIXMLStructureLine2.Level + 2],
                            AddAttribute(DOMNode[SIIXMLStructureLine2.Level + 2],
                            //E/P0942
                                         SIIXMLStructureLine2.TagName,
                                         GetValueAsFormatText(RecRef,SIIXMLStructureLine2));
                        END;
                      END;
                    UNTIL SIIXMLStructureLine2.NEXT = 0;
                  END;
                UNTIL SIILineLog.NEXT = 0;
              END;
            END;
            // Add Actions
            SIIXMLStructureLine."Repeater for"::LogActions : BEGIN
              //S/P0942
              CLEAR(RefereceGroupArrayGLOB);
              CombineLogActions(p_SIILog_Var."Entry No.",TEMPSIILogActions);
              //S/P0923
              TEMPSIILogActions.SETCURRENTKEY("Reference Group ID");
              //E/P0923
              //S/P1009
              IF SIIMessage.GET(p_SIILog_Var.AppDomain,p_SIILog_Var."Message Code NAV",p_SIILog_Var."Message Code Shop") AND
                SIIMessage."Skip Mail Actions XML"
              THEN
                TEMPSIILogActions.SETRANGE("Action For",TEMPSIILogActions."Action For"::Update);
              //E/P1009
              IF TEMPSIILogActions.FINDSET THEN BEGIN
                REPEAT
                  CLEAR(RecRef);
                  RecRef.GETTABLE(TEMPSIILogActions);
                  SIIXMLStructureLine2.RESET;
                  SIIXMLStructureLine2.SETCURRENTKEY("Attached to Repeater");
                  SIIXMLStructureLine2.SETRANGE("Website No.",SIIXMLStructureLine."Website No.");
                  SIIXMLStructureLine2.SETRANGE("Message Code NAV",SIIXMLStructureLine."Message Code NAV");
                  SIIXMLStructureLine2.SETRANGE("Structure Version",SIIXMLStructureLine."Structure Version");
                  SIIXMLStructureLine2.SETRANGE("Message Code Shop",SIIXMLStructureLine."Message Code Shop");
                  SIIXMLStructureLine2.SETRANGE("Attached to Repeater",SIIXMLStructureLine."Repeater for");
                  IF SIIXMLStructureLine2.FINDSET THEN BEGIN
                    REPEAT
                      //S/P0955
                      AddXML := TRUE;
                      //E/P0955

                      //T0041 19.08.14 tec-cs +++++++++++++++++++++++++++++
                      skipThisXMLElement := FALSE;

                      IF SIIXMLStructureLine2."Log Action Filter" <> SIIXMLStructureLine2."Log Action Filter"::" " THEN BEGIN

                        IF SIIXMLStructureLine2."Log Action Filter" = SIIXMLStructureLine2."Log Action Filter"::Mail THEN BEGIN
                          // use this structure-line only if the action is a mail-action
                          IF TEMPSIILogActions."Action For" <> TEMPSIILogActions."Action For"::EMail THEN BEGIN
                            AddXML := FALSE; // <- skip inserting this line
                            skipThisXMLElement := TRUE; // <- skip inserting this line
                          END;
                        END;

                        IF SIIXMLStructureLine2."Log Action Filter" = SIIXMLStructureLine2."Log Action Filter"::Update THEN BEGIN
                          // use this structure-line only if the action is an update-action
                          IF TEMPSIILogActions."Action For" <> TEMPSIILogActions."Action For"::Update THEN BEGIN
                            AddXML := FALSE; // <- skip inserting this line
                            skipThisXMLElement := TRUE; // <- skip inserting this line
                          END;
                        END;

                      END;

                      IF NOT skipThisXMLElement THEN BEGIN
                      //T0041 19.08.14 tec-cs -----------------------------

                      CASE SIIXMLStructureLine2.Type OF
                        SIIXMLStructureLine2.Type::Tag : BEGIN
                          //S/P0942
                          //XMLDOMManagement.AddElement(DOMNode[SIIXMLStructureLine2.Level + 1],
                          AddElement(DOMNode[SIIXMLStructureLine2.Level + 1],
                          //E/P0942
                                     SIIXMLStructureLine2.TagName,
                                     '',
                                      '',
                                     DOMNode[SIIXMLStructureLine2.Level + 2]);
                        END;
                        SIIXMLStructureLine2.Type::Field : BEGIN
                          IF SIIXMLStructureLine2."Dont Add if Empty" THEN
                            IF GetValueAsFormatText(RecRef,SIIXMLStructureLine2) = '' THEN
                              AddXML := FALSE;
                          //H0651  20.11.2013  MBY  +++++++++++++++++++++++++
                          IF AddXML THEN BEGIN
                          //H0651  20.11.2013  MBY  -------------------------
                            //S/P0942
                            //XMLDOMManagement.AddElement(DOMNode[SIIXMLStructureLine2.Level + 1],
                            AddElement(DOMNode[SIIXMLStructureLine2.Level + 1],
                            //E/P0942
                                       SIIXMLStructureLine2.TagName,
                                       GetValueAsFormatText(RecRef,SIIXMLStructureLine2),
                                       '',
                                       DOMNode[SIIXMLStructureLine2.Level + 2]);
                            //H0651  20.11.2013  MBY  +++++++++++++++++++++++++
                            IF (SIIXMLStructureLine2."Function to Call" = 2) AND
                               (SIIXMLStructureLine2."Use Request Document" <> 0)
                            THEN BEGIN
                              SIIXMLLog.SETRANGE("Attached to Entry No.",p_SIILog_Var."Entry No.");
                              SIIXMLLog.SETRANGE(Type,SIIXMLStructureLine2."Use Request Document");
                              //H1565 02.10.14 tec-sf +++++++++++++++++++++++++++++
                              { !!!!!
                              IF SIIXMLLog.FINDFIRST THEN BEGIN
                                SIIXMLLog.CALCFIELDS("Request Document");
                                IF SIIXMLLog."Request Document".HASVALUE THEN BEGIN
                                  IF ISCLEAR(Base64) THEN
                                    CREATE(Base64,TRUE,FALSE);
                                  IF ISCLEAR(ClientFso) THEN
                                    CREATE(ClientFso,TRUE,TRUE);
                                  TempFileName := TEMPORARYPATH + p_SIILog_Var."Process Document No." + '.pdf';
                                  IF ClientFso.FileExists(TempFileName) THEN
                                    ClientFso.DeleteFile(TempFileName);
                                  SIIXMLLog."Request Document".EXPORT(TempFileName);
                                  Base64.Encode(TempFileName,DOMNode[SIIXMLStructureLine2.Level + 2]);
                                  CLEAR(Base64);
                                  IF ClientFso.FileExists(TempFileName) THEN
                                    ClientFso.DeleteFile(TempFileName);
                                END;
                              END;
                              !!!!! }
                              // Add multiple files to XML
                              // All docs in "SII XML Log" will be added
                              IF SIIXMLLog.FINDSET THEN BEGIN
                                i := 1;
                                SIIXMLLog.FINDLAST;
                                LastLineNo := SIIXMLLog."Line No.";
                                SIIXMLLog.SETRANGE("Line No.", 0, LastLineNo);  // Reduce to previously created docs, since it causes an
                                                                                // infinite loop else
                                SIIXMLLog.FINDSET;
                                attachmentsRootNode := DOMNode[SIIXMLStructureLine2.Level + 1].parentNode;
                                tagName := DOMNode[SIIXMLStructureLine2.Level + 1].nodeName; // = 'attachment' normally
                                tagText := DOMNode[SIIXMLStructureLine2.Level + 1].text;
      // ='label' or 'returnsheet' or something alike
                                REPEAT
                                  i += 1;
                                  SIIXMLLog.CALCFIELDS("Request Document");
                                  IF SIIXMLLog."Request Document".HASVALUE THEN BEGIN
                                    IF ISCLEAR(Base64) THEN
                                      CREATE(Base64,TRUE,FALSE);
                                    IF ISCLEAR(ClientFso) THEN
                                      CREATE(ClientFso,TRUE,TRUE);
                                    TempFileName := TEMPORARYPATH + p_SIILog_Var."Process Document No." + FORMAT(i) + '.pdf';
                                    IF ClientFso.FileExists(TempFileName) THEN
                                      ClientFso.DeleteFile(TempFileName);
                                    SIIXMLLog."Request Document".EXPORT(TempFileName);
                                    Base64.Encode(TempFileName,DOMNode[SIIXMLStructureLine2.Level + i]);
                                    CLEAR(Base64);
                                    IF ClientFso.FileExists(TempFileName) THEN
                                      ClientFso.DeleteFile(TempFileName);

                                    // Create node for next attachment
                                    IF SIIXMLLog."Line No." < LastLineNo THEN BEGIN
                                      // Create new parentNode ('attachment' normally)
                                      AddElement(attachmentsRootNode,
                                                 tagName,
                                                 '',
                                                 '',
                                                 DOMNode[SIIXMLStructureLine2.Level + i + 1]);

                                      AddElement(DOMNode[SIIXMLStructureLine2.Level + i + 1],
                                                 'type',
                                                 tagText,
                                                 '',
                                                 DOMNode[SIIXMLStructureLine2.Level + i + 2]);

                                      AddElement(DOMNode[SIIXMLStructureLine2.Level + i + 1],
                                                 SIIXMLStructureLine2.TagName,
                                                 '',
                                                 '',
                                                 DOMNode[SIIXMLStructureLine2.Level + i + 3]);
                                      i += 2;
                                    END;
                                  END;
                                UNTIL SIIXMLLog.NEXT = 0;
                                SIIXMLLog.DELETEALL;
                              END;
                              //H1565 02.10.14 tec-sf ----------------------------
                            END;
                          END;
                            //H0651  20.11.2013  MBY  -------------------------
                        END;
                        SIIXMLStructureLine2.Type::Attribute : BEGIN
                          IF SIIXMLStructureLine2."Dont Add if Empty" THEN
                            IF GetValueAsFormatText(RecRef,SIIXMLStructureLine2) = '' THEN
                              AddXML := FALSE;
                          IF AddXML THEN
                            //S/P0942
                            //XMLDOMManagement.AddAttribute(DOMNode[SIIXMLStructureLine2.Level + 2],
                            AddAttribute(DOMNode[SIIXMLStructureLine2.Level + 2],
                            //E/P0942
                                         SIIXMLStructureLine2.TagName,
                                         GetValueAsFormatText(RecRef,SIIXMLStructureLine2));
                        END;
                      END;
                      //T0041 19.08.14 tec-cs +++++++++++++++++++++++++++++
                      END;
                      //T0041 19.08.14 tec-cs -----------------------------
                    UNTIL SIIXMLStructureLine2.NEXT = 0;
                  END;
                UNTIL TEMPSIILogActions.NEXT = 0;
              END;
            END;
          END;
        UNTIL SIIXMLStructureLine.NEXT = 0;
        // Save to BLOB
        p_TempBlob_Var.Blob.CREATEOUTSTREAM(OutStream);
        DOMDocument.save(OutStream);
        SIIMessage.RESET;
        SIIMessage.GET(p_SIILog_Var.AppDomain,p_SIILog_Var."Message Code NAV",p_SIILog_Var."Message Code Shop");
        IF SIIMessage."Validate XSD" THEN BEGIN
          ValidateXSD(OutStream,SIIMessage."XSD Namespace URI",SIIMessage."XSD Path");
        END;
      END ELSE BEGIN
        ERROR(ErrorNoXMLStructure,p_SIILog_Var."Message Code NAV",p_SIILog_Var.MessageStructureVersion);
      END;
    END;

    PROCEDURE GetValueAsFormatText@1000000042(p_RecRef@1000000000 : RecordRef;p_SIIXMLStructureLine@1000000003 : Record 50149) r_Value : Text[1024];
    VAR
      Fieldref@1000000002 : FieldRef;
      OptionValue@1000000001 : Integer;
    BEGIN
      // Get FieldRef Value as Text with Format Parameter
      r_Value := '';
      //S/P0923
      IF p_SIIXMLStructureLine."Add Fix Value" THEN BEGIN
        r_Value := p_SIIXMLStructureLine."Fix Value";
      END;
      //E/P0923
      //S/P0942
      IF p_SIIXMLStructureLine."Function to Call" <> 0 THEN BEGIN
        r_Value := FunctionCall(p_SIIXMLStructureLine,p_RecRef);
        EXIT(r_Value);
      END;
      //E/P0942

      //H1402 23.07.14 ABR ++++++++++++++++++++++++++++++++++++++++++++++++
      IF (p_SIIXMLStructureLine.Table = p_SIIXMLStructureLine.Table::None) AND (p_SIIXMLStructureLine."Field ID" = 0) THEN BEGIN
        EXIT(r_Value);
      END;
      //H1402 23.07.14 ABR ------------------------------------------------

      CLEAR(Fieldref);
      Fieldref := p_RecRef.FIELD(p_SIIXMLStructureLine."Field ID");
      IF UPPERCASE(FORMAT(Fieldref.TYPE)) = 'OPTION' THEN BEGIN
        EVALUATE(OptionValue,FORMAT(Fieldref.VALUE));
        r_Value := SELECTSTR(OptionValue+1,FORMAT(Fieldref.OPTIONCAPTION));
      END ELSE BEGIN
        IF p_SIIXMLStructureLine."Format Parameter" <> '' THEN
          r_Value := FORMAT(Fieldref.VALUE,p_SIIXMLStructureLine."Format Integer",p_SIIXMLStructureLine."Format Parameter")
        ELSE
          r_Value := FORMAT(Fieldref.VALUE);
      END;

      EXIT(r_Value);
    END;

    PROCEDURE ValidateXSD@1000000000(p_XMLFile@1000000002 : Variant;p_XSDNameSpaceURI@1000000004 : Text[1024];p_XSDFile@1000000005 : Variant);
    VAR
      MSXMLv60_DOMDocument60@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      MSXMLv60_IXMLDOMParseError@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{3EFAA426-272F-11D2-836F-0000F87A7782}:'Microsoft XML, v6.0'.IXMLDOMParseError";
      MSXMLv60_XMLSchemaCache60@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A07-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.XMLSchemaCache60";
    BEGIN
      // Clear
      CLEAR(MSXMLv60_XMLSchemaCache60);
      CLEAR(MSXMLv60_DOMDocument60);
      CLEAR(MSXMLv60_IXMLDOMParseError);

      // Create
      CREATE(MSXMLv60_XMLSchemaCache60);
      CREATE(MSXMLv60_DOMDocument60);

      // Load XML File
      MSXMLv60_DOMDocument60.load(p_XMLFile);

      // Load XSD Schema
      MSXMLv60_XMLSchemaCache60.add(p_XSDNameSpaceURI,p_XSDFile);

      // Validate Schema
      MSXMLv60_DOMDocument60.schemas := MSXMLv60_XMLSchemaCache60;
      MSXMLv60_DOMDocument60.async := FALSE;
      MSXMLv60_IXMLDOMParseError := MSXMLv60_DOMDocument60.validate;

      // Catch Error
      IF MSXMLv60_IXMLDOMParseError.errorCode <> 0 THEN BEGIN
        ERROR(FORMAT(MSXMLv60_IXMLDOMParseError.errorCode) + '\' +
              FORMAT(MSXMLv60_IXMLDOMParseError.reason) + '\' +
              FORMAT(MSXMLv60_IXMLDOMParseError.line) + '\' +
              FORMAT(MSXMLv60_IXMLDOMParseError.linepos) + '\' +
              FORMAT(MSXMLv60_IXMLDOMParseError.filepos));
      END;
    END;

    PROCEDURE InsertXMLFileInLog@1000000002(p_SIILog@1000000002 : Record 50146;p_Blob@1000000000 : Record 99008535);
    VAR
      SIIXMLLog@1000000001 : Record 50145;
      LineNo@1000000003 : Integer;
      SIISetup@1000000004 : Record 50140;
      Filename@1000000005 : Text[1024];
    BEGIN
      WITH SIIXMLLog DO BEGIN
        RESET;
        SETRANGE("Attached to Entry No.",p_SIILog."Entry No.");
        IF FINDLAST THEN
          LineNo := "Line No." + 10000
        ELSE
          LineNo := 10000;
        INIT;
        "Attached to Entry No." := p_SIILog."Entry No.";
        "Line No." := LineNo;
        "Request Document" := p_Blob.Blob;
        INSERT;
      END;

      IF SIISetup."Archive Files on Harddisk" THEN BEGIN
        SIISetup.TESTFIELD("Archive Path on Harddisk");
        IF COPYSTR(SIISetup."Archive Path on Harddisk",STRLEN(SIISetup."Archive Path on Harddisk")-1,1) <> '\' THEN
          Filename := SIISetup."Archive Path on Harddisk" + '\'
        ELSE
          Filename := SIISetup."Archive Path on Harddisk";
        Filename := FORMAT(p_SIILog."Message Code NAV") +
                    '\' +
                    'Reuqest_' +
                    FORMAT(p_SIILog."Entry No.") +
                    '.xml';
        p_Blob.Blob.EXPORT(Filename);
        p_SIILog.ADDLINK(Filename,'Request');
      END;
    END;

    PROCEDURE RunTestXML@1000000037(p_SIIXMLStructure@1000000002 : Record 50148);
    VAR
      LocText001@1000000000 : TextConst 'ENU=Validate XSD?';
      TempBlob@1000000003 : Record 99008535;
      SIIGeneralManagement@1000000004 : Codeunit 50120;
      eBayEditor@1000000007 : Codeunit 5095849;
      Filename@1000000005 : Text[1024];
      File@1000000006 : File;
      ValidateTestXSD@1000000001 : Boolean;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        IF CONFIRM(LocText001,FALSE) THEN
          ValidateTestXSD := TRUE
        ELSE
          ValidateTestXSD := FALSE;
      END;
      CreateTestXMLFromStrucVers(p_SIIXMLStructure,TempBlob,ValidateTestXSD);

      CLEAR(SIIGeneralManagement);
      Filename := '';
      File.CREATETEMPFILE();
      Filename := File.NAME;
      File.CLOSE();
      Filename := Filename + '.xml';
      TempBlob.CALCFIELDS(Blob);
      IF TempBlob.Blob.HASVALUE THEN BEGIN
        TempBlob.Blob.EXPORT(Filename);
        eBayEditor.RunEditor(Filename,2,FALSE);
      END;
    END;

    PROCEDURE CreateTestXMLFromStrucVers@1000000003(p_SIIXMLStructure@1000000001 : Record 50148;VAR p_TempBlob_Var@1000000000 : Record 99008535;p_ValidateXSD@1000000002 : Boolean);
    VAR
      DOMDocument@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      xmlProcessingInst@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      DOMNode@1000000006 : ARRAY [100] OF Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      SIIMessage@1000000012 : Record 50141;
      SIIXMLStructureLine@1000000011 : Record 50149;
      SIILogActions@1000000009 : Record 50153;
      XMLDOMManagement@1000000004 : Codeunit 6224;
      OutStream@1000000008 : OutStream;
      ErrorNoXMLStructure@1000000007 : TextConst 'ENU=There''s no XML Strucute for Message %1, Structure Version %2.';
      SIIXMLStructureLine2@1000000013 : Record 50149;
    BEGIN
      SIIXMLStructureLine.RESET;
      SIIXMLStructureLine.SETRANGE("Website No.",p_SIIXMLStructure."Website No.");
      SIIXMLStructureLine.SETRANGE("Message Code NAV",p_SIIXMLStructure."Message Code NAV");
      SIIXMLStructureLine.SETRANGE("Structure Version",p_SIIXMLStructure."Structure Version");
      IF SIIXMLStructureLine.FINDSET THEN BEGIN
        CREATE(DOMDocument);
        XMLDOMManagement.SetNormalCase;
        xmlProcessingInst := DOMDocument.createProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
        DOMNode[1] := DOMDocument.appendChild(xmlProcessingInst);
        DOMNode[1] := DOMDocument.createElement('update');
        DOMNode[1] := DOMDocument.appendChild(DOMNode[1]);
        REPEAT
          CASE SIIXMLStructureLine.Type OF
            SIIXMLStructureLine.Type::Tag : BEGIN
              XMLDOMManagement.AddElement(DOMNode[SIIXMLStructureLine.Level + 1],
                                          SIIXMLStructureLine.TagName,
                                          '',
                                          '',
                                          DOMNode[SIIXMLStructureLine.Level + 2]);
            END;
            SIIXMLStructureLine.Type::Field : BEGIN
              XMLDOMManagement.AddElement(DOMNode[SIIXMLStructureLine.Level + 1],
                                          SIIXMLStructureLine.TagName,
                                          GetDummyValueForFieldType(SIIXMLStructureLine),
                                          '',
                                          DOMNode[SIIXMLStructureLine.Level + 2]);
            END;
            SIIXMLStructureLine.Type::Attribute : BEGIN
              XMLDOMManagement.AddAttribute(DOMNode[SIIXMLStructureLine.Level + 2],
                                            SIIXMLStructureLine.TagName,
                                            GetDummyValueForFieldType(SIIXMLStructureLine));
            END;
          END;
        UNTIL SIIXMLStructureLine.NEXT = 0;
        p_TempBlob_Var.Blob.CREATEOUTSTREAM(OutStream);
        DOMDocument.save(OutStream);
        IF p_ValidateXSD THEN BEGIN
          SIIMessage.GET(SIIMessage."Website No.",SIIMessage."Message Code NAV");
          SIIMessage.TESTFIELD("XSD Path");
          SIIMessage.TESTFIELD("XSD Namespace URI");
          ValidateXSD(OutStream,SIIMessage."XSD Namespace URI",SIIMessage."XSD Path");
        END;
      END;
    END;

    PROCEDURE GetDummyValueForFieldType@1000000005(p_SIIXMLStructureLine@1000000000 : Record 50149) : Text[1024];
    VAR
      Field@1000000001 : Record 2000000041;
      RecordIDLoc@1000000002 : RecordID;
      TextLoc@1000000003 : Text[30];
      DateLoc@1000000004 : Date;
      TimeLoc@1000000005 : Time;
      DecimalLoc@1000000007 : Decimal;
      BooleanLoc@1000000008 : Boolean;
      IntegerLoc@1000000009 : Integer;
      CodeLoc@1000000010 : Code[10];
      OptionLoc@1000000011 : Option;
      BigIntegerLoc@1000000012 : BigInteger;
      DurationLoc@1000000013 : Duration;
      GUIDLoc@1000000014 : GUID;
      DateTimeLoc@1000000015 : DateTime;
    BEGIN
      //S/P0923
      IF p_SIIXMLStructureLine."Add Fix Value" THEN BEGIN
        EXIT(p_SIIXMLStructureLine."Fix Value");
      END;
      //E/P0923
      //S/P0942
      IF p_SIIXMLStructureLine."Function to Call" <> 0 THEN BEGIN
        EXIT(STRSUBSTNO('Function %1 called.',p_SIIXMLStructureLine."Function to Call"));
      END;
      //E/P0942
      Field.RESET;
      EVALUATE(RecordIDLoc,'Integer: 1');
      TextLoc := 'Test';
      DateLoc := 111111D;
      TimeLoc := 111111T;
      DecimalLoc := 11.11;
      BooleanLoc := TRUE;
      IntegerLoc := 1;
      CodeLoc := 'TEST';
      OptionLoc := 1;
      BigIntegerLoc := 1;
      DurationLoc := 1;
      GUIDLoc := CREATEGUID;
      DateTimeLoc := CREATEDATETIME(DateLoc,TimeLoc);

      CASE p_SIIXMLStructureLine.Table OF
        p_SIIXMLStructureLine.Table::Log : BEGIN
          Field.SETRANGE(TableNo,50146);
        END;
        p_SIIXMLStructureLine.Table::LogLine : BEGIN
          Field.SETRANGE(TableNo,50154);
        END;
        p_SIIXMLStructureLine.Table::LogAction : BEGIN
          Field.SETRANGE(TableNo,50153);
        END;
        p_SIIXMLStructureLine.Table::"4" :
          EXIT('CallFunction1');
      END;
      Field.SETRANGE("No.",p_SIIXMLStructureLine."Field ID");
      IF Field.FINDFIRST THEN BEGIN
        IF (p_SIIXMLStructureLine."Format Parameter" <> '') OR (p_SIIXMLStructureLine."Format Integer" <> 0) THEN BEGIN
          CASE Field.Type OF
            Field.Type::RecordID : EXIT(FORMAT(RecordIDLoc,
                                               p_SIIXMLStructureLine."Format Integer",
                                               p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::Text : EXIT(FORMAT(TextLoc,
                                           p_SIIXMLStructureLine."Format Integer",
                                           p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::Date : EXIT(FORMAT(DateLoc,
                                           p_SIIXMLStructureLine."Format Integer",
                                           p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::Time : EXIT(FORMAT(TimeLoc,
                                           p_SIIXMLStructureLine."Format Integer",
                                           p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::Decimal : EXIT(FORMAT(DecimalLoc,
                                              p_SIIXMLStructureLine."Format Integer",
                                              p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::Boolean : EXIT(FORMAT(BooleanLoc,
                                              p_SIIXMLStructureLine."Format Integer",
                                              p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::Integer : EXIT(FORMAT(IntegerLoc,
                                              p_SIIXMLStructureLine."Format Integer",
                                              p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::Code : EXIT(FORMAT(CodeLoc,
                                           p_SIIXMLStructureLine."Format Integer",
                                           p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::Option : EXIT(FORMAT(OptionLoc,
                                             p_SIIXMLStructureLine."Format Integer",
                                             p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::BigInteger: EXIT(FORMAT(BigIntegerLoc,
                                                p_SIIXMLStructureLine."Format Integer",
                                                p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::Duration : EXIT(FORMAT(DurationLoc,
                                               p_SIIXMLStructureLine."Format Integer",
                                               p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::GUID : EXIT(FORMAT(GUIDLoc,
                                           p_SIIXMLStructureLine."Format Integer",
                                           p_SIIXMLStructureLine."Format Parameter"));
            Field.Type::DateTime : EXIT(FORMAT(DateTimeLoc,
                                               p_SIIXMLStructureLine."Format Integer",
                                               p_SIIXMLStructureLine."Format Parameter"));
          END;
        END ELSE BEGIN
          CASE Field.Type OF
            Field.Type::RecordID : EXIT(FORMAT(RecordIDLoc));
            Field.Type::Text : EXIT(FORMAT(TextLoc));
            Field.Type::Date : EXIT(FORMAT(DateLoc));
            Field.Type::Time : EXIT(FORMAT(TimeLoc));
            Field.Type::Decimal : EXIT(FORMAT(DecimalLoc));
            Field.Type::Boolean : EXIT(FORMAT(BooleanLoc));
            Field.Type::Integer : EXIT(FORMAT(IntegerLoc));
            Field.Type::Code : EXIT(FORMAT(CodeLoc));
            Field.Type::Option : EXIT(FORMAT(OptionLoc));
            Field.Type::BigInteger: EXIT(FORMAT(BigIntegerLoc));
            Field.Type::Duration : EXIT(FORMAT(DurationLoc));
            Field.Type::GUID : EXIT(FORMAT(GUIDLoc));
            Field.Type::DateTime : EXIT(FORMAT(DateTimeLoc));
          END;
        END;
      END;
    END;

    PROCEDURE CombineLogActions@1000000004(p_EntryNo@1000000003 : Integer;VAR p_TEMPSIILogActions@1000000002 : TEMPORARY Record 50153);
    VAR
      SIILogActions@1000000001 : Record 50153;
      HighestGroupNo@1000000000 : Integer;
      i@1000000004 : Integer;
    BEGIN
      p_TEMPSIILogActions.DELETEALL;

      HighestGroupNo := GetHighestGroupNo(p_EntryNo);

      FOR i := 1 TO HighestGroupNo DO BEGIN
        SIILogActions.RESET;
        SIILogActions.SETCURRENTKEY("Reference Group ID");
        SIILogActions.SETRANGE("Log Entry No.",p_EntryNo);
        SIILogActions.SETRANGE("Reference Group ID",i);
        IF SIILogActions.FINDSET THEN BEGIN
          p_TEMPSIILogActions.INIT;
          p_TEMPSIILogActions.TRANSFERFIELDS(SIILogActions);
          p_TEMPSIILogActions.INSERT;
          REPEAT
            //S/P0942
            //IF p_TEMPSIILogActions."TEMP Ref ID Text for Group" = '' THEN
              //p_TEMPSIILogActions."TEMP Ref ID Text for Group" := FORMAT(SIILogActions."Reference ID")
            //ELSE
              //p_TEMPSIILogActions."TEMP Ref ID Text for Group" := p_TEMPSIILogActions."TEMP Ref ID Text for Group" + ',' +
                                                                  //FORMAT(SIILogActions."Reference ID");
            //p_TEMPSIILogActions.MODIFY;
            IF RefereceGroupArrayGLOB[i] = '' THEN
              RefereceGroupArrayGLOB[i] := FORMAT(SIILogActions."Reference ID")
            ELSE
              RefereceGroupArrayGLOB[i] := RefereceGroupArrayGLOB[i] + ',' + FORMAT(SIILogActions."Reference ID");
            //E/P0942
          UNTIL SIILogActions.NEXT = 0;
        END;
      END;

      p_TEMPSIILogActions.RESET;
    END;

    PROCEDURE GetHighestGroupNo@1000000007(p_EntryNo@1000000000 : Integer) r_GroupNo : Integer;
    VAR
      SIILogActions@1000000001 : Record 50153;
    BEGIN
      r_GroupNo := 0;
      SIILogActions.RESET;
      SIILogActions.SETCURRENTKEY("Reference Group ID");
      SIILogActions.SETRANGE("Log Entry No.",p_EntryNo);
      IF SIILogActions.FINDLAST THEN BEGIN
        EXIT(SIILogActions."Reference Group ID");
      END;

      EXIT(0);
    END;

    PROCEDURE CheckExistingLogAction@1000000019(p_SIILogActions@1000000000 : Record 50153;VAR p_TEMPSIILogActions@1000000001 : TEMPORARY Record 50153) : Boolean;
    VAR
      FieldRec@1000000002 : Record 2000000041;
      RecRef@1000000003 : RecordRef;
      TEMPRecRef@1000000004 : RecordRef;
      FieldRef@1000000005 : FieldRef;
      TEMPFieldRef@1000000006 : FieldRef;
      tempText@1000000007 : Text[30];
    BEGIN
      RecRef.GETTABLE(p_SIILogActions);
      TEMPRecRef.GETTABLE(p_TEMPSIILogActions);
      IF TEMPRecRef.COUNT = 0 THEN
        EXIT(FALSE);

      p_TEMPSIILogActions.RESET;
      FieldRec.RESET;
      FieldRec.SETRANGE(TableNo,50153);
      FieldRec.SETRANGE(Class,FieldRec.Class::Normal);
      FieldRec.SETFILTER("No.",'<>1&<>10&<>31&<>15');
      IF FieldRec.FINDSET THEN BEGIN
        REPEAT
          FieldRef := RecRef.FIELD(FieldRec."No.");
          TEMPFieldRef := TEMPRecRef.FIELD(FieldRec."No.");
          TEMPFieldRef.SETRANGE(FieldRef.VALUE);
        UNTIL FieldRec.NEXT = 0;
        IF TEMPRecRef.FINDFIRST THEN BEGIN
          tempText := '';
          TEMPFieldRef := TEMPRecRef.FIELD(15);
          FieldRef := RecRef.FIELD(10);
          tempText := FORMAT(TEMPFieldRef.VALUE) + ',' + FORMAT(FieldRef.VALUE);
          TEMPFieldRef.VALUE := tempText;
          TEMPRecRef.MODIFY;
          TEMPRecRef.SETTABLE(p_TEMPSIILogActions);
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ExportSetup@1000000001(VAR p_IntegerTEMP@1000000000 : TEMPORARY Record 2000000026);
    VAR
      RecRef@1000000001 : RecordRef;
      DOMDocument@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      TableNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLDOMManagement@1000000004 : Codeunit 6224;
      RootNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      FieldRec@1000000006 : Record 2000000041;
      FieldRef@1000000007 : FieldRef;
      FieldNode@1000000008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      RecordNode@1000000009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      Window@1000000011 : Dialog;
      TableCount@1000000012 : Integer;
      RecordCount@1000000013 : Integer;
      FileName@1000000010 : Text[1024];
      CommonDialogManagement@1000000014 : Codeunit 412;
    BEGIN
      FileName := '';
      CLEAR(CommonDialogManagement);
      FileName := CommonDialogManagement.OpenFile('Export Message',
                                                  '',
                                                  4,
                                                  'XML-Files (*.xml)|*.xml',
                                                  1);

      IF p_IntegerTEMP.FINDSET THEN BEGIN
        Window.OPEN('Processing Table #1############ of #2############\' +
                    'Table Name       #3##############################\' +
                    'Record           #4############ of #5############\');
        CLEAR(RecRef);
        CLEAR(XMLDOMManagement);
        CLEAR(DOMDocument);
        CREATE(DOMDocument);
        XMLDOMManagement.SetNormalCase();
        RootNode := DOMDocument.createProcessingInstruction('xml','version="1.0" encoding="utf-8"');
        RootNode := DOMDocument.appendChild(RootNode);
        RootNode := DOMDocument.createElement('Setup');
        RootNode := DOMDocument.appendChild(RootNode);
        Window.UPDATE(2,p_IntegerTEMP.COUNT);
        REPEAT
          TableCount +=1;
          Window.UPDATE(1,TableCount);
          RecRef.OPEN(p_IntegerTEMP.Number);
          XMLDOMManagement.AddElement(RootNode,'Table','','',TableNode);
          XMLDOMManagement.AddAttribute(TableNode,'No',FORMAT(p_IntegerTEMP.Number));
          XMLDOMManagement.AddAttribute(TableNode,'TableName',RecRef.NAME);
          Window.UPDATE(3,RecRef.NAME);
          IF RecRef.FIND('-') THEN BEGIN
            RecordCount := 0;
            Window.UPDATE(5,RecRef.COUNT);
            REPEAT
              RecordCount +=1;
              Window.UPDATE(4,RecordCount);
              XMLDOMManagement.AddElement(TableNode,'Record','','',RecordNode);
              XMLDOMManagement.AddAttribute(RecordNode,'RecordID',FORMAT(RecRef.RECORDID));
              FieldRec.RESET;
              FieldRec.SETRANGE(TableNo,p_IntegerTEMP.Number);
              FieldRec.SETRANGE(Class,FieldRec.Class::Normal);
              FieldRec.SETFILTER(Type,'<>%1',FieldRec.Type::BLOB);
              FieldRec.SETRANGE(Enabled,TRUE);
              IF FieldRec.FINDSET THEN BEGIN
                REPEAT
                  FieldRef := RecRef.FIELD(FieldRec."No.");
                  XMLDOMManagement.AddElement(RecordNode,'Field',FORMAT(FieldRef.VALUE),'',FieldNode);
                  XMLDOMManagement.AddAttribute(FieldNode,'No',FORMAT(FieldRec."No."));
                  XMLDOMManagement.AddAttribute(FieldNode,'FieldName',FieldRec.FieldName);
                UNTIL FieldRec.NEXT = 0;
              END;
            UNTIL RecRef.NEXT = 0;
            RecRef.CLOSE;
          END;
        UNTIL p_IntegerTEMP.NEXT = 0;
      END;
      Window.CLOSE;
      DOMDocument.save(FileName);
    END;

    PROCEDURE ImportSetup@1000000011();
    VAR
      DOMDocument@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      DOMAttribute@1000000009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      RootNode@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      TableNodeList@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      TableNode@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      TableNodeCount@1000000011 : Integer;
      RecordNode@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      RecordNodeList@1000000016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      RecordNodeCount@1000000017 : Integer;
      FieldNodeList@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      FieldNode@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      FieldNodeCount@1000000008 : Integer;
      FileName@1000000002 : Text[1024];
      RecRef@1000000005 : RecordRef;
      FieldRef@1000000004 : FieldRef;
      FieldRec@1000000001 : Record 2000000041;
      TableNo@1000000006 : Integer;
      TableName@1000000015 : Text[30];
      RecordID@1000000018 : RecordID;
      No@1000000019 : Integer;
      FieldName@1000000020 : Text[30];
      IntVar@1000000023 : Integer;
      BoolVar@1000000024 : Boolean;
      DecVar@1000000025 : Integer;
      CommonDialogManagement@1000000026 : Codeunit 412;
    BEGIN
      FileName := '';
      CLEAR(CommonDialogManagement);
      FileName := CommonDialogManagement.OpenFile('Import Setup',
                                                   '',
                                                   4,
                                                   'XML-Files (*.xml)|*.xml',
                                                   0);
      CLEAR(DOMDocument);
      CREATE(DOMDocument);
      DOMDocument.load(FileName);
      IF NOT ISCLEAR(DOMDocument) THEN BEGIN
        RootNode := DOMDocument.selectSingleNode('Setup');
        IF NOT ISCLEAR(RootNode) THEN BEGIN
          TableNodeList := RootNode.selectNodes('Table');
          IF NOT ISCLEAR(TableNodeList) THEN BEGIN
            FOR TableNodeCount := 0 TO TableNodeList.length-1 DO BEGIN
              TableNode := TableNodeList.item(TableNodeCount);
              IF NOT ISCLEAR(TableNode) THEN BEGIN
                DOMAttribute := TableNode.attributes;
                IF NOT ISCLEAR(DOMAttribute) THEN BEGIN
                  EVALUATE(TableNo,DOMAttribute.getNamedItem('No').text);
                  EVALUATE(TableName,DOMAttribute.getNamedItem('TableName').text);
                  RecRef.OPEN(TableNo);
                  RecordNodeList := TableNode.selectNodes('Record');
                  IF NOT ISCLEAR(RecordNodeList) THEN BEGIN
                    FOR RecordNodeCount := 0 TO RecordNodeList.length -1 DO BEGIN
                      RecordNode := RecordNodeList.item(RecordNodeCount);
                      IF NOT ISCLEAR(RecordNode) THEN BEGIN
                        DOMAttribute := RecordNode.attributes;
                        IF NOT ISCLEAR(DOMAttribute) THEN BEGIN
                          EVALUATE(RecordID,DOMAttribute.getNamedItem('RecordID').text);
                          FieldNodeList := RecordNode.selectNodes('Field');
                          IF NOT ISCLEAR(FieldNodeList) THEN BEGIN
                            FOR FieldNodeCount := 0 TO FieldNodeList.length -1 DO BEGIN
                              FieldNode := FieldNodeList.item(FieldNodeCount);
                              IF NOT ISCLEAR(FieldNode) THEN BEGIN
                                DOMAttribute := FieldNode.attributes;
                                IF NOT ISCLEAR(DOMAttribute) THEN BEGIN
                                  No := 0;
                                  FieldName := '';
                                  EVALUATE(No,DOMAttribute.getNamedItem('No').text);
                                  EVALUATE(FieldName,DOMAttribute.getNamedItem('FieldName').text);
                                  FieldRef := RecRef.FIELD(No);
                                  IntVar := 0;
                                  BoolVar := FALSE;
                                  DecVar := 0;
                                  CASE FORMAT(FieldRef.TYPE) OF
                                    'Option','Integer' : BEGIN
                                      EVALUATE(IntVar,FieldNode.text);
                                      FieldRef.VALUE := IntVar;
                                    END;
                                    'Boolean' : BEGIN
                                      EVALUATE(BoolVar,FieldNode.text);
                                      FieldRef.VALUE := BoolVar;
                                    END;
                                    'Decimal' : BEGIN
                                      EVALUATE(DecVar,FieldNode.text);
                                      FieldRef.VALUE := DecVar;
                                    END;
                                  ELSE
                                    FieldRef.VALUE := FieldNode.text;
                                  END;
                                END;
                              END;
                            END;
                          END;
                        END;
                      IF FORMAT(RecordID) = FORMAT(RecordID) THEN
                        RecRef.INSERT;
                      END;
                    END;
                  END;
                  //S/P0943
                  RecRef.CLOSE;
                  //E/P0943
                END;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE GetValidTagName@1000000008(p_Text@1000000000 : Text[1024]) r_TagName : Text[1024];
    BEGIN
      r_TagName := DELCHR(p_Text,'=',' .,');
    END;

    PROCEDURE FunctionCall@1000000013(p_SIIXMLStructureLine@1000000000 : Record 50149;p_RecRef@1000000001 : RecordRef) : Text[1024];
    VAR
      GroupID@1000000002 : Integer;
      EntryNo@1000000003 : Integer;
      FieldrefL@1000000004 : FieldRef;
      SIILogActions@1000000005 : Record 50153;
    BEGIN
      //T0003 18.06.14 tec-sf +++++++++++++++++++++++++++++
      // Skip attachments, if it's not an E-Mail Action
      IF (p_SIIXMLStructureLine."Function to Call" = 2) THEN BEGIN
        IF (p_RecRef.ISTEMPORARY) AND (p_RecRef.NUMBER = DATABASE::"SII Log Actions") THEN BEGIN
          FieldrefL := p_RecRef.FIELD(25); // "Action for"
          IF FORMAT(FieldrefL.VALUE) <> FORMAT(SIILogActions."Action For"::EMail) THEN
            EXIT('');
        END;
      END;
      //T0003 18.06.14 tec-sf -----------------------------

      //S/P0942
      CASE p_SIIXMLStructureLine."Function to Call" OF
        1: BEGIN
          EVALUATE(GroupID,FORMAT(p_RecRef.FIELD(14)));
          EXIT(RefereceGroupArrayGLOB[GroupID]);
        END;
        //H0651  20.11.2013  MBY  +++++++++++++++++++++++++
        2: BEGIN
          EVALUATE(EntryNo,FORMAT(p_RecRef.FIELD(1)));
          PrintToPdf(EntryNo,p_SIIXMLStructureLine."Use Request Document");
          EXIT('');
        END;
        //H0651  20.11.2013  MBY  -------------------------
      END;
      //E/P0942
    END;

    PROCEDURE AddElement@1(VAR XMLNode@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";NodeName@1002 : Text[250];NodeText@1003 : Text[1024];NameSpace@1004 : Text[250];VAR CreatedXMLNode@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode") ExitStatus@1000 : Integer;
    VAR
      NewChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      IF NOT NormalCaseMode THEN
        NodeName := UPPERCASE(NodeName);
      NewChildNode := XMLNode.ownerDocument.createNode('element', NodeName, NameSpace);

      IF ISCLEAR(NewChildNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF NodeText <> '' THEN
        NewChildNode.text := NodeText;

      XMLNode.appendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;

      ExitStatus := 0;
    END;

    PROCEDURE AddAttribute@2(VAR XMLNode@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";Name@1002 : Text[260];NodeValue@1003 : Text[1024]) ExitStatus@1000 : Integer;
    VAR
      XMLNewAttributeNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      IF NOT NormalCaseMode THEN
        Name := UPPERCASE(Name);
      XMLNewAttributeNode := XMLNode.ownerDocument.createAttribute(Name);

      IF ISCLEAR(XMLNewAttributeNode) THEN BEGIN
        ExitStatus := 60;
        EXIT(ExitStatus)
      END;

      IF NodeValue <> '' THEN
        XMLNewAttributeNode.nodeValue := NodeValue;

      XMLNode.attributes.setNamedItem(XMLNewAttributeNode);
    END;

    PROCEDURE SetNormalCase@6();
    BEGIN
      NormalCaseMode := TRUE;
    END;

    PROCEDURE PrintToPdf@1000000020(EntryNoV@1000000000 : Integer;TypeV@1000000001 : Integer);
    VAR
      RecordRefL@1000000004 : RecordRef;
      CustL@1000000018 : Record 18;
      SalesReturnHeaderL@1000000010 : Record 36;
      SalesReturnLineL@1000000007 : Record 37;
      SalesCrMemHeaderL@1000000011 : Record 114;
      SalesInvoiceHeaderL@1000000003 : Record 112;
      IssuedReminderHeaderL@1000000017 : Record 297;
      FPCGenSetupL@1000000020 : Record 50055;
      DPDSetupL@1000000015 : Record 50221;
      ReportSelectionsL@1000000024 : Record 77;
      SIILogL@1000000013 : Record 50146;
      SIIXMLLogL@1000000002 : Record 50145;
      FPCManagementL@1000000008 : Codeunit 50003;
      GeneralMgt2L@1000000012 : Codeunit 50040;
      DHLStatMgtL@1000000016 : Codeunit 50078;
      DPDGeneralMgtL@1000000026 : Codeunit 50112;
      FilenamesL@1000000029 : ARRAY [100] OF Text[1024];
      ClientPdfFileNameL@1000000009 : Text[250];
      SettingsL@1000000005 : ARRAY [20,2] OF Text[50];
      i@1000000019 : Integer;
      NoOfFilesL@1000000006 : Integer;
      ParcelNo_P1128L@1000000014 : Integer;
    BEGIN
      //H1672,H1643,H1565,T0009,T0003,H0822 14.10.14 MIK ++++++++++++++++++++++++++
      IF SIILogL.GET(EntryNoV) AND (TypeV <> 0) THEN BEGIN
        ClientPdfFileNameL := TEMPORARYPATH + SIILogL."Process Document No." + '.pdf';
        NoOfFilesL := 0;

        CASE TypeV OF
          1 :  //Invoice
            BEGIN
              ReportSelectionsL.SETRANGE(Usage,ReportSelectionsL.Usage::"S.Invoice");
              ReportSelectionsL.SETFILTER("Report ID",'<>0');
              ReportSelectionsL.FINDFIRST;

              SalesInvoiceHeaderL.GET(SIILogL."Process Document No.");
              SalesInvoiceHeaderL.SETRECFILTER;
              RecordRefL.GETTABLE(SalesInvoiceHeaderL);
              RecordRefL.SETVIEW(SalesInvoiceHeaderL.GETVIEW);

              FPCManagementL.PrintToBullZip(ReportSelectionsL."Report ID",RecordRefL,ClientPdfFileNameL,30000,SettingsL);
              NoOfFilesL := NoOfFilesL + 1;
              FilenamesL[NoOfFilesL] := ClientPdfFileNameL;
            END;
          2 : // Return Label
            BEGIN
              FPCGenSetupL.GET;
              DPDSetupL.GET;
              SalesReturnHeaderL.GET(SalesReturnHeaderL."Document Type"::"Return Order", SIILogL."Process Document No.");
              IF (SalesReturnHeaderL."Language Code" IN ['DEU','','FRS','DES']) THEN BEGIN
                CustL.GET(SalesReturnHeaderL."Sell-to Customer No.");
                //H1783 19.11.14 MIK ++++++++++++++++++++++++++
                SalesReturnLineL.SETRANGE("Document Type",SalesReturnHeaderL."Document Type");
                SalesReturnLineL.SETRANGE("Document No.",SalesReturnHeaderL."No.");
                SalesReturnLineL.SETRANGE(Type,SalesReturnLineL.Type::Item);
                SalesReturnLineL.SETRANGE("Transp. Type",SalesReturnLineL."Transp. Type"::"Parcel Service");
                SalesReturnLineL.SETFILTER("No.",'<>%1','');
                IF SalesReturnLineL.FIND('-') THEN BEGIN
                  CASE SalesReturnLineL."Shipping Agent Code" OF
                    FPCGenSetupL."Ship. Agent Code DHL":
                      BEGIN
                        IF GeneralMgt2L.CheckMP(SalesReturnLineL."No.",'') = 0 THEN BEGIN
                          RecordRefL.GETTABLE(SalesReturnLineL);
                            RecordRefL.SETVIEW(SalesReturnLineL.GETVIEW);
                            FPCManagementL.PrintToBullZip(
                              REPORT::"DHL Paket Label Retoure",RecordRefL,
                              ClientPdfFileNameL,30000,SettingsL
                            );
                            NoOfFilesL := NoOfFilesL + 1;
                            FilenamesL[NoOfFilesL] := ClientPdfFileNameL;
                        END;
                      END;
                    //H1752 31.10.14  MIK ++++++++++++++++++++++++++
                    FPCGenSetupL."Shipping Releation Bulky Goods":
                      BEGIN
                        IF GeneralMgt2L.CheckMP(SalesReturnLineL."No.",'') = 0 THEN BEGIN
                          RecordRefL.GETTABLE(SalesReturnLineL);
                          RecordRefL.SETVIEW(SalesReturnLineL.GETVIEW);
                          FPCManagementL.PrintToBullZip(
                            REPORT::"DHL Paket Label Retoure",RecordRefL,
                            ClientPdfFileNameL,30000,SettingsL
                          );
                          NoOfFilesL := NoOfFilesL + 1;
                          FilenamesL[NoOfFilesL] := ClientPdfFileNameL;
                        END;
                      END;
                    ELSE
                      BEGIN
                        ERROR(STRSUBSTNO(
                                TextHME001,
                                SalesReturnLineL."Shipping Agent Code",
                                SalesReturnLineL.GETPOSITION(TRUE)
                              ))
                      END;
                    //H1752 31.10.14  MIK --------------------------
                  END; // CASE
                  //H1783 19.11.14 MIK --------------------------
                END;
              END ELSE BEGIN
                ParcelNo_P1128L := 0;
                CustL.GET(SalesReturnHeaderL."Sell-to Customer No.");
                SalesReturnLineL.RESET;
                SalesReturnLineL.SETRANGE("Document Type",SalesReturnHeaderL."Document Type");
                SalesReturnLineL.SETRANGE("Document No.",SalesReturnHeaderL."No.");
                SalesReturnLineL.SETRANGE(Type,SalesReturnLineL.Type::Item);
                SalesReturnLineL.SETFILTER("No.",'<>%1','');
                IF SalesReturnLineL.FINDSET(FALSE,FALSE) THEN
                  REPEAT
                    IF SalesReturnLineL.Quantity <> 0 THEN
                      ParcelNo_P1128L += SalesReturnLineL."Parcels Number";
                  UNTIL SalesReturnLineL.NEXT = 0;
                IF ParcelNo_P1128L = 0 THEN
                  ParcelNo_P1128L := 1;
                FOR i := 1 TO ParcelNo_P1128L DO BEGIN
                  DHLStatMgtL.CreateRequestXMLRetoure(CustL,TEMPORARYPATH + '\' + FORMAT(i) + '_',ClientPdfFileNameL,
                                                     SalesReturnHeaderL."No.");
                  IF ClientPdfFileNameL <> '' THEN BEGIN
                    NoOfFilesL += 1;
                    FilenamesL[NoOfFilesL] := ClientPdfFileNameL;
                  END;
                END;
              END;
            END;
          3 : // Delivery Note (aka Return Sheet or Return List)
            BEGIN
              SalesReturnHeaderL.GET(SalesReturnHeaderL."Document Type"::"Return Order", SIILogL."Process Document No.");
              SalesReturnHeaderL.SETRECFILTER;

              RecordRefL.GETTABLE(SalesReturnHeaderL);
              RecordRefL.SETVIEW(SalesReturnHeaderL.GETVIEW);
              FPCManagementL.PrintToBullZip(REPORT::"Return Order - Return Sheet",RecordRefL,ClientPdfFileNameL,30000,SettingsL);
              NoOfFilesL := NoOfFilesL + 1;
              FilenamesL[NoOfFilesL] := ClientPdfFileNameL;
            END;
          4 : // Credit Memo
            BEGIN
              SalesCrMemHeaderL.GET(SIILogL."Process Document No.");
              SalesCrMemHeaderL.SETRECFILTER;

              RecordRefL.GETTABLE(SalesCrMemHeaderL);
              RecordRefL.SETVIEW(SalesCrMemHeaderL.GETVIEW);
              FPCManagementL.PrintToBullZip(REPORT::"Sales - Credit Memo",RecordRefL,ClientPdfFileNameL,30000,SettingsL);
              NoOfFilesL := NoOfFilesL + 1;
              FilenamesL[NoOfFilesL] := ClientPdfFileNameL;
            END;
          //H1985  17.02.15  MBY  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          5 : // Reminder
            BEGIN
              ReportSelectionsL.SETRANGE(Usage,ReportSelectionsL.Usage::Reminder);
              ReportSelectionsL.SETFILTER("Report ID",'<>0');
              ReportSelectionsL.FINDFIRST;

              IssuedReminderHeaderL.GET(SIILogL."Process Document No.");
              IssuedReminderHeaderL.SETRECFILTER;

              RecordRefL.GETTABLE(IssuedReminderHeaderL);
              RecordRefL.SETVIEW(IssuedReminderHeaderL.GETVIEW);
              FPCManagementL.PrintToBullZip(ReportSelectionsL."Report ID",RecordRefL,ClientPdfFileNameL,30000,SettingsL);
              NoOfFilesL := NoOfFilesL + 1;
              FilenamesL[NoOfFilesL] := ClientPdfFileNameL;
            END;
          //H1985  17.02.15  MBY  -----------------------------------------------------------------
        END;

        IF NoOfFilesL > 0 THEN BEGIN
          FOR i := 1 TO NoOfFilesL DO BEGIN
            IF (FilenamesL[i] <> '') THEN BEGIN
              SIIXMLLogL.INIT;
              SIIXMLLogL."Attached to Entry No." := SIILogL."Entry No.";
              SIIXMLLogL."Line No." := SIIXMLLogL.GetNextLineNo(SIILogL."Entry No.",FALSE);
              SIIXMLLogL.Type := TypeV;
              SIIXMLLogL."Request Document".IMPORT(FilenamesL[i]);
              SIIXMLLogL.INSERT;
              IF EXISTS(FilenamesL[i]) THEN
                ERASE(FilenamesL[i]);
            END;
          END;
        END;
      END;
      //H1672,H1643,H1565,T0009,T0003,H0822 14.10.14 MIK --------------------------
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |     Cooperation GOB & Home24 NAV Team      |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________

      *** Module: SII Shop Interaction Interface ***
      P0879       26.03.13  gob-rste  Object Created

      *** Module: FTTC Face to the Customer ***
      P0923       21.05.13  gob-rste  Add Actions to XML Sorting by Group ID, Add Fix Value to XML
      P0923       24.05.13  gob-rste  Import Export Variable Setup
      P0942       05.06.13  gob-rste  CallFunction to Action For Group Actions
                                      XML Functions from XML DOM Mgt. to Local Functions with Parameter Text 1024
      P0943       05.06.13  gob-rste  Fix RecRef.CLOSE for Import
      P0955       11.06.13  gob-rste  Don't Add Empty XML Set Default to TRUE
      P1009       08.07.13  gob-rste  Skip Mail Actions XML

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |     Cooperation Tectura & Home24 NAV Team  |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________

      T0003       05.06.14  tec-sf    Extended PrintToPdf()-Function (new Option) / Extended FunctionCall()-Function (new Option)
      T0003       17.06.14  tec-sf    Extended PrintToPdf()-Function (new Option) /  FunctionCall()-Function (new Option)
      T0003       18.06.14  tec-sf    Changed GetValueAsFormatText() and FunctionCall()
      T0009       02.07.14  tec-sf    Extended PrintToPdf()-Function (new Option)
      T0041       19.08.14  tec-cs    allow filtering of XML-Elements regardng to action-type (Mail, Update)
      H1565       25.09.14  tec-sf    Changes for international & DPD labels in PrintToPdf()
      H1565       02.10.14  tec-sf    Changes for multiple PDFs in 1 line

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________
      H0651       06.11.13 MBY        New functionality to attach PDF
      H0822       14.02.14 MBY        Update PrintToPdf function
      H1402       23.07.14 ABR        Change Invoice XML Structure
      H1643       14.10.14 MIK        FTTC3 - Create Return Message for Belgium
      H1672       20.10.14 MIK        BUG: FTTC3 - Return labels are not created correctly from the SII Log
      H1752       31.10.14 MIK        FTTC 3: Process SII Log Messages for DHL Bulky Goods DBG
      H1783       19.11.14 MIK        SII Redesign for the Return&Change messages (Label&Instruction). Code cleanup.
      H1985       17.02.15 MBY        Sending reminders by SII
    }
    END.
  }
}

