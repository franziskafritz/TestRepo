OBJECT Codeunit 50132 Client Monitor to C/AL Code HM
{
  OBJECT-PROPERTIES
  {
    Date=31.05.13;
    Time=14:54:45;
    Version List=DEBUGW13.10.01;
  }
  PROPERTIES
  {
    TableNo=50162;
    OnRun=VAR
            ClientMonitorSetup@1002 : Record 50163;
            CodeCoverageLine@1004 : Record 50164;
            RealCodeCoverageLine@1000 : Record 2000000049;
            SpacePos@1001 : Integer;
            Tail@1003 : Text[250];
          BEGIN
            IF ("Source Object" = '') OR ("Source Function/Trigger" = '') THEN
              EXIT;

            SpacePos := STRPOS("Source Object",' ');
            EVALUATE(RealCodeCoverageLine."Object Type",COPYSTR("Source Object",1,SpacePos - 1));
            Tail := COPYSTR("Source Object",SpacePos + 1);
            SpacePos := STRPOS(Tail,' ');
            IF SpacePos = 0 THEN
              EVALUATE(RealCodeCoverageLine."Object ID",Tail)
            ELSE
              EVALUATE(RealCodeCoverageLine."Object ID",COPYSTR(Tail,1,SpacePos));
            RealCodeCoverageLine."Line No." := "Source Line No.";

            IF ClientMonitorSetup.GET THEN;

            IF ClientMonitorSetup."Save Code Coverage Info." THEN BEGIN
              CodeCoverageLine."Object Type" := RealCodeCoverageLine."Object Type";
              CodeCoverageLine."Object ID" := RealCodeCoverageLine."Object ID";
              CodeCoverageLine."Login Date" := "Login Date";
              CodeCoverageLine."Login Time" := "Login Time";
              CodeCoverageLine."Connection ID" := "Connection ID";
              CodeCoverageLine."Line No." := "Source Line No.";
              CodeCoverageLine.SETRECFILTER;
              CodeCoverageLine.SETRANGE("Line No.");
              CodeCoverageLine.SETRANGE("Function/Trigger Name","Source Function/Trigger");
              FORM.RUN(FORM::"C/AL Code - Code Coverage HME",CodeCoverageLine);
            END ELSE BEGIN
              RealCodeCoverageLine.SETRECFILTER;
              RealCodeCoverageLine.SETRANGE("Line No.");
              FORM.RUN(FORM::"Code Overview",RealCodeCoverageLine);
            END;
          END;

  }
  CODE
  {

    PROCEDURE Update@1();
    VAR
      ClientMonitorSetup@1011 : Record 50163;
      CodeCoverageLine@1008 : Record 2000000049;
      CodeCoverageLine2@1007 : Record 50164;
      CodeCoverageLine3@1006 : Record 50164;
      Session@1010 : Record 2000000009;
      FunctionTriggerName@1009 : Text[250];
      ObjectInUse@1005 : Boolean;
      FunctionInUse@1004 : Boolean;
      CodeInUse@1003 : Boolean;
      Window@1002 : Dialog;
      Total@1001 : Integer;
      i@1000 : Integer;
    BEGIN
      IF NOT ClientMonitorSetup.GET THEN
        EXIT;

      IF NOT ClientMonitorSetup."Save Code Coverage Info." THEN
        EXIT;

      IF NOT CodeCoverageLine.FIND('-') THEN
        EXIT;

      Window.OPEN(
        'Processing Code Coverage...\' +
        '@1@@@@@@@@@@@@@');
      Total := CodeCoverageLine.COUNT * 2;
      CodeCoverageLine2.SetConnectionFilter;
      CodeCoverageLine3.SetConnectionFilter;
      CodeCoverageLine3.DELETEALL;
      Session.SETRANGE("My Session",TRUE);
      Session.FIND('-');
      IF CodeCoverageLine.FIND('-') THEN
        REPEAT
          i := i + 1;
          Window.UPDATE(1,ROUND(i / Total * 10000,1));
          CodeCoverageLine2.TRANSFERFIELDS(CodeCoverageLine);
          CASE CodeCoverageLine."Line Type" OF
            CodeCoverageLine."Line Type"::Object:
              BEGIN
                FunctionTriggerName := '';
                ObjectInUse := FALSE;
                FunctionInUse := FALSE;
                CodeInUse := FALSE;
              END;
            CodeCoverageLine."Line Type"::"Trigger/Function":
              BEGIN
                FunctionTriggerName := CodeCoverageLine2.Line;
                FunctionInUse := FALSE;
                CodeInUse := FALSE;
              END;
            CodeCoverageLine."Line Type"::Code:
              IF CodeCoverageLine2."No. of Hits" > 0 THEN BEGIN
                ObjectInUse := TRUE;
                FunctionInUse := TRUE;
                CodeInUse := TRUE;
              END ELSE
                CodeInUse := FALSE;
            CodeCoverageLine."Line Type"::Empty:
              ;
          END;
          CodeCoverageLine2."Function/Trigger Name" := FunctionTriggerName;
          CodeCoverageLine2."In Use" := CodeInUse;
          CodeCoverageLine2."Function In Use" := FunctionInUse;
          CodeCoverageLine2."Object In Use" := ObjectInUse;
          CodeCoverageLine2."Connection ID" := Session."Connection ID";
          CodeCoverageLine2."Login Date" := Session."Login Date";
          CodeCoverageLine2."Login Time" := 000000T + ROUND(Session."Login Time" - 000000T,1000);
          CodeCoverageLine2."User ID" := Session."User ID";
          CodeCoverageLine2.INSERT;
        UNTIL CodeCoverageLine.NEXT = 0;

      ObjectInUse := FALSE;
      FunctionInUse := FALSE;
      CodeInUse := FALSE;

      IF CodeCoverageLine2.FIND('+') THEN
        REPEAT
          i := i + 1;
          Window.UPDATE(1,ROUND(i / Total * 10000,1));
          CASE CodeCoverageLine2."Line Type" OF
            CodeCoverageLine."Line Type"::Object:
              BEGIN
                IF ObjectInUse THEN BEGIN
                  CodeCoverageLine2."Object In Use" := TRUE;
                  CodeCoverageLine2."Function In Use" := TRUE;
                  CodeCoverageLine2."In Use" := TRUE;
                END;
                ObjectInUse := FALSE;
                FunctionInUse := FALSE;
                CodeInUse := FALSE;
              END;
            CodeCoverageLine."Line Type"::"Trigger/Function":
              BEGIN
                IF ObjectInUse THEN
                  CodeCoverageLine2."Object In Use" := TRUE;
                IF FunctionInUse THEN BEGIN
                  CodeCoverageLine2."Function In Use" := TRUE;
                  CodeCoverageLine2."In Use" := TRUE;
                END;
                FunctionInUse := FALSE;
                CodeInUse := FALSE;
              END;
            CodeCoverageLine."Line Type"::Empty:
              BEGIN
                IF ObjectInUse THEN
                  CodeCoverageLine2."Object In Use" := TRUE;
                IF FunctionInUse THEN
                  CodeCoverageLine2."Function In Use" := TRUE;
                IF CodeInUse THEN
                  CodeCoverageLine2."In Use" := TRUE;
              END;
            CodeCoverageLine."Line Type"::Code:
              BEGIN
                IF CodeCoverageLine2."No. of Hits" > 0 THEN BEGIN
                  CodeInUse := TRUE;
                  FunctionInUse := TRUE;
                  ObjectInUse := TRUE;
                END ELSE
                  CodeInUse := FALSE;
                IF ObjectInUse THEN
                  CodeCoverageLine2."Object In Use" := TRUE;
                IF FunctionInUse THEN
                  CodeCoverageLine2."Function In Use" := TRUE;
                IF CodeInUse THEN
                  CodeCoverageLine2."In Use" := TRUE;
              END;
          END;
          CodeCoverageLine2.MODIFY;
        UNTIL CodeCoverageLine2.NEXT(-1) = 0;

      CodeCoverageLine.DELETEALL;
    END;

    BEGIN
    END.
  }
}

