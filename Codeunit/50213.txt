OBJECT Codeunit 50213 Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=02.09.13;
    Time=14:59:54;
    Version List=HME0513;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 50200;
      LibraryFinance@1003 : Codeunit 50207;
      LibrarySCM@1002 : Codeunit 50210;
      isInitialized@1000 : Boolean;
      VATAmountErrorMessage@1008 : TextConst 'ENU=VAT Amount must be %1 in %2.';
      FieldError@1007 : TextConst 'ENU=Number of Lines for %1 and %2  must be Equal.';
      AmountError@1006 : TextConst 'ENU=%1 must be Equal in %2.';
      CurrencyError@1005 : TextConst 'ENU=%1 must be Equal in %2.';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      BackupManagement@1001 : Codeunit 50201;
    BEGIN
      RANDOMIZE(1);  // Seed RANDOM function.

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      BackupManagement.DefaultFixture;
      LibraryFinance.InitializeGeneralPostingSetup;
      LibraryFinance.InitializeVATPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE PurchaseOrderCreation@3();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Test New Purchase Order creation.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Order.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);

      // Verify: Verify Purchase Order created.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE VATAmountOnPurhcaseOrder@4();
    VAR
      GeneralLedgerSetup@1008 : Record 98;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      VATAmountLine@1002 : Record 290;
      ReleasePurchaseDocument@1004 : Codeunit 415;
      QtyType@1003 : 'General,Invoicing,Shipping';
    BEGIN
      // Create a Purchase Order, Calculates applicable VAT for a VAT Posting Group and verify it with VAT Amount Line.

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);

      // Exercise: Calculate VAT Amount on Purchase Order.
      PurchaseLine.CalcVATAmountLines(QtyType::Invoicing,PurchaseHeader,PurchaseLine,VATAmountLine);

      // Verify: Verify VAT Amount on Purchase Order.
      GeneralLedgerSetup.GET;
      ReleasePurchaseDocument.PerformManualRelease(PurchaseHeader);
      PurchaseHeader.CALCFIELDS(Amount);
      Assert.AreNearlyEqual(
        PurchaseHeader.Amount * PurchaseLine."VAT %" / 100,VATAmountLine."VAT Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(VATAmountErrorMessage,PurchaseHeader.Amount * PurchaseLine."VAT %" / 100,VATAmountLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseOrderReport@5();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      Order@1005 : Report 405;
      LibraryUtility@1004 : Codeunit 50206;
      FilePath@1003 : Text[1024];
    BEGIN
      // Create New Purchase Order and save as external file and verify saved files have data.

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);

      // Exercise: Generate Report as external file for Purchase Order.
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("No.",PurchaseHeader."No.");
      Order.SETTABLEVIEW(PurchaseHeader);
      IF ISSERVICETIER THEN BEGIN
        FilePath := TEMPORARYPATH + FORMAT(PurchaseHeader."Document Type") + PurchaseHeader."No." + '.xls';
        Order.SAVEASEXCEL(FilePath)
      END ELSE BEGIN
        FilePath := TEMPORARYPATH + FORMAT(PurchaseHeader."Document Type") + PurchaseHeader."No." + '.xml';
        Order.SAVEASXML(FilePath);
      END;

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE PurchaseOrderAsReceive@6();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchRcptLine@1004 : Record 121;
      NoSeriesManagement@1002 : Codeunit 396;
      PurchaseLineCount@1006 : Integer;
      PostedDocumentNo@1003 : Code[20];
    BEGIN
      // Create New Purchase Order post as Receive and verify Posted Receipt No. of Lines are equals as Purchase Order No. of Lines.

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLineCount := PurchaseLine.COUNT;
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Receiving No. Series",WORKDATE,FALSE);

      // Exercise: Post Purchase Order as Receive.
      LibrarySCM.PostPurchaseHeader(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify Purchase Receipt Line Count with Purchase Line Count.
      PurchRcptLine.SETRANGE("Document No.",PostedDocumentNo);
      Assert.AreEqual(PurchaseLineCount,PurchRcptLine.COUNT,STRSUBSTNO(FieldError,PurchaseLine.TABLECAPTION,PurchRcptLine.TABLECAPTION))
      ;
    END;

    [Test]
    PROCEDURE PurchaseOrderAsInvoice@14();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchInvHeader@1001 : Record 122;
      NoSeriesManagement@1002 : Codeunit 396;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Create a Purchase Order, Post as Receive and Invoice and verify Vendor Ledger, GL Entry, and VAT Entry.

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);

      // Exercise: Post Purchase Order as Receive and Invoice.
      LibrarySCM.PostPurchaseHeader(PurchaseHeader,TRUE,TRUE);

      // Verify: GL Entry, Vendor Ledger Entry, Value Entry and VAT Entry.
      PurchInvHeader.GET(PostedDocumentNo);
      PurchInvHeader.CALCFIELDS(Amount,"Amount Including VAT");
      VerifyGLEntry(PostedDocumentNo,PurchInvHeader."Amount Including VAT");
      VerifyVendorLedgerEntry(PostedDocumentNo,PurchInvHeader."Amount Including VAT");
      VerifyVATEntry(PostedDocumentNo,PurchInvHeader."Amount Including VAT");
      VerifyValueEntry(PostedDocumentNo,PurchInvHeader.Amount);
    END;

    [Test]
    PROCEDURE PostedPurchaseInvoiceReport@12();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchInvHeader@1003 : Record 122;
      PurchaseInvoice@1005 : Report 406;
      LibraryUtility@1007 : Codeunit 50206;
      NoSeriesManagement@1004 : Codeunit 396;
      FilePath@1006 : Text[1024];
      PostedDocumentNo@1002 : Code[20];
    BEGIN
      // Test if Post a Purchase Order and generate Posted Purchase Invoice Report.

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibrarySCM.PostPurchaseHeader(PurchaseHeader,TRUE,TRUE);

      // Exercise: Generate Report as external file for Posted Purchase Invoice.
      PurchInvHeader.SETRANGE("No.",PostedDocumentNo);
      PurchaseInvoice.SETTABLEVIEW(PurchInvHeader);
      IF ISSERVICETIER THEN BEGIN
        FilePath := TEMPORARYPATH + FORMAT('Purchase - Invoice') + PurchInvHeader."No." + '.xls';
        PurchaseInvoice.SAVEASEXCEL(FilePath)
      END ELSE BEGIN
        FilePath := TEMPORARYPATH + FORMAT('Purchase - Invoice') + PurchInvHeader."No." + '.xml';
        PurchaseInvoice.SAVEASXML(FilePath);
      END;

      // Verify: Verify that Saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(WarehouseFormHandler,MessageHandler)]
    PROCEDURE PurchaseOrderForWhseLocation@16();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchRcptLine@1009 : Record 121;
      WarehouseEmployee@1003 : Record 7301;
      GetSourceDocInbound@1006 : Codeunit 5751;
      LibrarySCM@1002 : Codeunit 50210;
      ReleasePurchaseDocument@1007 : Codeunit 415;
      NoSeriesManagement@1010 : Codeunit 396;
      PostedDocumentNo@1008 : Code[20];
    BEGIN
      // Test if Post a Purchase Order with Warehouse Location and verify Posted Purchase Receipt Entry.

      // Setup
      Initialize;

      // Exercise: Create Purchase Order for Warehouse Location. Using RANDOM Quantity for Purchase Line, value is not important.
      LibrarySCM.CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibrarySCM.CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine.Type::Item,CreateItem,
        RANDOM(10));

      // Update Purchase Line with New Warehouse Location.
      PurchaseLine.VALIDATE("Location Code",LibrarySCM.FindLocation);
      PurchaseLine.MODIFY(TRUE);
      LibrarySCM.CreateInvtPostingSetup(PurchaseLine."Location Code",PurchaseLine."No.");
      LibrarySCM.CreateWarehouseEmployee(WarehouseEmployee,PurchaseLine."Location Code",FALSE);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Receiving No. Series",WORKDATE,FALSE);
      ReleasePurchaseDocument.PerformManualRelease(PurchaseHeader);
      GetSourceDocInbound.CreateFromPurchOrder(PurchaseHeader);

      // Post Warehouse Document as Receive.
      LibrarySCM.ReceiveWarehouseDocument(PurchaseHeader."No.",PurchaseLine."Line No.");

      // Verify: Verify Quantity Posted Receipt Document.
      PurchRcptLine.SETRANGE("Document No.",PostedDocumentNo);
      PurchRcptLine.FINDFIRST;
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      Assert.AreEqual(PurchaseLine."Quantity Received",PurchRcptLine.Quantity,STRSUBSTNO(FieldError,PurchaseLine.TABLECAPTION,
          PurchRcptLine.TABLECAPTION));

      // Tear Down: Rollback Setup changes for Location and Warehouse Employee.
      WarehouseEmployee.GET(USERID,PurchaseLine."Location Code");
      WarehouseEmployee.DELETE;
    END;

    [Test]
    PROCEDURE LineDiscountOnPurhcaseOrder@21();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      PurchaseLineDiscount@1005 : Record 7014;
      NoSeriesManagement@1001 : Codeunit 396;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Test Line Discount on Purchase Order, Post as Receive and Invoice and verify Posted GL Entry.

      // Setup: Create Line Discount Setup.
      Initialize;
      SetupLineDiscount(PurchaseLineDiscount);

      // Exercise: Create and Post Purchase Order with Random Quantity. Take Quantity greater than Purchas Line Discount Minimum Quantity.
      LibrarySCM.CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,PurchaseLineDiscount."Vendor No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibrarySCM.CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine.Type::Item,PurchaseLineDiscount."Item No.",
        PurchaseLineDiscount."Minimum Quantity" + RANDOM(10));
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibrarySCM.PostPurchaseHeader(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Purchase Line and Posted G/L Entry for Line Discount Amount.
      VerifyLineDiscountAmount(
        PurchaseLine,PostedDocumentNo,
        (PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * PurchaseLineDiscount."Line Discount %" / 100);
    END;

    [Test]
    PROCEDURE InvoiceDiscountOnPurchaseOrder@29();
    VAR
      VendorInvoiceDisc@1002 : Record 24;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      NoSeriesManagement@1001 : Codeunit 396;
      ReleasePurchaseDocument@1005 : Codeunit 415;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Create New Invoice Discount Setup for Vendor and make new Purchase Order, Post as Receive and Invoice and verify Posted GL Entry.

      // Setup: Create Invoice Discount Setup.
      Initialize;
      SetupInvoiceDiscount(VendorInvoiceDisc);

      // Exercise: Create Purchase Order, calculate Invoice Discount and Post as Receive and Invoice.
      // Using RANDOM Quantity for Purchase Line, value is not important.
      LibrarySCM.CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorInvoiceDisc.Code);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibrarySCM.CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine.Type::Item,
        CreateItem,RANDOM(10));

      // Order Value always greater than Minimum Amount of Invoice Discount Setup.
      PurchaseLine.VALIDATE("Direct Unit Cost",VendorInvoiceDisc."Minimum Amount");
      PurchaseLine.MODIFY(TRUE);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      ReleasePurchaseDocument.PerformManualRelease(PurchaseHeader);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchaseLine);
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      LibrarySCM.PostPurchaseHeader(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Purchase Line and Posted G/L Entry for Invoice Discount Amount.
      VerifyInvoiceDiscountAmount(PurchaseLine,PostedDocumentNo,
        (PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * VendorInvoiceDisc."Discount %" / 100);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithFCY@25();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchInvHeader@1005 : Record 122;
      NoSeriesManagement@1004 : Codeunit 396;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Create and Post a Purchase Order with Currency and verify currency on Posted Purchase Invoice Entry.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Order, attach new Currency on Purchase Order and Post as Receive and Invoice.
      LibrarySCM.CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      PurchaseHeader.VALIDATE("Currency Code",CreateCurrency);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibrarySCM.CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine.Type::Item,
        CreateItem,RANDOM(10));
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibrarySCM.PostPurchaseHeader(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Currency Code in Purchase Line and Posted Purchase Invoice Header.
      PurchInvHeader.GET(PostedDocumentNo);
      Assert.AreEqual(PurchaseHeader."Currency Code",PurchaseLine."Currency Code",
        STRSUBSTNO(CurrencyError,PurchaseLine.FIELDCAPTION("Currency Code"),PurchaseLine.TABLECAPTION));
      Assert.AreEqual(PurchaseHeader."Currency Code",PurchInvHeader."Currency Code",
        STRSUBSTNO(CurrencyError,PurchInvHeader.FIELDCAPTION("Currency Code"),PurchInvHeader.TABLECAPTION));
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryFinance.CreateCurrency(Currency);
      LibraryFinance.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
      InventorySetup@1003 : Record 313;
      VATPostingSetup@1002 : Record 325;
      LibraryUtility@1004 : Codeunit 50206;
      LibrarySCM@1001 : Codeunit 50210;
    BEGIN
      FindVATPostingSetup(VATPostingSetup);

      // Modify Item No. Series in Inventory setup.
      InventorySetup.GET;
      InventorySetup.VALIDATE("Item Nos.",LibraryUtility.GetNoSeriesCode);
      InventorySetup.MODIFY(TRUE);
      LibrarySCM.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.VALIDATE("Last Direct Cost",RANDOM(100));  // Using RANDOM value for Unit Price.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@10(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39);
    VAR
      Counter@1002 : Integer;
    BEGIN
      LibrarySCM.CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);

      // Create Random Purchase Lines. Make sure that No. of Purchase Lines always more than 1.
      // Using RANDOM for Quantity, value is not important for Quantity.
      FOR Counter := 1 TO 1 + RANDOM(8) DO
        LibrarySCM.CreatePurchaseLine(
          PurchaseHeader,PurchaseLine,PurchaseLine.Type::Item,CreateItem,RANDOM(10));
    END;

    LOCAL PROCEDURE CreateVendor@1() : Code[20];
    VAR
      Vendor@1001 : Record 23;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      FindVATPostingSetup(VATPostingSetup);
      LibrarySCM.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE FindVATPostingSetup@13(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>''''');
      VATPostingSetup.SETFILTER("VAT Prod. Posting Group",'<>''''');
      VATPostingSetup.SETRANGE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      VATPostingSetup.SETFILTER("VAT %",'>0');
      VATPostingSetup.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE SetupInvoiceDiscount@31(VAR VendorInvoiceDisc@1001 : Record 24);
    BEGIN
      // Required Random Value for "Minimum Amount" and "Discount %" fields value is not important.
      LibraryFinance.CreateInvDiscForVendor(VendorInvoiceDisc,CreateVendor,'',RANDOM(100));
      VendorInvoiceDisc.VALIDATE("Discount %",RANDOM(10));
      VendorInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetupLineDiscount@22(VAR PurchaseLineDiscount@1000 : Record 7014);
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Required Random Value for "Minimum Quantity" and "Line Discount %" fields value is not important.
      Item.GET(CreateItem);
      LibraryFinance.CreateLineDiscForVendor(PurchaseLineDiscount,Item."No.",CreateVendor,WORKDATE,'','',
        Item."Base Unit of Measure",RANDOM(10));
      PurchaseLineDiscount.VALIDATE("Line Discount %",RANDOM(10));
      PurchaseLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyGLEntry@2(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
      GeneralLedgerSetup@1004 : Record 98;
      TotalGLAmount@1003 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETFILTER(Amount,'>0');
      GLEntry.FINDSET;
      REPEAT
        TotalGLAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(Amount,TotalGLAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyInvoiceDiscountAmount@24(PurchaseLine@1005 : Record 39;DocumentNo@1004 : Code[20];InvoiceDiscountAmount@1003 : Decimal);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      GeneralPostingSetup@1001 : Record 252;
      GLEntry@1000 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Purch. Inv. Disc. Account");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(InvoiceDiscountAmount,ABS(GLEntry.Amount),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(InvoiceDiscountAmount,PurchaseLine."Inv. Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,PurchaseLine.FIELDCAPTION("Inv. Discount Amount"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyLineDiscountAmount@23(PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20];LineDiscountAmount@1002 : Decimal);
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      GeneralPostingSetup@1004 : Record 252;
      GLEntry@1003 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Purch. Line Disc. Account");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(LineDiscountAmount,ABS(GLEntry.Amount),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(LineDiscountAmount,PurchaseLine."Line Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,PurchaseLine.FIELDCAPTION("Line Discount Amount"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@11(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      VendorLedgerEntry@1002 : Record 25;
      GeneralLedgerSetup@1003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
      Assert.AreNearlyEqual(Amount,ABS(VendorLedgerEntry."Amount (LCY)"),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,VendorLedgerEntry.FIELDCAPTION("Amount (LCY)"),VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyValueEntry@15(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      ValueEntry@1002 : Record 5802;
      PurchaseAmount@1004 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDSET;
      REPEAT
        PurchaseAmount += ValueEntry."Purchase Amount (Actual)";
      UNTIL ValueEntry.NEXT = 0;
      Assert.AreNearlyEqual(Amount,PurchaseAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,ValueEntry.FIELDCAPTION("Purchase Amount (Actual)"),ValueEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVATEntry@7(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      VATEntry@1002 : Record 254;
    BEGIN
      GeneralLedgerSetup.GET;
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      VATEntry.FINDFIRST;
      Assert.AreNearlyEqual(Amount,ABS(VATEntry.Base + VATEntry.Amount),GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,VATEntry.FIELDCAPTION(Amount),VATEntry.TABLECAPTION));
    END;

    [FormHandler]
    PROCEDURE WarehouseFormHandler@19(VAR WarehouseReceipt@1000 : Form 5768);
    BEGIN
      // Form Handler.
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@18(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      Check the functionalities of Purchase Order.
       1. Test if the system allows to create a New Purchase Order for Vendor.
       2. Test if the system calculates applicable VAT on Purchase Order and verify VAT Amount with VAT Amount Line.
       3. Test if the system generates Purchase Order Report and verify new external file created.
       4. Test if Purchase Order allowing to Post as Receive option only and generate Posted Purchase Receipt Entry.
       5. Test if Purchase Order allowing to Post as Receive and Invoice and verify Posted G/L Entry, VAT Entry, Value Entry
          and Vendor Ledger Entry.
       6. Test if the system generates Posted Purchase Invoice Report and verify new external file created.
       7. Test if the system allows creating a Purchase Order with a Location having Warehouse Receipt checked, system
          allow to post the Order created and verify Posted Receipt Entry.
       8. Test if the system calculates Line Discount on Purchase Order and after Post, creates G/L entry for Discount.
       9. Test if the system calculates Invoice Discount on Purchase Order and after Post, creates G/L entry for Invoice Discount.
      10. Test if the system allows creating Purchase Order with Foreign Currency and allow to Post the Purchase Order
          with Foreign Currency.
    }
    END.
  }
}

