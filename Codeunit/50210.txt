OBJECT Codeunit 50210 Library - SCM
{
  OBJECT-PROPERTIES
  {
    Date=10.04.15;
    Time=12:00:00;
    Modified=Yes;
    Version List=HME1980;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TestParam@1000000000 : Record 50138;
      LibraryUtility@1001 : Codeunit 50206;

    PROCEDURE AdjustCostItemEntries@41(ItemNoFilter@1002 : Text[250];ItemCategoryFilter@1003 : Text[250]);
    VAR
      AdjustCostItemEntries@1000 : Report 795;
    BEGIN
      COMMIT;
      AdjustCostItemEntries.InitializeRequest(ItemNoFilter,ItemCategoryFilter);
      AdjustCostItemEntries.USEREQUESTFORM(FALSE);
      AdjustCostItemEntries.RUNMODAL;
    END;

    PROCEDURE CreateVendor@1102601001(VAR Vendor@1000 : Record 23);
    VAR
      GeneralPostingSetup@1001 : Record 252;
      VATPostingSetup@1002 : Record 325;
      VendorPostingGroup@1003 : Record 93;
    BEGIN
      GeneralPostingSetup.SETFILTER("Gen. Bus. Posting Group",'<>''''');
      GeneralPostingSetup.FINDFIRST;
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>''''');
      VATPostingSetup.FINDFIRST;
      VendorPostingGroup.FINDFIRST;
      Vendor.INIT;
      Vendor.INSERT(TRUE);
      Vendor.VALIDATE(Name,Vendor."No."); // Validating Name as No. because value is not important.
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.VALIDATE("Vendor Posting Group",VendorPostingGroup.Code);
      Vendor.MODIFY(TRUE);
    END;

    PROCEDURE CreateCustomer@3(VAR Customer@1000 : Record 18);
    VAR
      GeneralPostingSetup@1001 : Record 252;
      VATPostingSetup@1002 : Record 325;
      CustomerPostingGroup@1003 : Record 92;
    BEGIN
      GeneralPostingSetup.SETFILTER("Gen. Bus. Posting Group",'<>''''');
      GeneralPostingSetup.FINDFIRST;
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>''''');
      VATPostingSetup.FINDFIRST;
      CustomerPostingGroup.FINDFIRST;
      Customer.INIT;
      Customer.INSERT(TRUE);
      Customer.VALIDATE(Name,Customer."No.");  // Validating Name as No. because value is not important.
      Customer.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Customer.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Customer.VALIDATE("Customer Posting Group",CustomerPostingGroup.Code);
      Customer.MODIFY(TRUE);
    END;

    PROCEDURE CreateCustomerTemplate@1(VAR CustomerTemplate@1000 : Record 5105);
    BEGIN
      CustomerTemplate.INIT;
      CustomerTemplate.VALIDATE(Code,LibraryUtility.GenerateRandomCode(CustomerTemplate.FIELDNO(Code),DATABASE::"Customer Template"));
      CustomerTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateItem@18(VAR Item@1000 : Record 27);
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
      GenProductPostingGroup@1002 : Record 251;
      InventoryPostingGroup@1003 : Record 94;
      VATPostingSetup@1004 : Record 325;
    BEGIN
      Item.INIT;
      //H1980 18.03.15 EHN +++++++++++++++++++++++++++++++++++++++++++++++
      Item.VALIDATE(
        "No.",
        LibraryUtility.GenerateRandomCode(
          Item.FIELDNO("No."),
          DATABASE::Item));
      //H1980 18.03.15 EHN  -----------------------------------------------
      Item.INSERT(TRUE);

      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",'');
      GenProductPostingGroup.FINDFIRST;
      InventoryPostingGroup.FINDFIRST;
      //H1980 18.03.15 EHN +++++++++++++++++++++++++++++++++++++++++++++++
      VATPostingSetup.RESET;
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>%1','');
      VATPostingSetup.SETFILTER("VAT Prod. Posting Group",'<>%1','');
      VATPostingSetup.FINDFIRST;
      //H1980 18.03.15 EHN  -----------------------------------------------

      Item.VALIDATE("Base Unit of Measure",ItemUnitOfMeasure.Code);
      Item.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.VALIDATE("Inventory Posting Group",InventoryPostingGroup.Code);
      Item.MODIFY(TRUE);
    END;

    PROCEDURE ChooseItem@1000000001() : Code[20];
    VAR
      Item@1000000000 : Record 27;
    BEGIN
      RANDOMIZE;
      Item.SETFILTER("No.", '%1', 'M*');
      Item.SETRANGE(Blocked, FALSE);
      Item.SETFILTER("Unit Price", '>%1', 0);
      Item.NEXT(RANDOM(Item.COUNT));
      EXIT(Item."No.");
    END;

    PROCEDURE CreateInvtPostingSetup@1102601003(LocationCode@1102601000 : Code[20];ItemNo@1102601001 : Code[20]);
    VAR
      InventoryPostingSetup@1102601002 : Record 5813;
      Item@1102601003 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      IF NOT InventoryPostingSetup.GET(LocationCode,Item."Inventory Posting Group") THEN BEGIN
        InventoryPostingSetup.FINDFIRST;
        InventoryPostingSetup.VALIDATE("Location Code",LocationCode);
        InventoryPostingSetup.VALIDATE("Invt. Posting Group Code",Item."Inventory Posting Group");
        InventoryPostingSetup.INSERT(TRUE)
      END
    END;

    [Normal]
    PROCEDURE CreateItemJournalBatch@52(VAR ItemJournalBatch@1000 : Record 233;ItemJournalTemplateName@1001 : Code[10]);
    BEGIN
      // Create Item Journal Batch with a random Name of String length less than 10.
      ItemJournalBatch.INIT;
      ItemJournalBatch.VALIDATE("Journal Template Name",ItemJournalTemplateName);
      ItemJournalBatch.VALIDATE(
        Name,COPYSTR(LibraryUtility.GenerateRandomCode(ItemJournalBatch.FIELDNO(Name),DATABASE::"Item Journal Batch"),1,
          MAXSTRLEN(ItemJournalBatch.Name) - 1));
      ItemJournalBatch.INSERT(TRUE);
    END;

    PROCEDURE CreateItemJournalLine@34(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10];EntryType@1007 : Option;ItemNo@1005 : Text[20];NewQuantity@1004 : Decimal);
    VAR
      NoSeries@1108 : Record 308;
      ItemJournalBatch@1008 : Record 233;
      NoSeriesManagement@1109 : Codeunit 396;
      RecRef@1003 : RecordRef;
      DocumentNo@1110 : Code[20];
    BEGIN
      IF NOT ItemJournalBatch.GET(JournalTemplateName,JournalBatchName) THEN BEGIN
        ItemJournalBatch.INIT;
        ItemJournalBatch.VALIDATE("Journal Template Name",JournalTemplateName);
        ItemJournalBatch.SetupNewBatch;
        ItemJournalBatch.VALIDATE(Name,JournalBatchName);
        ItemJournalBatch.VALIDATE(Description,JournalBatchName + ' journal');
        ItemJournalBatch.INSERT(TRUE);
      END;

      CLEAR(ItemJournalLine);
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      RecRef.GETTABLE(ItemJournalLine);
      ItemJournalLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ItemJournalLine.FIELDNO("Line No.")));
      ItemJournalLine.INSERT(TRUE);
      ItemJournalLine.VALIDATE("Posting Date",WORKDATE);
      ItemJournalLine.VALIDATE("Entry Type",EntryType);
      IF NoSeries.GET(ItemJournalBatch."No. Series") THEN
        DocumentNo := NoSeriesManagement.GetNextNo(ItemJournalBatch."No. Series",ItemJournalLine."Posting Date",FALSE)
      ELSE
        DocumentNo := 'Default Document No.';
      ItemJournalLine.VALIDATE("Document No.",DocumentNo);
      ItemJournalLine.VALIDATE("Item No.",ItemNo);
      ItemJournalLine.VALIDATE(Quantity,NewQuantity);
      ItemJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemManufacturing@10(VAR Item@1008 : Record 27;CostingMethod@1001 : Option;UnitCost@1000 : Decimal;ReorderPolicy@1002 : Option;FlushingMethod@1003 : Option;RoutingNo@1004 : Code[20];ProductionBOMNo@1005 : Code[20]);
    VAR
      InventoryPostingGroup@1007 : Record 94;
    BEGIN
      // Create Item extended for Manufacturing.
      CreateItem(Item);
      Item.VALIDATE("Costing Method",CostingMethod);
      IF Item."Costing Method" = Item."Costing Method"::Standard THEN
        Item.VALIDATE("Standard Cost",UnitCost)
      ELSE BEGIN
        Item.VALIDATE("Unit Cost",UnitCost);
        Item.VALIDATE("Last Direct Cost",Item."Unit Cost");
      END;

      Item.VALIDATE("Reordering Policy",ReorderPolicy);
      Item.VALIDATE("Flushing Method",FlushingMethod);

      IF ProductionBOMNo <> '' THEN BEGIN
        InventoryPostingGroup.FINDLAST;
        Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
        Item.VALIDATE("Routing No.",RoutingNo);
        Item.VALIDATE("Production BOM No.",ProductionBOMNo);
        Item.VALIDATE("Inventory Posting Group",InventoryPostingGroup.Code);
      END;
      Item.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemUnitOfMeasure@20(VAR ItemUnitOfMeasure@1001 : Record 5404;ItemNo@1000 : Code[20];UnitOfMeasureCode@1002 : Code[10]);
    VAR
      UnitOfMeasure@1003 : Record 204;
    BEGIN
      ItemUnitOfMeasure.INIT;
      ItemUnitOfMeasure.VALIDATE("Item No.",ItemNo);

      // The IF condition is important because it grants flexibility to the function.
      IF UnitOfMeasureCode = '' THEN BEGIN
        UnitOfMeasure.FINDFIRST;
        ItemUnitOfMeasure.VALIDATE(Code,UnitOfMeasure.Code);
      END ELSE
        ItemUnitOfMeasure.VALIDATE(Code,UnitOfMeasureCode);
      ItemUnitOfMeasure.INSERT(TRUE);
    END;

    PROCEDURE CreateLocation@17(VAR Location@1000 : Record 14);
    BEGIN
      Location.INIT;
      Location.VALIDATE(Code,LibraryUtility.GenerateRandomCode(Location.FIELDNO(Code),DATABASE::Location));
      Location.VALIDATE(Name,Location.Code);
      Location.INSERT(TRUE);
    END;

    PROCEDURE CreatePurchaseHeader@21(VAR PurchaseHeader@1000 : Record 38;DocumentType@1002 : Option;VendorNo@1001 : Text[20]);
    BEGIN
      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type",DocumentType);
      PurchaseHeader.INSERT(TRUE);
      PurchaseHeader.VALIDATE("Posting Date",WORKDATE);
      PurchaseHeader.VALIDATE("Order Date",WORKDATE);
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",VendorNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreatePurchaseLine@14(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39;Type@1002 : Option;No@1003 : Code[20];Qty@1004 : Decimal);
    VAR
      GeneralPostingSetup@1102601000 : Record 252;
      RecRef@1005 : RecordRef;
    BEGIN
      PurchaseLine.INIT;
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      RecRef.GETTABLE(PurchaseLine);
      PurchaseLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,PurchaseLine.FIELDNO("Line No.")));
      PurchaseLine.INSERT(TRUE);
      PurchaseLine.VALIDATE(Type,Type);
      PurchaseLine.VALIDATE("No.",No);
      PurchaseLine.VALIDATE(Quantity,Qty);
      PurchaseLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateRevaluationJnlLines@33(VAR Item@1000 : Record 27;ItemJournalLine@1010 : Record 83;DocNo@1008 : Code[20];CalculatePer@1007 : Option;ReCalcStdCost@1002 : Option;ByLocation@1006 : Boolean;ByVariant@1005 : Boolean;UpdStdCost@1004 : Boolean;PostingDate@1003 : Date);
    VAR
      CalcInvtValue@1001 : Report 5899;
    BEGIN
      ItemJournalLine.DELETEALL;
      CalcInvtValue.SetItemJnlLine(ItemJournalLine);
      CalcInvtValue.SETTABLEVIEW(Item);
      CalcInvtValue.InitializeRequest(PostingDate,DocNo,CalculatePer,ByLocation,ByVariant,UpdStdCost,ReCalcStdCost,TRUE);
      CalcInvtValue.USEREQUESTFORM(FALSE);
      CalcInvtValue.RUNMODAL;
    END;

    PROCEDURE CreateSalesOrder@1000000003(VAR SalesHeaderR@1000000005 : Record 36);
    VAR
      CustomerL@1000000000 : Record 18;
      ItemL@1000000002 : Record 27;
      SalesLineL@1000000004 : Record 37;
      LibrarySCML@1000000001 : Codeunit 50210;
    BEGIN
      //H1754  03.11.14  ABR  +++++++++++++++++++++++++++++++++++++++
      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(
        SalesHeaderR,
        SalesHeaderR."Document Type"::Order,
        CustomerL."No.");
      LibrarySCML.CreateItem(ItemL);
      LibrarySCML.CreateSalesLine(
        SalesHeaderR,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      //H1754  03.11.14  ABR  ---------------------------------------
    END;

    PROCEDURE CreateReturnOrderRetTypeReturn@1000000008(VAR SalesOrderHeaderR@1000000000 : Record 36;VAR SalesReturnHeaderR@1000000003 : Record 36);
    VAR
      SalesLineL@1000000004 : Record 37;
      ReturnReasonL@1000000005 : Record 6635;
      FPCManagementL@1000000001 : Codeunit 50003;
      LibrarySalesL@1000000002 : Codeunit 50701;
    BEGIN
      //H1754  03.11.14  ABR  +++++++++++++++++++++++++++++++++++++++
      PostSalesHeader2(SalesOrderHeaderR,TRUE,FALSE);

      ReturnReasonL.SETRANGE("Return Type",ReturnReasonL."Return Type"::Return);
      ReturnReasonL.FINDFIRST;

      SalesLineL.SETRANGE("Document Type",SalesOrderHeaderR."Document Type");
      SalesLineL.SETRANGE("Document No.",SalesOrderHeaderR."No.");
      SalesLineL.SETRANGE(Type,SalesLineL.Type::Item);
      SalesLineL.FINDSET;
      REPEAT
        SalesLineL.VALIDATE("Return Type",SalesLineL."Return Type"::Return);
        SalesLineL.VALIDATE("Return Reason Code",ReturnReasonL.Code);
        SalesLineL.VALIDATE("Customer Prevention",SalesLineL."Customer Prevention"::"Not offered");
        SalesLineL.MODIFY(TRUE);
      UNTIL SalesLineL.NEXT = 0;

      FPCManagementL.SetHideValidationDialog;
      FPCManagementL.CreateReturnOrder(SalesOrderHeaderR."No.",0);
      SalesReturnHeaderR.GET(
        SalesReturnHeaderR."Document Type"::"Return Order",
        LibrarySalesL.FindReturnSalesHeader(SalesOrderHeaderR."No."));
      //H1754  03.11.14  ABR  ---------------------------------------
    END;

    PROCEDURE CreateSalesHeader@47(VAR SalesHeader@1000 : Record 36;DocumentType@1002 : Option;CustomerNo@1001 : Text[20]);
    BEGIN
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type", DocumentType);
      SalesHeader.INSERT(TRUE);

      SalesHeader.VALIDATE("Posting Date", WORKDATE);
      SalesHeader.VALIDATE("Order Date", WORKDATE);
      SalesHeader.VALIDATE("Sell-to Customer No.", CustomerNo);
      SalesHeader.VALIDATE("External Document No.", SalesHeader."No.");
      //H1754  03.11.14  ABR  +++++++++++++++++++++++++++++++++++++++
      IF (TestParam.GET) AND (TestParam."Payment Method" <> '') THEN
        SalesHeader.VALIDATE("Payment Method Code", TestParam."Payment Method");
      SalesHeader.VALIDATE("Website No.",1);
      //H1754  03.11.14  ABR  ---------------------------------------
      ClearEAN(SalesHeader);
      SalesHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateSalesLine@46(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;Type@1002 : Option;No@1004 : Code[20];Qty@1003 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
      Purchasing@1000000000 : Record 5721;
    BEGIN
      SalesLine.INIT;
      SalesLine.VALIDATE("Document Type", SalesHeader."Document Type");
      SalesLine.VALIDATE("Document No.", SalesHeader."No.");
      RecRef.GETTABLE(SalesLine);
      SalesLine.VALIDATE("Line No.", LibraryUtility.GetNewLineNo(RecRef, SalesLine.FIELDNO("Line No.")));
      SalesLine.INSERT(TRUE);

      SalesLine.VALIDATE(Type, Type);
      SalesLine.VALIDATE("No.", No);
      SalesLine.VALIDATE(Quantity, Qty);
      ClearTaxAreaCode(SalesLine);

      // +++++ Picks up a channel [that required a PO] +++++++
      CASE SalesLine."VAT Bus. Posting Group" OF
        'NATIONAL' : Purchasing.SETRANGE(Code, 'GER-1', 'GER-99');
        'FR' : Purchasing.SETRANGE(Code, 'FR-1', 'FR-99');
        'NL','NL2' : Purchasing.SETRANGE(Code, 'NL-1', 'NL-99');
        'AT' : Purchasing.SETRANGE(Code, 'AT-1', 'AT-99');
        'CH' : Purchasing.SETRANGE(Code, 'CH-1', 'CH-99');
      ELSE
         Purchasing.SETRANGE(Code, 'GER-1', 'GER-99')
      END;
      // Purchasing.SETFILTER("Ch. activation", '%1', Purchasing."Ch. activation"::"always pick");
      // Purchasing.SETRANGE("Drop Shipment", TRUE);
      Purchasing.NEXT(RANDOM(Purchasing.COUNT));
      SalesLine.VALIDATE("Purchasing Code", Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateTransferHeader@29(VAR TransferHeader@1000 : Record 5740;FromLocation@1001 : Text[10];ToLocation@1002 : Text[10];InTransitCode@1003 : Text[10]);
    BEGIN
      CLEAR(TransferHeader);
      TransferHeader.INIT;
      TransferHeader.INSERT(TRUE);
      TransferHeader.VALIDATE("Transfer-from Code",FromLocation);
      TransferHeader.VALIDATE("Transfer-to Code",ToLocation);
      TransferHeader.VALIDATE("In-Transit Code",InTransitCode);
      TransferHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateTransferLine@59(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;ItemNo@1002 : Text[20];Quantity@1004 : Decimal);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      CLEAR(TransferLine);
      TransferLine.INIT;
      TransferLine.VALIDATE("Document No.",TransferHeader."No.");
      RecRef.GETTABLE(TransferLine);
      TransferLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,TransferLine.FIELDNO("Line No.")));
      TransferLine.INSERT(TRUE);
      TransferLine.VALIDATE("Item No.",ItemNo);
      TransferLine.VALIDATE(Quantity,Quantity);
      TransferLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateWarehouseEmployee@58(VAR WarehouseEmployee@1000 : Record 7301;LocationCode@1001 : Code[10];IsDefault@1002 : Boolean);
    BEGIN
      CLEAR(WarehouseEmployee);
      IF USERID = '' THEN EXIT; // for native database
      IF WarehouseEmployee.GET(USERID,LocationCode) THEN EXIT;

      WarehouseEmployee.RESET;
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.SETRANGE(Default,TRUE);
      IF WarehouseEmployee.FINDSET AND IsDefault THEN EXIT;

      WarehouseEmployee.INIT;
      WarehouseEmployee.VALIDATE("User ID",USERID);
      WarehouseEmployee.VALIDATE("Location Code",LocationCode);
      WarehouseEmployee.VALIDATE(Default,IsDefault);
      WarehouseEmployee.INSERT(TRUE);
    END;

    PROCEDURE FindLocation@1102601005() : Code[10];
    VAR
      Location@1002 : Record 14;
    BEGIN
      Location.SETRANGE("Require Receive",TRUE);
      Location.FINDFIRST;
      EXIT(Location.Code)
    END;

    PROCEDURE PostItemJournalLine@45(JournalTemplateName@1001 : Text[10];JournalBatchName@1002 : Text[10]);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
    END;

    PROCEDURE PostInvtCostToGL@37(PerPostingGroup@1002 : Boolean;DocNo@1001 : Code[20];PreviewDumpFilePath@1003 : Text[1024]);
    VAR
      PostInventoryCosttoGL@1000 : Report 1002;
      PostMethod@1004 : 'per Posting Group,per Entry';
    BEGIN
      COMMIT;
      IF PerPostingGroup THEN
        PostMethod := PostMethod::"per Posting Group"
      ELSE
        PostMethod := PostMethod::"per Entry";
      PostInventoryCosttoGL.InitializeRequest(PostMethod,DocNo,TRUE);
      PostInventoryCosttoGL.USEREQUESTFORM(FALSE);
      IF NOT ISSERVICETIER THEN
        PostInventoryCosttoGL.SAVEASHTML(PreviewDumpFilePath)
      ELSE
        PostInventoryCosttoGL.SAVEASPDF(PreviewDumpFilePath);
    END;

    PROCEDURE PostPurchaseHeader@23(VAR PurchaseHeader@1002 : Record 38;ReceiveOrShip@1001 : Boolean;Invoice@1000 : Boolean);
    VAR
      PurchPost@1003 : Codeunit 90;
    BEGIN
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Order:
          BEGIN
            PurchaseHeader.VALIDATE(Receive,ReceiveOrShip);
            PurchaseHeader.VALIDATE(Invoice,Invoice);
          END;
        PurchaseHeader."Document Type"::"Return Order":
          BEGIN
            PurchaseHeader.VALIDATE(Ship,ReceiveOrShip);
            PurchaseHeader.VALIDATE(Invoice,Invoice);
          END;
      END;
      PurchPost.RUN(PurchaseHeader);
    END;

    PROCEDURE PostSalesHeader@44(VAR SalesHeader@1003 : Record 36;ShipOrReceive@1002 : Boolean;Invoice@1000 : Boolean);
    VAR
      SalesPost@1001 : Codeunit 80;
    BEGIN
      CASE SalesHeader."Document Type" OF

        SalesHeader."Document Type"::Order:
          BEGIN
            SalesHeader.VALIDATE(Ship, ShipOrReceive);
            SalesHeader.VALIDATE(Invoice, Invoice);
          END;

        SalesHeader."Document Type"::"Return Order":
          BEGIN
            SalesHeader.VALIDATE(Receive, ShipOrReceive);
            SalesHeader.VALIDATE(Invoice, Invoice);
          END;

      END;

      SalesPost.RUN(SalesHeader);
    END;

    PROCEDURE PostSalesHeader2@1000000000(VAR SalesHeader@1000000002 : Record 36;ShipOrReceive@1000000001 : Boolean;Invoice@1000000000 : Boolean);
    VAR
      SalesPost@1000000004 : Codeunit 80;
      SalesLine@1000000003 : Record 37;
      Text001@1000000005 : TextConst 'ENU=Order %1 is a Drop Shipment!';
    BEGIN
      // Ships the Sales Order
      CASE SalesHeader."Document Type" OF

        SalesHeader."Document Type"::Order:
          BEGIN
            SalesHeader.VALIDATE(Ship, ShipOrReceive);
            SalesHeader.VALIDATE(Invoice, Invoice);
            // Needed if we ship *before* a PO exists +++++++++++++++++++
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE("Document No.", SalesHeader."No.");
            SalesLine.SETFILTER(Type, '%1|%2', SalesLine.Type::Item, SalesLine.Type::Resource);
            SalesLine.SETFILTER("Purchase Order No.", '%1', '');
            SalesLine.SETRANGE("Purch. Order Line No.", 0);
            SalesLine.SETRANGE("Drop Shipment", FALSE);
            IF SalesLine.FIND('-') THEN BEGIN
              REPEAT
                SalesLine.VALIDATE("Qty. to Ship", SalesLine."Outstanding Quantity");
                SalesLine.VALIDATE("Actual Delivery Date", CREATEDATETIME(SalesHeader."Order Date", TIME));
                SalesLine.MODIFY;
              UNTIL SalesLine.NEXT = 0;
            // Needed if we ship *before* a PO exists ---------------------
            END ELSE
              ERROR(Text001, SalesHeader."No.");
          END;

        SalesHeader."Document Type"::"Return Order":
          BEGIN
            SalesHeader.VALIDATE(Receive, ShipOrReceive);
            SalesHeader.VALIDATE(Invoice, Invoice);
          END;

      END;

      SalesPost.RUN(SalesHeader);
    END;

    PROCEDURE PostSalesHeader3@1000000002(VAR SalesHeader@1000000002 : Record 36;ShipOrReceive@1000000001 : Boolean;Invoice@1000000000 : Boolean);
    VAR
      SalesPost@1000000004 : Codeunit 80;
      SalesLine@1000000003 : Record 37;
    BEGIN
      // Invoices the Sales Order
      CASE SalesHeader."Document Type" OF

        SalesHeader."Document Type"::Order:
          BEGIN
            SalesHeader.VALIDATE(Invoice, Invoice);
            SalesHeader.VALIDATE(Ship, ShipOrReceive);
            SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
            SalesLine.SETRANGE("Document No.", SalesHeader."No.");
            IF SalesLine.FINDFIRST THEN
              REPEAT
                SalesLine.VALIDATE("Qty. to Invoice", SalesLine."Quantity Shipped");
                SalesLine.VALIDATE("Actual Delivery Date", CREATEDATETIME(SalesHeader."Order Date", TIME));
                SalesLine.MODIFY;
              UNTIL SalesLine.NEXT = 0;
          END;

        SalesHeader."Document Type"::"Return Order":
          BEGIN
            SalesHeader.VALIDATE(Receive, ShipOrReceive);
            SalesHeader.VALIDATE(Invoice, Invoice);
          END;

      END;

      SalesPost.RUN(SalesHeader);
    END;

    PROCEDURE PostTransferHeader@43(VAR TransferHeader@1000 : Record 5740;Ship@1001 : Boolean;Receive@1002 : Boolean);
    VAR
      TransferOrderPostShipment@1004 : Codeunit 5704;
      TransferOrderPostReceipt@1003 : Codeunit 5705;
    BEGIN
      IF Ship THEN TransferOrderPostShipment.RUN(TransferHeader);
      IF Receive THEN BEGIN
        TransferOrderPostReceipt.SetHideValidationDialog(TRUE);
        TransferOrderPostReceipt.RUN(TransferHeader);
      END;
    END;

    PROCEDURE ReleasePurchaseDocument@1102601002(VAR PurchaseHeader@1000 : Record 38);
    VAR
      ReleasePurchaseDocument@1001 : Codeunit 415;
    BEGIN
      ReleasePurchaseDocument.PerformManualRelease(PurchaseHeader);
    END;

    PROCEDURE ReceiveWarehouseDocument@1102601004(DocumentNo@1000 : Code[20];LineNo@1001 : Integer);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
      WhsePostReceipt@1003 : Codeunit 5760;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source No.",DocumentNo);
      WarehouseReceiptLine.SETRANGE("Source Line No.",LineNo);
      WarehouseReceiptLine.FINDFIRST;
      WhsePostReceipt.RUN(WarehouseReceiptLine);
    END;

    [Normal]
    PROCEDURE SelectItemJournalBatchName@53(VAR ItemJournalBatch@1000 : Record 233;ItemJournalBatchTemplateType@1001 : Option;ItemJournalTemplateName@1002 : Code[10]);
    BEGIN
      // Find Name for Batch Name.
      ItemJournalBatch.SETRANGE("Template Type",ItemJournalBatchTemplateType);
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplateName);
      ItemJournalBatch.SETFILTER("No. Series",'<>%1','');

      // If Item Journal Batch not found then create it.
      IF NOT ItemJournalBatch.FINDFIRST THEN
        CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplateName);
    END;

    PROCEDURE SelectItemJournalTemplate@26(Type@1102601000 : Option) : Code[10];
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      // Select Item Journal Template Name for General Journal Line
      ItemJournalTemplate.SETRANGE(Type,Type);
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      IF NOT ItemJournalTemplate.FINDFIRST THEN BEGIN
        ItemJournalTemplate.INIT;
        ItemJournalTemplate.VALIDATE(
          Name,COPYSTR(LibraryUtility.GenerateRandomCode(ItemJournalTemplate.FIELDNO(Name),DATABASE::"Item Journal Template"),1,
            MAXSTRLEN(ItemJournalTemplate.Name) - 1));
        ItemJournalTemplate.INSERT(TRUE);
      END;
      EXIT(ItemJournalTemplate.Name);
    END;

    [Normal]
    PROCEDURE SelectVendor@22() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      // Select a Vendor and modify if Currency Code and Location Code not are blank.
      Vendor.SETRANGE("Currency Code",'');
      Vendor.SETRANGE("Location Code",'');
      IF NOT Vendor.FINDFIRST THEN BEGIN
        Vendor.RESET;
        Vendor.FINDFIRST;
        Vendor.VALIDATE("Currency Code",'');
        Vendor.VALIDATE("Location Code",'');
        Vendor.MODIFY(TRUE);
      END;
      EXIT(Vendor."No.");
    END;

    [Normal]
    PROCEDURE SelectCustomer@68() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Select a customer and modify if Currency Code and Location Code are not blank.
      Customer.SETRANGE("Currency Code",'');
      Customer.SETRANGE("Location Code",'');
      IF NOT Customer.FINDFIRST THEN BEGIN
        Customer.RESET;
        Customer.FINDFIRST;
        Customer.VALIDATE("Currency Code",'');
        Customer.VALIDATE("Location Code",'');
        Customer.MODIFY(TRUE);
      END;
      EXIT(Customer."No.");
    END;

    PROCEDURE UpdateInventorySetup@49(VAR InventorySetup@1001 : Record 313;AutomaticCostPosting@1000 : Boolean;ExpectedCostPostingtoGL@1002 : Boolean;AutomaticCostAdjustment@1003 : Option;AverageCostCalcType@1004 : Option;AverageCostPeriod@1005 : Option);
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",AutomaticCostPosting);
      InventorySetup.VALIDATE("Expected Cost Posting to G/L",ExpectedCostPostingtoGL);
      InventorySetup.VALIDATE("Automatic Cost Adjustment",AutomaticCostAdjustment);
      InventorySetup.VALIDATE("Average Cost Calc. Type",AverageCostCalcType);
      InventorySetup.VALIDATE("Average Cost Period",AverageCostPeriod);
      InventorySetup.VALIDATE("Item Nos.",LibraryUtility.GetNoSeriesCode);
      InventorySetup.MODIFY(TRUE);
    END;

    PROCEDURE UpdateSalesSetup@42(VAR SalesReceivablesSetup@1001 : Record 311;CreditWarning@1000 : Option);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",CreditWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    PROCEDURE UpdatePurchaseSetup@50(VAR PurchasesPayablesSetup@1001 : Record 312;ExtDocNoMandatory@1000 : Boolean);
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Ext. Doc. No. Mandatory",ExtDocNoMandatory);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetCreditWarningsToNoWarnings@2();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",SalesReceivablesSetup."Credit Warnings"::"No Warning");
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetStockoutWarning@4(StockoutWarning@1001 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning", StockoutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ClearEAN@1102601000(VAR SalesHeader@1102601000 : Record 36);
    VAR
      RecordRef@1102601001 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(SalesHeader);
      LibraryUtility.ValidateField(RecordRef,'EAN No.','');
      RecordRef.SETTABLE(SalesHeader)
    END;

    LOCAL PROCEDURE ClearTaxAreaCode@1102601006(VAR SalesLine@1102601000 : Record 37);
    VAR
      RecordRef@1102601001 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(SalesLine);
      LibraryUtility.ValidateField(RecordRef,'Tax Area Code','');
      RecordRef.SETTABLE(SalesLine)
    END;

    BEGIN
    {
      Contains all utility functions related to Supply Chain Management.

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      H1754       03.11.14  ABR        Added help Functions
      H1980       18.03.15  EHH        Set ADD for LF lines without tracking information
    }
    END.
  }
}

