OBJECT Codeunit 5001911 SEPA Management
{
  OBJECT-PROPERTIES
  {
    Date=09.10.09;
    Time=12:00:00;
    Version List=AR5.00.01,SEPA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInfo@1105400006 : Record 79;
      GLSetup@1105400007 : Record 98;
      PaymentSetup@1105400008 : Record 5001901;
      Customer@1105400009 : Record 18;
      Vendor@1105400010 : Record 23;
      CustBankAcc@1105400023 : Record 287;
      VendBankAcc@1105400024 : Record 288;
      CustLedgEntry@1105400025 : Record 21;
      VendLedgEntry@1105400026 : Record 25;
      BankAccount@1105400027 : Record 270;
      CompName@1105400028 : Code[70];
      Text1105400029@1105400029 : TextConst 'DEU=Das XML Dokument wurde nicht erstellt.;ENU=The XML Document has not been not created.';
      Text1105400000@1105400000 : TextConst 'DEU=Kann Datei nicht erstellen;ENU=Unable to create file';
      Text1105400001@1105400001 : TextConst 'DEU=Kann Datei nicht îffnen;ENU=Unable to open file';
      Text1105400002@1105400002 : TextConst 'DEU=SWIFT Code bei der Bank %1 darf nicht leer sein;ENU=SWIFT Code of Bank %1 must not be empty';
      Text1105400003@1105400003 : TextConst 'DEU=SWIFT Code bei der Bank %1 muss 8 oder 11 Zeichen beinhalten;ENU=SWIFT Code of Bank %1 must have 8 or 11 characters';
      Text1105400004@1105400004 : TextConst 'DEU=IBAN bei der Bank %1 darf nicht leer sein;ENU=IBAN of Bank %1 must not be empty';
      Text1105400005@1105400005 : TextConst 'DEU=IBAN bei der Bank %1 muss 5 bis 34 Zeichen beinhalten;ENU=IBAN of Bank %1 must contain 5 to 34 characters';
      Text1105400011@1105400011 : TextConst 'DEU=Beim Debitor %1 ist keine Bank zum \;ENU=On Customer %1 there is no bank marked\';
      Text1105400012@1105400012 : TextConst 'DEU=%2 gekennzeichnet.;ENU=for %2.';
      Text1105400013@1105400013 : TextConst 'DEU=SWIFT Code auf Debitor %1 bei der Bank %2\;ENU=SWIFT Code of customer %1 and bank %2\';
      Text1105400014@1105400014 : TextConst 'DEU=darf nicht leer sein;ENU=must not be empty';
      Text1105400015@1105400015 : TextConst 'DEU=muss 8 oder 11 Zeichen beinhalten;ENU=must have a length of 8 or 11';
      Text1105400016@1105400016 : TextConst 'DEU=IBAN auf Debitor %1 bei der Bank %2\;ENU=IBAN of customer %1 and bank %2\';
      Text1105400017@1105400017 : TextConst 'DEU=muss 5 bis 34 Zeichen beinhalten;ENU=must contain 5 to 34 characters';
      Text1105400018@1105400018 : TextConst 'DEU=Beim Kreditor %1 ist keine Bank zum\;ENU=On vendor %1 there is no bank marked\';
      Text1105400019@1105400019 : TextConst 'DEU=SWIFT Code auf Kreditor %1 bei der Bank %2\;ENU=SWIFT Code of vendor %1 and bank %2\';
      Text1105400020@1105400020 : TextConst 'DEU=muss 8 oder 11 Zeichen lang sein.;ENU=must be 8 or 11 characters long.';
      Text1105400021@1105400021 : TextConst 'DEU=IBAN auf Kreditor %1 bei der Bank %2\;ENU=IBAN of vendor %1 and bank %2\';
      Text1105400022@1105400022 : TextConst 'DEU=" Im Inlandszahlungsverkehr darf nur der Euro verwendet werden. ";ENU=" There is only EURO allowed in national data exchange. "';
      BIC@1105400030 : Code[20];
      IBAN@1105400031 : Code[50];
      Text1105400043@1105400043 : TextConst 'DEU=" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-?:().,''+";ENU=" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-?:().,''+"';
      BICError001@1105400045 : TextConst 'DEU=Die SWIFT-Nr. %1 ist ungÅltig;ENU=The SWIFT No. %1 is invalid';
      BICError002@1105400046 : TextConst 'DEU=Die SWIFT-Nr. %1  beim Debitor %2 ist ungÅltig;ENU=The SWIFT No. %1 on customer %2 is invalid';
      BICError003@1105400047 : TextConst 'DEU=Die SWIFT-Nr. %1  beim Kreditor %2 ist ungÅltig;ENU=The SWIFT No. %1 on vendor %2 is invalid';
      CurrCode@1105400032 : Code[10];
      Setuptext@1105400033 : Text[54];
      Exportfile@1105400034 : File;
      xmlNameSpace@1105400035 : Text[250];
      xmlNameSpacexsi@1105400036 : Text[250];
      xmlSchemeLoc@1105400037 : Text[250];
      ApplicationMgt@1105400038 : Codeunit 1;
      XMLDOMMgt@1105400039 : Codeunit 6224;

    PROCEDURE TestCompanyInfo@1105400145(Bacc@1105400000 : Code[20]);
    BEGIN
      CompanyInfo.GET;
      GLSetup.GET;
      GLSetup.TESTFIELD("Currency Code For EURO");
      CurrCode := CheckFormat(GLSetup."Currency Code For EURO");
      CompName := CheckFormat(FORMAT(UPPERCASE(CompanyInfo.Name),27));
      BankAccount.GET(Bacc);
      BIC := DELCHR(BankAccount."SWIFT Code",'=',' ');
      IF STRLEN(BIC) = 0 THEN
        ERROR(Text1105400002,BankAccount."No.");
      IF (STRLEN(BIC) <> 8) AND (STRLEN(BIC) <> 11) THEN
        ERROR(Text1105400003,BankAccount."No.");
      IF NOT CheckBIC(BIC) THEN
        ERROR(BICError001,BIC);
      IBAN := DELCHR(BankAccount.IBAN,'=',' ');
      IF STRLEN(IBAN) = 0 THEN
        ERROR(Text1105400004,BankAccount."No.");
      IF (STRLEN(IBAN) < 5) OR ((STRLEN(IBAN) > 34)) THEN
        ERROR(
           Text1105400005,BankAccount."No.");
      CompanyInfo.CheckIBAN(IBAN);
    END;

    LOCAL PROCEDURE ConvertSpecialChars@1105400048(Text@1105400000 : Text[1024];MaxLen@1105400001 : Integer) : Text[1024];
    VAR
      SpecialCharPos@1105400002 : Integer;
      loop@1105400003 : Integer;
      SpecialChars@1105400004 : Text[20];
      ConvertedChars@1105400005 : Text[20];
    BEGIN
      SpecialChars :='éÑôîöÅ·';
      ConvertedChars := 'AeaeOeoeUeuess';
      FOR loop := 1 TO 7 DO BEGIN
        WHILE STRPOS(Text,COPYSTR(SpecialChars,loop,1)) <> 0 DO BEGIN
          SpecialCharPos := STRPOS(Text,COPYSTR(SpecialChars,loop,1));
          IF STRLEN(Text)=MaxLen THEN
            Text := PADSTR(Text,MaxLen-1);
          Text := DELSTR(Text,SpecialCharPos,1);
          Text := INSSTR(Text,COPYSTR(ConvertedChars,loop*2-1,2),SpecialCharPos);
        END;
      END;
      EXIT(Text);
    END;

    PROCEDURE CheckFormat@1105400143(FieldContent@1105400001 : Text[1024]) FText@1105400000 : Code[1024];
    VAR
      CheckRec@1105400005 : Text[1024];
      String@1105400006 : Integer;
    BEGIN
      FieldContent := ConvertSpecialChars(FieldContent,MAXSTRLEN(FieldContent));
      CheckRec := DELCHR(FieldContent,'=',Text1105400043);
      IF CheckRec <> '' THEN BEGIN
        String := STRLEN(DELCHR(CheckRec));
        FieldContent := CONVERTSTR(FieldContent,DELCHR(CheckRec),PADSTR('',String,' '));
      END;
      EXIT(FieldContent);
    END;

    PROCEDURE CheckBIC@1105400049(Input@1105400000 : Code[11]) : Boolean;
    VAR
      BICText001@1105400001 : TextConst 'DEU=ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      BICText002@1105400002 : TextConst 'DEU=ABCDEFGHIJKLMNOPQRSTUVWXYZ23456789';
      BICText003@1105400003 : TextConst 'DEU=ABCDEFGHIJKLMNPQRSTUVWXYZ0123456789';
      BICText004@1105400004 : TextConst 'DEU=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      CheckRec@1105400005 : Code[10];
    BEGIN
      CheckRec := DELCHR(COPYSTR(Input,1,6),'=',BICText001);
      IF STRLEN(CheckRec) <> 0 THEN
        EXIT(FALSE);
      CheckRec := DELCHR(COPYSTR(Input,7,1),'=',BICText002);
      IF STRLEN(CheckRec) <> 0 THEN
        EXIT(FALSE);
      CheckRec := DELCHR(COPYSTR(Input,8,1),'=',BICText003);
      IF STRLEN(CheckRec) <> 0 THEN
        EXIT(FALSE);
      IF STRLEN(Input) > 8 THEN BEGIN
        CheckRec := DELCHR(COPYSTR(Input,9,3),'=',BICText004);
        IF STRLEN(CheckRec) <> 0 THEN
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckBeforePaym@1105400146(GenJnlLine2@1105400000 : Record 81;AbortOnErrors@1105400003 : Boolean;CheckCurrentLine@1105400007 : Boolean;VAR ErrorMessage@1105400004 : ARRAY [10] OF Text[150]) : Boolean;
    VAR
      GenJnlLine@1105400001 : Record 81;
      AccNo@1105400002 : Code[20];
      ErrorCounter@1105400005 : Integer;
      MaxErrors@1105400006 : Integer;
      TestBIC@1105400009 : Code[20];
      TestIBAN@1105400008 : Code[50];
    BEGIN
      // Function returns TRUE if there aren't any errors
      // and FALSE if there are

      CLEAR(ErrorMessage);
      MaxErrors := ARRAYLEN(ErrorMessage);

      GenJnlLine.SETCURRENTKEY(
        "Journal Template Name",
        "Journal Batch Name",
        "Account Type",
        "Currency Code",
        "Account No.",
        "Amount (LCY)");
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine2."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine2."Journal Batch Name");
      PaymentSetup.GET;
      IF PaymentSetup."Parting Currencies" THEN
        GenJnlLine.SETRANGE("Currency Code",GenJnlLine2."Currency Code");
      GenJnlLine.SETFILTER("Account No.",'<>%1','');
      GenJnlLine.SETFILTER("Amount (LCY)",'<>%1',0);
      GenJnlLine.SETFILTER("Document Type",'%1|%2|%3',GenJnlLine."Document Type"::" ",GenJnlLine."Document Type"::Payment,
        GenJnlLine."Document Type"::Refund);

      IF CheckCurrentLine THEN
        GenJnlLine.SETRANGE("Line No.",GenJnlLine2."Line No.");

      IF GenJnlLine.FINDFIRST THEN
      REPEAT
        IF AccNo <> GenJnlLine."Account No." THEN
          CASE GenJnlLine."Account Type" OF
            GenJnlLine."Account Type"::Customer : BEGIN
              Customer.GET(GenJnlLine."Account No.");
              CustBankAcc.SETRANGE("Customer No.",Customer."No.");
              CustBankAcc.SETRANGE(Clearing,TRUE);
              IF NOT CustBankAcc.FINDFIRST THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400011+
                        Text1105400012,Customer."No.",CustBankAcc.FIELDCAPTION(Clearing)),
                    1,150);
              END;
              TestBIC := CustBankAcc."SWIFT Code";
              IF STRLEN(TestBIC) = 0 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400013+
                        Text1105400014,Customer."No.",CustBankAcc.Code),
                    1,150);
              END;
              IF (STRLEN(TestBIC) <> 8) AND (STRLEN(TestBIC) <> 11) THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400013+
                        Text1105400015,Customer."No.",CustBankAcc.Code),
                    1,150);

              END;
              IF NOT CheckBIC(TestBIC) THEN
                ERROR(BICError002,TestBIC,Customer."No.");
              TestIBAN := CustBankAcc.IBAN;
              IF STRLEN(TestIBAN) = 0 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400016+
                        Text1105400014,Customer."No.",CustBankAcc.Code),
                    1,150);
              END;
              IF (STRLEN(TestIBAN) < 5) OR (STRLEN(TestIBAN) > 34) THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400016+
                        Text1105400017,Customer."No.",CustBankAcc.Code),
                    1,150);
              END;
              CompanyInfo.CheckIBAN(TestIBAN);
            END;
            GenJnlLine."Account Type"::Vendor : BEGIN
              Vendor.GET(GenJnlLine."Account No.");
              VendBankAcc.SETRANGE("Vendor No.",Vendor."No.");
              VendBankAcc.SETRANGE(Clearing,TRUE);
              IF NOT VendBankAcc.FINDFIRST THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400018+
                        Text1105400012,Vendor."No.",VendBankAcc.FIELDCAPTION(Clearing)),
                    1,150);
              END;
              TestBIC := VendBankAcc."SWIFT Code";
              IF STRLEN(TestBIC) = 0 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400019+
                        Text1105400014,Vendor."No.",VendBankAcc.Code),
                    1,150);
              END;
              IF (STRLEN(TestBIC) <> 8) AND (STRLEN(TestBIC) <> 11) THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400019+
                        Text1105400020,Vendor."No.",VendBankAcc.Code),
                    1,150);
              END;
              IF NOT CheckBIC(TestBIC) THEN
                ERROR(BICError003,TestBIC,Vendor."No.");
              TestIBAN := VendBankAcc.IBAN;
              IF STRLEN(TestIBAN) = 0 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400021+
                        Text1105400014,Vendor."No.",VendBankAcc.Code),
                    1,150);
              END;
              IF (STRLEN(TestIBAN) < 5) OR (STRLEN(TestIBAN) > 34) THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400021+
                        Text1105400017,Vendor."No.",VendBankAcc.Code),
                    1,150);
              END;
              CompanyInfo.CheckIBAN(TestIBAN);
            END;
          END;
        AccNo := GenJnlLine."Account No.";
      UNTIL GenJnlLine.NEXT=0;

      IF AbortOnErrors AND (ErrorCounter > 0) THEN
        ERROR(ErrorMessage[1]);

      EXIT(ErrorCounter = 0);
    END;

    PROCEDURE CreateSEPAFile@1105400050(Drive@1105400000 : Code[260];Filename@1105400001 : Code[80];PaymLedgEntry@1105400002 : Record 5001902;BankInfoNo@1105400003 : Integer);
    BEGIN
      OpenExportfile(Drive,Filename);
      PrepareXMLDoc;
      CreateXMLSubDoc(PaymLedgEntry,BankInfoNo);
    END;

    PROCEDURE OpenExportfile@1105400127(Drive@1105400000 : Code[260];Filename@1105400002 : Code[80]);
    BEGIN
      PaymentSetup.GET;

      Exportfile.WRITEMODE:=TRUE;
      Exportfile.TEXTMODE:=TRUE;

      IF NOT Exportfile.CREATE(Drive + Filename) THEN
        ERROR (Text1105400000);
    END;

    LOCAL PROCEDURE PrepareXMLDoc@1105400051();
    BEGIN
      xmlNameSpace := 'urn:sepade:xsd:pain.001.001.02';
      xmlNameSpacexsi := 'http://www.w3.org/2001/XMLSchema-instance';
      xmlSchemeLoc := 'urn:sepade:xsd:pain.001.001.02 pain.001.001.02.xsd';
    END;

    LOCAL PROCEDURE CreateXMLSubDoc@1105400052(PaymLedgEntry@1105400002 : Record 5001902;BankInfoNo@1105400003 : Integer);
    VAR
      XMLSubDoc@1105400000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F5078F32-C551-11D3-89B9-0000F81FE221}:'Microsoft XML, v3.0'.DOMDocument30";
      XMLNodeCurr@1105400001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      PrepareXMLDoc;

      IF ISCLEAR(XMLSubDoc) THEN
        CREATE(XMLSubDoc);

      XMLSubDoc.validateOnParse := FALSE;
      XMLSubDoc.loadXML('<?xml version="1.0" encoding="UTF-8"?>' +
            '<Document xmlns="' + xmlNameSpace + '" xmlns:xsi="' + xmlNameSpacexsi +
            '" xsi:schemaLocation="' + xmlSchemeLoc + '"></Document>');

      IF ISCLEAR(XMLSubDoc) THEN
        ERROR(XMLSubDoc.parseError.reason+Text1105400029);

      XMLNodeCurr := XMLSubDoc.documentElement;
      XMLDOMMgt.SetNormalCase;

      CreateHeader(XMLNodeCurr,PaymLedgEntry,BankInfoNo);

      CloseExportfile(XMLSubDoc);
      CLEAR(XMLSubDoc);
    END;

    PROCEDURE CreateHeader@1105400053(VAR XMLNodeCurr@1105400002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";PaymLedgEntry@1105400000 : Record 5001902;BankInfoNo@1105400005 : Integer);
    VAR
      XMLNewNode@1105400001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      TempText@1105400003 : Text[1024];
    BEGIN
      IF XMLDOMMgt.AddElement(XMLNodeCurr,'pain.001.001.02','',xmlNameSpace,XMLNewNode) > 0 THEN
        EXIT;
      XMLNodeCurr := XMLNewNode;

        IF XMLDOMMgt.AddElement(XMLNodeCurr,'GrpHdr','',xmlNameSpace,XMLNewNode) > 0 THEN
          EXIT;
        XMLNodeCurr := XMLNewNode;

          TempText := FORMAT(PaymLedgEntry."Entry No.") + '-' + COMPANYNAME;
          TempText := COPYSTR(CheckFormat(TempText),1,35);
          IF XMLDOMMgt.AddElement(XMLNodeCurr,'MsgId',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;

          TempText := FORMAT(CURRENTDATETIME,0,9);
          IF XMLDOMMgt.AddElement(XMLNodeCurr,'CreDtTm',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;

          TempText := FORMAT(PaymLedgEntry."No. of Entries");
          IF XMLDOMMgt.AddElement(XMLNodeCurr,'NbOfTxs',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;

          TempText := FORMAT(PaymLedgEntry."Amount (LCY)",0,9);
          IF XMLDOMMgt.AddElement(XMLNodeCurr,'CtrlSum',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;

          IF XMLDOMMgt.AddElement(XMLNodeCurr,'Grpg','GRPD',xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;

          IF XMLDOMMgt.AddElement(XMLNodeCurr,'InitgPty','',xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;
          XMLNodeCurr := XMLNewNode;

            TempText := COPYSTR(CompName,1,70);
            IF XMLDOMMgt.AddElement(XMLNodeCurr,'Nm',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
              EXIT;

          XMLNodeCurr := XMLNodeCurr.parentNode;

        XMLNodeCurr := XMLNodeCurr.parentNode;

        IF XMLDOMMgt.AddElement(XMLNodeCurr,'PmtInf','',xmlNameSpace,XMLNewNode) > 0 THEN
          EXIT;
        XMLNodeCurr := XMLNewNode;

          IF XMLDOMMgt.AddElement(XMLNodeCurr,'PmtMtd','TRF',xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;

          IF XMLDOMMgt.AddElement(XMLNodeCurr,'PmtTpInf','',xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;
          XMLNodeCurr := XMLNewNode;

            IF XMLDOMMgt.AddElement(XMLNodeCurr,'SvcLvl','',xmlNameSpace,XMLNewNode) > 0 THEN
              EXIT;
            XMLNodeCurr := XMLNewNode;

              IF XMLDOMMgt.AddElement(XMLNodeCurr,'Cd','SEPA',xmlNameSpace,XMLNewNode) > 0 THEN
                EXIT;

            XMLNodeCurr := XMLNodeCurr.parentNode;

          XMLNodeCurr := XMLNodeCurr.parentNode;

          IF PaymLedgEntry."Execution Date" = 0D THEN
            TempText := FORMAT(PaymLedgEntry."Payment Date",0,9)
          ELSE
            TempText := FORMAT(PaymLedgEntry."Execution Date",0,9);
          IF XMLDOMMgt.AddElement(XMLNodeCurr,'ReqdExctnDt',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;

          IF XMLDOMMgt.AddElement(XMLNodeCurr,'Dbtr','',xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;
          XMLNodeCurr := XMLNewNode;

            TempText := COPYSTR(CompName,1,70);
            IF XMLDOMMgt.AddElement(XMLNodeCurr,'Nm',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
              EXIT;

          XMLNodeCurr := XMLNodeCurr.parentNode;

          IF XMLDOMMgt.AddElement(XMLNodeCurr,'DbtrAcct','',xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;
          XMLNodeCurr := XMLNewNode;

            IF XMLDOMMgt.AddElement(XMLNodeCurr,'Id','',xmlNameSpace,XMLNewNode) > 0 THEN
              EXIT;
            XMLNodeCurr := XMLNewNode;

              IF XMLDOMMgt.AddElement(XMLNodeCurr,'IBAN',IBAN,xmlNameSpace,XMLNewNode) > 0 THEN
                EXIT;

            XMLNodeCurr := XMLNodeCurr.parentNode;

          XMLNodeCurr := XMLNodeCurr.parentNode;

          IF XMLDOMMgt.AddElement(XMLNodeCurr,'DbtrAgt','',xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;
          XMLNodeCurr := XMLNewNode;

            IF XMLDOMMgt.AddElement(XMLNodeCurr,'FinInstnId','',xmlNameSpace,XMLNewNode) > 0 THEN
              EXIT;
            XMLNodeCurr := XMLNewNode;

              IF XMLDOMMgt.AddElement(XMLNodeCurr,'BIC',BIC,xmlNameSpace,XMLNewNode) > 0 THEN
                EXIT;

            XMLNodeCurr := XMLNodeCurr.parentNode;

          XMLNodeCurr := XMLNodeCurr.parentNode;

          IF XMLDOMMgt.AddElement(XMLNodeCurr,'ChrgBr','SLEV',xmlNameSpace,XMLNewNode) > 0 THEN
            EXIT;

          CreateRecords(XMLNodeCurr,PaymLedgEntry,BankInfoNo);

        XMLNodeCurr := XMLNodeCurr.parentNode;
    END;

    PROCEDURE CreateRecords@1105400054(VAR XMLNodeCurr@1105400001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";PaymLedgEntry@1105400000 : Record 5001902;BankInfoNo@1105400010 : Integer);
    VAR
      XMLNewNode@1105400002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      PaymLine@1105400003 : Record 5001903;
      PaymBankInfo@1105400005 : Record 5001917;
      PaymBankInfoLine@1105400004 : Record 5001918;
      Cust@1105400007 : Record 18;
      Vend@1105400008 : Record 23;
      TempText@1105400006 : Text[1024];
      TempRmtInfo@1105400009 : Text[1024];
    BEGIN
      CLEAR(TempRmtInfo);
      IF BankInfoNo = 0 THEN BEGIN
        PaymLedgEntry.CALCFIELDS("Last Payment Bank Info Entry");
        PaymBankInfo.GET(PaymLedgEntry."Payment No.",PaymLedgEntry."Last Payment Bank Info Entry");
      END ELSE BEGIN
        PaymBankInfo.GET(PaymLedgEntry."Payment No.",BankInfoNo);
      END;
      WITH PaymLine DO BEGIN
        SETRANGE("Payment No.",PaymLedgEntry."Payment No.");
        IF FINDSET THEN REPEAT
          PaymentSetup.GET;
          IF "AVIS Letter" THEN BEGIN
            Setuptext := PaymentSetup."Avis Proposal";
            CLEAR(TempRmtInfo);
          END ELSE IF PaymLedgEntry."SEPA Payment" THEN
            Setuptext := PaymentSetup."SEPA Proposal"
          ELSE BEGIN
            CASE PaymLedgEntry.Type OF
              PaymLedgEntry.Type::"Customer Debit",
              PaymLedgEntry.Type::"Customer Collect" : Setuptext := PaymentSetup."Customer Debit Proposal";
              PaymLedgEntry.Type::"Customer Credit" : Setuptext := PaymentSetup."Customer Payment Proposal";
              PaymLedgEntry.Type::"Vendor Credit" : Setuptext := PaymentSetup."Vendor Proposal";
            END;
          END;
          IF NOT "AVIS Letter" OR ("AVIS Letter" AND ("Sum Entries" <> 0)) THEN BEGIN
            CASE "Account Type" OF
              "Account Type"::Customer:
              BEGIN
                CustLedgEntry.GET("Ledg.Entry No.");
                CustLedgEntry.CALCFIELDS("Original Amount");
                TempRmtInfo += STRSUBSTNO(DELCHR(Setuptext,'>'),
                                   DELCHR(FORMAT(CustLedgEntry."External Document No."),'>'),
                                   DELCHR(FORMAT(CustLedgEntry."Document No."),'>'),
                                   FORMAT(CustLedgEntry."Document Date",8,'<day,2>.<month,2>.<year,2>'),
                                   DELCHR(FORMAT(ABS("Payment Amount"),12,'<Sign><Integer><Decimals,3>')),
                                   DELCHR(FORMAT(ABS("Pmt. Discount"),8,'<Sign><Integer><Decimals,3>')),
                                   DELCHR(FORMAT(ABS(CustLedgEntry."Original Amount"),12,'<Sign><Integer><Decimals,3>')),
                                   FORMAT(CustLedgEntry."Posting Date",8,'<day,2>.<month,2>.<year,2>'),
                                   DELCHR(FORMAT(CurrCode)),
                                   COPYSTR(FORMAT(CustLedgEntry."Document Type"),1,2));


              END;
              "Account Type"::Vendor:
              BEGIN
                VendLedgEntry.GET("Ledg.Entry No.");
                VendLedgEntry.CALCFIELDS("Original Amount");
                TempRmtInfo += STRSUBSTNO(DELCHR(Setuptext,'>'),
                                   DELCHR(FORMAT(VendLedgEntry."External Document No."),'>'),
                                   DELCHR(FORMAT(VendLedgEntry."Document No."),'>'),
                                   FORMAT(VendLedgEntry."Document Date",8,'<day,2>.<month,2>.<year,2>'),
                                   DELCHR(FORMAT(ABS("Payment Amount"),12,'<Sign><Integer><Decimals,3>')),
                                   DELCHR(FORMAT(ABS("Pmt. Discount"),8,'<Sign><Integer><Decimals,3>')),
                                   DELCHR(FORMAT(ABS(VendLedgEntry."Original Amount"),12,'<Sign><Integer><Decimals,3>')),
                                   FORMAT(VendLedgEntry."Posting Date",8,'<day,2>.<month,2>.<year,2>'),
                                   DELCHR(FORMAT(CurrCode)),
                                   COPYSTR(FORMAT(VendLedgEntry."Document Type"),1,2));
              END;
            END;
            TempRmtInfo += ' ';
          END;

          IF "Sum Entries" <> 0 THEN BEGIN
            PaymBankInfoLine.GET("Payment No.",PaymBankInfo."Entry No.","Account Type","Account No.","Payment Order No.");

            IF XMLDOMMgt.AddElement(XMLNodeCurr,'CdtTrfTxInf','',xmlNameSpace,XMLNewNode) > 0 THEN
              EXIT;
            XMLNodeCurr := XMLNewNode;

              IF XMLDOMMgt.AddElement(XMLNodeCurr,'PmtId','',xmlNameSpace,XMLNewNode) > 0 THEN
                EXIT;
              XMLNodeCurr := XMLNewNode;

                TempText := COMPANYNAME + '-' + "Payment No." + '-' + FORMAT("Entry No.");
                TempText := COPYSTR(CheckFormat(TempText),1,35);
                IF XMLDOMMgt.AddElement(XMLNodeCurr,'EndToEndId',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
                  EXIT;

              XMLNodeCurr := XMLNodeCurr.parentNode;

              IF XMLDOMMgt.AddElement(XMLNodeCurr,'Amt','',xmlNameSpace,XMLNewNode) > 0 THEN
                EXIT;
              XMLNodeCurr := XMLNewNode;

                TempText := FORMAT("Sum Entries",0,9);
                IF XMLDOMMgt.AddElement(XMLNodeCurr,'InstdAmt',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
                  EXIT;

                XMLNodeCurr := XMLNewNode;
                IF XMLDOMMgt.AddAttribute(XMLNodeCurr,'Ccy',CurrCode) > 0 THEN
                  EXIT;
                XMLNodeCurr := XMLNodeCurr.parentNode;

              XMLNodeCurr := XMLNodeCurr.parentNode;

              IF XMLDOMMgt.AddElement(XMLNodeCurr,'CdtrAgt','',xmlNameSpace,XMLNewNode) > 0 THEN
                EXIT;
              XMLNodeCurr := XMLNewNode;

                IF XMLDOMMgt.AddElement(XMLNodeCurr,'FinInstnId','',xmlNameSpace,XMLNewNode) > 0 THEN
                  EXIT;
                XMLNodeCurr := XMLNewNode;

                  IF XMLDOMMgt.AddElement(XMLNodeCurr,'BIC',DELCHR(PaymBankInfoLine."SWIFT Code",'=',' '),
                    xmlNameSpace,XMLNewNode) > 0 THEN
                      EXIT;

                XMLNodeCurr := XMLNodeCurr.parentNode;

              XMLNodeCurr := XMLNodeCurr.parentNode;

              IF XMLDOMMgt.AddElement(XMLNodeCurr,'Cdtr','',xmlNameSpace,XMLNewNode) > 0 THEN
                EXIT;
              XMLNodeCurr := XMLNewNode;

                CASE "Account Type" OF
                  "Account Type"::Customer:
                  BEGIN
                    Cust.GET("Account No.");
                    TempText := CheckFormat(Cust.Name);
                  END;
                  "Account Type"::Vendor:
                  BEGIN
                    Vend.GET("Account No.");
                    TempText := CheckFormat(Vend.Name);
                  END;
                END;
                TempText := COPYSTR(TempText,1,70);
                IF XMLDOMMgt.AddElement(XMLNodeCurr,'Nm',TempText,xmlNameSpace,XMLNewNode) > 0 THEN
                  EXIT;

              XMLNodeCurr := XMLNodeCurr.parentNode;

              IF XMLDOMMgt.AddElement(XMLNodeCurr,'CdtrAcct','',xmlNameSpace,XMLNewNode) > 0 THEN
                EXIT;
              XMLNodeCurr := XMLNewNode;

                IF XMLDOMMgt.AddElement(XMLNodeCurr,'Id','',xmlNameSpace,XMLNewNode) > 0 THEN
                  EXIT;
                XMLNodeCurr := XMLNewNode;

                  IF XMLDOMMgt.AddElement(XMLNodeCurr,'IBAN',DELCHR(PaymBankInfoLine.IBAN,'=',' '),
                    xmlNameSpace,XMLNewNode) > 0 THEN
                      EXIT;

                XMLNodeCurr := XMLNodeCurr.parentNode;

              XMLNodeCurr := XMLNodeCurr.parentNode;

              IF XMLDOMMgt.AddElement(XMLNodeCurr,'RmtInf','',xmlNameSpace,XMLNewNode) > 0 THEN
                EXIT;
              XMLNodeCurr := XMLNewNode;

                TempRmtInfo := CheckFormat(DELCHR(TempRmtInfo,'<>'));
                TempRmtInfo := COPYSTR(TempRmtInfo,1,140);
                IF XMLDOMMgt.AddElement(XMLNodeCurr,'Ustrd',TempRmtInfo,xmlNameSpace,XMLNewNode) > 0 THEN
                  EXIT;
                CLEAR(TempRmtInfo);

              XMLNodeCurr := XMLNodeCurr.parentNode;

            XMLNodeCurr := XMLNodeCurr.parentNode;

          END;

        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CloseExportfile@1105400057(XMLSubDoc@1105400001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F5078F32-C551-11D3-89B9-0000F81FE221}:'Microsoft XML, v3.0'.DOMDocument30");
    VAR
      XMLSubDocOutStream@1105400000 : OutStream;
    BEGIN
      Exportfile.CREATEOUTSTREAM(XMLSubDocOutStream);
      XMLSubDoc.save(XMLSubDocOutStream);
      Exportfile.CLOSE;
    END;

    BEGIN
    END.
  }
}

