OBJECT Codeunit 50223 Job Consumption Basic
{
  OBJECT-PROPERTIES
  {
    Date=02.09.13;
    Time=14:59:54;
    Version List=HME0513;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Prefix@1000 : TextConst 'ENU=ZZZ';
      LibraryJobs@1007 : Codeunit 50208;
      Assert@1001 : Codeunit 50200;
      DocumentType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      Initialized@1004 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@17();
    VAR
      PurchasePrice@1002 : Record 7012;
      SalesPrice@1003 : Record 7002;
      BackupMgt@1001 : Codeunit 50201;
      LibraryFinance@1102601001 : Codeunit 50207;
      Seed@1000 : Integer;
    BEGIN
      IF Initialized THEN
        EXIT;

      BackupMgt.DefaultFixture;
      Seed := TIME - 000000T;

      // Fixing seed for deterministic execution in SNAP
      Seed := 1;
      RANDOMIZE(Seed);

      // Removing special prices
      PurchasePrice.DELETEALL(TRUE);
      SalesPrice.DELETEALL(TRUE);

      LibraryFinance.InitializeGeneralPostingSetup;
      LibraryFinance.InitializeVATPostingSetup;

      Initialized := TRUE;

      COMMIT
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalResBlank@18();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeBlank,LibraryJobs.ResourceType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalResSchedule@20();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeSchedule,LibraryJobs.ResourceType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalResContract@21();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeContract,LibraryJobs.ResourceType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalResBoth@22();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeBoth,LibraryJobs.ResourceType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalGLAccBlank@23();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeBlank,LibraryJobs.GLAccountType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalGLAccSchedule@26();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeSchedule,LibraryJobs.GLAccountType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalGLAccContract@24();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeContract,LibraryJobs.GLAccountType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalGLAccountBoth@25();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeBoth,LibraryJobs.GLAccountType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalItemBlank@27();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeBlank,LibraryJobs.ItemType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalItemSchedule@28();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeSchedule,LibraryJobs.ItemType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalItemContract@29();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeContract,LibraryJobs.ItemType)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalItemBoth@30();
    BEGIN
      JobJournalConsumption(LibraryJobs.UsageLineTypeBoth,LibraryJobs.ItemType)
    END;

    [Normal]
    LOCAL PROCEDURE JobJournalConsumption@1(LineType@1004 : Option;Type@1005 : Option);
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobJournalLine@1002 : Record 210;
      TempJobJournalLine@1003 : TEMPORARY Record 210;
    BEGIN
      // Parameterized test

      // LineType IN ["",Schedule,Contract,Both Schedule and Contract]
      // Type IN [Resource,G/L Account,Item]

      // Setup
      Initialize;
      LibraryJobs.CreateJob(Job);
      LibraryJobs.CreateJobTask(Job,JobTask);

      // Exercise
      LibraryJobs.CreateJobJournalLineForType(LineType,Type,JobTask,JobJournalLine);

      // Verify
      LibraryJobs.VerifyJobJournalLineCostPrice(JobJournalLine);

      // Exercise
      LibraryJobs.CopyJobJournalLines(JobJournalLine,TempJobJournalLine);
      LibraryJobs.PostJobJournal(JobJournalLine);

      // Verify (planning lines and job ledger)
      LibraryJobs.VerifyJobJournalPosting(TempJobJournalLine)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobJournalMultipleLines@58();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobJournalLine@1003 : Record 210;
      TempJobJournalLine@1004 : TEMPORARY Record 210;
      Idx@1000 : Integer;
    BEGIN
      // Setup
      Initialize;
      LibraryJobs.CreateJob(Job);
      LibraryJobs.CreateJobTask(Job,JobTask);

      // Exercise

      // Create 2 - 5 job journal lines
      FOR Idx := 2 TO 2 + RANDOM(3) DO
        LibraryJobs.CreateJobJournalLineForType(RANDOM(4) - 1,RANDOM(3) - 1,JobTask,JobJournalLine);

      LibraryJobs.VerifyJobJournalLineCostPrice(JobJournalLine);

      LibraryJobs.CopyJobJournalLines(JobJournalLine,TempJobJournalLine);
      LibraryJobs.PostJobJournal(JobJournalLine);

      // Verify (planning lines and job ledger)
      LibraryJobs.VerifyJobJournalPosting(TempJobJournalLine)
    END;

    [Test]
    PROCEDURE TestPurchOrderJobGLAccBlank@36();
    BEGIN
      JobPurchaseConsumption(DocumentType::Order,LibraryJobs.GLAccountType,LibraryJobs.UsageLineTypeBlank)
    END;

    [Test]
    PROCEDURE TestPurchOrderJobGLAccSchedule@37();
    BEGIN
      JobPurchaseConsumption(DocumentType::Order,LibraryJobs.GLAccountType,LibraryJobs.UsageLineTypeSchedule)
    END;

    [Test]
    PROCEDURE TestPurchOrderJobGLAccContract@38();
    BEGIN
      JobPurchaseConsumption(DocumentType::Order,LibraryJobs.GLAccountType,LibraryJobs.UsageLineTypeContract)
    END;

    [Test]
    PROCEDURE TestPurchOrderJobGLAccBoth@39();
    BEGIN
      JobPurchaseConsumption(DocumentType::Order,LibraryJobs.GLAccountType,LibraryJobs.UsageLineTypeBoth)
    END;

    [Test]
    PROCEDURE TestPurchOrderJobItemBlank@40();
    BEGIN
      JobPurchaseConsumption(DocumentType::Order,LibraryJobs.ItemType,LibraryJobs.UsageLineTypeBlank)
    END;

    [Test]
    PROCEDURE TestPurchOrderJobItemSchedule@41();
    BEGIN
      JobPurchaseConsumption(DocumentType::Order,LibraryJobs.ItemType,LibraryJobs.UsageLineTypeSchedule)
    END;

    [Test]
    PROCEDURE TestPurchOrderJobItemContract@42();
    BEGIN
      JobPurchaseConsumption(DocumentType::Order,LibraryJobs.ItemType,LibraryJobs.UsageLineTypeContract)
    END;

    [Test]
    PROCEDURE TestPurchOrderJobItemBoth@43();
    BEGIN
      JobPurchaseConsumption(DocumentType::Order,LibraryJobs.ItemType,LibraryJobs.UsageLineTypeBoth)
    END;

    [Test]
    PROCEDURE TestPurchInvJobGLAccBlank@9();
    BEGIN
      JobPurchaseConsumption(DocumentType::Invoice,LibraryJobs.GLAccountType,LibraryJobs.UsageLineTypeBlank)
    END;

    [Test]
    PROCEDURE TestPurchInvJobGLAccSchedule@48();
    BEGIN
      JobPurchaseConsumption(DocumentType::Invoice,LibraryJobs.GLAccountType,LibraryJobs.UsageLineTypeSchedule)
    END;

    [Test]
    PROCEDURE TestPurchInvJobGLAccContract@50();
    BEGIN
      JobPurchaseConsumption(DocumentType::Invoice,LibraryJobs.GLAccountType,LibraryJobs.UsageLineTypeContract)
    END;

    [Test]
    PROCEDURE TestPurchInvJobGLAccBoth@51();
    BEGIN
      JobPurchaseConsumption(DocumentType::Invoice,LibraryJobs.GLAccountType,LibraryJobs.UsageLineTypeBoth)
    END;

    [Test]
    PROCEDURE TestPurchInvJobItemBlank@52();
    BEGIN
      JobPurchaseConsumption(DocumentType::Invoice,LibraryJobs.ItemType,LibraryJobs.UsageLineTypeBlank)
    END;

    [Test]
    PROCEDURE TestPurchInvJobItemSchedule@53();
    BEGIN
      JobPurchaseConsumption(DocumentType::Invoice,LibraryJobs.ItemType,LibraryJobs.UsageLineTypeSchedule)
    END;

    [Test]
    PROCEDURE TestPurchInvJobItemContract@54();
    BEGIN
      JobPurchaseConsumption(DocumentType::Invoice,LibraryJobs.ItemType,LibraryJobs.UsageLineTypeContract)
    END;

    [Test]
    PROCEDURE TestPurchInvJobItemBoth@55();
    BEGIN
      JobPurchaseConsumption(DocumentType::Invoice,LibraryJobs.ItemType,LibraryJobs.UsageLineTypeBoth)
    END;

    [Normal]
    LOCAL PROCEDURE JobPurchaseConsumption@2(PurchaseDocumentType@1005 : Option;ConsumableType@1003 : Option;JobLineType@1004 : Option);
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      PurchaseLine@1002 : Record 39;
      TempPurchaseLine@1008 : TEMPORARY Record 39;
      JobLedgerEntry@1009 : Record 169;
      PurchaseHeader@1006 : Record 38;
      PurchInvHeader@1007 : Record 122;
    BEGIN
      // Parameterized test

      // PurchaseDocumentType IN [Order,Invoice]
      // PurchaseLineType IN [Item,G/L Account]
      // JobLineType IN ["",Schedule,Contract,Both Schedule and Contract]

      // Setup
      Initialize;
      LibraryJobs.CreateJob(Job);
      LibraryJobs.CreateJobTask(Job,JobTask);

      // Exercise
      CreateSingleLinePurchaseDoc(PurchaseDocumentType,PurchaseHeader);

      // Attach requested account type to the created purchase line
      GetPurchaseLines(PurchaseHeader,PurchaseLine);

      LibraryJobs.Attach2PurchaseLine(LibraryJobs.Job2PurchaseConsumableType(ConsumableType),PurchaseLine);
      LibraryJobs.AttachJobTask2PurchaseLine(JobTask,PurchaseLine);
      PurchaseLine.VALIDATE("Job Line Type",JobLineType);
      PurchaseLine.VALIDATE(Description,CREATEGUID);
      PurchaseLine.MODIFY(TRUE);
      LibraryJobs.CopyPurchaseLines(PurchaseLine,TempPurchaseLine);
      PostPurchaseDocument(PurchaseHeader,PurchInvHeader);

      // Verify (planning lines, job ledger)
      LibraryJobs.VerifyPurchaseDocPostingForJob(TempPurchaseLine);
      JobLedgerEntry.SETRANGE(Description,TempPurchaseLine.Description);
      Assert.AreEqual(1,JobLedgerEntry.COUNT,'# job ledger entries');
      LibraryJobs.VerifyGLEntries(JobLedgerEntry)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobGLJournalBlank@63();
    BEGIN
      JobGLJournalConsumption(LibraryJobs.UsageLineTypeBlank)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobGLJournalSchedule@64();
    BEGIN
      JobGLJournalConsumption(LibraryJobs.UsageLineTypeSchedule)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobGLJournalContract@65();
    BEGIN
      JobGLJournalConsumption(LibraryJobs.UsageLineTypeContract)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestJobGLJournalBoth@66();
    BEGIN
      JobGLJournalConsumption(LibraryJobs.UsageLineTypeBoth)
    END;

    [Normal]
    LOCAL PROCEDURE JobGLJournalConsumption@56(JobLineType@1003 : Option);
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobGenJournalLine@1002 : Record 81;
      JobLedgerEntry@1004 : Record 169;
    BEGIN
      // Parameterized test

      // JobLineType IN ["",Schedule,Contract,Both Schedule and Contract]

      // Setup
      Initialize;
      LibraryJobs.CreateJob(Job);
      LibraryJobs.CreateJobTask(Job,JobTask);

      // Exercise
      LibraryJobs.CreateJobGLJournalLine(JobTask,JobGenJournalLine);

      JobGenJournalLine.VALIDATE("Job Line Type",JobLineType);
      JobGenJournalLine.MODIFY(TRUE);

      LibraryJobs.PostGenJournal(JobGenJournalLine);

      // Verify (planning lines, job ledger)
      LibraryJobs.VerifyJobGenJournalPosting(JobGenJournalLine);

      JobLedgerEntry.SETRANGE(Description,JobGenJournalLine.Description);
      Assert.AreEqual(1,JobLedgerEntry.COUNT,'Found multiple job ledger entries.');
      LibraryJobs.VerifyGLEntries(JobLedgerEntry)
    END;

    [Normal]
    LOCAL PROCEDURE CreateSingleLinePurchaseDoc@3(PurchaseDocumentType@1000 : Option;VAR PurchaseHeader@1003 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
      Vendor@1005 : Record 23;
      LibrarySCM@1002 : Codeunit 50210;
    BEGIN
      // Create a purchase document with a single line.

      Vendor.SETRANGE("IC Partner Code",'');
      Vendor.SETRANGE("Location Code",'');
      Vendor.NEXT(RANDOM(Vendor.COUNT));

      LibrarySCM.CreatePurchaseHeader(PurchaseHeader,PurchaseDocumentType,Vendor."No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",GenerateVendorInvoiceNo(Vendor."No."));
      PurchaseHeader.MODIFY(TRUE);

      LibrarySCM.CreatePurchaseLine(
        PurchaseHeader,PurchaseLine,PurchaseLine.Type::Item,LibraryJobs.FindConsumable(LibraryJobs.ItemType),RANDOM(100))
    END;

    [Normal]
    LOCAL PROCEDURE GenerateVendorInvoiceNo@34(VendorNo@1000 : Code[20]) InvoiceNo : Code[20];
    VAR
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      // Generate a unique invoice number for a vendor.

      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);

      InvoiceNo := Prefix + 'I000';
      REPEAT
        InvoiceNo := INCSTR(InvoiceNo);
        VendorLedgerEntry.SETRANGE("External Document No.",InvoiceNo)
      UNTIL VendorLedgerEntry.ISEMPTY
    END;

    [Normal]
    LOCAL PROCEDURE PostPurchaseDocument@32(PurchaseHeader@1000 : Record 38;VAR PurchInvHeader@1003 : Record 122);
    VAR
      PurchRcptHeader@1001 : Record 120;
    BEGIN
      // Receive and invoice the purchase order.
      // Returns the purchase invoice.

      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Order:
          BEGIN
            ReceivePurchaseOrder(PurchaseHeader,PurchRcptHeader);
            PurchaseHeader.FIND;
            InvoicePurchaseOrder(PurchaseHeader,PurchInvHeader)
          END;
        PurchaseHeader."Document Type"::Invoice:
          BEGIN
            CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
            PurchInvHeader.SETRANGE("Pre-Assigned No.",PurchaseHeader."No.");
            Assert.AreEqual(1,PurchInvHeader.COUNT,'# purchase invoices');
            PurchInvHeader.FINDFIRST
          END;
        ELSE
          Assert.Fail(STRSUBSTNO('Unsupported document type %1',PurchaseHeader."Document Type"));
      END
    END;

    [Normal]
    LOCAL PROCEDURE ReceivePurchaseOrder@5(PurchaseHeader@1000 : Record 38;VAR PurchRcptHeader@1001 : Record 120);
    BEGIN
      // Returns the purchase receipt.

      PurchaseHeader.VALIDATE(Receive,TRUE);
      PurchaseHeader.MODIFY(TRUE);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);

      PurchRcptHeader.SETRANGE("Order No.",PurchaseHeader."No.");
      Assert.AreEqual(1,PurchRcptHeader.COUNT,'# purchase receipts');
      PurchRcptHeader.FINDFIRST
    END;

    [Normal]
    LOCAL PROCEDURE InvoicePurchaseOrder@6(PurchaseHeader@1000 : Record 38;VAR PurchInvHeader@1001 : Record 122);
    BEGIN
      // Returns the purchase invoice.

      PurchaseHeader.VALIDATE(Invoice,TRUE);
      PurchaseHeader.MODIFY(TRUE);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);

      PurchInvHeader.SETRANGE("Order No.",PurchaseHeader."No.");
      Assert.AreEqual(1,PurchInvHeader.COUNT,'# purchase invoices');
      PurchInvHeader.FINDFIRST
    END;

    [Normal]
    LOCAL PROCEDURE GetPurchaseLines@7(PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDSET
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@13(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@10(Msg@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Msg,'The journal lines were successfully posted.') = 1,
        STRSUBSTNO('Unexpected Message: %1',Msg))
    END;

    BEGIN
    {
      This test codeunit tests all the different ways to consume something for a job:

      - job journal
      - purchase order
      - purchase invoice
      - general journal

      All valid combinations (32) of account type (resource, g/l account, item) and job journal line type
      (blank, schedule, contract, both) are exercised.

      The following aspects are validated:

      - job ledger (number of entries, unit cost/price)
      - job planning lines (number and type of lines, unit cost/price)
      - g/l (job no.)
    }
    END.
  }
}

