OBJECT Codeunit 6085747 Document Capture Test Mgnt.
{
  OBJECT-PROPERTIES
  {
    Date=17.05.13;
    Time=01:00:00;
    Version List=DCW13.70.00.3.50;
  }
  PROPERTIES
  {
    TableNo=6085754;
    OnRun=BEGIN
            DCTest := Rec;
            Code;
            Rec := DCTest;
          END;

  }
  CODE
  {
    VAR
      DCTest@161024012 : Record 6085754;
      Text001@161024013 : TextConst 'DEU=Document Capture muss installiert werden, bevor Sie einen Test durchfÅhren kînnen.;ENU=Document Capture Client Components must be installed before you can perform the test.';
      DCSetup@161024014 : Record 6085573;
      Text002@161024015 : TextConst 'DEU=Sie mÅssen ''%1'' in ''%2'' angeben.;ENU=You must specify ''%1'' in ''%2''.';
      Text003@161024016 : TextConst 'DEU=UngÅltiger Pfad ''%1'' in ''%2''.;ENU=Invalid path in ''%1'' in ''%2''.';
      Text004@161024017 : TextConst 'DEU=Das Verzeichnis ''%1'' ist schreibgeschÅtzt.;ENU=The directory ''%1'' is writeprotected.';
      Text005@161024019 : TextConst 'DEU=Kann nicht aus ''%1'' lîschen.;ENU=Unable to delete from ''%1''.';
      Text006@161024018 : TextConst 'DEU=%1 - %2;ENU=%1 - %2';
      Text007@161024020 : TextConst 'DEU=Kann nicht Verzeichnis ''%1'' erstellen.;ENU=Unable to create directory ''%1''.';
      FileSystem@161024021 : Automation "{D1D0B2AB-A006-4BA8-8CC8-6129957BF40A} 1.0:{4FB6FC10-A85C-36C3-AD0B-C4D9DA8B171F}:'Continia Document Capture for Dynamics NAV - Common Library'.FileSystem";
      Text008@161024022 : TextConst 'DEU=Die Datei ''%1'' hat nur Leseberechtigung.;ENU=The file ''%1'' is readonly.';
      Text009@161024023 : TextConst 'DEU=%1 existiert nicht.;ENU=%1 does not exists.';
      Text010@161024024 : TextConst 'DEU=Kein %1 wurde erstellt.;ENU=No %1 has been created.';
      Text011@161024025 : TextConst 'DEU=%1 %2 hat keine Idenfikikationsvorlage.;ENU=%1 %2 has no identification template.';
      Text012@161024026 : TextConst 'DEU=%1 %2 hat keine Master Vorlage.;ENU=%1 %2 has no master template.';
      Text013@161024027 : TextConst 'DEU=Der Document Capture Server reagiert nicht. Der Grund dafÅr kann sein, dass derzeit viele OCR-Dateien verarbeitet werden oder der Server nicht so eingerichtet ist, dass die Pfade der Einrichtung %1 verwendet werden kînnen.;ENU=The Document Capture server did not respond. The reason could be that the server is currently processing many OCR-files or the server is not configured to use the same directories as specified in %1.';
      Text014@161024028 : TextConst 'DEU=Keine Belegkategorie wurde zur OCR Verarbeitung eingerichtet oder die Einrichtungskonfiguration wurde nicht exportiert.;ENU=No document category has been configured to process OCR files or no configuration files have been exported.';
      Text015@161024029 : TextConst 'DEU=Kann den IMAP Server ''%1'' on %2 ''%3'' nicht kontaktieren.;ENU=Unable to connect to IMAP server ''%1'' on %2 ''%3''.';
      Text016@161024030 : TextConst 'DEU=Falscher Benutzername oder Passwort fÅr IMAP Server ''%1'' auf %2 ''%3''.;ENU=Wrong username or password to IMAP server ''%1'' on %2 ''%3''.';
      Text017@161024031 : TextConst 'DEU=Kann den "Eingang" Ordner nicht auf IMAP Server ''%1'' auf %2 ''%3'' îffnen.;ENU=Unable to open the ''Inbox'' folder on IMAP server ''%1'' on %2 ''%3''.';
      Text018@161024032 : TextConst 'DEU="Es existiert kein aktiver %1 fÅr %2 = ''%3''.";ENU="No active %1 exists for %2 = ''%3''."';
      Text020@161024034 : TextConst 'DEU=%1 wurde nicht in %2 importiert.;ENU=%1 has not been imported in the %2.';
      Text021@161024035 : TextConst 'DEU=Keine Freigeber wurden eingerichtet.;ENU=No approvers have been configured.';
      Text022@161024036 : TextConst 'DEU=Benutzer %1 musst entweder ein ''%2'' oder ''%3'' haben.;ENU=User %1 must have either an ''%2'' or ''%3''.';
      Text023@161024037 : TextConst 'DEU="Sie mÅssen %1 in %2 %3 = ''%4'' spezifizieren";ENU="You must specify %1 in %2 %3 = ''%4''"';
      Text024@161024033 : TextConst 'DEU=Web-Freigabe ist aktiviert, aber es existiert kein %1.;ENU=Web Approval is activated but no %1 exists.';
      Text025@161024038 : TextConst 'DEU=Document Capture Testergebnisse;ENU=Document Capture Testresults';
      Text026@161024039 : TextConst 'DEU=Kann keine SMTP E-Mail verschicken.;ENU=Unable to send SMTP e-mail.';
      Text050@161024040 : TextConst 'DEU="<html><head></head><body style=""font-size: 12px; font-family: Tahoma, Verdana; color: #000a1b"">";ENU="<html><head></head><body style=""font-size: 12px; font-family: Tahoma, Verdana; color: #000a1b"">"';
      Text051@161024041 : TextConst 'DEU=</body></html>;ENU=</body></html>';

    PROCEDURE Code@161024012();
    BEGIN
      DCTest.Result := DCTest.Result::" ";
      DCTest.MODIFY;

      CREATE(FileSystem);

      CASE DCTest.Type OF
        DCTest.Type::GeneralConfiguration:
          TestGeneralConfig;

        DCTest.Type::ServiceIsRunning:
          TestServiceIsRunning;

        DCTest.Type::ServiceProcessPDFFile:
          ServiceProcessPDFFile;

        DCTest.Type::ServiceDownloadFromEmail:
          ServiceDownloadFromEmail;

        DCTest.Type::PurchApprovalSetup:
          PurchApprovalSetup;

        DCTest.Type::NAVSendEMail:
          NAVSendEMail;
      END;

      CLEAR(FileSystem);
    END;

    PROCEDURE TestGeneralConfig@161024017();
    VAR
      DocCat@161024012 : Record 6085575;
      Template@161024013 : Record 6085579;
      TestMessage@161024015 : Record 6085755;
      CaptureRTCLib@161024014 : Codeunit 6085660;
    BEGIN
      TestMessage.DELETEALL;

      IF NOT IsDCCompInstalled THEN BEGIN
        Log(Text001,DCTest.Result::Failed);
        EXIT;
      END;

      IF NOT DCSetup.GET THEN BEGIN
        Log(STRSUBSTNO(Text009,DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;


      IF DocCat.FINDFIRST THEN BEGIN
        REPEAT
          Template.SETRANGE("Category Code",DocCat.Code);
          Template.SETRANGE("Source Sub Type",Template."Source Sub Type"::Identification);
          IF Template.ISEMPTY THEN
            Log(STRSUBSTNO(Text011,DocCat.TABLECAPTION,DocCat.Code),DCTest.Result::Warning);

          Template.SETRANGE("Source Sub Type",Template."Source Sub Type"::Master);
          IF Template.ISEMPTY THEN
            Log(STRSUBSTNO(Text012,DocCat.TABLECAPTION,DocCat.Code),DCTest.Result::Warning);
        UNTIL DocCat.NEXT = 0;
      END ELSE BEGIN
        Log(STRSUBSTNO(Text010,DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      CaptureRTCLib.CreateClientAddInEntries;

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE TestServiceIsRunning@161024014();
    VAR
      DocCat@161024012 : Record 6085575;
      XmlLib@161024022 : Codeunit 6085573;
      XmlDoc@161024023 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      TheFile@161024014 : File;
      SubDir@161024013 : Text[50];
      Path@161024015 : Text[1024];
      DirToTest@161024017 : ARRAY [1000,2] OF Text[1024];
      ArchiveFilename@161024018 : Text[1024];
      EndTime@161024020 : Time;
      NoOfDirs@161024024 : Integer;
      i@161024021 : Integer;
      NoOfServerResponses@161024019 : Integer;
      Failed@161024016 : Boolean;
    BEGIN
      DCSetup.GET;

      WITH DCSetup DO BEGIN
        // Test that general working directories exists
        TestFilePath("Scanned File Path for OCR",FIELDCAPTION("Scanned File Path for OCR"),TABLECAPTION);
        TestFilePath("PDF File Path for OCR",FIELDCAPTION("PDF File Path for OCR"),TABLECAPTION);
        TestFilePath("File Path for OCR-proc. files",FIELDCAPTION("File Path for OCR-proc. files"),TABLECAPTION);
        IF "TIFF Storage Type" = "TIFF Storage Type"::"Disk File" THEN
          TestFilePath("TIFF File Path",FIELDCAPTION("TIFF File Path"),TABLECAPTION);
        IF "PDF Storage Type" = "PDF Storage Type"::"Disk File" THEN
          TestFilePath("PDF File Path",FIELDCAPTION("PDF File Path"),TABLECAPTION);

        IF DCTest.Result <> DCTest.Result::" " THEN
          EXIT;

        // Test write permissions to archive directories
        TestFilePathWritePerm("Scanned File Path for OCR");
        TestFilePathWritePerm("PDF File Path for OCR");

        IF "TIFF Storage Type" = "TIFF Storage Type"::"Disk File" THEN
          TestFilePathWritePerm("TIFF File Path");

        IF "PDF Storage Type" = "PDF Storage Type"::"Disk File" THEN
          TestFilePathWritePerm("PDF File Path");
      END;

      // Export configuration files for each Document Category
      IF DocCat.FINDFIRST THEN
        REPEAT
          IF DCSetup."Company Code" <> '' THEN
            SubDir := STRSUBSTNO(Text006,DCSetup."Company Code",DocCat.Code)
          ELSE
            SubDir := DocCat.Code;

          IF DocCat."Process Scanned Files" THEN BEGIN
            Failed := FALSE;
            Path := DCSetup."Scanned File Path for OCR" + '\' + SubDir;

            IF NOT FileSystem.DirectoryExists(Path) THEN BEGIN
              IF NOT FileSystem.CreateDirectory(Path) THEN BEGIN
                Log(STRSUBSTNO(Text007,Path),DCTest.Result::Failed);
                Failed := TRUE;
              END;
            END;

            IF NOT Failed THEN BEGIN
              IF TestFilePathWritePerm(Path) THEN BEGIN
                IF DCTest."Export Config. Files" THEN BEGIN
                  IF FILE.EXISTS(Path + '\config.xml') THEN BEGIN
                    IF NOT FILE.ERASE(Path + '\config.xml') THEN BEGIN
                      Log(STRSUBSTNO(Text008,Path + '\config.xml'),DCTest.Result::Failed);
                      Failed := TRUE;
                    END;
                  END;

                  IF NOT Failed THEN BEGIN
                    DocCat."Process PDF Files" := FALSE;
                    DocCat.ExportOCRConfig;
                    DocCat.FIND('=');

                    NoOfDirs := NoOfDirs + 1;
                    DirToTest[NoOfDirs,1] := Path;
                    DirToTest[NoOfDirs,2] := DocCat.Code;
                  END;
                END;
              END;
            END;
          END;



          IF DocCat."Process PDF Files" THEN BEGIN
            Failed := FALSE;
            Path := DCSetup."PDF File Path for OCR" + '\' + SubDir;

            IF NOT FileSystem.DirectoryExists(Path) THEN BEGIN
              IF NOT FileSystem.CreateDirectory(Path) THEN BEGIN
                Log(STRSUBSTNO(Text007,Path),DCTest.Result::Failed);
                Failed := TRUE;
              END;
            END;

            IF NOT Failed THEN BEGIN
              IF TestFilePathWritePerm(Path) THEN BEGIN
                IF DCTest."Export Config. Files" THEN BEGIN
                  IF FILE.EXISTS(Path + '\config.xml') THEN BEGIN
                    IF NOT FILE.ERASE(Path + '\config.xml') THEN BEGIN
                      Log(STRSUBSTNO(Text008,Path + '\config.xml'),DCTest.Result::Failed);
                      Failed := TRUE;
                    END;
                  END;

                  IF NOT Failed THEN BEGIN
                    DocCat."Process Scanned Files" := FALSE;
                    DocCat.ExportOCRConfig;
                    DocCat.FIND('=');

                    NoOfDirs := NoOfDirs + 1;
                    DirToTest[NoOfDirs,1] := Path;
                    DirToTest[NoOfDirs,2] := DocCat.Code;
                  END;
                END;
              END;
            END;
          END;
        UNTIL DocCat.NEXT = 0;

      IF DCTest.Result <> DCTest.Result::" " THEN
        EXIT;

      // Create test file to send to the server
      XmlLib.CreateUTF8XmlDOM(XmlDoc,'root');
      XmlLib.AppendXmlNode(XmlDoc.documentElement,'Action','TestFileSystemPermissions');

      // If any communication files exists from a previous test, then delete these files
      FOR i := 1 TO NoOfDirs DO BEGIN
        IF FILE.EXISTS(DirToTest[i,1] + '\client2server.dctest.xml') THEN
          IF FILE.ERASE(DirToTest[i,1] + '\client2server.dctest.xml') THEN;

        IF FILE.EXISTS(DirToTest[i,1] + '\server2client.dctest.xml') THEN
          IF FILE.ERASE(DirToTest[i,1] + '\server2client.dctest.xml') THEN;
      END;

      // Send test file to server
      FOR i := 1 TO NoOfDirs DO
        XmlDoc.save(DirToTest[i,1] + '\client2server.dctest.xml');

      EndTime := TIME + 30000; // 30 seconds
      REPEAT
        FOR i := 1 TO NoOfDirs DO BEGIN
          // If the server have responsed
          IF FILE.EXISTS(DirToTest[i,1] + '\server2client.dctest.xml') THEN BEGIN
            NoOfServerResponses := NoOfServerResponses + 1;

            FILE.ERASE(DirToTest[i,1] + '\server2client.dctest.xml');

            IF DCSetup."Company Code" <> '' THEN
              SubDir := STRSUBSTNO(Text006,DCSetup."Company Code",DirToTest[i,2])
            ELSE
              SubDir := DirToTest[i,2];
            IF FILE.EXISTS(DCSetup."File Path for OCR-proc. files" + '\' + SubDir + '\serverwritetest.dctest') THEN BEGIN
              IF NOT FILE.ERASE(DCSetup."File Path for OCR-proc. files" + '\' + SubDir + '\serverwritetest.dctest') THEN
                Log(STRSUBSTNO(Text004,DCSetup."File Path for OCR-proc. files" + '\' + SubDir),DCTest.Result::Failed);
            END;
          END;
        END;
        SLEEP(10);
      UNTIL (TIME > EndTime) OR (NoOfServerResponses = NoOfDirs);

      // If any communication files exists from a previous test, then delete these files
      FOR i := 1 TO NoOfDirs DO BEGIN
        IF FILE.EXISTS(DirToTest[i,1] + '\client2server.dctest.xml') THEN
          IF FILE.ERASE(DirToTest[i,1] + '\client2server.dctest.xml') THEN;
      END;

      IF NoOfServerResponses = 0 THEN
        Log(STRSUBSTNO(Text013,DCSetup.TABLECAPTION),DCTest.Result::Failed);

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE ServiceProcessPDFFile@161024018();
    VAR
      DocCat@161024013 : Record 6085575;
      Files@161024018 : Record 2000000022;
      ExcludeFiles@161024019 : TEMPORARY Record 2000000022;
      XmlDoc@161024023 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      PagesNodeList@161024022 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      PageNode@161024021 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      SubDir@161024014 : Code[50];
      Path@161024016 : Text[1024];
      NewFilename@161024017 : Text[50];
      OrgFilename@161024024 : Text[1024];
      EndTime@161024020 : Time;
      FileProcessed@161024015 : Boolean;
    BEGIN
      DCSetup.GET;

      IF DocCat.FINDFIRST THEN
        REPEAT
          IF DCSetup."Company Code" <> '' THEN
            SubDir := STRSUBSTNO(Text006,DCSetup."Company Code",DocCat.Code)
          ELSE
            SubDir := DocCat.Code;

          IF DocCat."Process PDF Files" THEN BEGIN
            Path := DCSetup."PDF File Path for OCR" + '\' + SubDir;

            IF FILE.EXISTS(Path + '\config.xml') THEN BEGIN
              NewFilename := CREATEGUID;
              NewFilename := COPYSTR(NewFilename,2,STRLEN(NewFilename) - 2) + '.dctest.pdf';

              Files.SETRANGE(Path,DCSetup."File Path for OCR-proc. files" + '\' + SubDir);
              Files.SETRANGE("Is a file",TRUE);
              Files.SETFILTER(Name,'*.xml');
              IF Files.FINDFIRST THEN
                REPEAT
                  ExcludeFiles := Files;
                  ExcludeFiles.INSERT;
                UNTIL Files.NEXT = 0;


              FILE.COPY(DCTest."Test PDF Filename",Path + '\' + NewFilename);

              EndTime := TIME + 30000; // 30 seconds
              REPEAT
                IF Files.FINDFIRST THEN
                  REPEAT
                    IF NOT ExcludeFiles.GET(Files.Path,Files."Is a file",Files.Name) THEN BEGIN
                      CREATE(XmlDoc);
                      XmlDoc.load(Files.Path + '\' + Files.Name);
                      OrgFilename := XmlDoc.selectSingleNode('/Document/Pages/Page[1]/OriginalFilename').text;
                      CLEAR(XmlDoc);

                      IF OrgFilename = NewFilename THEN BEGIN
                        FileProcessed := TRUE;
                        FILE.ERASE(Files.Path + '\' + Files.Name);
                        FILE.ERASE(Files.Path + '\' + COPYSTR(Files.Name,1,STRLEN(Files.Name) - 3) + 'pdf');
                        FILE.ERASE(Files.Path + '\' + COPYSTR(Files.Name,1,STRLEN(Files.Name) - 3) + 'tiff');
                      END;
                    END;
                  UNTIL Files.NEXT = 0;

                Files.SETRANGE(Path,'C:\');
                IF Files.FINDFIRST THEN;
                Files.SETRANGE(Path,DCSetup."File Path for OCR-proc. files" + '\' + SubDir);
                SLEEP(10);
              UNTIL (TIME > EndTime) OR FileProcessed;

              IF NOT FileProcessed THEN BEGIN
                IF FILE.ERASE(Path + '\' + NewFilename) THEN;
                Log(Text014,DCTest.Result::Failed);
              END;

              FileProcessed := TRUE;
            END;
          END;
        UNTIL (DocCat.NEXT = 0) OR (FileProcessed);

      IF NOT FileProcessed THEN
        Log(Text014,DCTest.Result::Failed);

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE ServiceDownloadFromEmail@161024019();
    VAR
      DocCat@161024014 : Record 6085575;
      ConnEndpoint@161024022 : Record 6085620;
      XmlLib@161024013 : Codeunit 6085573;
      XmlDoc@161024012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      SubDir@161024015 : Code[50];
      DirToTest@161024016 : ARRAY [1000,2] OF Text[1024];
      ServerResponse@161024021 : Code[250];
      NoOfDirs@161024017 : Integer;
      NoOfServerResponses@161024019 : Integer;
      i@161024020 : Integer;
      EndTime@161024018 : Time;
    BEGIN
      DCSetup.GET;

      XmlLib.CreateUTF8XmlDOM(XmlDoc,'root');
      XmlLib.AppendXmlNode(XmlDoc.documentElement,'Action','TestIMAPDownload');

      DocCat.SETFILTER("E-mail Connection Endpoint",'<>%1','');
      IF DocCat.FINDFIRST THEN
        REPEAT
          IF DCSetup."Company Code" <> '' THEN
            SubDir := STRSUBSTNO(Text006,DCSetup."Company Code",DocCat.Code)
          ELSE
            SubDir := DocCat.Code;

          NoOfDirs := NoOfDirs + 1;
          DirToTest[NoOfDirs,1] := DCSetup."PDF File Path for OCR" + '\' + SubDir;
          DirToTest[NoOfDirs,2] := DocCat.Code;

          XmlDoc.save(DirToTest[NoOfDirs,1] + '\client2server.dctest.xml');
        UNTIL DocCat.NEXT = 0;


      EndTime := TIME + 30000; // 30 seconds
      REPEAT
        FOR i := 1 TO NoOfDirs DO BEGIN
          // If the server have responsed
          IF FILE.EXISTS(DirToTest[i,1] + '\server2client.dctest.xml') THEN BEGIN
            NoOfServerResponses := NoOfServerResponses + 1;

            XmlDoc.load(DirToTest[i,1] + '\server2client.dctest.xml');
            ServerResponse := XmlDoc.selectSingleNode('/Document/result').text;

            IF ServerResponse <> 'IMAP OK' THEN BEGIN
              DocCat.GET(DirToTest[i,2]);
              ConnEndpoint.GET(DocCat."E-mail Connection Endpoint");
              CASE ServerResponse OF
                'IMAP CONNECTION FAILED':
                  Log(STRSUBSTNO(Text015,ConnEndpoint."Server Address",ConnEndpoint.TABLECAPTION,ConnEndpoint.Code),
                    DCTest.Result::Failed);
                'IMAP LOGIN FAILED':
                  Log(STRSUBSTNO(Text016,ConnEndpoint."Server Address",ConnEndpoint.TABLECAPTION,ConnEndpoint.Code),
                    DCTest.Result::Failed);
                'IMAP UNABLE TO OPEN INBOX':
                  Log(STRSUBSTNO(Text017,ConnEndpoint."Server Address",ConnEndpoint.TABLECAPTION,ConnEndpoint.Code),
                    DCTest.Result::Failed);
              END;
            END;

            FILE.ERASE(DirToTest[i,1] + '\server2client.dctest.xml');
          END;
        END;
        SLEEP(10);
      UNTIL (TIME > EndTime) OR (NoOfServerResponses = NoOfDirs);

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE PurchApprovalSetup@161024021();
    VAR
      ApprovalTempl@161024012 : Record 464;
      UserSetup@161024013 : Record 91;
      WebUser@161024014 : Record 6086001;
    BEGIN
      DCSetup.GET;

      ApprovalTempl.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalTempl.SETRANGE(Enabled,TRUE);
      ApprovalTempl.SETRANGE("Document Type",ApprovalTempl."Document Type"::Invoice);
      IF NOT ApprovalTempl.FINDFIRST THEN BEGIN
        ApprovalTempl."Document Type" := ApprovalTempl."Document Type"::Invoice;
        Log(STRSUBSTNO(Text018,ApprovalTempl.TABLECAPTION,ApprovalTempl.FIELDCAPTION("Document Type"),
          ApprovalTempl."Document Type"),DCTest.Result::Warning);
      END;

      ApprovalTempl.SETRANGE("Document Type",ApprovalTempl."Document Type"::"Credit Memo");
      IF NOT ApprovalTempl.FINDFIRST THEN BEGIN
        ApprovalTempl."Document Type" := ApprovalTempl."Document Type"::"Credit Memo";
        Log(STRSUBSTNO(Text018,ApprovalTempl.TABLECAPTION,ApprovalTempl.FIELDCAPTION("Document Type"),
          ApprovalTempl."Document Type"),DCTest.Result::Warning);
      END;

      DCSetup.CALCFIELDS("Purch: Approval Template");
      IF NOT DCSetup."Purch: Approval Template".HASVALUE THEN
        Log(STRSUBSTNO(Text020,DCSetup.FIELDCAPTION("Purch: Approval Template"),DCSetup.TABLECAPTION),DCTest.Result::Warning);

      UserSetup.SETFILTER("Approver ID",'<>%1','');
      IF UserSetup.ISEMPTY THEN
        Log(STRSUBSTNO(Text021,UserSetup.TABLECAPTION,UserSetup.FIELDCAPTION("Purchase Amount Approval Limit")),DCTest.Result::Warning);

      IF UserSetup.FINDSET THEN
        REPEAT
          IF (UserSetup."Purchase Amount Approval Limit" = 0) AND (NOT UserSetup."Unlimited Purchase Approval") THEN
            Log(STRSUBSTNO(Text022,UserSetup."User ID",UserSetup.FIELDCAPTION("Purchase Amount Approval Limit"),
              UserSetup.FIELDCAPTION("Unlimited Purchase Approval")),DCTest.Result::Warning)
          ELSE BEGIN
            IF UserSetup."Salespers./Purch. Code" = '' THEN
              Log(STRSUBSTNO(Text023,UserSetup.FIELDCAPTION("Salespers./Purch. Code"),UserSetup.TABLECAPTION,
                UserSetup.FIELDCAPTION("User ID"),UserSetup."User ID"),DCTest.Result::Warning);

            IF UserSetup."E-Mail" = '' THEN
              Log(STRSUBSTNO(Text023,UserSetup.FIELDCAPTION("E-Mail"),UserSetup.TABLECAPTION,
                UserSetup.FIELDCAPTION("User ID"),UserSetup."User ID"),DCTest.Result::Warning);
          END;
        UNTIL UserSetup.NEXT = 0;

      IF DCSetup."Enable Web Approval" THEN BEGIN
        IF WebUser.ISEMPTY THEN
          Log(STRSUBSTNO(Text024,WebUser.TABLECAPTION),DCTest.Result::Warning);

        IF WebUser.FINDSET THEN
          REPEAT
            IF WebUser."G/L Account List Code" = '' THEN
              Log(STRSUBSTNO(Text023,WebUser.FIELDCAPTION("G/L Account List Code"),WebUser.TABLECAPTION,
                WebUser.FIELDCAPTION("User ID"),WebUser."User ID"),DCTest.Result::Warning);
          UNTIL WebUser.NEXT = 0;
      END;

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE NAVSendEMail@161024022();
    VAR
      SMTPMailSetup@161024013 : Record 409;
      DCTest2@161024016 : Record 6085754;
      TestMessage@161024017 : Record 6085755;
      UserSetup@161024018 : Record 91;
      PurchEMail@161024014 : Codeunit 6085712;
      Mail@161024012 : Codeunit 6085598;
      HTML@161024015 : Codeunit 6085587;
    BEGIN
      DCSetup.GET;
      IF DCSetup."Sender E-mail" = '' THEN BEGIN
        Log(STRSUBSTNO(Text002,DCSetup.FIELDCAPTION("Sender E-mail"),DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      IF DCSetup."Sender Name" = '' THEN BEGIN
        Log(STRSUBSTNO(Text002,DCSetup.FIELDCAPTION("Sender Name"),DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      IF DCSetup."Purch: Approval E-mail Subject" = '' THEN BEGIN
        Log(STRSUBSTNO(Text002,DCSetup.FIELDCAPTION("Purch: Approval E-mail Subject"),DCSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      SMTPMailSetup.GET;
      IF SMTPMailSetup."SMTP Server" = '' THEN BEGIN
        Log(STRSUBSTNO(Text002,SMTPMailSetup.FIELDCAPTION("SMTP Server"),SMTPMailSetup.TABLECAPTION),DCTest.Result::Failed);
        EXIT;
      END;

      HTML.Append(Text050);
      DCTest2.SETFILTER(Type,'<>%1',DCTest2.Type::NAVSendEMail);
      DCTest2.FINDSET;
      REPEAT
        HTML.Append(STRSUBSTNO('<br /><b>%1: %2</b><br />',DCTest2.Type,DCTest2.Result));
        TestMessage.SETRANGE("Test Type",DCTest2.Type);
        IF TestMessage.FINDSET THEN
          REPEAT
            HTML.Append(TestMessage.Message + '<br />');
          UNTIL TestMessage.NEXT = 0;
      UNTIL DCTest2.NEXT = 0;

      HTML.Append(Text051);
      UserSetup."E-Mail" := DCTest."E-mail Address";
      PurchEMail.SetupMail(Mail,UserSetup,Text025 + ' - ' + COMPANYNAME);
      Mail.SetBodyFromBigStringMgnt(HTML);
      IF NOT Mail.Send THEN BEGIN
        IF SMTPMailSetup."SMTP Server" = '' THEN BEGIN
          Log(Text026,DCTest.Result::Failed);
          COMMIT;
        END;

        ERROR(Mail.GetLastError);
      END;

      CLEAR(HTML);
      CLEAR(Mail);

      IF DCTest.Result = DCTest.Result::" " THEN BEGIN
        DCTest.Result := DCTest.Result::Passed;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE TestFilePath@161024016(VAR Path@161024012 : Text[250];FieldCaption@161024014 : Text[80];TableCaption@161024015 : Text[80]) : Boolean;
    VAR
      Failed@161024016 : Boolean;
    BEGIN
      IF Path = '' THEN BEGIN
        Log(STRSUBSTNO(Text002,FieldCaption,TableCaption),DCTest.Result::Failed);
        EXIT;
      END;

      IF NOT FileSystem.DirectoryExists(Path) THEN BEGIN
        Log(STRSUBSTNO(Text003,FieldCaption,TableCaption),DCTest.Result::Failed);
        EXIT;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TestFilePathWritePerm@161024020(VAR Path@161024012 : Text[250]) : Boolean;
    VAR
      Failed@161024016 : Boolean;
      TheFile@161024017 : File;
    BEGIN
      IF NOT TheFile.CREATE(Path + '\test.dctest.tmp') THEN BEGIN
        Log(STRSUBSTNO(Text004,Path),DCTest.Result::Failed);
        EXIT;
      END ELSE BEGIN
        TheFile.CLOSE;

        IF NOT FILE.ERASE(Path + '\test.dctest.tmp') THEN BEGIN
          Log(STRSUBSTNO(Text005,Path),DCTest.Result::Failed);
          EXIT;
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE IsDCCompInstalled@161024013() : Boolean;
    VAR
      Date@161024012 : Automation "{D1D0B2AB-A006-4BA8-8CC8-6129957BF40A} 1.0:{51223558-9319-3B7B-9B38-DB9DEB6FFF80}:'Continia Document Capture for Dynamics NAV - Common Library'.Date";
    BEGIN
      IF CREATE(Date) THEN BEGIN
        CLEAR(Date);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE Log@161024015(Text@161024013 : Text[250];Result@161024014 : Option);
    VAR
      DCTestMsg@161024012 : Record 6085755;
    BEGIN
      DCTestMsg."Test Type" := DCTest.Type;
      DCTestMsg.Message := Text;
      DCTestMsg.INSERT(TRUE);

      IF Result <> -1 THEN BEGIN
        DCTest.Result := Result;
        DCTest.MODIFY;
      END;
    END;

    PROCEDURE InitTestTable@161024023();
    BEGIN
      DCTest.Type := DCTest.Type::GeneralConfiguration;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::ServiceIsRunning;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::ServiceProcessPDFFile;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::ServiceDownloadFromEmail;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::PurchApprovalSetup;
      IF NOT DCTest.INSERT THEN;

      DCTest.Type := DCTest.Type::NAVSendEMail;
      IF NOT DCTest.INSERT THEN;
    END;

    BEGIN
    END.
  }
}

