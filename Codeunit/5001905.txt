OBJECT Codeunit 5001905 AZV
{
  OBJECT-PROPERTIES
  {
    Date=09.10.09;
    Time=12:00:00;
    Version List=AR6.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 5001901=rm,
                TableData 5001902=rim,
                TableData 5001903=rm,
                TableData 5001904=rimd,
                TableData 5001941=rim,
                TableData 5001948=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text1105400000@1105400000 : TextConst 'DEU=Kann Datei nicht erstellen;ENU=Unable to create file';
      Text1105400001@1105400001 : TextConst 'DEU=Kann Datei nicht îffnen;ENU=Unable to open file';
      Text1105400002@1105400002 : TextConst 'DEU=BLZ bei der Bank %1 darf nicht leer sein;ENU=Bank Branch No. of Bank %1 must not be empty';
      Text1105400003@1105400003 : TextConst 'DEU=BLZ bei der Bank %1 mu· 8 Ziffern beinhalten;ENU=Bank Branch No. of Bank %1 must have 8 numbers';
      Text1105400004@1105400004 : TextConst 'DEU="""Bankkontonummer"" bei der Bank %1 darf nicht leer sein";ENU=Bank Accountno of Bank %1 must not be empty';
      Text1105400005@1105400005 : TextConst 'DEU="""Bankkontonummer"" bei der Bank %1 darf nicht mehr als 10 Ziffern beinhalten";ENU=Bank Accountno of Bank %1 must not be longer than 10 characters';
      Text1105400006@1105400006 : TextConst 'DEU=" Bei der Auslandszahlung %1 fÅr den Kreditor Nr %2 \";ENU=" There is no bank declared for vendor %2 %3\"';
      Text1105400007@1105400007 : TextConst 'DEU=" %3, wurde keine Bank angegeben ";ENU=" for foreign payment %1 "';
      Text1105400008@1105400008 : TextConst 'DEU=BLZ auf Kreditor %1 bei der Bank %2\;ENU=Bank BranchNo. of vendor %1 and bank %2\';
      Text1105400009@1105400009 : TextConst 'DEU=darf nicht leer sein;ENU=must not be empty';
      Text1105400010@1105400010 : TextConst 'DEU=muss 8 Ziffern beinhalten.;ENU=must have 8 Figures.';
      Text1105400011@1105400011 : TextConst 'DEU=" BLZ oder SWIFT-Adresse auf Kreditor %1 bei der Bank %2\";ENU=" Bank Branch No. oder SWIFT Addess for Vendor %1"';
      Text1105400012@1105400012 : TextConst 'DEU=" dÅrfen nicht leer sein.";ENU=" and bank %2 must not be empty."';
      Text1105400013@1105400013 : TextConst 'DEU=Bankkonto auf Kreditor %1 bei der Bank %2\;ENU=Bankaccountno. of vendor %1 and bank %2\';
      Text1105400014@1105400014 : TextConst 'DEU=Wenn Swift-Adresse nicht gefÅllt, mu· BanklÑnderschlÅssel angegeben werden.;ENU="If Swift-Address is empty, then you have to declare a Bank Country Code. "';
      Text1105400015@1105400015 : TextConst 'DEU=Wenn Swift-Adresse nicht gefÅllt, mu· Bankanschrift angegeben werden.;ENU="If Swift-Address is empty, you have to declare a Bank Address "';
      Text1105400016@1105400016 : TextConst 'DEU=Q;ENU=Q';
      Text1105400017@1105400017 : TextConst 'DEU=<year,2><month,2><day,2>;ENU=<year,2><month,2><day,2>';
      Text1105400018@1105400018 : TextConst 'DEU=Z;ENU=Z';
      Text1105400019@1105400019 : TextConst 'DEU=X;ENU=X';
      Text1105400020@1105400020 : TextConst 'DEU="AVIS FROM ";ENU="AVIS FROM "';
      Text1105400021@1105400021 : TextConst 'DEU=<day,2>.<month,2>,<year,2>;ENU=<day,2>.<month,2>,<year,2>';
      Text1105400022@1105400022 : TextConst 'DEU=T;ENU=T';
      Text1105400023@1105400023 : TextConst 'DEU=0256U;ENU=0256U';
      Text1105400024@1105400024 : TextConst 'DEU=<year,2><month,2>;ENU=<year,2><month,2>';
      Text1105400025@1105400025 : TextConst 'DEU=0256V;ENU=0256V';
      Text1105400026@1105400026 : TextConst 'DEU=<TEXT>;ENU=<TEXT>';
      Text1105400027@1105400027 : TextConst 'DEU=0256W;ENU=0256W';
      Text1105400028@1105400028 : TextConst 'DEU=<Number>;ENU=<Number>';
      Text1105400029@1105400029 : TextConst 'DEU=Zahlungsdatei %1 ist fÅr dieses Bankkonto bereits vorhanden.;ENU=Paymentfile %1 already exists for this Bank';
      Text1105400030@1105400030 : TextConst 'DEU=" Die Zahlungslauf %1 wurde annuliert ";ENU=" Paymentfile %1 voided "';
      Text1105400031@1105400031 : TextConst 'DEU=Zahlungslauf %1 wird annulliert.;ENU=Paymentfile %1 becomes voided.';
      Text1105400032@1105400032 : TextConst 'DEU=SS;ENU=SS';
      Text1105400033@1105400033 : TextConst 'DEU=AE;ENU=AE';
      Text1105400034@1105400034 : TextConst 'DEU=OE;ENU=OE';
      Text1105400035@1105400035 : TextConst 'DEU=UE;ENU=UE';
      Text1105400036@1105400036 : TextConst 'DEU=" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.,&-+*%/$";ENU=" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.,&-+*%/$"';
      Text1105400037@1105400037 : TextConst 'DEU=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.,&-+*%/$;ENU=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.,&-+*%/$';
      Text1105400038@1105400038 : TextConst 'DEU=Es gibt weitere Daten auf dem DatentrÑger. %1 \;ENU=There are any data on Drive %1 \';
      Text1105400039@1105400039 : TextConst 'DEU=Wollen Sie einen anderen DatentrÑger fÅr das Clearing verwenden ?;ENU=Do you want to change disk for clearing ?';
      Text1105400040@1105400040 : TextConst 'DEU=C:\;ENU=C:\';
      CompanyInfo@1105400041 : Record 79;
      PaymentSetup@1105400042 : Record 5001901;
      SourceCodeSetup@1105400043 : Record 242;
      Vendor@1105400044 : Record 23;
      VendBankAcc@1105400045 : Record 288;
      GenJnlLine@1105400046 : Record 81;
      BankAccount@1105400047 : Record 270;
      BankAccount2@1105400048 : Record 270;
      PaymLedgEntry@1105400049 : Record 5001902;
      PaymLedgEntry2@1105400050 : Record 5001902;
      PaymLine@1105400051 : Record 5001903;
      GLSetup@1105400052 : Record 98;
      Files@1105400053 : Record 2000000022;
      AZV@1105400054 : Record 5001940;
      RegistrationSet@1105400055 : Record 5001942;
      PostedAZV@1105400056 : Record 5001947;
      PostRegistrationSet@1105400057 : Record 5001948;
      BankCountries@1105400058 : Record 5001943;
      Country@1105400059 : Record 9;
      PaymentCode@1105400060 : Record 5001945;
      ForeignPaymentEntry@1105400061 : Record 5001941;
      FormatAddr@1105400062 : Codeunit 365;
      GenJnlPostLine@1105400063 : Codeunit 12;
      Clearing@1105400125 : Codeunit 5001901;
      CurrencyExchRate@1105400064 : Record 330;
      Exportfile@1105400065 : File;
      Amount@1105400066 : Decimal;
      TotalAmount@1105400067 : Decimal;
      Total@1105400068 : Decimal;
      NextPaymLedgEntryNo@1105400069 : Integer;
      NoOfRecordsT@1105400070 : Integer;
      RecordLength@1105400071 : Integer;
      Length@1105400072 : Integer;
      CharacterCounter@1105400073 : Integer;
      NoOfCharacter@1105400074 : Integer;
      I@1105400075 : Integer;
      String@1105400076 : Integer;
      BankCodeBank@1105400077 : Code[30];
      AccountBank@1105400078 : Code[35];
      Instruction@1105400079 : ARRAY [4] OF Code[2];
      NameOfCompany@1105400080 : Code[30];
      Dtaus@1105400081 : Code[260];
      RecordType@1105400082 : Code[1];
      AddCurrency@1105400083 : Code[10];
      CreditAmount@1105400084 : Text[14];
      CreditDec@1105400085 : Text[3];
      "Bank Code"@1105400086 : Text[30];
      Account@1105400087 : Text[35];
      DocumentType@1105400088 : Text[20];
      AddrArray@1105400089 : ARRAY [8] OF Text[90];
      Filename@1105400090 : Text[12];
      Z@1105400091 : Text[250];
      BankCodeRec3@1105400092 : Text[8];
      BankCodeRec2@1105400093 : Text[11];
      BankCodeRec@1105400094 : Text[8];
      AccountRec3@1105400095 : Text[35];
      AccountRec2@1105400096 : Text[35];
      RecordAccount@1105400097 : Text[35];
      CharacterText@1105400098 : Text[1];
      AccoutName@1105400099 : Text[30];
      CurrencySym@1105400100 : Text[1];
      Bankaddress@1105400101 : ARRAY [4] OF Text[50];
      VendBankCountry@1105400102 : Text[3];
      VendCountry@1105400103 : Text[3];
      Transit@1105400104 : Text[102];
      VendAddress@1105400105 : ARRAY [4] OF Text[50];
      OrderNote@1105400106 : ARRAY [2] OF Text[35];
      Purposal@1105400107 : ARRAY [4] OF Text[35];
      Contact@1105400108 : Text[35];
      KVS@1105400109 : Text[2];
      SumInfInstr@1105400110 : Text[25];
      WS@1105400111 : ARRAY [4] OF Text[2];
      CheckRec@1105400112 : Text[140];
      DocumentText@1105400113 : ARRAY [6] OF Text[70];
      AvisLetter@1105400114 : Boolean;
      Check@1105400115 : Boolean;
      Notification@1105400116 : Text[1];
      Selection@1105400117 : Integer;
      Window@1105400118 : Dialog;
      MAmount@1105400119 : Decimal;
      Text1105400127@1105400127 : TextConst 'DEU=BanklÑnderschlÅssel %1 darf nur Alpha-Zeichen beinhalten;ENU=Bank Country Code must be only Alpah-Characters';
      Text1105400128@1105400128 : TextConst 'DEU=Die Verarbeitung wurde unterbrochen, um die Warnung zu berÅcksichtigen.;ENU=The update has been interrupted to respect the warning.';
      Text1105400129@1105400129 : TextConst 'DEU=Der BanklÑndercode %1 muss 2 Stellen lang sein';
      Text1105400200@1105400200 : TextConst 'DEU=%1 darf nicht leer sein \in %2 von %3 %4;ENU=%1 must not be empty \in %2 of %3 %4';
      Text1105400201@1105400201 : TextConst 'DEU=%1 von %2 %3 %4 darf nicht leer sein.;ENU=%1 of %2 %3 %4 must not be empty.';
      Text1105400210@1105400120 : TextConst 'DEU=FÅr Kreditor %1 wurde in Buchblattzeile %2 kein\Auslandszusatz gefunden;ENU=There are not any foreign payment infomation\for vendor %1 in Post.-Line %2';
      Text1105400212@1105400123 : TextConst 'DEU=Beim Auslandszusatz fÅr den Kreditor Nr %1 %2,\wurde keine Bank fÅr Ausgleich %3 %4 angegeben;ENU=There is no bank declared for vendor %1 %2\for foreign payment %3 %4';
      Text1105400213@1105400122 : TextConst 'DEU="""Bankkundennummer"" bei der Bank %1 darf nicht mehr als 8 Ziffern beinhalten";ENU=Customernumber of Bank %1 must not be longer than 8 characters';
      Text1105400214@1105400124 : TextConst 'DEU="""Bankkundennummer"" bei der Bank %1 muss numerisch sein";ENU=Customernumber of Bank %1 must be Integer';
      Text1105400126@1105400126 : TextConst 'DEU=Beim Kreditor %1 ist keine Bank zum Clearing gekennzeichnet;ENU=In Vendor %1 there is no bank marked for clearing.';
      Text1105400130@1105400130 : TextConst 'DEU=FÅr EU-Standard öberweisung sind nur BetrÑge bis %1 zulÑssig;ENU=For EU-Standard Transfer only amounts up to %1 are permissible';
      Text1105400131@1105400131 : TextConst 'DEU=Bei öberweisungen vom Typ %1 sind nur WeisungsschlÅssel 10,11 oder 12 zulÑssig\;ENU=With transfers of the type %1 only instruction keys 10.11 or 12 are permissible \';
      Text1105400132@1105400133 : TextConst 'DEU=IBAN Nr. auf Kreditor %1 bei der Bank %2\;ENU=IBAN Nr. of vendor %1 and bank %2\';
      Text1105400133@1105400132 : TextConst 'DEU=SWIFT-Code auf Kreditor %1 bei der Bank %2\;ENU=SWIFT-Code of vendor %1 and bank %2\';
      Text1105400134@1105400134 : TextConst 'DEU=EU-Standard und EU-EilÅberweisungen mÅssen gesondert eingereicht werden;ENU=EU-Standard and EU-Express transfers must be submitted separately';
      Text1105400135@1105400135 : TextConst 'DEU=%2:%3  - %4:%5 - %6:%7;ENU=%2:%3  - %4:%5 - %6:%7';
      GCurr@1000000000 : Code[3];
      Text1105400136@1000000001 : TextConst 'DEU=WÑhrungscode des mit Entgelt und Auslagen zu belastenden Kontos muss EUR sein.;ENU=Currency Code of the debit account for payments and expenses must be EUR.';
      CompanyNo@1105400121 : Code[8];
      Text1105400137@1105400137 : TextConst 'DEU=Firmennummer f. Bundesbank muss 8 Stellen betragen;ENU=Customerno of Bundesbank must be 8 characters';

    PROCEDURE "Open Exportfile"@1105400120(VAR Drive@1105400000 : Code[260];VAR Filename@1105400002 : Code[30];PaymNo@1105400001 : Record 5001902);
    BEGIN
      PaymentSetup.GET;
      Dtaus := Drive + Filename;

      Exportfile.WRITEMODE:=TRUE;
      Exportfile.TEXTMODE:=TRUE;

      IF NOT Exportfile.CREATE(Drive + Filename) THEN
        ERROR (Text1105400000);

      CompanyInfo.GET;
      NameOfCompany := CheckFormat(FORMAT(UPPERCASE(CompanyInfo.Name),27));
      FormatAddr.BankAcc(AddrArray,BankAccount);
    END;

    PROCEDURE FormatBankCode@1105400121(BankCode@1105400000 : Code[30]) : Text[30];
    VAR
      BankCodebank@1105400001 : Code[30];
    BEGIN
      CLEAR(BankCodebank);
      Length := STRLEN(BankCode);
      IF Length <> 0 THEN REPEAT
        CharacterCounter := CharacterCounter + 1;
        CharacterText   := COPYSTR(BankCode,CharacterCounter,1);
        Check := EVALUATE(NoOfCharacter,CharacterText);
        IF Check = TRUE THEN BankCodebank := BankCodebank + CharacterText;
      UNTIL CharacterCounter = Length;
      CLEAR(CharacterCounter);
      EXIT(BankCodebank);
    END;

    PROCEDURE FormatAccount@1105400122(Account@1105400000 : Code[30]) : Text[30];
    VAR
      Accountbank@1105400001 : Code[30];
    BEGIN
      CLEAR(Accountbank);
      Length := STRLEN(Account);
      CLEAR(CharacterCounter);
      IF Length <> 0 THEN REPEAT
        CharacterCounter := CharacterCounter + 1;
        CharacterText   := COPYSTR(Account,CharacterCounter,1);
        Check := EVALUATE(NoOfCharacter,CharacterText);
        IF Check = TRUE THEN Accountbank := Accountbank + CharacterText;
      UNTIL CharacterCounter = Length;
      CLEAR(CharacterCounter);
      EXIT(Accountbank);
    END;

    PROCEDURE NumToString@1105400123(Number@1105400001 : Text[30];Length@1105400002 : Integer;Filler@1105400003 : Text[1]) output@1105400000 : Text[20];
    VAR
      I@1105400004 : Integer;
      Character@1105400005 : Char;
    BEGIN
      FOR I := 1 TO Length DO BEGIN    // New Code for RTC-Workaround
        output[I] := Filler[1];
      END;
      FOR I := Length DOWNTO (Length + 1 - STRLEN(Number)) DO BEGIN
        Character := Number[STRLEN(Number)+I-Length];
        IF (48 <= Character) AND (Character <= 57) THEN BEGIN
          output[I] := Number[STRLEN(Number) + I - Length];
        END
        ELSE IF Character<>'.' THEN
          output[I] := Filler[1];
      END;
      output := COPYSTR(output,1,Length); // New Code for RTC-Workaround
    END;

    PROCEDURE FormatBankAcc@1105400124(PaymLedgEntry@1105400000 : Record 5001902);
    VAR
      SalesPurch@1105400001 : Record 13;
    BEGIN
      BankAccount.GET(PaymLedgEntry."Bank Account No.");
      IF BankAccount."Our Contact Code"<> '' THEN BEGIN
        SalesPurch.GET(BankAccount."Our Contact Code");
        Contact := CheckFormat(UPPERCASE(PADSTR(SalesPurch.Name,35,' ')))
      END ELSE
        Contact := PADSTR(' ',35,' ');

      "Bank Code" := BankAccount."Bank Branch No.";
      IF STRLEN("Bank Code") = 0 THEN
        ERROR(Text1105400002,BankAccount."No.");
      BankCodeBank := FormatBankCode("Bank Code");
      IF STRLEN(BankCodeBank) <> 8 THEN
        ERROR(Text1105400003,BankAccount."No.");
      BankCodeRec := BankCodeBank;
      Account := BankAccount."Bank Account No.";
      IF STRLEN(Account) = 0 THEN
        ERROR(Text1105400004,BankAccount."No.");

      IF (PaymLedgEntry."Account No. Charges"<>'') AND (PaymLedgEntry."Account No. Charges"<>PaymLedgEntry."Bank Account No.") THEN
      BEGIN
        BankAccount.GET(PaymLedgEntry."Account No. Charges");
        "Bank Code" := BankAccount."Bank Branch No.";
        IF STRLEN("Bank Code") = 0 THEN
          ERROR(Text1105400002,BankAccount."No.");
        BankCodeBank := FormatBankCode("Bank Code");
        IF STRLEN(BankCodeBank) <> 8 THEN
          ERROR(Text1105400003,BankAccount."No.");
        BankCodeRec3 := BankCodeBank;
        Account := BankAccount."Bank Account No.";
        IF STRLEN(Account) = 0 THEN
          ERROR(Text1105400004,BankAccount."No.");
        AccountBank := FormatAccount(Account);
        IF STRLEN(AccountBank) > 10 THEN
          ERROR(
             Text1105400005,BankAccount."No.");
        AccountRec3 := AccountBank;
      END ELSE BEGIN
        BankCodeRec3 := PADSTR('',8,'0');
        AccountRec3 := PADSTR('',10,'0');
      END;

      IF PaymLedgEntry."EU-Payment" > PaymLedgEntry."EU-Payment"::" " THEN BEGIN
        BankCodeRec3 := PADSTR('',8,'0');
        AccountRec3 := PADSTR('',10,'0');
      END;
    END;

    PROCEDURE VendBankFormat@1105400125(PaymLedgEntry@1105400000 : Record 5001902);
    BEGIN
      WITH PaymLedgEntry DO BEGIN

        IF Beneficiary <> '' THEN BEGIN
          Vendor.GET(Beneficiary);
          IF NOT VendBankAcc.GET(Beneficiary,"Vendor Bank Account") THEN
            ERROR (Text1105400006+
                   Text1105400007,AZV.Number,Vendor."No.",Vendor.Name);
        END ELSE BEGIN
          Vendor.GET("Bal. Account No.");
          IF NOT VendBankAcc.GET("Bal. Account No.","Vendor Bank Account") THEN
            ERROR (Text1105400006+
                   Text1105400007,AZV.Number,Vendor."No.",Vendor.Name);
        END;
        IF PaymLedgEntry."EU-Payment" > PaymLedgEntry."EU-Payment"::" " THEN
          CLEAR(Bankaddress)
        ELSE BEGIN
          Bankaddress[1] := CheckFormat(UPPERCASE(PostedAZV."Bank Name"));
          Bankaddress[2] := CheckFormat(UPPERCASE(PostedAZV."Bank Name 2"));
          Bankaddress[3] := CheckFormat(UPPERCASE(PostedAZV."Bank Street"));
          Bankaddress[4] := CheckFormat(UPPERCASE(PostedAZV."Bank City"));
        END;

        VendAddress[1] := CheckFormat(UPPERCASE(PostedAZV.Name));
        VendAddress[2] := CheckFormat(UPPERCASE(PostedAZV."Name 2"));
        VendAddress[3] := CheckFormat(UPPERCASE(PostedAZV.Street));
        VendAddress[4] := CheckFormat(UPPERCASE(PostedAZV.City));

        PostedAZV.TESTFIELD("Bank Country Code");
        Country.SETRANGE("Bank Country Code",PostedAZV."Bank Country Code");
        IF NOT Country.FINDFIRST THEN
          ERROR(Text1105400201,
            PostedAZV.FIELDCAPTION("Bank Country Code"),
            PostedAZV.TABLECAPTION,
            PostedAZV."Payment No.",
            PostedAZV."Bank Name");

        VendBankCountry := PostedAZV."Bank Country Code";

        IF PostedAZV."EU-Payment" > PostedAZV."EU-Payment"::" " THEN
          VendBankCountry := ''
        ELSE BEGIN
          IF DELCHR(PostedAZV."Bank Country Code",'=','ABCDEFGHIJKLMNOPQRSTUVWXYZ') <> '' THEN
            ERROR(Text1105400127,PostedAZV."Bank Country Code");
          IF STRLEN(PostedAZV."Bank Country Code") <> 2 THEN
            ERROR(Text1105400129,PostedAZV."Bank Country Code");

          Country.TESTFIELD(Country."Bank Country Code");

          IF DELCHR(Country."Bank Country Code",'=','ABCDEFGHIJKLMNOPQRSTUVWXYZ') <> '' THEN
            ERROR(Text1105400127,Country."Bank Country Code");
          IF STRLEN(Country."Bank Country Code") <> 2 THEN
            ERROR(Text1105400129,Country."Bank Country Code");
        END;

        VendCountry := Country."Bank Country Code";
        IF PostedAZV.IBAN <> '' THEN BEGIN
          Account := DELCHR(PostedAZV.IBAN);
          Account := CheckFormat(UPPERCASE(PADSTR(Account,34,' ')));
          AccountRec2 := UPPERCASE(PADSTR('/' + Account,35,' '));
          IF PostedAZV."SWIFT Code" <> '' THEN
            BankCodeRec2 := CheckFormat(UPPERCASE(PADSTR(PostedAZV."SWIFT Code",11,' ')))
          ELSE
            BankCodeRec2 := PADSTR(' ',11,' ');
        END ELSE BEGIN
          IF PostedAZV."SWIFT Code" <> '' THEN
            BankCodeRec2 := CheckFormat(UPPERCASE(PADSTR(PostedAZV."SWIFT Code",11,' ')))
          ELSE BEGIN
            IF VendBankAcc."Bank Branch No." <> '' THEN BEGIN
              "Bank Code" := VendBankAcc."Bank Branch No.";
              IF STRLEN("Bank Code") = 0 THEN
                ERROR(Text1105400008+
                      Text1105400009,Vendor."No.",VendBankAcc.Code);
              BankCodeBank := DELCHR(FormatBankCode("Bank Code"),'=','.');
              IF STRLEN(BankCodeBank) <> 8 THEN
                ERROR(Text1105400008+
                      Text1105400010,Vendor."No.",VendBankAcc.Code);
              BankCodeRec2 := PADSTR('///'+BankCodeBank,11,' ');
            END ELSE
              ERROR(Text1105400011+
                    Text1105400012,Vendor."No.",VendBankAcc.Code);
          END;
          Account := PostedAZV."Account No.";
          IF STRLEN(PostedAZV."Account No.") = 0 THEN
            ERROR(Text1105400013+
                  Text1105400009,PostedAZV."Vendor Code",PostedAZV."Vendor Bank");
          AccountRec2 := UPPERCASE(PADSTR('/' + Account,35,' '));
        END;
      END;
      IF PostedAZV."SWIFT Code" = '' THEN BEGIN
        IF VendCountry = '' THEN
          ERROR(Text1105400014);
        IF Bankaddress[1] ='' THEN
          ERROR(Text1105400015);
      END;
    END;

    PROCEDURE PaymFileHeader@1105400126(ForeignPaymentEntry@1105400000 : Record 5001941);
    VAR
      AnnouncementToBundesbankL@1105400001 : Code[1];
    BEGIN
      WITH ForeignPaymentEntry DO BEGIN
      GLSetup.GET;
      CompanyInfo.GET;
      BankAccount.GET(ForeignPaymentEntry."Bank Account No.");
      "Bank Code" := BankAccount."Bank Branch No.";
      IF STRLEN("Bank Code") = 0 THEN
        ERROR(Text1105400002,BankAccount."No.");
      BankCodeBank := FormatBankCode("Bank Code");
      IF STRLEN(BankCodeBank) <> 8 THEN
        ERROR(Text1105400003,BankAccount."No.");
      BankCodeRec := BankCodeBank;

      IF PaymentSetup."Announcement to Bundesbank" THEN BEGIN
        PaymentSetup.GET;
        PaymentSetup.TESTFIELD("Company No Bundesbank");
        IF PaymentSetup."Company No Bundesbank" <> '' THEN
          CompanyNo := PaymentSetup."Company No Bundesbank"
        ELSE
          CompanyNo := BankAccount."Bank Branch No.";
        IF STRLEN(CompanyNo) <> 8 THEN
          ERROR(Text1105400137,BankAccount."No.");
      END;

      Account := BankAccount."Bank Account No.";
      IF STRLEN(Account) = 0 THEN
        ERROR(Text1105400004,BankAccount."No.");
      AccountBank := FormatAccount(Account);
      IF STRLEN(AccountBank) > 10 THEN
        ERROR(
           Text1105400005,BankAccount."No.");

      IF BankAccount."Customer No."<> '' THEN BEGIN
        IF NOT EVALUATE(RecordAccount,CheckFormat(UPPERCASE(BankAccount."Customer No."))) THEN
          ERROR(
             Text1105400214,BankAccount."No.");
      END ELSE
        EVALUATE(RecordAccount,AccountBank);

      NameOfCompany := CheckFormat(UPPERCASE(NameOfCompany));
      CompanyInfo."Name 2" := CheckFormat(UPPERCASE(CompanyInfo."Name 2"));
      CompanyInfo.Address := CheckFormat(UPPERCASE(CompanyInfo.Address));
      CompanyInfo."Post Code" := CheckFormat(UPPERCASE(CompanyInfo."Post Code"));
      CompanyInfo.City := CheckFormat(UPPERCASE(CompanyInfo.City));
      IF ForeignPaymentEntry."EU-Payment" > ForeignPaymentEntry."EU-Payment"::" " THEN BEGIN
        BankAccount.TESTFIELD("Currency Code",'');
        AddCurrency := GLSetup."LCY Code";
      END ELSE
        IF BankAccount."Currency Code" = '' THEN
          AddCurrency := GLSetup."LCY Code"
        ELSE
          AddCurrency := BankAccount."Currency Code";

      IF PaymentSetup."Announcement to Bundesbank" THEN
        AnnouncementToBundesbankL := 'J'
      ELSE
        AnnouncementToBundesbankL := 'N';

      //  Datensatz Q (DatentrÑger-Vorsatz)                                 Feld   LÑnge
      // ------------------------------------------------------------------------------------------------------------
        Z := '0256' +                                                    //    1       4   SatzlÑnge   (Konstant '0128')
             Text1105400016 +                                            //    2       1   Satzart
             FORMAT(BankCodeRec,8)+                                      //    3       8   Bankleitzahl
             NumToString(RecordAccount,10,'0') +                         //    4      10   Kundennummer/Kontonummer ( Absender )
             PADSTR(NameOfCompany,35,' ')+                               //    5      35   Kundenname     ( Diskettenabsender )
             PADSTR(CompanyInfo."Name 2",35,' ') +                       //    5      35   Kundenname2    ( Diskettenabsender )
             PADSTR(CompanyInfo.Address,35,' ') +                        //    5      35   Kundeadresse   ( Diskettenabsender )
             PADSTR(CompanyInfo."Post Code" + ' ' +
                              CompanyInfo.City ,35,' ');                 //    5      35   Kunden PLZ+Ort ( Diskettenabsender )
        Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
        Z := FORMAT(ForeignPaymentEntry."Payment Date",6,
                    '<year,2><month,2><day,2>') +                        //    6       6   Erstellungsdatum
             PADSTR(FORMAT(ForeignPaymentEntry."Day Entry No.")
                           ,2,'0') +                                     //    7       2   lfd.Tagesnummer
             FORMAT(ForeignPaymentEntry."Date of Execution",6,           //    8       6   AusfÅhrungstermin
                    '<year,2><month,2><day,2>') +
             AnnouncementToBundesbankL +                                 //    9       1   Meldung an Bundesbank
             PADSTR(PaymentSetup."Federal State for AZV",2,'0') +        //   10       2   Bundeslandnummer
             PADSTR(CompanyNo,8,' ') +                                   //   11       8   Kundennummer Bundesbank / Bankleitzahl
             PADSTR('',68,' ');                                          //   12       4   Leerzeichen ( X'40'/X'20' )
        Exportfile.SEEK(Exportfile.POS-2);
        Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
      END; //With
    END;

    PROCEDURE PaymFileFooter@1105400127(VAR ForeignPaymentEntry@1105400000 : Record 5001941);
    BEGIN
      //Datensatz Z (DatentrÑger-Nachsatz )                               Feld   LÑnge
      // ------------------------------------------------------------------------------------------------------------
      Z := '0256' +                                                    //    1       4    ( Konstant )
           Text1105400018 +                                            //    2       1   Satzart ( Konstant )
           NumToString(FORMAT(ForeignPaymentEntry.Amount,15,1),15,'0')+//    3      15   Summe der BetrÑge DatensÑtze T
           NumToString(FORMAT(NoOfRecordsT,15,1),15,'0');              //    4      15   Anzahl DatensÑtze T
      Exportfile.SEEK(Exportfile.POS-2);
      Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
      Z := PADSTR('',221,' ');                                         //    5     221   X'40'/X'20' Reserve
      Exportfile.SEEK(Exportfile.POS-2);
      Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
      Exportfile.CLOSE;
      Exportfile.OPEN(Dtaus);
      Exportfile.SEEK(Exportfile.LEN-2);
      Exportfile.TRUNC;
      Exportfile.CLOSE;
    END;

    PROCEDURE PaymentFileRecord@1105400128(VAR PaymLedgEntry@1105400000 : Record 5001902);
    VAR
      PaymLine@1105400001 : Record 5001903;
    BEGIN
      WITH PaymLedgEntry DO BEGIN
        NoOfRecordsT := NoOfRecordsT + 1;
        FormatBankAcc(PaymLedgEntry);
        PaymLine.SETCURRENTKEY("Payment No.","Payment Order No.","Account No.");
        PaymLine.SETRANGE("Payment No.",PaymLedgEntry."Payment No.");
        PaymLine.SETRANGE("Payment Order No.",PaymLedgEntry."Payment Order No.");
        PaymLine.SETRANGE("Account No.",PaymLedgEntry."Bal. Account No.");
        PaymLine.FINDFIRST;
        PostedAZV.GET(PaymLine."Payment No.",PaymLine."AZV No.");
        VendBankFormat(PaymLedgEntry);
        SumInfInstr := '';
        I := 0;
        PaymentSetup.GET;
        CLEAR(Purposal);
        IF (PaymLine.COUNT < 5) AND (PaymLine."AVIS Letter" = FALSE) THEN BEGIN
          REPEAT
            I := I + 1;
            PostedAZV.GET(PaymLine."Payment No.",PaymLine."AZV No.");
            Purposal[I] := CheckFormat(UPPERCASE(PostedAZV.Purposal));
            PaymLedgEntry.AVIS := FALSE;
          UNTIL PaymLine.NEXT=0;
        END ELSE BEGIN
          PaymLedgEntry.AVIS := TRUE;
          Purposal[1] :=
            COPYSTR(
              STRSUBSTNO(DELCHR(PaymentSetup."AZV Avis Proposal",'>'),
                 DELCHR(FORMAT(PaymLine."External Document No."),'>'),
                 DELCHR(FORMAT(PaymLine."Applies-to Doc. No."),'>'),
                 FORMAT(PaymLine."Document Date",8,'<day,2>.<month,2>.<year,2>'),
                 DELCHR(FORMAT(ABS(PaymLine."Payment Amount"),12,'<Sign><Integer><Decimals,3>')),
                 DELCHR(FORMAT(ABS(PaymLine."Pmt. Discount"),8,'<Sign><Integer><Decimals,3>')),
                 DELCHR(FORMAT(ABS(PaymLine.Amount),12,'<Sign><Integer><Decimals,3>')),
                 FORMAT(PaymLine."Posting Date",8,'<day,2>.<month,2>.<year,2>'),
                 DELCHR(FORMAT(PaymLine."Currency Code")),
              AZV.CheckDocType(PaymLine."Document Type")),
            1,35);
          Purposal[1] := FORMAT(UPPERCASE(Purposal[1]));
        END;
        PaymLedgEntry.MODIFY;

        GCurr := PADSTR('',3,' ');
        IF PostedAZV."Charges Account" <> '' THEN BEGIN
          BankAccount.GET(PostedAZV."Charges Account");
          GCurr := BankAccount."Currency Code";
          IF BankAccount."Currency Code" = '' THEN BEGIN
            GLSetup.GET;
            GCurr := GLSetup."Currency Code For EURO";
          END;
        END;

        IF "EU-Payment" = "EU-Payment"::"EU-Expresstransfer" THEN BEGIN
           IF GCurr = '' THEN
             GCurr := 'EUR'
           ELSE
             ERROR(STRSUBSTNO(Text1105400136 + Text1105400135,
                              PostedAZV.FIELDCAPTION(GenJnlTemplateName),PostedAZV.GenJnlTemplateName,
                              PostedAZV.FIELDCAPTION(GenJnlBatch),PostedAZV.GenJnlBatch,
                              PostedAZV.FIELDCAPTION("Line No."),PostedAZV."Line No."));
        END;
        CreditAmount := FORMAT(ROUND(PaymLedgEntry.Amount,1,'<'),14,1);
        CreditDec := FORMAT(ABS(ROUND(PaymLedgEntry.Amount - ROUND(PaymLedgEntry.Amount,1,'<'),0.001)) * 1000);

        IF ((PaymentSetup."Announcement to Bundesbank") AND
           (PaymLedgEntry."Amount (LCY)"-PaymentSetup."Announcement Limit from LCY" > 0)) THEN
          Notification := '1'
        ELSE
          Notification := '0';

        Instruction[1] := NumToString(PaymLedgEntry."Instruction Code 1",2,'0');
        Instruction[2] := NumToString(PaymLedgEntry."Instruction Code 2",2,'0');
        Instruction[3] := '00';
        Instruction[4] := '00';

        SumInfInstr := COPYSTR(CheckFormat(UPPERCASE(PostedAZV."Additional Instruction")),1,25);  // CLR02
        IF PaymLedgEntry."EU-Payment" = PaymLedgEntry."EU-Payment"::" " THEN
        CASE PaymLedgEntry."Instruction Currency" OF
          PaymLedgEntry."Instruction Currency"::"Amount in foreign currency" :
               Instruction[3] := '00';
          PaymLedgEntry."Instruction Currency"::"Amount in EURO" :
             BEGIN
               Instruction[3] := '00';
               Instruction[4] := '91';
             END;
        END;

        PaymentCode.GET(PostedAZV."Payment Type");

        IF PaymLedgEntry."Instruction Currencycode" = '' THEN
          PaymLedgEntry."Instruction Currencycode" := GLSetup."LCY Code";
        CASE PaymLedgEntry."Charges Code" OF
          PaymLedgEntry."Charges Code"::"Transf. clients/other beneficiaries" : KVS := '00';
          PaymLedgEntry."Charges Code"::"all charges client" : KVS := '01';
          PaymLedgEntry."Charges Code"::"all charges recipient " : KVS := '02';
        END;

        IF PaymLedgEntry."EU-Payment" = PaymLedgEntry."EU-Payment"::"EU-Standard" THEN BEGIN
          Notification := '0';
          KVS := '00';
          PaymLedgEntry.TESTFIELD("Instruction Currencycode",GLSetup."LCY Code");
          FOR I := 1 TO 4 DO
            Instruction[I] := '00';
          SumInfInstr := '';
          PaymentCode.TESTFIELD(Code,PaymentSetup."Paym.Type for EU-Standard");
        END;

        IF "EU-Payment" = "EU-Payment"::"EU-Expresstransfer" THEN BEGIN
          IF Instruction[1] <> '00' THEN
            IF (Instruction[1] <> '10') AND (Instruction[1] <> '11') AND (Instruction[1] <> '12') THEN
              ERROR(STRSUBSTNO(Text1105400131 + Text1105400135 ,"EU-Payment",
                               PostedAZV.FIELDCAPTION(GenJnlTemplateName),PostedAZV.GenJnlTemplateName,
                               PostedAZV.FIELDCAPTION(GenJnlBatch),PostedAZV.GenJnlBatch,
                               PostedAZV.FIELDCAPTION("Line No."),PostedAZV."Line No."));
          IF Instruction[2] <> '00' THEN
            IF (Instruction[2] <> '10') AND (Instruction[2] <> '11') AND (Instruction[2] <> '12') THEN
              ERROR(STRSUBSTNO(Text1105400131 + Text1105400135 ,"EU-Payment",
                               PostedAZV.FIELDCAPTION(GenJnlTemplateName),PostedAZV.GenJnlTemplateName,
                               PostedAZV.FIELDCAPTION(GenJnlBatch),PostedAZV.GenJnlBatch,
                               PostedAZV.FIELDCAPTION("Line No."),PostedAZV."Line No."));
          Notification := '0';
          PostedAZV.TESTFIELD("Payment Type",PaymentSetup."Paym.Type for EU-Expresstransf");
        END;

        RecordLength := 768;

        // Datensatz T (Zahlungsaustauschsatz), 1. Konstanter Teil, 1. Satzabschnitt
        //
        //                                                                  Feld   LÑnge   Inhalt
      //--------------------------------------------------------------------------------------------------------------------------------
        Z := NumToString(FORMAT(RecordLength,4),4,'0') +                 //   1       4   Record Length
             Text1105400022 +                                            //   2       1   record Type
             BankCodeRec +                                               //   3       8   Bankleitzahl ( Zahlstelle )
             PADSTR(AddCurrency,3,' ') +                                 //   4a      3   ISO WÑhrung fÅr zu belastende Konto
             NumToString(AccountBank,10,'0')+                            //   4b     10   Kontonummer (öberweisungsempfÑnger/Zahlstelle)
             FORMAT(PaymLedgEntry."Execution Date",6,
                    '<year,2><month,2><day,2>') +                        //   5       6   Erstellungsdatum
             BankCodeRec3 +                                              //   6      13   BLZ fÅr GebÅhren und Spesen
             PADSTR(GCurr,3,' ') +                                       //   7a      3   ISO WÑhrung GebÅhren
             NumToString(AccountRec3,10,'0') +                           //   7b     10   Konto fÅr GebÅhren und Spesen
             PADSTR(BankCodeRec2,11,' ') +                               //   8      11   SWIFT-Adresse Kreditor
             PADSTR(VendBankCountry,2,' ') +                             //   9a      2   Kreditor Bankland ab 01.07.2003 2-stellig
             PADSTR('',1,' ') +                                          //   9a      1   Leer Bankland ab 01.07.2003 2-stellig
             PADSTR(Bankaddress[1],35,' ')  +                            //   9b     35   Bankadresse
             PADSTR(Bankaddress[2],35,' ') +                             //   9b     35   Bankadresse
             PADSTR(Bankaddress[3],35,' ') +                             //   9b     35   Bankadresse
             PADSTR(Bankaddress[4],35,' ');                              //   9b     35   Bankadresse
        Exportfile.SEEK(Exportfile.POS-2);
        Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
        Z := PADSTR(VendCountry,2,' ') +                                 //  10a      2    Kreditor LÑndercode ab 01.07.2003 2-stellig
             PADSTR('',1,' ') +                                          //  10a      1    Leer Bankland ab 01.07.2003 2-stellig
             PADSTR(VendAddress[1],35,' ') +                             //  10b     35    KreditorAdresse
             PADSTR(VendAddress[2],35,' ') +                             //  10b     35    KreditorAdresse
             PADSTR(VendAddress[3],35,' ') +                             //  10b     35    KreditorAdresse
             PADSTR(VendAddress[4],35,' ') +                             //  10b     35    KreditorAdresse
             PADSTR(OrderNote[1],35,' ') +                               //  11      35    Ordervermerk nur Scheck
             PADSTR(OrderNote[1],35,' ');                                //  11      35    Ordervermerk nur Scheck
        Exportfile.SEEK(Exportfile.POS-2);
        Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
        Z := AccountRec2 +                                               //  12      35    Konto Kreditor
             PADSTR(PaymLedgEntry."Instruction Currencycode",3,' ') +    //  13       3    Auftrags-WÑhrung
             NumToString(CreditAmount,14,'0') +                          //  14a     14    Betrag Ohne Dezimalen
             NumToString(CreditDec,3,'0') +                              //  14b      3    Nachkommastellen
             PADSTR(Purposal[1],35,' ') +                                //  15      35    Verwendungszweck
             PADSTR(Purposal[2],35,' ') +                                //  15      35    Verwendungszweck
             PADSTR(Purposal[3],35,' ') +                                //  15      35    Verwendungszweck
             PADSTR(Purposal[4],35,' ');                                 //  15      35    Verwendungszweck
        Exportfile.SEEK(Exportfile.POS-2);
        Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
        Z := Instruction[1] +                                            //  16       2    WeisungsschlÅssel 1
             Instruction[2] +                                            //  17       2    WeisungsschlÅssel 2
             Instruction[3] +                                            //  18       2    WeisungsschlÅssel 3
             Instruction[4] +                                            //  19       2    WeisungsschlÅssel 4
             PADSTR(SumInfInstr,25,' ') +                                //  20      25    ZusatzInfo Weisung
             KVS +                                                       //  21       2    Kostenverrechnung
             NumToString(PaymentCode.Code,2,'0') +                       //  22       2    Zahlungsart
             PADSTR('',27,' ') +                                         //  23      27    Freier Text (nicht verwendet)
             PADSTR(Contact,35,' ') +                                    //  24      35    Ansprechpartner
             Notification +                                              //  25       1    MeldeschlÅssel
             PADSTR('',51,' ') +                                         //  26      51    Reserve
             NumToString(FORMAT(                                         //  27       2    Anzahl Meldeteile je 256 Byte
                      PaymLedgEntry."No. of Registration Sets"),2,'0');

        Exportfile.SEEK(Exportfile.POS-2);
        Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
      END; // With
    END;

    PROCEDURE CreateRegistration@1105400129(RegistrationSet@1105400000 : Record 5001949);
    VAR
      PassagingTransitL@1105400001 : Code[1];
      BrokenTransitL@1105400002 : Code[1];
      InfoTransitUnsalableInvL@1105400003 : Code[1];
      InfoTransitUnsalableForeignL@1105400004 : Code[1];
    BEGIN
      WITH RegistrationSet DO BEGIN
        IF RegistrationSet."Country Code" = '' THEN
          ERROR(Text1105400200,
            RegistrationSet.FIELDCAPTION("Country Code"),
            RegistrationSet.TABLECAPTION,
            RegistrationSet.FIELDCAPTION("Vendor No."),
            RegistrationSet."Vendor No.");
        BankCountries.GET(RegistrationSet."Country Code");
        BankCountries."Bank Country Short Name" := CheckFormat(UPPERCASE(BankCountries."Bank Country Short Name"));
        IF RegistrationSet."Itemname Trading Goods" <> '' THEN
          RegistrationSet."Itemname Trading Goods" := CheckFormat(UPPERCASE(RegistrationSet."Itemname Trading Goods"));
        IF RegistrationSet."Service Description" <> '' THEN
          RegistrationSet."Service Description" := CheckFormat(UPPERCASE(RegistrationSet."Service Description"));
        PaymentSetup.GET;
        MAmount := RegistrationSet.Amount;

        CASE "Trading Type" OF
          "Trading Type"::"Transit trade" :
             BEGIN
               IF RegistrationSet."Passaging Transit" THEN BEGIN
                 Transit := '';
                 RegistrationSet.TESTFIELD("Unit Price");
                 RegistrationSet.TESTFIELD("Due Date Proceeds Transit YYMM");
                 Transit := PADSTR('',27,' ') +
                            '00' +
                            '0000000' +
                            PADSTR(RegistrationSet."Due Date Proceeds Transit YYMM",4,' ') +
                            PADSTR(RegistrationSet."Customer Country Transit",7,' ') +
                            PADSTR(RegistrationSet."Customer Country Code",3,' ') +
                            NumToString(FORMAT(ROUND(RegistrationSet."Unit Price",1,'<'),12,1),12,'0') +
                            PADSTR('',40,' ');
               END ELSE
                 Transit := PADSTR('',27,' ') +
                            PADSTR('',9,'0') +
                            PADSTR('',14,' ') +
                            PADSTR('',12,'0') +
                            PADSTR('',40,' ');

               PassagingTransitL := 'N';
               BrokenTransitL := 'N';
               InfoTransitUnsalableInvL := 'N';
               InfoTransitUnsalableForeignL := 'N';
               IF RegistrationSet."Passaging Transit" THEN
                 PassagingTransitL := 'J';
               IF RegistrationSet."Broken Transit" THEN BEGIN
                 BrokenTransitL := 'J';
                 RegistrationSet.TESTFIELD("Add. Information Transit");
                 Transit := COPYSTR(Transit,1,62) +
                 PADSTR(CheckFormat(FORMAT(UPPERCASE(RegistrationSet."Add. Information Transit"),40)),40,' ');
               END;
               IF RegistrationSet."Info Transit unsalable Inv" THEN
                 InfoTransitUnsalableInvL := 'J';
               IF RegistrationSet."Info Transit unsalable forei." THEN
                 InfoTransitUnsalableForeignL := 'J';

               Z := Text1105400025 +
                    PADSTR(RegistrationSet."Itemname Trading Goods",27,' ') +
                    NumToString(RegistrationSet."Capitel No. Goods",2,'0') +
                    PADSTR('',7,'0') +
                    PADSTR(BankCountries."Bank Country Short Name",7,' ') +
                    PADSTR(RegistrationSet."Country Code",3,' ') +
                    NumToString(FORMAT(ROUND(MAmount,1,'<'),12,1),12,'0') +
                    PassagingTransitL +
                    BrokenTransitL +
                    InfoTransitUnsalableInvL +
                    InfoTransitUnsalableForeignL +
                    Transit;
               Exportfile.SEEK(Exportfile.POS-2);
               Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
               Z := PADSTR('',87,' ');
               Exportfile.SEEK(Exportfile.POS-2);
               Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
             END;
          "Trading Type"::Service, "Trading Type"::"Capital trade" :
             BEGIN
               Z := Text1105400027+
               FORMAT(RegistrationSet."Document Type",1,'<Number>') +
               NumToString(RegistrationSet."Index No.",3,'0') +
               PADSTR(BankCountries."Bank Country Short Name",7,' ') +
               PADSTR(RegistrationSet."Country Code",3,' ') +
               PADSTR(BankCountries."Bank Country Short Name",7,' ') +
               PADSTR(RegistrationSet."Country Code",3,' ') +
               NumToString(FORMAT(ROUND(MAmount,1,'<'),12,1),12,'0');
               Exportfile.SEEK(Exportfile.POS-2);
               Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
               Z := PADSTR(RegistrationSet."Service Description",140,' ');
               Exportfile.SEEK(Exportfile.POS-2);
               Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
               Z := PADSTR('',75,' ');
               Exportfile.SEEK(Exportfile.POS-2);
               Exportfile.WRITE(FORMAT(Z,STRLEN(Z)));
             END;
        END;
      END;
    END;

    PROCEDURE InsertPaymFile@1105400130(VAR PaymLedgEntry2@1105400000 : Record 5001902);
    BEGIN
      IF NextPaymLedgEntryNo = 0 THEN BEGIN
        PaymLedgEntry2.LOCKTABLE;
        PaymLedgEntry2.RESET;
        IF PaymLedgEntry2.FINDLAST THEN
          NextPaymLedgEntryNo := PaymLedgEntry2."Entry No." + 1
        ELSE
          NextPaymLedgEntryNo := 1;
      END;

      PaymLedgEntry2.RESET;
      PaymLedgEntry2.SETCURRENTKEY("Bank Account No.","Posting State","Payment No.");
      PaymLedgEntry2.SETRANGE("Bank Account No.",PaymLedgEntry2."Bank Account No.");
      PaymLedgEntry2.SETFILTER(
        "Posting State",'%1|%2|%3',
        PaymLedgEntry2."Posting State"::Created,
        PaymLedgEntry2."Posting State"::Posted,
        PaymLedgEntry2."Posting State"::Corrected);
      PaymLedgEntry2.SETRANGE("Payment No.",PaymLedgEntry2."Document No.");
      IF PaymLedgEntry2.FINDFIRST THEN
        ERROR(Text1105400029,PaymLedgEntry2."Document No.");

      PaymLedgEntry2.Open := TRUE;
      PaymLedgEntry2."User ID" := USERID;
      PaymLedgEntry2."Entry No." := NextPaymLedgEntryNo;
      PaymLedgEntry2.INSERT;
      NextPaymLedgEntryNo := NextPaymLedgEntryNo + 1;
    END;

    PROCEDURE CancelPaymFile@1105400131(VAR "GenJnl-Line"@1105400000 : Record 81);
    BEGIN
      "GenJnl-Line".TESTFIELD("Bank Payment Type",GenJnlLine."Bank Payment Type"::Clearing);
      "GenJnl-Line".TESTFIELD("Payment File created",TRUE);
      "GenJnl-Line".TESTFIELD("Document No.");

      GenJnlLine.RESET;
      GenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
      GenJnlLine.SETRANGE("Journal Template Name","GenJnl-Line"."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","GenJnl-Line"."Journal Batch Name");
      GenJnlLine.SETRANGE("Posting Date","GenJnl-Line"."Posting Date");
      GenJnlLine.SETRANGE("Document No.","GenJnl-Line"."Document No.");
      GenJnlLine.SETFILTER("Account Type",'%1|%2',"GenJnl-Line"."Account Type"::"G/L Account",
                                       "GenJnl-Line"."Account Type"::"Bank Account");
      GenJnlLine.SETRANGE("Payment File created",TRUE);
      IF GenJnlLine.FINDFIRST THEN
        REPEAT
          IF GenJnlLine."Bal. Account No." = '' THEN BEGIN
            GenJnlLine."Payment File created" := FALSE;
            GenJnlLine.DELETE(TRUE);
          END;
        UNTIL GenJnlLine.NEXT=0;

      PaymLine.RESET;
      GenJnlLine.RESET;
      GenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
      GenJnlLine.SETRANGE("Journal Template Name","GenJnl-Line"."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","GenJnl-Line"."Journal Batch Name");
      GenJnlLine.SETRANGE("Posting Date","GenJnl-Line"."Posting Date");
      GenJnlLine.SETRANGE("Document No.","GenJnl-Line"."Document No.");
      IF GenJnlLine.FINDFIRST THEN
        REPEAT
          IF GenJnlLine."Bal. Account No." = '' THEN BEGIN
            IF GenJnlLine."Account No." = '' THEN BEGIN
              GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Bank Account";
              GenJnlLine."Account No." := "GenJnl-Line"."Account No.";
            END ELSE BEGIN
              GenJnlLine."Bal. Account Type" := GenJnlLine."Account Type"::"Bank Account";
              GenJnlLine."Bal. Account No." := "GenJnl-Line"."Account No.";
            END;
            GenJnlLine.VALIDATE(Amount);
            GenJnlLine."Bank Payment Type" := "GenJnl-Line"."Bank Payment Type";
          END;
          PaymLine.SETCURRENTKEY("Payment No.","Line No.");
          PaymLine.SETRANGE("Payment No.",GenJnlLine."Document No.");
          PaymLine.SETRANGE("Line No.",GenJnlLine."Line No.");
          PaymLine.FINDFIRST;

          PostedAZV.GET(PaymLine."Payment No.",PaymLine."AZV No.");
          AZV.TRANSFERFIELDS(PostedAZV);
          AZV.INSERT;
          PostRegistrationSet.SETRANGE("Document No.",PostedAZV.Number);
          PostRegistrationSet.SETRANGE(PostRegistrationSet."Payment No.",PostedAZV."Payment No.");

          IF PostRegistrationSet.FINDFIRST THEN
          REPEAT
            RegistrationSet.TRANSFERFIELDS(PostRegistrationSet);
            RegistrationSet.INSERT;
          UNTIL PostRegistrationSet.NEXT=0;
          PostedAZV.DELETE;
          PostRegistrationSet.DELETEALL;

          GenJnlLine.VALIDATE("Currency Code",PaymLine."Currency Code");
          GenJnlLine.VALIDATE(Amount,PaymLine.Amount);
          GenJnlLine."Document No." := '';
          GenJnlLine."Payment File created" := FALSE;
          GenJnlLine.UpdateSource;
          GenJnlLine."Payment Order No." := 0;
          GenJnlLine.MODIFY;
        UNTIL GenJnlLine.NEXT = 0;

      PaymLedgEntry.RESET;
      PaymLedgEntry.SETCURRENTKEY("Bank Account No.","Posting State","Payment No.");
      PaymLedgEntry.SETRANGE("Posting State",PaymLedgEntry."Posting State"::Created);
      PaymLedgEntry.SETRANGE("Payment No.","GenJnl-Line"."Document No.");
      PaymLedgEntry.FINDFIRST;
      REPEAT
        PaymLedgEntry2 := PaymLedgEntry;
        PaymLedgEntry2."Original State" := PaymLedgEntry."Posting State";
        PaymLedgEntry2."Posting State" := PaymLedgEntry."Posting State"::Cancelled;
        PaymLedgEntry2.Open := FALSE;
        PaymLedgEntry2.MODIFY;
      UNTIL PaymLedgEntry.NEXT=0;

      ForeignPaymentEntry.SETCURRENTKEY("Payment No.","Statement Status","Posting State");
      ForeignPaymentEntry.SETRANGE("Payment No.","GenJnl-Line"."Document No.");
      ForeignPaymentEntry.SETRANGE(Open,TRUE);
      ForeignPaymentEntry.SETRANGE("Posting State",ForeignPaymentEntry."Posting State"::Created);
      ForeignPaymentEntry.FINDFIRST;
      ForeignPaymentEntry.Open := FALSE;
      ForeignPaymentEntry."Posting State" := ForeignPaymentEntry."Posting State"::Cancelled;
      ForeignPaymentEntry.MODIFY;

      MESSAGE(Text1105400030,PaymLedgEntry."Payment No.");
    END;

    PROCEDURE VoidPaymFile@1105400132(VAR PaymLedgEntry2@1105400000 : Record 5001902);
    BEGIN
      PaymLedgEntry2.TESTFIELD("Posting State",PaymLedgEntry2."Posting State"::Posted);
      PaymLedgEntry2.TESTFIELD("Statement Status",PaymLedgEntry2."Statement Status"::Open);
      PaymLedgEntry2.TESTFIELD("Bal. Account No.");
      BankAccount2.GET(PaymLedgEntry2."Bank Account No.");
      SourceCodeSetup.GET;

      GenJnlLine.INIT;
      GenJnlLine."Document No." := PaymLedgEntry2."Document No.";
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Bank Account";
      GenJnlLine.VALIDATE("Account No.",PaymLedgEntry2."Bank Account No.");
      GenJnlLine."Posting Date" := PaymLedgEntry2."Posting Date";
      GenJnlLine.Description := STRSUBSTNO(Text1105400031,PaymLedgEntry2."Payment No.");
      GenJnlLine.VALIDATE(Amount,PaymLedgEntry2.Amount);
      GenJnlLine."Bal. Account Type" := PaymLedgEntry2."Bal. Account Type";
      GenJnlLine.VALIDATE("Bal. Account No.",PaymLedgEntry2."Bal. Account No.");
      GenJnlLine."Source Code" := SourceCodeSetup."Corrected Paymentfile";
      GenJnlPostLine.RUN(GenJnlLine);

      PaymLedgEntry2."Original State" := PaymLedgEntry2."Posting State";
      PaymLedgEntry2."Posting State" := PaymLedgEntry2."Posting State"::Corrected;
      PaymLedgEntry2.MODIFY;
    END;

    PROCEDURE CheckFormat@1105400133(FieldContent@1105400001 : Text[140]) FText@1105400000 : Code[140];
    BEGIN
      WHILE STRPOS(FieldContent,'·') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'·')-1) + Text1105400032 +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'·')+1,MAXSTRLEN(FieldContent));
      WHILE STRPOS(FieldContent,'é') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'é')-1) + Text1105400033 +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'é')+1,MAXSTRLEN(FieldContent));
      WHILE STRPOS(FieldContent,'ô') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'ô')-1) + Text1105400034 +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'ô')+1,MAXSTRLEN(FieldContent));
      WHILE STRPOS(FieldContent,'ö') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'ö')-1) + Text1105400035 +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'ö')+1,MAXSTRLEN(FieldContent));

      // SONDERZEICHEN
      WHILE STRPOS(FieldContent,'&') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'&')-1) + ' ' +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'&')+1,MAXSTRLEN(FieldContent));
      WHILE STRPOS(FieldContent,'$') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'$')-1) + ' ' +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'$')+1,MAXSTRLEN(FieldContent));
      WHILE STRPOS(FieldContent,'*') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'*')-1) + ' ' +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'*')+1,MAXSTRLEN(FieldContent));
      WHILE STRPOS(FieldContent,'%') > 0 DO
        FieldContent := COPYSTR(FieldContent,1,STRPOS(FieldContent,'%')-1) + ' ' +
                      COPYSTR(FieldContent,STRPOS(FieldContent,'%')+1,MAXSTRLEN(FieldContent));

      CheckRec := DELCHR(FieldContent,'=',Text1105400036);
      IF CheckRec <> '' THEN BEGIN
        CheckRec := CONVERTSTR(FieldContent,Text1105400037,
                                          '                                             ');
        String := STRLEN(DELCHR(CheckRec));
        FieldContent := CONVERTSTR(FieldContent,DELCHR(CheckRec),PADSTR('',String,' '));

      END;
      EXIT (FieldContent);
    END;

    PROCEDURE CheckPaymFile@1105400134(Drive@1105400000 : Code[250]) : Boolean;
    BEGIN
      Files.SETRANGE(Path,Drive);
      IF Files.FINDFIRST THEN BEGIN

       IF CONFIRM(STRSUBSTNO(Text1105400038+
                      Text1105400039,Drive),TRUE) THEN
          ERROR(Text1105400128)
        ELSE BEGIN
          Files.SETRANGE(Path,Text1105400040);
          IF Files.FINDFIRST THEN ;
          EXIT(TRUE);
        END;
      END ELSE
      EXIT(TRUE);
    END;

    PROCEDURE TestCompanyInfo@1105400145(Bacc@1105400000 : Code[20]);
    VAR
      CompName@1105400001 : Text[30];
    BEGIN
      CompanyInfo.GET;
      CompName := CheckFormat(FORMAT(UPPERCASE(CompanyInfo.Name),27));
      BankAccount.GET(Bacc);
      "Bank Code" := BankAccount."Bank Branch No.";
      IF STRLEN("Bank Code") = 0 THEN
        ERROR(Text1105400002,BankAccount."No.");
      BankCodeBank := FormatBankCode("Bank Code");
      IF STRLEN(BankCodeBank) <> 8 THEN
        ERROR(Text1105400003,BankAccount."No.");
      BankCodeRec := BankCodeBank;
      Account := BankAccount."Bank Account No.";
      IF STRLEN(Account) = 0 THEN
        ERROR(Text1105400004,BankAccount."No.");
      AccountBank := FormatAccount(Account);
      IF STRLEN(AccountBank) > 10 THEN
        ERROR(
           Text1105400005,BankAccount."No.");
    END;

    PROCEDURE CheckBeforePaymFile@1105400146(GenJnlLine2@1105400000 : Record 81;AbortOnErrors@1105400007 : Boolean;CheckCurrentLine@1105400004 : Boolean;VAR ErrorMessage@1105400003 : ARRAY [10] OF Text[150]) : Boolean;
    VAR
      GenJnlLine@1105400001 : Record 81;
      AccNo@1105400002 : Code[20];
      ErrorCounter@1105400005 : Integer;
      MaxErrors@1105400006 : Integer;
      Country@1105400008 : Record 9;
      ForeignPayment@1105400009 : Record 5001940;
      EUStd@1105400010 : ' ,EU-Standard,EU-Expresstransfer';
      ForPay@1105400011 : Record 5001940;
    BEGIN
      CLEAR(ErrorMessage);
      MaxErrors := ARRAYLEN(ErrorMessage);

      GenJnlLine.SETCURRENTKEY(
        "Journal Template Name",
        "Journal Batch Name",
        "Account Type",
        "Currency Code",
        "Account No.",
        "Amount (LCY)");
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine2."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine2."Journal Batch Name");
      PaymentSetup.GET;
      IF PaymentSetup."Parting Currencies" THEN
        GenJnlLine.SETRANGE("Currency Code",GenJnlLine2."Currency Code");
      GenJnlLine.SETFILTER("Account No.",'<>%1','');
      GenJnlLine.SETFILTER("Amount (LCY)",'<>%1',0);
      GenJnlLine.SETFILTER("Document Type",'%1|%2|%3',GenJnlLine."Document Type"::" ",GenJnlLine."Document Type"::Payment,
        GenJnlLine."Document Type"::Refund);

      IF CheckCurrentLine THEN
        GenJnlLine.SETRANGE("Line No.",GenJnlLine2."Line No.");

      IF GenJnlLine.FINDFIRST THEN BEGIN
        ForPay.SETCURRENTKEY("Vendor Code","Vendor Document No.","Document Type");
        ForPay.SETRANGE("Vendor Code",GenJnlLine."Account No.");
        ForPay.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        ForPay.SETRANGE("Vendor Document No.",GenJnlLine."External Document No.");
        IF ForPay.FINDFIRST THEN
          EUStd := ForPay."EU-Payment";
      REPEAT
        Vendor.GET(GenJnlLine."Account No.");
        ForeignPayment.SETCURRENTKEY("Vendor Code","Vendor Document No.","Document Type");
        ForeignPayment.SETRANGE("Vendor Code",GenJnlLine."Account No.");
        ForeignPayment.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        ForeignPayment.SETRANGE("Vendor Document No.",GenJnlLine."External Document No.");
        IF NOT ForeignPayment.FINDFIRST THEN BEGIN
          ErrorCounter := ErrorCounter + 1;
          IF ErrorCounter <= MaxErrors THEN
            ErrorMessage[ErrorCounter] :=
              COPYSTR(
                STRSUBSTNO(
                  Text1105400210,Vendor."No.",GenJnlLine."Line No."),
              1,150);
        END ELSE BEGIN
          IF VendBankAcc.GET(ForeignPayment.Beneficiary,ForeignPayment."Vendor Bank") THEN
            IF ForeignPayment."EU-Payment" > ForeignPayment."EU-Payment"::" " THEN BEGIN
              IF VendBankAcc.IBAN = '' THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                  IF ErrorCounter <= MaxErrors THEN
                    ErrorMessage[ErrorCounter] :=
                      COPYSTR(
                        STRSUBSTNO(
                          Text1105400132+
                          Text1105400009,
                            Vendor."No.",
                            VendBankAcc.Code),
                        1,150);
                  END;
              IF VendBankAcc."SWIFT Code" = '' THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                  IF ErrorCounter <= MaxErrors THEN
                    ErrorMessage[ErrorCounter] :=
                      COPYSTR(
                        STRSUBSTNO(
                          Text1105400133+
                          Text1105400009,
                            Vendor."No.",
                            VendBankAcc.Code),
                        1,150);
                  END;
              IF (ForeignPayment.Amount > PaymentSetup."Max Amount for EU-Standard Ext") AND
                 (ForeignPayment."EU-Payment" = ForeignPayment."EU-Payment"::"EU-Standard") THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                  IF ErrorCounter <= MaxErrors THEN
                    ErrorMessage[ErrorCounter] :=
                      COPYSTR(
                        STRSUBSTNO(
                          Text1105400130,
                            PaymentSetup."Max Amount for EU-Standard Ext"),
                        1,150);
                  END;
              IF EUStd <> ForeignPayment."EU-Payment" THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                  IF ErrorCounter <= MaxErrors THEN
                    ErrorMessage[ErrorCounter] :=
                      COPYSTR(Text1105400134,1,150);
                  END;
            END;
        END;

        IF AccNo <> GenJnlLine."Account No." THEN BEGIN
          IF NOT VendBankAcc.GET(ForeignPayment.Beneficiary,ForeignPayment."Vendor Bank") THEN BEGIN
            ErrorCounter := ErrorCounter + 1;
            IF ErrorCounter <= MaxErrors THEN
              ErrorMessage[ErrorCounter] :=
                COPYSTR(
                  STRSUBSTNO(
                    Text1105400212,
                      Vendor."No.",
                      Vendor.Name,
                      GenJnlLine."Applies-to Doc. Type",
                      GenJnlLine."Applies-to Doc. No."),
                1,150);
          END;
          IF NOT Country.GET(VendBankAcc."Country/Region Code") THEN BEGIN
            ErrorCounter := ErrorCounter + 1;
            IF ErrorCounter <= MaxErrors THEN
              ErrorMessage[ErrorCounter] :=
                COPYSTR(
                  STRSUBSTNO(
                    Text1105400201,
                      VendBankAcc.FIELDCAPTION("Country/Region Code"),
                      VendBankAcc.TABLECAPTION,
                      VendBankAcc."Vendor No.",
                      VendBankAcc.Code),
                1,150);
          END;
          IF (Country."Bank Country Code" = '') AND
             (ForeignPayment."EU-Payment"=ForeignPayment."EU-Payment"::" ") THEN BEGIN
            ErrorCounter := ErrorCounter + 1;
            IF ErrorCounter <= MaxErrors THEN
              ErrorMessage[ErrorCounter] :=
                COPYSTR(
                  STRSUBSTNO(
                    Text1105400201,
                      Country.FIELDCAPTION("Bank Country Code"),
                      Country.TABLECAPTION,
                      Country.Code,
                      ''),
                1,150);
          END;
          IF Country."Bank Country Code" <> '' THEN BEGIN
            IF DELCHR(Country."Bank Country Code",'=','ABCDEFGHIJKLMNOPQRSTUVWXYZ') <> '' THEN BEGIN
              ErrorCounter := ErrorCounter + 1;
              IF ErrorCounter <= MaxErrors THEN
                ErrorMessage[ErrorCounter] :=
                  COPYSTR(
                    STRSUBSTNO(
                      Text1105400127,
                        Country."Bank Country Code",
                        ''),
                  1,150);
            END;
            IF ForeignPayment."EU-Payment"=ForeignPayment."EU-Payment"::" " THEN
              IF STRLEN(Country."Bank Country Code") <> 2 THEN BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400129,
                          Country."Bank Country Code",
                          ''),
                    1,150);
              END;
          END;
          IF VendBankAcc.IBAN = '' THEN BEGIN
            IF VendBankAcc."SWIFT Code" = '' THEN BEGIN
              IF VendBankAcc."Bank Branch No." <> '' THEN BEGIN
                IF STRLEN(VendBankAcc."Bank Branch No.") = 0 THEN BEGIN
                  ErrorCounter := ErrorCounter + 1;
                  IF ErrorCounter <= MaxErrors THEN
                    ErrorMessage[ErrorCounter] :=
                      COPYSTR(
                        STRSUBSTNO(
                          Text1105400008+
                          Text1105400009,
                            Vendor."No.",
                            VendBankAcc.Code),
                      1,150);
                END;
                IF STRLEN(VendBankAcc."Bank Branch No.") <> 8 THEN BEGIN
                  ErrorCounter := ErrorCounter + 1;
                  IF ErrorCounter <= MaxErrors THEN
                    ErrorMessage[ErrorCounter] :=
                      COPYSTR(
                        STRSUBSTNO(
                          Text1105400008+
                          Text1105400010,
                            Vendor."No.",
                            VendBankAcc.Code),
                      1,150);
                END;
              END ELSE BEGIN
                ErrorCounter := ErrorCounter + 1;
                IF ErrorCounter <= MaxErrors THEN
                  ErrorMessage[ErrorCounter] :=
                    COPYSTR(
                      STRSUBSTNO(
                        Text1105400011+
                        Text1105400012,
                          Vendor."No.",
                          VendBankAcc.Code),
                    1,150);
              END;
            END;
            IF STRLEN(VendBankAcc."Bank Account No.") = 0 THEN BEGIN
              ErrorCounter := ErrorCounter + 1;
              IF ErrorCounter <= MaxErrors THEN
                ErrorMessage[ErrorCounter] :=
                  COPYSTR(
                    STRSUBSTNO(
                      Text1105400013+
                      Text1105400009,
                        Vendor."No.",
                        VendBankAcc.Code),
                  1,150);
            END;
          END;
        END;
        IF VendBankAcc."SWIFT Code" = '' THEN BEGIN
          IF Country.GET(VendBankAcc."Country/Region Code") THEN ;
          IF Country."Bank Country Code" = '' THEN BEGIN
            ErrorCounter := ErrorCounter + 1;
            IF ErrorCounter <= MaxErrors THEN
              ErrorMessage[ErrorCounter] :=
                COPYSTR(
                  STRSUBSTNO(
                    Text1105400014),1,150);
          END;
          IF VendBankAcc.Name = '' THEN BEGIN
            ErrorCounter := ErrorCounter + 1;
            IF ErrorCounter <= MaxErrors THEN
              ErrorMessage[ErrorCounter] :=
                COPYSTR(
                  STRSUBSTNO(
                    Text1105400015),1,150);
          END;
        END;
        AccNo := GenJnlLine."Account No.";
      UNTIL GenJnlLine.NEXT=0;
      END;
      IF AbortOnErrors AND (ErrorCounter > 0) THEN
        ERROR(ErrorMessage[1]);

      EXIT(ErrorCounter = 0);
    END;

    PROCEDURE VendorEUStandard@1105400000(Vendor@1105400000 : Record 23);
    BEGIN
      Country.GET(Vendor."Country/Region Code");
      Country.TESTFIELD("EU Standard",TRUE);
      VendBankAcc.SETRANGE("Vendor No.",Vendor."No.");
      VendBankAcc.SETRANGE(Clearing,TRUE);
      IF NOT VendBankAcc.FINDFIRST THEN
        ERROR(Text1105400126);
      VendBankAcc.TESTFIELD("SWIFT Code");
      VendBankAcc.TESTFIELD(IBAN);
    END;

    PROCEDURE SetEUStandard@1105400001(VAR ForeignPayment@1105400000 : Record 5001940;Type@1105400001 : Integer);
    BEGIN
      PaymentSetup.GET;
      WITH ForeignPayment DO BEGIN
        IF Type = 0 THEN BEGIN
          PaymentSetup.TESTFIELD("Max Amount for EU-Standard out");
          PaymentSetup.TESTFIELD("Max Amount for EU-Standard Ext");

          IF ForeignPayment.Amount > PaymentSetup."Max Amount for EU-Standard Ext" THEN
            ERROR(STRSUBSTNO(Text1105400130,PaymentSetup."Max Amount for EU-Standard Ext"));
        END;
        TESTFIELD("Currency Instruction","Currency Instruction"::"Amount in foreign currency");
        TESTFIELD("Payment Currency",PaymentSetup."Currencycode EURO");
        "Charges Account" := '';
        "Bank Name" := '';
        "Bank Name 2" := '';
        "Bank Street" := '';
        "Bank City" := '';
        "Order Note" := '';
        "Account No." := '';
        "Instruction Code 1" := '';
        "Instruction Code 2" := '';
        ForeignPayment."Instruction Code Descr. 1" := '';
        ForeignPayment."Instruction Code Descr. 2" := '';
        "Additional Instruction" := '';
        CASE Type OF
          0 : BEGIN
                PaymentSetup.TESTFIELD("Paym.Type for EU-Standard");
                VALIDATE("Payment Type",PaymentSetup."Paym.Type for EU-Standard");
                "EU-Payment" := "EU-Payment"::"EU-Standard";
              END;
          1 : BEGIN
                PaymentSetup.TESTFIELD("Paym.Type for EU-Expresstransf");
                VALIDATE("Payment Type",PaymentSetup."Paym.Type for EU-Expresstransf");
                "EU-Payment" := "EU-Payment"::"EU-Expresstransfer";
              END;
        END;
        "Charges Code" := "Charges Code"::"Transf. clients/other beneficiaries";
        MODIFY;
        RegistrationSet.SETRANGE("Document No.",Number);
      //2006  IF RegistrationSet.FINDFIRST THEN
      //2006    RegistrationSet.DELETEALL;
      END;
    END;

    PROCEDURE TestEUCriteria@1105400002(ForeignPayment@1105400000 : Record 5001940) : Boolean;
    BEGIN
      PaymentSetup.GET;
      WITH ForeignPayment DO BEGIN
        IF "Currency Instruction" <> "Currency Instruction"::"Amount in foreign currency" THEN
          EXIT(FALSE);
        IF "Payment Currency" <> PaymentSetup."Currencycode EURO" THEN
            EXIT(FALSE);
        IF "SWIFT Code" = '' THEN
          EXIT(FALSE);
        IF IBAN = '' THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE SetNonEUStandard@1105400003(VAR ForeignPayment@1105400001 : Record 5001940);
    VAR
      CreateForeignMessages@1105400000 : Codeunit 5001906;
      GenJnlLine@1105400002 : Record 81;
    BEGIN
      WITH ForeignPayment DO BEGIN
        GenJnlLine.GET(GenJnlTemplateName,GenJnlBatch,"Line No.");
        CreateForeignMessages.EUStandard(ForeignPayment,GenJnlLine);
      END;
    END;

    BEGIN
    END.
  }
}

