OBJECT Codeunit 50232 Home24 Test Automation
{
  OBJECT-PROPERTIES
  {
    Date=19.08.14;
    Time=12:00:00;
    Modified=Yes;
    Version List=HME1010;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
            RANDOMIZE(1);
          END;

  }
  CODE
  {
    VAR
      SalesHeader@1000000007 : Record 36;
      SalesLine@1000000008 : Record 37;
      SalesInvHeader@1000000044 : Record 112;
      SalesInvLine@1000000045 : Record 113;
      PurchHeader@1000000013 : Record 38;
      PurchLine@1000000028 : Record 39;
      SalesShipmentHeader@1000000030 : Record 110;
      SalesShipmentLine@1000000034 : Record 111;
      eBayNavCXMLLog@1000000027 : Record 5096060;
      MyFile@1000000026 : Record 2000000022;
      AdminMailQueueSetup@1000000000 : Record 50092;
      eBayNavCSalesHeader@1000000004 : Record 5251571;
      Item@1000000003 : Record 27;
      DimValue@1000000018 : Record 349;
      DocDim@1000000017 : Record 357;
      Customer@1000000006 : Record 18;
      PaymentMethod@1000000009 : Record 289;
      Purchasing@1000000037 : Record 5721;
      BatchPostDoc@1000000011 : Record 50043;
      TestSetup@1000000019 : Record 80006;
      TestBuffer@1000000031 : Record 80008;
      eBayNavCAccount@1000000041 : Record 5251550;
      Assert@1000000035 : Codeunit 50200;
      NoSeriesManagement@1000000032 : Codeunit 396;
      ReleaseSalesDocument@1000000010 : Codeunit 414;
      ReleasePurchDocument@1000000015 : Codeunit 415;
      LibrarySCM@1000000005 : Codeunit 50210;
      eBayNavCDocumentUtil@1000000001 : Codeunit 5251544;
      BatchAutomProcess@1000000012 : Codeunit 50031;
      AutomEMailProc@1000000014 : Codeunit 50030;
      TestFunctions@1000000021 : Codeunit 50231;
      eBayNavCAccountUtil@1000000042 : Codeunit 5251542;
      TestSalesOrder@1000000052 : Codeunit 50218;
      eBayNavCLogBuffer@1000000043 : Codeunit 5251568;
      RandomNumber@1000000002 : Integer;
      SalesLineCount@1000000033 : Integer;
      PostedSalesInvoiceNo@1000000046 : Code[20];
      SalesOrderNo@1000000020 : Code[20];
      CustomerNo@1000000029 : Code[20];
      FileSistemObj@1000000023 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      RequestMessage@1000000025 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      ResponseMessage@1000000024 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      FilePath@1000000022 : Text[1024];
      isInitialized@1000000016 : Boolean;
      Okey@1000000039 : Boolean;
      VATAmountErrorMessage@1000000050 : TextConst 'ENU=VAT Amount must be %1 in %2.';
      FieldError@1000000049 : TextConst 'ENU=Number of Lines for %1 and %2  must be equal.';
      AmountError@1000000048 : TextConst 'ENU=%1 must be Equal in %2.';
      CurrencyError@1000000047 : TextConst 'ENU=%1 must be Equal in %2.';
      DlgWindow@1000000036 : Dialog;
      Text001@1000000051 : TextConst 'ENU=Country';

    LOCAL PROCEDURE Initialize@4();
    VAR
      BackupMgt@1001 : Codeunit 50201;
    BEGIN
      RANDOMIZE;
      IF isInitialized THEN
        EXIT;
      isInitialized := TRUE;
      TestSetup.GET;
      IF ISCLEAR(RequestMessage) THEN
        CREATE(RequestMessage);
      IF ISCLEAR(ResponseMessage) THEN
        CREATE(ResponseMessage);
    END;

    [Test]
    PROCEDURE OrderCreation@1000000006();
    BEGIN
      Initialize;
      TestSalesOrder.SalesOrderCreation;
    END;

    [Test]
    PROCEDURE ImportPayment@1000000004();
    VAR
      Text001@1000000000 : TextConst 'ENU=%1 is not an acceptable Payment Method Code for Order %2';
    BEGIN
    END;

    [Test]
    PROCEDURE ShipWebSalesOrder@1000000009();
    BEGIN
      // Ships all the SalesHeaders found in Buffer table.
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.FINDFIRST;
      REPEAT

      // Post Sales Order as Shipmt.
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.", SalesHeader."No.");
        SalesLine.SETFILTER(Type, '%1|%2', SalesLine.Type::Item, SalesLine.Type::Resource);
        SalesLine.FINDFIRST;
        REPEAT
          SalesLine.TESTFIELD(Quantity, 1);
        UNTIL SalesLine.NEXT = 0;
        LibrarySCM.PostSalesHeader2(SalesHeader, TRUE, FALSE);
        SalesLine.SETRANGE("Document No.", TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLineCount := SalesLine.COUNT;

        // Verify Sales Shipment Line Count = Sales Line Count.
        COMMIT;
        SalesShipmentHeader.SETRANGE("Order No.", SalesHeader."No.");
        SalesShipmentHeader.FINDFIRST;
        TestFunctions.InsertBuffer(3, SalesShipmentHeader."No.");
        SalesShipmentLine.SETRANGE("Document No.", SalesShipmentHeader."No.");
        Assert.AreEqual(SalesLineCount, SalesShipmentLine.COUNT,
          STRSUBSTNO(FieldError, SalesLine."Document No.", SalesShipmentLine."Document No."));
        SalesShipmentHeader.TESTFIELD("Order No.", SalesHeader."No.");
        SalesShipmentHeader.TESTFIELD("Ship-to Code", SalesHeader."Ship-to Code");
        SalesShipmentHeader.TESTFIELD("Ship-to Name", SalesHeader."Ship-to Name");
        SalesShipmentHeader.TESTFIELD("Ship-to Address", SalesHeader."Ship-to Address");
        SalesShipmentHeader.TESTFIELD("Ship-to Post Code", SalesHeader."Ship-to Post Code");
        SalesShipmentHeader.TESTFIELD("Ship-to City", SalesHeader."Ship-to City");

      UNTIL TestBuffer.NEXT = 0;
    END;

    [Test]
    PROCEDURE InvoiceWebSalesOrder@1000000017();
    BEGIN
      // Posts all the SalesHeaders found in Buffer table.

      Initialize;
      TestBuffer.SETRANGE("Entry Type", 2);
      TestBuffer.FINDFIRST;
      REPEAT

        // Posts Sales Order as Invoice
        COMMIT;
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.", SalesHeader."No.");
        SalesLine.SETRANGE(Type, SalesLine.Type::Item);
        SalesLine.FINDFIRST;
        REPEAT
          SalesLine.TESTFIELD(Quantity, 1);
        UNTIL SalesLine.NEXT = 0;
        LibrarySCM.PostSalesHeader2(SalesHeader,TRUE,TRUE);
        SalesLine.SETRANGE("Document No.", TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLineCount := SalesLine.COUNT;

        // Verify new Invoice exists
        COMMIT;
        SalesInvHeader.SETRANGE("Order No.", SalesHeader."No.");
        SalesInvHeader.FINDFIRST;
        TestFunctions.InsertBuffer(5, SalesInvHeader."No.");
        TestBuffer.SETRANGE("Entry Type", 5);
        TestBuffer.FINDFIRST;
        PostedSalesInvoiceNo := TestBuffer."Entry Value Code";
        SalesInvHeader.GET(PostedSalesInvoiceNo);
        SalesInvHeader.CALCFIELDS(Amount, "Amount Including VAT");
        SalesInvHeader.TESTFIELD("Order No.", SalesHeader."No.");
        SalesInvHeader.TESTFIELD("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
        SalesInvHeader.TESTFIELD("Bill-to Name", SalesHeader."Bill-to Name");
        SalesInvHeader.TESTFIELD("Bill-to Address", SalesHeader."Bill-to Address");
        SalesInvHeader.TESTFIELD("Bill-to Post Code", SalesHeader."Bill-to Post Code");
        SalesInvHeader.TESTFIELD("Bill-to City", SalesHeader."Bill-to City");
        VerifyGLEntry(PostedSalesInvoiceNo, SalesInvHeader."Amount Including VAT");
        VerifyCustomerLedgerEntry(PostedSalesInvoiceNo, SalesInvHeader."Amount Including VAT");
        VerifyVATEntry(PostedSalesInvoiceNo, SalesInvHeader."Amount Including VAT");
        VerifyValueEntry(PostedSalesInvoiceNo, SalesInvHeader.Amount);

      UNTIL TestBuffer.NEXT = 0;
    END;

    [Test]
    PROCEDURE CreatePurchOrderFromWeb@1000000011();
    BEGIN
      Initialize;

      // Verifies new Order exists
      SalesHeader.GET(SalesHeader."Document Type"::Order, SalesOrderNo);

      // Creates Batch-Post line Purch. Order
      BatchPostDoc.CreatePurchOrder(SalesHeader);

      // Verifies Batch-Post line exists
      BatchPostDoc.SETRANGE("Document No.", SalesHeader."No.");
      BatchPostDoc.SETFILTER("Action Type", '%1', BatchPostDoc."Action Type"::"Create Purch. Order");
      BatchPostDoc.FINDFIRST;

      // Runs the Batch-Post action
      COMMIT;
      BatchAutomProcess.SetBatchLine(BatchPostDoc);
      BatchAutomProcess.Code;

      // Verifies Purchase Order(s)
      SalesLine.SETRANGE("Document No.", SalesHeader."No.");
      SalesLine.SETFILTER("Purchase Order No.", '<>%1', '');
      SalesLine.FINDFIRST;
      REPEAT
        PurchHeader.GET(SalesHeader."Document Type"::Order, SalesLine."Purchase Order No.");
        PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Document No.", PurchHeader."No.");
        PurchLine.FINDFIRST;
        REPEAT
          PurchLine.GET(PurchLine."Document Type", PurchLine."Document No.", PurchLine."Line No.");
        UNTIL SalesLine.NEXT = 0;
      UNTIL SalesLine.NEXT = 0;
    END;

    [Test]
    PROCEDURE PostWebSalesOrder@1000000008();
    BEGIN
    END;

    LOCAL PROCEDURE VerifyGLEntry@2(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
      GeneralLedgerSetup@1004 : Record 98;
      TotalGLAmount@1003 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETFILTER(Amount,'>0');
      GLEntry.FINDSET;
      REPEAT
        TotalGLAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(Amount, TotalGLAmount, GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError, GLEntry.FIELDCAPTION(Amount), GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVATEntry@7(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      VATEntry@1002 : Record 254;
    BEGIN
      GeneralLedgerSetup.GET;
      VATEntry.SETRANGE("Document No.", DocumentNo);
      VATEntry.FINDFIRST;
      Assert.AreNearlyEqual(Amount,ABS(VATEntry.Base + VATEntry.Amount), GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError, VATEntry.FIELDCAPTION(Amount), VATEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@11(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      CustLedgerEntry@1002 : Record 21;
      GeneralLedgerSetup@1003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      CustLedgerEntry.SETRANGE("Document No.", DocumentNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.CALCFIELDS("Amount (LCY)");
      Assert.AreNearlyEqual(Amount,CustLedgerEntry."Amount (LCY)", GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError, CustLedgerEntry.FIELDCAPTION("Amount (LCY)"), CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyValueEntry@15(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      ValueEntry@1002 : Record 5802;
      SalesAmount@1004 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDSET;
      REPEAT
        SalesAmount += ValueEntry."Sales Amount (Actual)"
      UNTIL ValueEntry.NEXT = 0;
      Assert.AreNearlyEqual(Amount,SalesAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,ValueEntry.FIELDCAPTION("Sales Amount (Actual)"),ValueEntry.TABLECAPTION));
    END;

    [MessageHandler]
    PROCEDURE HandlerFunctionMsg@1000000001(Mensaxe@1000000000 : Text[1024]);
    BEGIN
      EXIT;
    END;

    [ReportHandler]
    PROCEDURE HandlerFunctionRpt@1000000000(VAR ReportNo@1000000000 : Report 50020);
    BEGIN
      EXIT;
    END;

    [ConfirmHandler]
    PROCEDURE HandlerConfirmMenu@1000000003(Question@1000000000 : Text[1024];VAR Reply@1000000001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    EVENT ResponseMessage@1000000024::ondataavailable@198();
    BEGIN
    END;

    EVENT ResponseMessage@1000000024::onreadystatechange@-609();
    BEGIN
    END;

    EVENT RequestMessage@1000000025::ondataavailable@198();
    BEGIN
    END;

    EVENT RequestMessage@1000000025::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    {
      Testing by HOME24:
        - Runs all the process from Sales Order --> Invoice (in Automatic & Manual)
        - This functions should be divided for each step.

      H1010       21.07.14  MBY       Cleanup of old shipment posting and invoicing jobs
    }
    END.
  }
}

