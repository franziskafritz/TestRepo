OBJECT Codeunit 50733 WHLF Interface - Helper
{
  OBJECT-PROPERTIES
  {
    Date=28.05.15;
    Time=19:07:09;
    Modified=Yes;
    Version List=HME4046;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000000002 : Codeunit 50200;
      LibrarySales@1000000001 : Codeunit 50701;
      SalesProcessHelper@1000000000 : Codeunit 50715;
      EntryNotFoundErr@1000000011 : TextConst 'ENU=There is no %1 Entry for the Document %2.';
      NoInvoiceErr@1000000013 : TextConst 'ENU=No Invoices were posted for Sales Order %1.';
      AmountErr@1000000014 : TextConst 'ENU=Wrong amount in Order %1.';
      FileErr@1000000009 : TextConst 'ENU=File %1 does not exist.';
      KAKLineErr@1000000008 : TextConst 'ENU=KAK Line is wrong on the position %1.';
      KALLineErr@1000000007 : TextConst 'ENU=KAL Line is wrong on the position %1.';
      KAPLineErr@1000000006 : TextConst 'ENU=KAP Line is wrong on the position %1.';
      ReservDateErr@1000000005 : TextConst 'ENU=Reservation KAD Date is wrong for Sales Order %1.';
      CancelKADErr@1000000010 : TextConst 'ENU=Cancelation of KAD is wrong for Return Order %1.';
      ReturnKADErr@1000000012 : TextConst 'ENU=Return KAD File is wrong for Return Order %1.';
      ItemLineErr@1000000003 : TextConst 'ENU=There no RHD Item Line for Sales Line %1 in Document %2.';
      WrongStatusErr@1000000004 : TextConst 'ENU=Status must be %1 in Order %2.';

    PROCEDURE CheckWHLFSetup@1000000007();
    VAR
      WHLFSetup@1000000000 : Record 50300;
    BEGIN
      WITH WHLFSetup DO BEGIN
        GET;
        TESTFIELD("LF Client Identifier",'LF');
        TESTFIELD("Branch Code",'001');
        TESTFIELD("Record Type KAK",'KAK');
        TESTFIELD("Record Type KAL",'KAL');
        TESTFIELD("Record Type KAA",'KAA');
        TESTFIELD("Record Type KAP",'KAP');
        TESTFIELD("Record Type STA",'STA');
      END;
    END;

    PROCEDURE CheckChannel@1000000009(ChannelCode@1000000001 : Code[10]);
    VAR
      Purchasing@1000000000 : Record 5721;
      PurchasingDE@1000000002 : Record 5721;
    BEGIN
      PurchasingDE.GET('GER' + DELSTR(ChannelCode,1,STRPOS(ChannelCode,'-') - 1));
      WITH Purchasing DO BEGIN
        GET(ChannelCode);
        TESTFIELD("Location Code",PurchasingDE."Location Code");
        TESTFIELD("Interface Code",PurchasingDE."Interface Code");
        TESTFIELD("Whse. LF Branch Code",PurchasingDE."Whse. LF Branch Code");
        TESTFIELD("Ch. activation",PurchasingDE."Ch. activation");
        TESTFIELD("Ch. activation pending prepay.",PurchasingDE."Ch. activation pending prepay.");
        TESTFIELD("Shipment through",PurchasingDE."Shipment through");
      END;
    END;

    PROCEDURE WHLFInitializeInterface@1000000019(ChannelCode@1000000000 : Code[10];TemplateName@1000000001 : Text[50]);
    VAR
      SalesHeader@1000000002 : Record 36;
      WHLFSalesExportHeader@1000000004 : Record 50304;
      SalesOrderNo@1000000005 : Code[20];
    BEGIN
      // Verify: RHD Sales Export Header.
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      VerifyLFSalesExportHeader(SalesHeader,ChannelCode,WHLFSalesExportHeader."Transmission Mode"::New);
    END;

    [Test]
    PROCEDURE CreateKADFile@1000000000(ChannelCode@1000000000 : Code[10];TemplateName@1000000002 : Text[50]);
    VAR
      SalesHeader@1000000003 : Record 36;
      SalesOrderNo@1000000005 : Code[20];
    BEGIN
      // SO -> Create KAD File.
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Check Status.
      LibrarySales.CheckReleaseSalesOrder(SalesHeader);

      // Create KAD File.
      CreateWHLFKADFile(SalesHeader);

      // Verify: KAD file is created.
      VerifyKADFile(SalesHeader."No.",ChannelCode);
    END;

    [Test]
    PROCEDURE CreateKADFileResource@1000000035(ChannelCode@1000000000 : Code[10];TemplateName@1000000001 : Text[50]);
    VAR
      SalesHeader@1000000003 : Record 36;
      SalesOrderNo@1000000002 : Code[20];
    BEGIN
      // SO -> Create KAD File.
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Check Status.
      LibrarySales.CheckReleaseSalesOrder(SalesHeader);

      // Create KAD File.
      CreateWHLFKADFile(SalesHeader);

      // Verify: KAD file is created.
      VerifyKADFile(SalesHeader."No.",ChannelCode);
    END;

    PROCEDURE ReserveOrderLF@1000000003(ChannelCode@1000000003 : Code[10];TemplateName@1000000007 : Text[50]);
    VAR
      SalesHeader@1000000005 : Record 36;
      WHLFSalesExportHeader@1000000000 : Record 50304;
      SalesOrderNo@1000000001 : Code[20];
    BEGIN
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,FALSE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD File.
      CreateWHLFKADFile(SalesHeader);

      // Verify: Order is reserved.
      VerifyOrderReserved(SalesHeader."No.",SalesHeader."Document Type");
      VerifyLinesReserved(SalesHeader."No.",SalesHeader."Document Type",ChannelCode);
      VerifyLFSalesExportHeader(SalesHeader,ChannelCode,WHLFSalesExportHeader."Transmission Mode"::New);
      VerifyKADFileReserved(SalesHeader."No.",TRUE);
    END;

    PROCEDURE ReserveOrderLFUpdPtm@1000000039(ChannelCode@1000000003 : Code[10];TemplateName@1000000007 : Text[50]);
    VAR
      SalesHeader@1000000005 : Record 36;
      WHLFSalesExportHeader@1000000000 : Record 50304;
      SalesOrderNo@1000000001 : Code[20];
    BEGIN
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,FALSE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD File.
      CreateWHLFKADFile(SalesHeader);
      SalesProcessHelper.PaymentReceived(SalesHeader."No.");
      CreateWHLFKADFile(SalesHeader);

      // Verify: Order RHD Document is updated.
      VerifyLFSalesExportHeader(SalesHeader,ChannelCode,WHLFSalesExportHeader."Transmission Mode"::Update);
      VerifyKADFileReserved(SalesHeader."No.",FALSE);
    END;

    PROCEDURE CancelReservation@1000000052(ChannelCode@1000000006 : Code[10];TemplateName@1000000004 : Text[50]);
    VAR
      FPCGeneralSetup@1000000007 : Record 50055;
      SalesHeader@1000000002 : Record 36;
      WHLFSalesExportHeader@1000000000 : Record 50304;
      SalesOrderNo@1000000005 : Code[20];
    BEGIN
      FPCGeneralSetup.GET;
      SalesOrderNo :=
        SalesProcessHelper.ImportSOTemplateWithOrderDate(
          TemplateName,CREATEDATETIME(CALCDATE(FORMAT(-FPCGeneralSetup."Days Cancel Whse. LF not paid") + 'D',WORKDATE),0T),FALSE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      CreateWHLFKADFile(SalesHeader);
      WHLFCancelNotPaidOrder(SalesHeader);
      CreateWHLFKADFile(SalesHeader);

      // Verify: Order RHD Document is updated.
      VerifyLFSalesExportHeader(SalesHeader,ChannelCode,WHLFSalesExportHeader."Transmission Mode"::Cancel);
      VerifyKADFileCanceled(SalesHeader."No.",ChannelCode);
    END;

    PROCEDURE ImportSTAFileStatus0@1000000011(ChannelCode@1000000000 : Code[10];TemplateName@1000000001 : Text[50]);
    VAR
      SalesHeader@1000000002 : Record 36;
      StatusCode@1000000004 : Code[20];
      SalesOrderNo@1000000006 : Code[20];
    BEGIN
      // Check Status.
      StatusCode := '0';
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD&STA Files.
      CreateWHLFKADFile(SalesHeader);
      CreateWHLFSTAFile(SalesHeader."No.",StatusCode);
      SalesProcessHelper.RunJobQueue(50300,'STA');
      SalesProcessHelper.RunJobQueue(50300,'STAPROCESS');

      // Verify: .
      VerifyWHLFSalesImport(SalesHeader."No.",'STA');
      VerifyWHLFParcelStatusEntry(SalesHeader."No.",StatusCode);
    END;

    PROCEDURE ImportSTAFileStatus40@1000000015(ChannelCode@1000000000 : Code[10];TemplateName@1000000005 : Text[50]);
    BEGIN
      // H3925  26.03.15  MM +++++++++++++++
      ImportSTAFileShipStatus(ChannelCode,TemplateName,'40');
      // H3925  26.03.15  MM ---------------
    END;

    PROCEDURE ImportSTAFileStatus41@1000000065(ChannelCode@1000000000 : Code[10];TemplateName@1000000005 : Text[50]);
    BEGIN
      // H3925  26.03.15  MM +++++++++++++++
      ImportSTAFileShipStatus(ChannelCode,TemplateName,'41');
      // H3925  26.03.15  MM ---------------
    END;

    LOCAL PROCEDURE ImportSTAFileShipStatus@1000000016(ChannelCode@1000000000 : Code[10];TemplateName@1000000005 : Text[50];StatusCode@1000000001 : Code[20]);
    VAR
      SalesHeader@1000000002 : Record 36;
      SalesOrderNo@1000000006 : Code[20];
    BEGIN
      // H3925  26.03.15  MM +++++++++++++++
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD&STA Files.
      ProcessWHLFInterface(SalesHeader,StatusCode);

      // Verify: .
      VerifyWHLFSalesImport(SalesHeader."No.",'STA');
      VerifyWHLFParcelStatusEntry(SalesHeader."No.",StatusCode);
      VerifyBatchSalesPostEntry(SalesHeader."No.",0,1); // 0 - Ship; 1 - Open.
      // H3925  26.03.15  MM ---------------
    END;

    PROCEDURE ImportSTAFileStatusToArchived@1000000101(ChannelCode@1000000000 : Code[10];TemplateName@1000000006 : Text[50]);
    VAR
      SalesHeader@1000000002 : Record 36;
      StatusCode@1000000004 : Code[20];
      SalesOrderNo@1000000005 : Code[20];
    BEGIN
      StatusCode := '10';
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD file, Ship & Invoice.
      CreateWHLFKADFile(SalesHeader);
      LibrarySales.PostSalesDocument(SalesHeader);

      // Create&Import STA Files.
      ImportWHLFSTAFile(SalesHeader,StatusCode);

      // Verify: .
      VerifyWHLFSalesImport(SalesHeader."No.",'STA');
      VerifyLFParcelStatusArchEntry(SalesHeader."No.",StatusCode);
    END;

    PROCEDURE ShipSalesOrderWithJob@1000000070(ChannelCode@1000000000 : Code[10];TemplateName@1000000005 : Text[50]);
    VAR
      SalesHeader@1000000003 : Record 36;
      StatusCode@1000000002 : Code[20];
      SalesOrderNo@1000000001 : Code[20];
    BEGIN
      StatusCode := '41';
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD&STA Files.
      ProcessWHLFInterface(SalesHeader,StatusCode);
      SalesProcessHelper.BatchSalesPostChangeDate(SalesHeader."No.",0);
      SalesProcessHelper.RunJobQueueWithCleanup(50266,SalesHeader."No.");

      // Verify: .
      VerifyBatchSalesPostEntry(SalesHeader."No.",0,2); // 0 - Ship; 1 - Success.
      VerifyPostedShipment(SalesHeader."No.");
    END;

    PROCEDURE ImportDHLProactivFileSRTD@1000000089(ChannelCode@1000000000 : Code[10];TemplateName@1000000006 : Text[50]);
    VAR
      SalesHeader@1000000004 : Record 36;
      StatusCode@1000000003 : Code[20];
      StatusSubCode@1000000001 : Code[20];
      SalesOrderNo@1000000007 : Code[20];
    BEGIN
      StatusCode := 'SRTED';
      StatusSubCode := 'NRQRD';
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD, import STA Files, import DHL Status.
      CreateWHLFKADFile(SalesHeader);
      ImportWHLFSTAFile(SalesHeader,'0');
      ImportWHLFSTAFile(SalesHeader,'41');
      SalesProcessHelper.ImportDHLProactivFile(SalesHeader,StatusCode,StatusSubCode);

      // Verify: .
      VerifyDHLParcelStatusEntry(SalesHeader."No.",StatusCode,StatusSubCode);
    END;

    PROCEDURE ImportDHLProactivFileDLVRD@1000000091(ChannelCode@1000000000 : Code[10];TemplateName@1000000006 : Text[50]);
    VAR
      SalesHeader@1000000004 : Record 36;
      StatusCode@1000000003 : Code[20];
      StatusSubCode@1000000001 : Code[20];
      SalesOrderNo@1000000007 : Code[20];
    BEGIN
      StatusCode := 'DLVRD';
      StatusSubCode := 'ACCPT';
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD, import STA Files, import DHL Status.
      ProcessWHLFInterface(SalesHeader,'0');
      SalesProcessHelper.ImportDHLProactivFile(SalesHeader,StatusCode,StatusSubCode);
      SalesProcessHelper.FillSalesDateChangeDate(SalesHeader."No.");
      SalesProcessHelper.RunJobQueueWithCleanup(50240,SalesHeader."No.");

      // Verify: .
      VerifyDHLParcelStatusEntry(SalesHeader."No.",StatusCode,StatusSubCode);
      VerifyFillSalesDatesEntryState(SalesHeader."No.");
    END;

    PROCEDURE ImportDHLProactivFileShipInv@1000000093(ChannelCode@1000000000 : Code[10];TemplateName@1000000007 : Text[50]);
    VAR
      SalesHeader@1000000004 : Record 36;
      StatusCode@1000000003 : Code[20];
      StatusSubCode@1000000001 : Code[20];
      TotalAmt@1000000006 : Decimal;
      SalesOrderNo@1000000008 : Code[20];
    BEGIN
      StatusCode := 'DLVRD';
      StatusSubCode := 'ACCPT';
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      SalesHeader.CALCFIELDS("Amount Including VAT");
      TotalAmt := SalesHeader."Amount Including VAT";

      // Create KAD, import STA Files, import DHL Status.
      CreateWHLFKADFile(SalesHeader);
      ImportWHLFSTAFile(SalesHeader,'0');
      ImportWHLFSTAFile(SalesHeader,'41');
      SalesProcessHelper.BatchSalesPostChangeDate(SalesHeader."No.",0);
      SalesProcessHelper.RunJobQueueWithCleanup(50266,SalesHeader."No.");

      SalesProcessHelper.ImportDHLProactivFile(SalesHeader,StatusCode,StatusSubCode);
      SalesProcessHelper.FillSalesDateChangeDate(SalesHeader."No.");
      SalesProcessHelper.RunJobQueueWithCleanup(50240,SalesHeader."No.");

      SalesProcessHelper.BatchSalesPostChangeDate(SalesHeader."No.",1);
      SalesProcessHelper.RunJobQueueWithCleanup(50267,SalesHeader."No.");

      // Verify: .
      VerifyPostedSalesInvoice(SalesHeader."No.",TotalAmt);
      VerifyCustLedgerEntries(SalesHeader."No.",SalesHeader."Document Date",TotalAmt);
      VerifyBatchSalesPostArchEntry(SalesHeader."No.",0,2); // 0 - Ship; 2 - Success.
      VerifyBatchSalesPostArchEntry(SalesHeader."No.",1,2); // 1 - Invoice; 2 - Success.
    END;

    PROCEDURE CancelWHLFInterface@1000000028(ChannelCode@1000000000 : Code[10];TemplateName@1000000007 : Text[50]);
    VAR
      SalesHeader@1000000004 : Record 36;
      SalesLine@1000000003 : Record 37;
      RHDSalesExportHeader@1000000006 : Record 50181;
      SalesOrderNo@1000000001 : Code[20];
    BEGIN
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD File.
      CreateWHLFKADFile(SalesHeader);
      SalesProcessHelper.SetReturnTypeToLine(SalesHeader."No.",SalesLine."Return Type"::Cancelation);
      LibrarySales.CreateReturnOrderFromOpen(SalesHeader."No.");

      // Cancelation Part.
      LibrarySales.CancelOrderInterface(SalesHeader);
      SalesProcessHelper.RunJobQueueWithCleanup(50087,SalesHeader."No.");
      CreateWHLFKADFile(SalesHeader);

      // Verify: .
      VerifyLFSalesExportHeader(SalesHeader,ChannelCode,RHDSalesExportHeader."Transmission Mode"::Delete);
      VerifyKADFileCanceled(SalesHeader."No.",ChannelCode);
    END;

    PROCEDURE WHLFInterfaceToReturn@1000000030(ChannelCode@1000000000 : Code[10];TemplateName@1000000008 : Text[50]);
    VAR
      SalesHeader@1000000004 : Record 36;
      SalesHeaderReturn@1000000007 : Record 36;
      SalesLine@1000000003 : Record 37;
      WHLFSalesExportHeader@1000000006 : Record 50304;
      SalesOrderNo@1000000001 : Code[20];
    BEGIN
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD File.
      CreateWHLFKADFile(SalesHeader);
      LibrarySales.ShipSalesDocument(SalesHeader);

      // Return Part.
      SalesProcessHelper.SetReturnTypeToLine(SalesHeader."No.",SalesLine."Return Type"::Return);
      LibrarySales.CreateReturnOrderFromOpen(SalesHeader."No.");

      SalesHeaderReturn.GET(
        SalesHeaderReturn."Document Type"::"Return Order",LibrarySales.FindReturnSalesHeader(SalesHeader."No."));
      LibrarySales.CheckReleaseSalesOrder(SalesHeaderReturn);
      SalesProcessHelper.SetReturnStatusToReturnOrder(SalesHeader."No.",SalesHeader."Status Return Order"::finished);
      // H3981  26.03.15  MM +++++++++++++++
      TriggerWHLFReturnInterface(SalesHeaderReturn);

      // Verify: .
      VerifyLFSalesExportHeaderNoEnt(SalesHeaderReturn);
      // H3981  26.03.15  MM ---------------
    END;

    PROCEDURE WHLFInterfaceToChange@1000000064(ChannelCode@1000000000 : Code[10];TemplateName@1000000008 : Text[50]);
    VAR
      SalesHeader@1000000004 : Record 36;
      SalesHeaderFollowOn@1000000007 : Record 36;
      SalesLine@1000000003 : Record 37;
      RHDSalesExportHeader@1000000006 : Record 50181;
      SalesOrderNo@1000000001 : Code[20];
    BEGIN
      // RHD Interface Change
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD File.
      CreateWHLFKADFile(SalesHeader);
      LibrarySales.ShipSalesDocument(SalesHeader);

      // Change Part.
      SalesProcessHelper.SetReturnTypeToLine(SalesHeader."No.",SalesLine."Return Type"::Change);
      LibrarySales.CreateReturnOrderFromOpen(SalesHeader."No.");
      LibrarySales.CreateReturnFollowOnOrder(SalesHeader."No.");

      // Create Follow on Sales Order.
      SalesHeaderFollowOn.GET(
        SalesHeaderFollowOn."Document Type"::Order,LibrarySales.GetFollowOnOrderNo(SalesHeader."No."));
      LibrarySales.CheckReleaseSalesOrder(SalesHeaderFollowOn);
      SalesProcessHelper.PaymentReceived(SalesHeaderFollowOn."No.");
      CreateWHLFKADFile(SalesHeaderFollowOn);

      // Verify: .
      VerifyLFSalesExportHeader(SalesHeaderFollowOn,ChannelCode,RHDSalesExportHeader."Transmission Mode"::New);
      VerifyKADFile(SalesHeaderFollowOn."No.",ChannelCode);
    END;

    PROCEDURE ChangeChannelCancelInterface@1000000001(ChannelCode@1000000001 : Code[10];NewChannelCode@1000000002 : Code[10];TemplateName@1000000000 : Text[50]);
    VAR
      SalesHeader@1000000007 : Record 36;
      RHDSalesExportHeader@1000000004 : Record 50181;
      SalesOrderNo@1000000005 : Code[20];
    BEGIN
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Check Status.
      LibrarySales.CheckReleaseSalesOrder(SalesHeader);
      SalesProcessHelper.PaymentReceived(SalesHeader."No.");

      // Create KAD File.
      CreateWHLFKADFile(SalesHeader);

      // Change Channel.
      LibrarySales.ChangeChannel(SalesHeader,ChannelCode,NewChannelCode);
      CreateWHLFKADFile(SalesHeader);

      // Verify: .
      VerifyLFSalesExpHeaderChannel(SalesHeader,ChannelCode,RHDSalesExportHeader."Transmission Mode"::Delete);
      VerifyKADFileCanceled(SalesHeader."No.",ChannelCode);
    END;

    PROCEDURE ImportSTAFileTrackingCode@1000000002(ChannelCode@1000000000 : Code[10];TemplateName@1000000005 : Text[50]);
    VAR
      WhseLFTrackingNoLog@1000000008 : Record 50316;
      SalesHeader@1000000002 : Record 36;
      ParcelStatusHistory@1000000001 : Record 80013;
      LibraryUtility@1000000007 : Codeunit 50206;
      StatusCode@1000000004 : Code[20];
      SalesOrderNo@1000000006 : Code[20];
      TrackingCode@1000000003 : Text[40];
    BEGIN
      StatusCode := '31';
      // H4046  13.04.15  MM +++++++++++++++
      TrackingCode :=
        LibraryUtility.GenerateRandomCode(WhseLFTrackingNoLog.FIELDNO("Tracking No."),DATABASE::"Whse. LF Tracking No. Log");
      // H4046  13.04.15  MM ---------------
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD&STA Files.
      CreateWHLFKADFile(SalesHeader);
      CreateWHLFSTAGeneralFile(SalesHeader."No.",StatusCode,TrackingCode,CURRENTDATETIME);
      SalesProcessHelper.RunJobQueue(50300,'STA');
      SalesProcessHelper.RunJobQueue(50300,'STAPROCESS');

      // Verify: .
      VerifyWHLFSalesImport(SalesHeader."No.",'STA');
      VerifyLFTrackingNo(SalesHeader."No.",'STA',TrackingCode);
      VerifyWHLFParcelStatusEntry(SalesHeader."No.",StatusCode);
      VerifyPSHTrackingNo(SalesHeader."No.",ParcelStatusHistory."Used Interface"::WHSLF,TrackingCode);
    END;

    PROCEDURE ImportDPDScanInfoFile@1000000006(ChannelCode@1000000000 : Code[10];TemplateName@1000000005 : Text[50]);
    VAR
      SalesHeader@1000000002 : Record 36;
      ParcelStatusHistory@1000000001 : Record 80013;
      StatusCode@1000000004 : Code[2];
      SalesOrderNo@1000000006 : Code[20];
      TrackingCode@1000000003 : Text[14];
    BEGIN
      StatusCode := '01';
      TrackingCode := LibrarySales.GetNextDPDTrackingNo;
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD&STA Files.
      CreateWHLFKADFile(SalesHeader);
      CreateWHLFSTAGeneralFile(SalesHeader."No.",'31',TrackingCode,CURRENTDATETIME);
      SalesProcessHelper.RunJobQueue(50300,'STA');
      SalesProcessHelper.RunJobQueue(50300,'STAPROCESS');

      // Import DPD Scaninfo file.
      SalesProcessHelper.ImportDPDScanInfoFile(StatusCode,TrackingCode);

      // Verify: .
      VerifyDPDParcelStatusEntry(SalesHeader."No.",StatusCode);
      VerifyPSHTrackingNo(SalesHeader."No.",ParcelStatusHistory."Used Interface"::DPD,TrackingCode);
      VerifyDPDScanInfoEntry(StatusCode,TrackingCode);
    END;

    PROCEDURE ImportDPDScanInfoFileADD@1000000056(ChannelCode@1000000000 : Code[10];TemplateName@1000000005 : Text[50]);
    VAR
      SalesHeader@1000000002 : Record 36;
      ParcelStatusHistory@1000000001 : Record 80013;
      StatusCode@1000000004 : Code[2];
      SalesOrderNo@1000000006 : Code[20];
      TrackingCode@1000000003 : Text[14];
    BEGIN
      StatusCode := '13';
      TrackingCode := LibrarySales.GetNextDPDTrackingNo;
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      // Create KAD&STA Files.
      CreateWHLFKADFile(SalesHeader);
      CreateWHLFSTAGeneralFile(SalesHeader."No.",'31',TrackingCode,CURRENTDATETIME);
      SalesProcessHelper.RunJobQueue(50300,'STA');
      SalesProcessHelper.RunJobQueue(50300,'STAPROCESS');

      // Import DPD Scaninfo file, fill ADD.
      SalesProcessHelper.ImportDPDScanInfoFile(StatusCode,TrackingCode);
      SalesProcessHelper.FillSalesDateChangeDate(SalesHeader."No.");
      SalesProcessHelper.RunJobQueueWithCleanup(50240,SalesHeader."No.");

      // Verify: .
      VerifyDPDParcelStatusEntry(SalesHeader."No.",StatusCode);
      VerifyPSHTrackingNo(SalesHeader."No.",ParcelStatusHistory."Used Interface"::DPD,TrackingCode);
      VerifyFillSalesDatesEntryState(SalesHeader."No.");
    END;

    PROCEDURE ImportDPDScanInfoFileShipInv@1000000061(ChannelCode@1000000000 : Code[10];TemplateName@1000000005 : Text[50]);
    VAR
      SalesHeader@1000000002 : Record 36;
      StatusCode@1000000004 : Code[2];
      SalesOrderNo@1000000006 : Code[20];
      TotalAmt@1000000007 : Decimal;
      TrackingCode@1000000003 : Text[14];
    BEGIN
      StatusCode := '13';
      TrackingCode := LibrarySales.GetNextDPDTrackingNo;
      SalesOrderNo := SalesProcessHelper.ImportSalesOrderTemplate(TemplateName,TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);

      SalesHeader.CALCFIELDS("Amount Including VAT");
      TotalAmt := SalesHeader."Amount Including VAT";

      // Create KAD&STA Files.
      // H4046  13.04.15  MM +++++++++++++++
      CreateWHLFKADFile(SalesHeader);
      CreateWHLFSTAGeneralFile(SalesHeader."No.",'31',TrackingCode,CURRENTDATETIME);
      SalesProcessHelper.RunJobQueue(50300,'STA');
      SalesProcessHelper.RunJobQueue(50300,'STAPROCESS');
      ImportWHLFSTAFile(SalesHeader,'41');
      // H4046  13.04.15  MM ---------------

      // Ship Sales Order.
      SalesProcessHelper.BatchSalesPostChangeDate(SalesHeader."No.",0);
      SalesProcessHelper.RunJobQueueWithCleanup(50266,SalesHeader."No.");

      // Import DPD Scaninfo file, fill ADD.
      SalesProcessHelper.ImportDPDScanInfoFile(StatusCode,TrackingCode);
      SalesProcessHelper.FillSalesDateChangeDate(SalesHeader."No.");
      SalesProcessHelper.RunJobQueueWithCleanup(50240,SalesHeader."No.");

      // Invoice Sales Order.
      SalesProcessHelper.BatchSalesPostChangeDate(SalesHeader."No.",1);
      SalesProcessHelper.RunJobQueueWithCleanup(50267,SalesHeader."No.");

      // Verify: .
      VerifyPostedSalesInvoice(SalesHeader."No.",TotalAmt);
      VerifyCustLedgerEntries(SalesHeader."No.",SalesHeader."Document Date",TotalAmt);
      VerifyBatchSalesPostArchEntry(SalesHeader."No.",0,2); // 0 - Ship; 2 - Success.
      VerifyBatchSalesPostArchEntry(SalesHeader."No.",1,2); // 1 - Invoice; 2 - Success.
    END;

    PROCEDURE ImportWHLFSTAFile@1000000068(VAR SalesHeader@1000000000 : Record 36;StatusCode@1000000001 : Code[20]);
    BEGIN
      CreateWHLFSTAFile(SalesHeader."No.",StatusCode);
      SalesProcessHelper.RunJobQueue(50300,'STA');
      SalesProcessHelper.RunJobQueue(50300,'STAPROCESS');
    END;

    PROCEDURE ProcessWHLFInterface@1000000096(VAR SalesHeader@1000000001 : Record 36;StatusCode@1000000000 : Code[20]);
    BEGIN
      CreateWHLFKADFile(SalesHeader);
      ImportWHLFSTAFile(SalesHeader,StatusCode);
    END;

    LOCAL PROCEDURE TriggerWHLFReturnInterface@1000000026(SalesHeader@1000000000 : Record 36);
    VAR
      WHLFSalesInterfaceMgt@1000000001 : Codeunit 50303;
    BEGIN
      WHLFSalesInterfaceMgt.SetSalesReturnOrderValue(TRUE);
      WHLFSalesInterfaceMgt.TriggerWhsLFFromSalesHeader(SalesHeader);
    END;

    PROCEDURE CreateWHLFKADFile@1000000032(SalesHeader@1000000000 : Record 36);
    VAR
      WHLFSetup@1000000002 : Record 50300;
      WHLFSalesExportHeader@1000000001 : Record 50304;
      WHLFSalesExportMgt@1000000003 : Codeunit 50301;
    BEGIN
      WHLFSetup.GET;
      WHLFSalesExportHeader.SETCURRENTKEY("Document Type","Document No.");
      WHLFSalesExportHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      WHLFSalesExportHeader.SETRANGE("Document No.",SalesHeader."No.");
      WHLFSalesExportHeader.FINDSET;
      REPEAT
        CLEAR(WHLFSalesExportMgt);
        // H3934  20.03.15  MM +++++++++++++++
        WHLFSalesExportMgt.SetInterfaceCode(WHLFSetup."Record Type KAD");
        // H3934  20.03.15  MM ---------------
        WHLFSalesExportMgt.SetWhseLFSalesExpHeader(WHLFSalesExportHeader);
        WHLFSalesExportMgt.RUN;

        WHLFSalesExportHeader.FIND;
        IF WHLFSalesExportHeader.Status = WHLFSalesExportHeader.Status::Unprocessed THEN BEGIN
          WHLFSalesExportHeader.Status := WHLFSalesExportHeader.Status::Exported;
          WHLFSalesExportHeader.MODIFY(TRUE);
        END;
      UNTIL WHLFSalesExportHeader.NEXT = 0;
    END;

    PROCEDURE CreateWHLFSTAFile@1000000042(SalesOrderCode@1000000008 : Code[20];StatusCode@1000000010 : Text[20]);
    BEGIN
      CreateWHLFSTAGeneralFile(SalesOrderCode,StatusCode,'',CURRENTDATETIME);
    END;

    PROCEDURE CreateWHLFSTAGeneralFile@1000000041(SalesOrderCode@1000000008 : Code[20];StatusCode@1000000010 : Text[20];TrackingCode@1000000006 : Text[50];OrderDate@1000000012 : DateTime);
    VAR
      WHLFSetup@1000000014 : Record 50300;
      WhseH24SunInterface@1000000007 : Record 50506;
      WHLFSalesExportHeader@1000000013 : Record 50304;
      WHLFSalesExpLine@1000000009 : Record 50305;
      RHDGeneralMgt@1000000005 : Codeunit 50157;
      FilePath@1000000001 : Text[250];
      FileName@1000000004 : Text[50];
      TextLine@1000000003 : Text[1024];
      tBigText@1000000000 : BigText;
      CR@1000000011 : Char;
      LF@1000000002 : Char;
    BEGIN
      CR := 13;
      LF := 10;

      WHLFSetup.GET;
      // H3934  20.03.15  MM +++++++++++++++
      WhseH24SunInterface.GET(WHLFSetup."Record Type STA",WHLFSetup."LF Client Identifier");
      FilePath := LibrarySales.GetImportFilePath(WhseH24SunInterface."FPC Interface Setup Code");
      // H3934  20.03.15  MM ---------------
      FileName := GetSTAFileName;

      GetWHLFSalesHeader(WHLFSalesExportHeader,SalesOrderCode);
      WHLFSalesExpLine.SETRANGE("Entry No.",WHLFSalesExportHeader."Entry No.");
      WHLFSalesExpLine.FINDSET;
      REPEAT
        CLEAR(TextLine);
        RHDGeneralMgt.AppendToString(TextLine,WHLFSetup."Record Type STA",3,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,WHLFSetup."LF Client Identifier",4,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,WHLFSalesExportHeader."LF Order No.",20,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,SalesOrderCode,20,' ',1);

        // H3934  20.03.15  MM +++++++++++++++
        RHDGeneralMgt.AppendToString(TextLine,' ',10,' ',1);
        // H3934  20.03.15  MM ---------------
        RHDGeneralMgt.AppendToString(TextLine,FORMAT(WHLFSalesExpLine."Pos. No."),5,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,'1',3,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,WHLFSalesExpLine."No.",30,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,FORMAT(ROUND(WHLFSalesExpLine.Quantity,1)),5,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,'M',1,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,StatusCode,2,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,TrackingCode,500,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,FORMAT(OrderDate,0,'<day,2>.<month,2>.<year4><Hours24,2>:<Minutes,2>'),39,' ',1);
        RHDGeneralMgt.AppendToString(
          TextLine,FORMAT(CURRENTDATETIME,0,'<day,2>.<month,2>.<year4>-<Hours24,2>:<Minutes,2>:<Seconds,2>'),19,' ',1);
        TextLine := TextLine + ';';
        tBigText.ADDTEXT(TextLine + FORMAT(CR) + FORMAT(LF));
      UNTIL WHLFSalesExpLine.NEXT = 0;

      LibrarySales.FileConvertToANSI(FilePath,FileName,tBigText);
    END;

    PROCEDURE CreateWHMGSTAGeneralFile@1000000029(SalesOrderCode@1000000008 : Code[20];StatusCode@1000000010 : Text[20];TrackingCode@1000000006 : Text[50];OrderDate@1000000012 : DateTime);
    VAR
      WHLFSetup@1000000014 : Record 50300;
      WhseH24SunInterface@1000000007 : Record 50506;
      WHLFSalesExportHeader@1000000013 : Record 50304;
      WHLFSalesExpLine@1000000009 : Record 50305;
      RHDGeneralMgt@1000000005 : Codeunit 50157;
      FilePath@1000000001 : Text[250];
      FileName@1000000004 : Text[50];
      TextLine@1000000003 : Text[1024];
      tBigText@1000000000 : BigText;
      CR@1000000011 : Char;
      LF@1000000002 : Char;
    BEGIN
      //4273
      CR := 13;
      LF := 10;

      WHLFSetup.GET;
      // H3934  20.03.15  MM +++++++++++++++
      WhseH24SunInterface.GET(WHLFSetup."Record Type STA",WHLFSetup."LF Client Identifier");
      FilePath := LibrarySales.GetImportFilePath(WhseH24SunInterface."FPC Interface Setup Code");
      // H3934  20.03.15  MM ---------------
      FileName := GetSTAFileName;

      GetWHLFSalesHeader(WHLFSalesExportHeader,SalesOrderCode);
      WHLFSalesExpLine.SETRANGE("Entry No.",WHLFSalesExportHeader."Entry No.");
      WHLFSalesExpLine.FINDSET;
      REPEAT
        CLEAR(TextLine);
        RHDGeneralMgt.AppendToString(TextLine,WHLFSetup."Record Type STA",3,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,'MG',4,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,WHLFSalesExportHeader."LF Order No.",20,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,SalesOrderCode,20,' ',1);

        // H3934  20.03.15  MM +++++++++++++++
        RHDGeneralMgt.AppendToString(TextLine,' ',10,' ',1);
        // H3934  20.03.15  MM ---------------
        RHDGeneralMgt.AppendToString(TextLine,FORMAT(WHLFSalesExpLine."Pos. No."),5,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,'1',3,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,WHLFSalesExpLine."No.",30,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,FORMAT(ROUND(WHLFSalesExpLine.Quantity,1)),5,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,'M',1,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,StatusCode,5,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,TrackingCode,500,' ',1);
        RHDGeneralMgt.AppendToString(TextLine,FORMAT(OrderDate,0,'<day,2>.<month,2>.<year4><Hours24,2>:<Minutes,2>'),39,' ',1);
        RHDGeneralMgt.AppendToString(
          TextLine,FORMAT(CURRENTDATETIME,0,'<day,2>.<month,2>.<year4>-<Hours24,2>:<Minutes,2>:<Seconds,2>'),19,' ',1);
        TextLine := TextLine + ';';
        tBigText.ADDTEXT(TextLine + FORMAT(CR) + FORMAT(LF));
      UNTIL WHLFSalesExpLine.NEXT = 0;

      LibrarySales.FileConvertToANSI(FilePath,FileName,tBigText);
    END;

    LOCAL PROCEDURE GetSTAFileName@1000000037() : Text[50];
    VAR
      WHLFSetup@1000000000 : Record 50300;
    BEGIN
      WHLFSetup.GET;
      EXIT(
        WHLFSetup."Record Type STA" + WHLFSetup."LF Client Identifier" +
        FORMAT(CURRENTDATETIME,0,'<Year4><Month,2><Day,2><Hours24,2><Minutes,2><Seconds,2><Thousands,3>') + '.txt');
    END;

    LOCAL PROCEDURE GetWHLFSalesHeader@1000000043(VAR WHLFSalesExpHeader@1000000001 : Record 50304;SalesOrderCode@1000000000 : Code[20]);
    BEGIN
      WHLFSalesExpHeader.SETRANGE("Document Type",WHLFSalesExpHeader."Document Type"::Order);
      WHLFSalesExpHeader.SETRANGE("Document No.",SalesOrderCode);
      WHLFSalesExpHeader.FINDLAST;
    END;

    LOCAL PROCEDURE CutStr@1000000024(Str@1000000000 : Text[1024];StartPos@1000000001 : Integer;EndPos@1000000002 : Integer) : Text[1024];
    BEGIN
      EXIT(LibrarySales.TrimSpaces(COPYSTR(Str,StartPos,EndPos)));
    END;

    LOCAL PROCEDURE GetLineQty@1000000010(DocNo@1000000000 : Code[20];LineType@1000000002 : Option) : Integer;
    VAR
      RHDSalesExportLine@1000000001 : Record 50182;
    BEGIN
      WITH RHDSalesExportLine DO BEGIN
        SETRANGE("Attached to Document No.",DocNo);
        SETRANGE(Type,LineType);
        EXIT(COUNT);
      END;
    END;

    LOCAL PROCEDURE GetDelivTypeFromLFLine@1000000023(EntryNo@1000000001 : Integer) : Integer;
    VAR
      WHLFSalesExportLine@1000000000 : Record 50305;
      Purchasing@1000000002 : Record 5721;
    BEGIN
      WHLFSalesExportLine.SETRANGE("Entry No.",EntryNo);
      WHLFSalesExportLine.FINDFIRST;
      Purchasing.GET(WHLFSalesExportLine."Purchasing Code");
      EXIT(Purchasing."Delivery Type");
    END;

    PROCEDURE WHLFCancelNotPaidOrder@1000000054(SalesHeader@1000000001 : Record 36);
    VAR
      SalesHeader2@1000000002 : Record 36;
      WHLFCancelNotPaidOrders@1000000000 : Report 50305;
    BEGIN
      SalesHeader2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader2.SETRANGE("No.",SalesHeader."No.");

      WHLFCancelNotPaidOrders.SETTABLEVIEW(SalesHeader2);
      WHLFCancelNotPaidOrders.USEREQUESTFORM(FALSE);
      WHLFCancelNotPaidOrders.SAVEASXML(TEMPORARYPATH + FORMAT(SalesHeader."No.") + '.xml');
    END;

    LOCAL PROCEDURE VerifyKADFile@1000000080(DocNo@1000000009 : Code[20];ChannelCode@1000000003 : Code[10]);
    VAR
      WHLFSetup@1000000013 : Record 50300;
      WhseH24SunInterface@1000000002 : Record 50506;
      WHLFSalesExportHeader@1000000012 : Record 50304;
      Purchasing@1000000010 : Record 5721;
      FileObject@1000000008 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      UTFStream@1000000007 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      LocFile@1000000001 : File;
      String@1000000006 : Text[1024];
      FilePath@1000000005 : Text[250];
      FileNameTxt@1000000000 : Text[250];
      LineNo@1000000011 : Integer;
      charL@1000000019 : Char;
    BEGIN
      WHLFSetup.GET;
      Purchasing.GET(ChannelCode);
      LineNo := 0;
      IF ISCLEAR(FileObject) THEN
        CREATE(FileObject,TRUE,TRUE);

      // H3934  20.03.15  MM +++++++++++++++
      WhseH24SunInterface.GET(WHLFSetup."Record Type KAD",WHLFSetup."LF Client Identifier");
      FilePath := LibrarySales.GetExportFilePath(WhseH24SunInterface."FPC Interface Setup Code");
      // H3934  20.03.15  MM ---------------

      WHLFSalesExportHeader.SETCURRENTKEY("Document Type","Document No.");
      WHLFSalesExportHeader.SETRANGE("Document Type",WHLFSalesExportHeader."Document Type"::Order);
      WHLFSalesExportHeader.SETRANGE("Document No.",DocNo);
      WHLFSalesExportHeader.SETRANGE("Branch Code",Purchasing."Whse. LF Branch Code");
      WHLFSalesExportHeader.FINDLAST;

      FileNameTxt := FilePath + WHLFSalesExportHeader.Filename;
      Assert.IsTrue(FileObject.FileExists(FileNameTxt),STRSUBSTNO(FileErr,FileNameTxt));

      // Read File as Stream
      LocFile.OPEN(FileNameTxt);
      CREATE(UTFStream);
      UTFStream.Open;
      UTFStream.Charset('utf-8');
      UTFStream.LoadFromFile(FileNameTxt);

      WHILE NOT UTFStream.EOS DO BEGIN
        EVALUATE(charL,UTFStream.ReadText(1));
        IF (charL <> 10) AND (charL <> 13) THEN BEGIN
          String := String + FORMAT(charL);
        END ELSE
          IF (String <> '') AND (STRLEN(String) > 0) THEN BEGIN
            LineNo += 1;
            CASE LineNo OF
              1:
                VerifyKAKLine(WHLFSalesExportHeader,String);
              2:
                VerifyKALLine(WHLFSalesExportHeader,String);
            END;
            String := '';
          END;
      END;

      UTFStream.Close;
      LocFile.CLOSE;
    END;

    LOCAL PROCEDURE VerifyKAKLine@1000000033(WHLFSalesExportHeader@1000000000 : Record 50304;String@1000000001 : Text[1024]);
    VAR
      WHLFSetup@1000000004 : Record 50300;
      Purchasing@1000000003 : Record 5721;
    BEGIN
      WHLFSetup.GET;
      WITH WHLFSalesExportHeader DO BEGIN
        Assert.AreEqual("Record Type",CutStr(String,1,3),STRSUBSTNO(KAKLineErr,1));
        Assert.AreEqual(WHLFSetup."LF Client Identifier",CutStr(String,4,4),STRSUBSTNO(KAKLineErr,4));
        Assert.AreEqual(FORMAT("Branch Code"),CutStr(String,8,6),STRSUBSTNO(KAKLineErr,8));
        // H3934  20.03.15  MM +++++++++++++++
        //Assert.AreEqual(FORMAT(WHLFSetup."home24 Branch No."),CutStr(String,14,20),STRSUBSTNO(KAKLineErr,14));
        // H3934  20.03.15  MM ---------------
        Assert.AreEqual("LF Order No.",CutStr(String,34,20),STRSUBSTNO(KAKLineErr,34));
        Assert.AreEqual("Document No.",CutStr(String,54,20),STRSUBSTNO(KAKLineErr,54));
        Assert.AreEqual("Ship-to Customer No.",CutStr(String,74,15),STRSUBSTNO(KAKLineErr,74));
        Assert.AreEqual(FORMAT("Transmission Mode" + 1),CutStr(String,89,1),STRSUBSTNO(KAKLineErr,89));
        // H3934  20.03.15  MM +++++++++++++++
        //Assert.AreEqual(FORMAT("Transmission No."),CutStr(String,90,10),STRSUBSTNO(KAKLineErr,90));
        // H3934  20.03.15  MM ---------------
        Assert.AreEqual(
          FORMAT("Order Date",0,'<Day,2>.<Month,2>.<Year4>'),CutStr(String,100,10),STRSUBSTNO(KAKLineErr,100));
        CASE GetDelivTypeFromLFLine("Entry No.") OF
          Purchasing."Delivery Type"::Kunde:
            Assert.AreEqual('K',CutStr(String,119,32),STRSUBSTNO(KAKLineErr,119));
          Purchasing."Delivery Type"::Selbstabholer:
            Assert.AreEqual('S',CutStr(String,119,32),STRSUBSTNO(KAKLineErr,119));
        END;

        Assert.AreEqual(';',CutStr(String,401,1),STRSUBSTNO(KAKLineErr,401));
      END;
    END;

    LOCAL PROCEDURE VerifyKALLine@1000000040(WHLFSalesExportHeader@1000000000 : Record 50304;String@1000000001 : Text[1024]);
    VAR
      WHLFSetup@1000000004 : Record 50300;
      CountryRegion@1000000003 : Record 9;
    BEGIN
      WHLFSetup.GET;
      WITH WHLFSalesExportHeader DO BEGIN
        IF "Sales Return Order" THEN
          Assert.AreEqual(WHLFSetup."Record Type KAA",CutStr(String,1,3),STRSUBSTNO(KALLineErr,1))
        ELSE
          Assert.AreEqual(WHLFSetup."Record Type KAL",CutStr(String,1,3),STRSUBSTNO(KALLineErr,1));
        Assert.AreEqual(FORMAT(Salutation + 1),CutStr(String,4,1),STRSUBSTNO(KALLineErr,4));
        Assert.AreEqual(LibrarySales.TrimSpaces("Ship-to Name"),CutStr(String,5,60),STRSUBSTNO(KALLineErr,5));
        Assert.AreEqual(LibrarySales.TrimSpaces("Ship-to Name 2"),CutStr(String,65,30),STRSUBSTNO(KALLineErr,65));
        Assert.AreEqual(LibrarySales.TrimSpaces("Ship-to Address 2"),CutStr(String,95,60),STRSUBSTNO(KALLineErr,95));
        Assert.AreEqual(LibrarySales.TrimSpaces("Ship-to Address"),CutStr(String,155,58),STRSUBSTNO(KALLineErr,155));
        Assert.AreEqual("Ship-to Post Code",CutStr(String,213,8),STRSUBSTNO(KALLineErr,213));
        Assert.AreEqual(LibrarySales.TrimSpaces("Ship-to City"),CutStr(String,221,50),STRSUBSTNO(KALLineErr,221));
        CountryRegion.GET("Ship-to Country/Region Code");
        Assert.AreEqual(CountryRegion."Country Code Rhenus",CutStr(String,271,3),STRSUBSTNO(KALLineErr,271));
        Assert.AreEqual(FORMAT("Phone No."),CutStr(String,274,60),STRSUBSTNO(KALLineErr,274));
        Assert.AreEqual("E-Mail",CutStr(String,334,70),STRSUBSTNO(KALLineErr,334));
        Assert.AreEqual("Ship-to Country/Region Code",CutStr(String,404,2),STRSUBSTNO(KALLineErr,404));
        Assert.AreEqual("Language Code",CutStr(String,406,3),STRSUBSTNO(KALLineErr,406));
        Assert.AreEqual(FORMAT("Shipment Date"),CutStr(String,409,20),STRSUBSTNO(KALLineErr,409));
        Assert.AreEqual(';',CutStr(String,429,1),STRSUBSTNO(KALLineErr,429));
      END;
    END;

    LOCAL PROCEDURE VerifyKAPLine@1000000004(WHLFSalesExportHeader@1000000001 : Record 50304;String@1000000000 : Text[1024];LineNo@1000000003 : Integer);
    VAR
      WHLFSalesExportLine@1000000002 : Record 50305;
    BEGIN
      WITH WHLFSalesExportLine DO BEGIN
        SETRANGE("Entry No.",WHLFSalesExportHeader."Entry No.");
        SETRANGE(Type,Type::Item);
        SETRANGE("Pos. No.",LineNo - 2);
        FINDFIRST;

        Assert.AreEqual("Record Type",CutStr(String,1,3),STRSUBSTNO(KAPLineErr,1));
        Assert.AreEqual(FORMAT("Pos. No."),CutStr(String,4,5),STRSUBSTNO(KAPLineErr,4));
        Assert.AreEqual(FORMAT("Action Type" + 0),CutStr(String,9,3),STRSUBSTNO(KAPLineErr,9));
        Assert.AreEqual(FORMAT(Quantity),CutStr(String,12,5),STRSUBSTNO(KAPLineErr,12));
        // Assert.AreEqual(,CutStr(String,17,1),'17'); // Todo.
        IF Crossdock THEN
          Assert.AreEqual('1',CutStr(String,18,1),STRSUBSTNO(KAPLineErr,18))
        ELSE
          Assert.AreEqual('0',CutStr(String,18,1),STRSUBSTNO(KAPLineErr,18));
        IF "Return Line" THEN
          Assert.AreEqual('0',CutStr(String,19,1),STRSUBSTNO(KAPLineErr,19))
        ELSE
          Assert.AreEqual('',CutStr(String,19,1),STRSUBSTNO(KAPLineErr,19));
        Assert.AreEqual("No.",CutStr(String,20,30),STRSUBSTNO(KAPLineErr,20));
        Assert.AreEqual(LibrarySales.TrimSpaces(Description),CutStr(String,50,50),STRSUBSTNO(KAPLineErr,50));
        Assert.AreEqual(FORMAT("No. of Packages"),CutStr(String,100,2),STRSUBSTNO(KAPLineErr,100));
        Assert.AreEqual(FORMAT("Unit Volume"),CutStr(String,102,5),STRSUBSTNO(KAPLineErr,102));
        Assert.AreEqual(FORMAT(ROUND("Unit Weight",1)),CutStr(String,107,4),STRSUBSTNO(KAPLineErr,107));
        Assert.AreEqual(';',CutStr(String,111,10),STRSUBSTNO(KAPLineErr,111));
        Assert.AreEqual(FORMAT("Shipping Agent Code"),CutStr(String,121,1),STRSUBSTNO(KAPLineErr,121));
      END;
    END;

    LOCAL PROCEDURE VerifyKADFileReserved@1000000020(DocNo@1000000009 : Code[20];IsReserved@1000000003 : Boolean);
    VAR
      WHLFSetup@1000000004 : Record 50300;
      WhseH24SunInterface@1000000010 : Record 50506;
      WHLFSalesExportHeader@1000000002 : Record 50304;
      FileObject@1000000008 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      UTFStream@1000000007 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      LocFile@1000000001 : File;
      String@1000000006 : Text[1024];
      FilePath@1000000005 : Text[250];
      FileNameTxt@1000000000 : Text[250];
      LineNo@1000000011 : Integer;
      charL@1000000019 : Char;
    BEGIN
      WHLFSetup.GET;
      LineNo := 0;
      IF ISCLEAR(FileObject) THEN
        CREATE(FileObject,TRUE,TRUE);

      // H3934  20.03.15  MM +++++++++++++++
      WhseH24SunInterface.GET(WHLFSetup."Record Type KAD",WHLFSetup."LF Client Identifier");
      FilePath := LibrarySales.GetExportFilePath(WhseH24SunInterface."FPC Interface Setup Code");
      // H3934  20.03.15  MM ---------------

      WHLFSalesExportHeader.SETCURRENTKEY("Document Type","Document No.");
      WHLFSalesExportHeader.SETRANGE("Document Type",WHLFSalesExportHeader."Document Type"::Order);
      WHLFSalesExportHeader.SETRANGE("Document No.",DocNo);
      WHLFSalesExportHeader.FINDLAST;

      FileNameTxt := FilePath + WHLFSalesExportHeader.Filename;

      // Read File as Stream
      LocFile.OPEN(FileNameTxt);
      CREATE(UTFStream);
      UTFStream.Open;
      UTFStream.Charset('utf-8');
      UTFStream.LoadFromFile(FileNameTxt);

      WHILE NOT UTFStream.EOS DO BEGIN
        EVALUATE(charL,UTFStream.ReadText(1));
        IF (charL <> 10) AND (charL <> 13)THEN BEGIN
          String := String + FORMAT(charL);
        END ELSE
          IF (String <> '') AND (STRLEN(String) > 0) THEN BEGIN
            LineNo += 1;
            IF LineNo = 2 THEN
              IF IsReserved THEN
                Assert.AreEqual('11.11.2911',CutStr(String,409,20),STRSUBSTNO(ReservDateErr,DocNo))
              ELSE
                Assert.AreEqual(FORMAT(WHLFSalesExportHeader."Shipment Date"),CutStr(String,409,20),STRSUBSTNO(ReservDateErr,DocNo));
            String := '';
          END;
      END;

      UTFStream.Close;
      LocFile.CLOSE;
    END;

    LOCAL PROCEDURE VerifyKADFileCanceled@1000000021(DocNo@1000000009 : Code[20];ChannelCode@1000000010 : Code[10]);
    VAR
      WHLFSetup@1000000013 : Record 50300;
      WhseH24SunInterface@1000000002 : Record 50506;
      WHLFSalesExportHeader@1000000012 : Record 50304;
      Purchasing@1000000003 : Record 5721;
      FileObject@1000000008 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      UTFStream@1000000007 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      LocFile@1000000001 : File;
      String@1000000006 : Text[1024];
      FilePath@1000000005 : Text[250];
      FileNameTxt@1000000000 : Text[250];
      LineNo@1000000011 : Integer;
      charL@1000000019 : Char;
    BEGIN
      WHLFSetup.GET;
      Purchasing.GET(ChannelCode);
      LineNo := 0;
      IF ISCLEAR(FileObject) THEN
        CREATE(FileObject,TRUE,TRUE);

      // H3934  20.03.15  MM +++++++++++++++
      WhseH24SunInterface.GET(WHLFSetup."Record Type KAD",WHLFSetup."LF Client Identifier");
      FilePath := LibrarySales.GetExportFilePath(WhseH24SunInterface."FPC Interface Setup Code");
      // H3934  20.03.15  MM ---------------

      WHLFSalesExportHeader.SETCURRENTKEY("Document Type","Document No.");
      WHLFSalesExportHeader.SETRANGE("Document Type",WHLFSalesExportHeader."Document Type"::Order);
      WHLFSalesExportHeader.SETRANGE("Document No.",DocNo);
      WHLFSalesExportHeader.SETRANGE("Branch Code",Purchasing."Whse. LF Branch Code");
      WHLFSalesExportHeader.FINDLAST;

      FileNameTxt := FilePath + WHLFSalesExportHeader.Filename;

      // Read File as Stream
      LocFile.OPEN(FileNameTxt);
      CREATE(UTFStream);
      UTFStream.Open;
      UTFStream.Charset('utf-8');
      UTFStream.LoadFromFile(FileNameTxt);

      WHILE NOT UTFStream.EOS DO BEGIN
        EVALUATE(charL,UTFStream.ReadText(1));
        IF (charL <> 10) AND (charL <> 13)THEN BEGIN
          String := String + FORMAT(charL);
        END ELSE
          IF (String <> '') AND (STRLEN(String) > 0) THEN BEGIN
            LineNo += 1;
            IF LineNo = 1 THEN
              Assert.AreEqual('3',CutStr(String,89,1),STRSUBSTNO(CancelKADErr,DocNo));
            String := '';
          END;
      END;

      UTFStream.Close;
      LocFile.CLOSE;
    END;

    LOCAL PROCEDURE VerifyKADFileReturn@1000000031(DocNo@1000000009 : Code[20]);
    VAR
      WHLFSetup@1000000010 : Record 50300;
      WhseH24SunInterface@1000000002 : Record 50506;
      WHLFSalesExportHeader@1000000008 : Record 50304;
      WHLFSalesExportLine@1000000012 : Record 50305;
      FileObject@1000000007 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      UTFStream@1000000003 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      LocFile@1000000001 : File;
      String@1000000006 : Text[1024];
      FilePath@1000000005 : Text[250];
      FileNameTxt@1000000000 : Text[250];
      LineNo@1000000011 : Integer;
      ItemQty@1000000013 : Integer;
      charL@1000000019 : Char;
    BEGIN
      WHLFSetup.GET;
      LineNo := 0;
      IF ISCLEAR(FileObject) THEN
        CREATE(FileObject,TRUE,TRUE);

      // H3934  20.03.15  MM +++++++++++++++
      WhseH24SunInterface.GET(WHLFSetup."Record Type KAD",WHLFSetup."LF Client Identifier");
      FilePath := LibrarySales.GetExportFilePath(WhseH24SunInterface."FPC Interface Setup Code");
      // H3934  20.03.15  MM ---------------
      ItemQty := GetLineQty(DocNo,WHLFSalesExportLine.Type::Item);

      WHLFSalesExportHeader.SETCURRENTKEY("Document Type","Document No.");
      WHLFSalesExportHeader.SETRANGE("Document Type",WHLFSalesExportHeader."Document Type"::"Return Order");
      WHLFSalesExportHeader.SETRANGE("Document No.",DocNo);
      WHLFSalesExportHeader.FINDLAST;

      FileNameTxt := FilePath + WHLFSalesExportHeader.Filename;

      // Read File as Stream
      LocFile.OPEN(FileNameTxt);
      CREATE(UTFStream);
      UTFStream.Open;
      UTFStream.Charset('utf-8');
      UTFStream.LoadFromFile(FileNameTxt);

      WHILE NOT UTFStream.EOS DO BEGIN
        EVALUATE(charL,UTFStream.ReadText(1));
        IF (charL <> 10) AND (charL <> 13)THEN BEGIN
          String := String + FORMAT(charL);
        END ELSE
          IF (String <> '') AND (STRLEN(String) > 0) THEN BEGIN
            LineNo += 1;
            CASE LineNo OF
              2:
                Assert.AreEqual(WHLFSetup."Record Type KAA",CutStr(String,1,3),STRSUBSTNO(ReturnKADErr,DocNo));
              3..3 + ItemQty - 1:
                Assert.AreEqual('2',CutStr(String,9,3),STRSUBSTNO(ReturnKADErr,DocNo));
            END;
            String := '';
          END;
      END;

      UTFStream.Close;
      LocFile.CLOSE;
    END;

    LOCAL PROCEDURE VerifyWHLFSalesImport@1000000063(DocNo@1000000001 : Code[20];RecordType@1000000002 : Code[10]);
    VAR
      WHLFSalesImport@1000000000 : Record 50306;
    BEGIN
      WITH WHLFSalesImport DO BEGIN
        SETRANGE("Record Type",RecordType);
        SETRANGE("Customer Order No. 2",DocNo);
        FINDSET;
        REPEAT
          TESTFIELD("Import Status","Import Status"::Processed);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyPSHTrackingNo@1000000017(DocumentNo@1000000002 : Code[20];UsedInterface@1000000003 : Option;TrackingCode@1000000001 : Text[40]);
    VAR
      ParcelStatusHistory@1000000000 : Record 80013;
    BEGIN
      WITH ParcelStatusHistory DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Used Interface",UsedInterface);
        FINDLAST;
        TESTFIELD("Tracking Code",TrackingCode);
      END;
    END;

    LOCAL PROCEDURE VerifyParcelStatusHistoryEntry@1000000034(DocumentNo@1000000002 : Code[20];UsedInterface@1000000003 : Option;StatusCode@1000000001 : Code[20];StatusSubCode@1000000004 : Code[20]);
    VAR
      ParcelStatusHistory@1000000000 : Record 80013;
    BEGIN
      WITH ParcelStatusHistory DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Used Interface",UsedInterface);
        FINDLAST;

        TESTFIELD("Status Code",StatusCode);
        TESTFIELD("Status Sub Code",StatusSubCode);
      END;
    END;

    LOCAL PROCEDURE VerifyWHLFParcelStatusEntry@1000000087(DocumentNo@1000000004 : Code[20];StatusSubCode@1000000001 : Code[20]);
    VAR
      ParcelStatusHistory@1000000000 : Record 80013;
    BEGIN
      VerifyParcelStatusHistoryEntry(
        DocumentNo,ParcelStatusHistory."Used Interface"::WHSLF,'',StatusSubCode);
    END;

    LOCAL PROCEDURE VerifyDHLParcelStatusEntry@1000000082(DocumentNo@1000000004 : Code[20];StatusCode@1000000002 : Code[20];StatusSubCode@1000000001 : Code[20]);
    VAR
      ParcelStatusHistory@1000000000 : Record 80013;
    BEGIN
      VerifyParcelStatusHistoryEntry(
        DocumentNo,ParcelStatusHistory."Used Interface"::DHL,StatusCode,StatusSubCode);
    END;

    LOCAL PROCEDURE VerifyDPDParcelStatusEntry@1000000022(DocumentNo@1000000004 : Code[20];StatusCode@1000000002 : Code[20]);
    VAR
      ParcelStatusHistory@1000000000 : Record 80013;
    BEGIN
      VerifyParcelStatusHistoryEntry(
        DocumentNo,ParcelStatusHistory."Used Interface"::DPD,StatusCode,'');
    END;

    LOCAL PROCEDURE VerifyParcelStatHistArchEntry@1000000095(DocumentNo@1000000002 : Code[20];UsedInterface@1000000003 : Option;StatusCode@1000000001 : Code[20];StatusSubCode@1000000004 : Code[20]);
    VAR
      ParcelStatusHistoryArchive@1000000000 : Record 50187;
    BEGIN
      WITH ParcelStatusHistoryArchive DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Used Interface",UsedInterface);
        FINDLAST;

        TESTFIELD("Status Code",StatusCode);
        TESTFIELD("Status Sub Code",StatusSubCode);
      END;
    END;

    LOCAL PROCEDURE VerifyLFParcelStatusArchEntry@1000000092(DocumentNo@1000000004 : Code[20];StatusSubCode@1000000001 : Code[20]);
    VAR
      ParcelStatusHistory@1000000000 : Record 80013;
    BEGIN
      VerifyParcelStatHistArchEntry(
        DocumentNo,ParcelStatusHistory."Used Interface"::WHSLF,'',StatusSubCode);
    END;

    LOCAL PROCEDURE VerifyBatchSalesPostEntry@1000000062(DocumentNo@1000000001 : Code[20];PostingType@1000000002 : Option;StatusCode@1000000003 : Option);
    VAR
      BatchSalesPostHeader@1000000000 : Record 50225;
    BEGIN
      BatchSalesPostHeader.SETRANGE("Document Type",BatchSalesPostHeader."Document Type"::Order);
      BatchSalesPostHeader.SETRANGE("Document No.",DocumentNo);
      BatchSalesPostHeader.SETRANGE("Posting Type",PostingType);
      BatchSalesPostHeader.FINDFIRST;
      BatchSalesPostHeader.TESTFIELD(Status,StatusCode);
    END;

    LOCAL PROCEDURE VerifyBatchSalesPostArchEntry@1000000088(DocumentNo@1000000001 : Code[20];PostingType@1000000002 : Option;StatusCode@1000000003 : Option);
    VAR
      BatchSalesPostHeaderArch@1000000000 : Record 50227;
    BEGIN
      BatchSalesPostHeaderArch.SETRANGE("Document Type",BatchSalesPostHeaderArch."Document Type"::Order);
      BatchSalesPostHeaderArch.SETRANGE("Document No.",DocumentNo);
      BatchSalesPostHeaderArch.SETRANGE("Posting Type",PostingType);
      BatchSalesPostHeaderArch.FINDFIRST;
      BatchSalesPostHeaderArch.TESTFIELD(Status,StatusCode);

      VerifyBatchSalesPostNoEntry(DocumentNo,0);  // Ship.
      VerifyBatchSalesPostNoEntry(DocumentNo,1);  // Invoice.
    END;

    LOCAL PROCEDURE VerifyBatchSalesPostNoEntry@1000000083(DocumentNo@1000000001 : Code[20];PostingType@1000000002 : Option);
    VAR
      BatchSalesPostHeader@1000000000 : Record 50225;
    BEGIN
      BatchSalesPostHeader.SETRANGE("Document Type",BatchSalesPostHeader."Document Type"::Order);
      BatchSalesPostHeader.SETRANGE("Document No.",DocumentNo);
      BatchSalesPostHeader.SETRANGE("Posting Type",PostingType);
      ASSERTERROR BatchSalesPostHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyFillSalesDatesEntryState@1000000076(DocumentNo@1000000001 : Code[20]);
    VAR
      FillSalesDates@1000000000 : Record 50203;
      SalesLine@1000000002 : Record 37;
    BEGIN
      FillSalesDates.SETRANGE("Document Type",FillSalesDates."Document Type"::Order);
      FillSalesDates.SETRANGE("Document No.",DocumentNo);
      FillSalesDates.SETRANGE(Type,FillSalesDates.Type::ADD);
      FillSalesDates.FINDSET;
      REPEAT
        FillSalesDates.TESTFIELD(Status,FillSalesDates.Status::Success);

        SalesLine.GET(FillSalesDates."Document Type",DocumentNo,FillSalesDates."Line No.");
        SalesLine.TESTFIELD("Actual Delivery Date",FillSalesDates."Date/Time");
      UNTIL FillSalesDates.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPostedShipment@1000000075(DocNo@1000000001 : Code[20]);
    VAR
      SalesShipmentHeader@1000000000 : Record 110;
    BEGIN
      SalesShipmentHeader.SETRANGE("External Document No.",DocNo);
      Assert.IsTrue(SalesShipmentHeader.FINDFIRST,STRSUBSTNO(EntryNotFoundErr,SalesShipmentHeader.TABLECAPTION,DocNo));
    END;

    LOCAL PROCEDURE VerifyPostedSalesInvoice@1000000008(DocumentNo@1000000000 : Code[20];ExpectedAmt@1000000002 : Decimal);
    VAR
      SalesInvoiceHeader@1000000001 : Record 112;
      GLSetup@1000000003 : Record 98;
    BEGIN
      WITH SalesInvoiceHeader DO BEGIN
        GLSetup.GET;
        SETRANGE("External Document No.",DocumentNo);
        SETRANGE("Prepayment Invoice",FALSE);
        Assert.IsTrue(FINDLAST,STRSUBSTNO(NoInvoiceErr,DocumentNo));

        CALCFIELDS("Amount Including VAT");
        Assert.AreNearlyEqual(
          ExpectedAmt,"Amount Including VAT",GLSetup."Amount Rounding Precision",STRSUBSTNO(AmountErr,DocumentNo));
      END;
    END;

    LOCAL PROCEDURE VerifyCustLedgerEntries@1000000005(DocumentNo@1000000001 : Code[20];DocumentDate@1000000005 : Date;OrderAmount@1000000000 : Decimal);
    VAR
      CustLedgerEntry@1000000003 : Record 21;
      GLSetup@1000000002 : Record 98;
      AmountLCY@1000000004 : Decimal;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        GLSetup.GET;
        SETRANGE("External Document No.",DocumentNo);
        FINDSET;
        REPEAT
          CALCFIELDS("Amount (LCY)");
          AmountLCY += "Amount (LCY)";
        UNTIL NEXT = 0;

        Assert.AreNearlyEqual(
          LibrarySales.ConvertCurrency(OrderAmount,"Currency Code",'',DocumentDate),
          AmountLCY,GLSetup."Amount Rounding Precision",STRSUBSTNO(AmountErr,DocumentNo));
      END;
    END;

    LOCAL PROCEDURE VerifyOrderReserved@1000000012(DocumentNo@1000000000 : Code[20];DocumentType@1000000005 : Option);
    VAR
      FPCGeneralSetup@1000000002 : Record 50055;
      SalesHeader@1000000001 : Record 36;
      InterfaceProcessMgt@1000000003 : Codeunit 50087;
    BEGIN
      FPCGeneralSetup.GET;
      SalesHeader.GET(DocumentType,DocumentNo);
      Assert.AreEqual(
        FPCGeneralSetup."Status Reserve",InterfaceProcessMgt.GetLowestOrderStatus(SalesHeader),
        STRSUBSTNO(WrongStatusErr,FPCGeneralSetup."Status Reserve",DocumentNo));
    END;

    LOCAL PROCEDURE VerifyLinesReserved@1000000014(DocumentNo@1000000000 : Code[20];DocumentType@1000000002 : Option;ChannelCode@1000000003 : Code[10]);
    VAR
      FPCGeneralSetup@1000000004 : Record 50055;
      SalesLine@1000000001 : Record 37;
      InterfaceProcessMgt@1000000005 : Codeunit 50087;
    BEGIN
      WITH SalesLine DO BEGIN
        FPCGeneralSetup.GET;
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Purchasing Code",ChannelCode);
        FINDSET;
        REPEAT
          Assert.AreEqual(
            FPCGeneralSetup."Status Reserve",InterfaceProcessMgt.GetInterfaceStatus(0,"Document Type","Document No.","Line No."),
            STRSUBSTNO(WrongStatusErr,FPCGeneralSetup."Status Reserve",DocumentNo));
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyLFSalesExportHeader@1000000018(SalesHeader@1000000000 : Record 36;ChannelCode@1000000001 : Code[10];TransMode@1000000003 : Option);
    VAR
      WHLFSetup@1000000005 : Record 50300;
      WHLFSalesExportHeader@1000000002 : Record 50304;
      Purchasing@1000000004 : Record 5721;
    BEGIN
      WHLFSetup.GET;
      Purchasing.GET(ChannelCode);

      WITH WHLFSalesExportHeader DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        FINDLAST;

        TESTFIELD("Transmission Mode",TransMode);
        TESTFIELD("Order Date",SalesHeader."Order Date");
        TESTFIELD("Ship-to Customer No.",SalesHeader."Sell-to Customer No.");
        TESTFIELD("Ship-to Address",SalesHeader."Ship-to Address");
        TESTFIELD("Ship-to Post Code",SalesHeader."Ship-to Post Code");
        TESTFIELD("Ship-to Country/Region Code",SalesHeader."Ship-to Country/Region Code");
        TESTFIELD("Branch Code",Purchasing."Whse. LF Branch Code");
        TESTFIELD("Record Type",WHLFSetup."Record Type KAK");

        VerifyLFSalesExportLines(WHLFSalesExportHeader,ChannelCode);
      END;
    END;

    LOCAL PROCEDURE VerifyLFSalesExpHeaderChannel@1000000044(SalesHeader@1000000000 : Record 36;ChannelCode@1000000001 : Code[10];TransMode@1000000003 : Option);
    VAR
      WHLFSetup@1000000007 : Record 50300;
      WHLFSalesExportHeader@1000000006 : Record 50304;
      Purchasing@1000000004 : Record 5721;
    BEGIN
      WHLFSetup.GET;
      Purchasing.GET(ChannelCode);

      WITH WHLFSalesExportHeader DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE("Branch Code",Purchasing."Whse. LF Branch Code");
        FINDLAST;

        TESTFIELD("Transmission Mode",TransMode);
        TESTFIELD("Order Date",SalesHeader."Order Date");
        TESTFIELD("Ship-to Customer No.",SalesHeader."Sell-to Customer No.");
        TESTFIELD("Ship-to Address",SalesHeader."Ship-to Address");
        TESTFIELD("Ship-to Post Code",SalesHeader."Ship-to Post Code");
        TESTFIELD("Ship-to Country/Region Code",SalesHeader."Ship-to Country/Region Code");
        TESTFIELD("Record Type",WHLFSetup."Record Type KAK");
      END;
    END;

    LOCAL PROCEDURE VerifyLFSalesExportLines@1000000013(WHLFSalesExportHeader@1000000001 : Record 50304;ChannelCode@1000000000 : Code[10]);
    VAR
      SalesLine@1000000002 : Record 37;
      WHLFSalesExportLine@1000000003 : Record 50305;
      WHLFSalesLineRef@1000000004 : Record 50314;
    BEGIN
      SalesLine.SETRANGE("Document Type",WHLFSalesExportHeader."Document Type");
      SalesLine.SETRANGE("Document No.",WHLFSalesExportHeader."Document No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Purchasing Code",ChannelCode);
      SalesLine.FINDSET;
      REPEAT
        WHLFSalesExportLine.SETRANGE("Entry No.",WHLFSalesExportHeader."Entry No.");
        WHLFSalesExportLine.SETRANGE(Type,WHLFSalesExportLine.Type::Item);
        WHLFSalesExportLine.SETRANGE("No.",SalesLine."No.");
        Assert.IsTrue(
          WHLFSalesExportLine.FINDFIRST,STRSUBSTNO(ItemLineErr,SalesLine."Line No.",WHLFSalesExportHeader."Document No."));

        WHLFSalesLineRef.SETRANGE("Attached to Entry No.",WHLFSalesExportHeader."Entry No.");
        WHLFSalesLineRef.SETRANGE("Attached to Sales Line No.",SalesLine."Line No.");
        WHLFSalesLineRef.FINDFIRST;
        WHLFSalesLineRef.TESTFIELD(Quantity,1);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyLFSalesExportHeaderRet@1000000051(SalesHeader@1000000000 : Record 36;ChannelCode@1000000001 : Code[10];TransMode@1000000003 : Option);
    VAR
      WHLFSetup@1000000007 : Record 50300;
      WHLFSalesExportHeader@1000000006 : Record 50304;
      Purchasing@1000000004 : Record 5721;
    BEGIN
      WHLFSetup.GET;
      Purchasing.GET(ChannelCode);

      WITH WHLFSalesExportHeader DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        FINDLAST;

        TESTFIELD("Transmission Mode",TransMode);
        TESTFIELD("Order Date",SalesHeader."Order Date");
        TESTFIELD("Ship-to Customer No.",'');
        // TESTFIELD("Ship-to Address",Location.Address);
        // TESTFIELD("Ship-to Post Code",SalesHeader."Ship-to Post Code");
        // TESTFIELD("Ship-to Country/Region Code",SalesHeader."Ship-to Country/Region Code");
        TESTFIELD("Branch Code",Purchasing."Whse. LF Branch Code");
        TESTFIELD("Record Type",WHLFSetup."Record Type KAK");

        VerifyLFSalesExportLinesRet(WHLFSalesExportHeader,ChannelCode);
      END;
    END;

    LOCAL PROCEDURE VerifyLFSalesExportLinesRet@1000000055(WHLFSalesExportHeader@1000000006 : Record 50304;ChannelCode@1000000000 : Code[10]);
    VAR
      SalesReceivablesSetup@1000000005 : Record 311;
      SalesLine@1000000002 : Record 37;
      WHLFSalesExportLine@1000000007 : Record 50305;
      WHLFSalesLineRef@1000000001 : Record 50314;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesLine.SETRANGE("Document Type",WHLFSalesExportHeader."Document Type");
      SalesLine.SETRANGE("Document No.",WHLFSalesExportHeader."Document No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Purchasing Code",ChannelCode);
      SalesLine.FINDSET;
      REPEAT
        WHLFSalesExportLine.SETRANGE("Entry No.",WHLFSalesExportHeader."Entry No.");
        WHLFSalesExportLine.SETRANGE(Type,WHLFSalesExportLine.Type::Item);
        Assert.IsTrue(
          WHLFSalesExportLine.FINDFIRST,STRSUBSTNO(ItemLineErr,SalesLine."Line No.",WHLFSalesExportHeader."Document No."));
        WHLFSalesExportLine.TESTFIELD("Location Code",SalesReceivablesSetup."Default Sales Return Location");
        WHLFSalesExportLine.TESTFIELD("Action Type",WHLFSalesExportLine."Action Type"::Pickup);

        WHLFSalesLineRef.SETRANGE("Attached to Entry No.",WHLFSalesExportHeader."Entry No.");
        WHLFSalesLineRef.SETRANGE("Attached to Sales Line No.",SalesLine."Line No.");
        WHLFSalesLineRef.FINDFIRST;
        WHLFSalesLineRef.TESTFIELD(Quantity,SalesLine.Quantity);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyLFSalesExportHeaderNoEnt@1000000027(SalesHeader@1000000000 : Record 36);
    VAR
      WHLFSalesExportHeader@1000000002 : Record 50304;
    BEGIN
      // H3981  26.03.15  MM +++++++++++++++
      WHLFSalesExportHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      WHLFSalesExportHeader.SETRANGE("Document No.",SalesHeader."No.");
      ASSERTERROR WHLFSalesExportHeader.FINDFIRST;
      // H3981  26.03.15  MM ---------------
    END;

    LOCAL PROCEDURE VerifyLFTrackingNo@1000000045(DocumentNo@1000000000 : Code[20];RecordType@1000000004 : Code[10];TrackingCode@1000000001 : Text[40]);
    VAR
      WHLFSalesImport@1000000002 : Record 50306;
      WHLFTrackingNoLog@1000000003 : Record 50316;
    BEGIN
      WHLFSalesImport.SETRANGE("Record Type",RecordType);
      WHLFSalesImport.SETRANGE("Customer Order No. 2",DocumentNo);
      WHLFSalesImport.FINDLAST;

      WHLFTrackingNoLog.SETRANGE("Sales Import Entry No.",WHLFSalesImport."Entry No.");
      WHLFTrackingNoLog.FINDSET;
      REPEAT
        WHLFTrackingNoLog.TESTFIELD("Tracking No.",TrackingCode);
      UNTIL WHLFTrackingNoLog.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDPDScanInfoEntry@1000000025(Status@1000000002 : Code[2];TrackingCode@1000000001 : Text[14]);
    VAR
      DPDScanInfoImportBuffer@1000000000 : Record 50222;
    BEGIN
      DPDScanInfoImportBuffer.SETRANGE(PARCELNO,TrackingCode);
      DPDScanInfoImportBuffer.SETRANGE(SCAN_CODE,Status);
      DPDScanInfoImportBuffer.FINDSET;
      REPEAT
        DPDScanInfoImportBuffer.TESTFIELD(Status,DPDScanInfoImportBuffer.Status::Processed);
      UNTIL DPDScanInfoImportBuffer.NEXT = 0;
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      H1921       12.03.15  MM        Testing: Cover WHS LF
      H3934       20.03.15  MM        Automated Testing: adjust project H2157 for automated tests
      H3925       26.03.15  MM        AutoTesting: Extend WHLF tests to all countries
      H3981       26.03.15  MM        AutomatedTesting: WHLF to Return should not trigger WHLF Interface
      H4046       13.04.15  MM        AutomatedTesting: Adjust tests for H2201
    }
    END.
  }
}

