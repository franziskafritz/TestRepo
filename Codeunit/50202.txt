OBJECT Codeunit 50202 Test Runner
{
  OBJECT-PROPERTIES
  {
    Date=02.09.13;
    Time=14:59:54;
    Version List=HME0513;
  }
  PROPERTIES
  {
    TableNo=80002;
    Subtype=TestRunner;
    OnRun=VAR
            BackupMgt@1102601000 : Codeunit 50201;
            UsePersistentBackup@1102601001 : Boolean;
          BEGIN
            TestLine.COPY(Rec);

            // This test runner does not support persistent backups
            UsePersistentBackup := BackupMgt.UsePersistentBackup;
            BackupMgt.SetUsePersistentBackup(FALSE);
            RunTests;
            BackupMgt.SetUsePersistentBackup(UsePersistentBackup)
          END;

  }
  CODE
  {
    VAR
      TestLine@1106000008 : Record 80002;
      TestLineFunction@1000 : Record 80002;
      TestMgt@1106000005 : Codeunit 50203;
      Window@1002 : Dialog;
      MaxLineNo@1021 : Integer;
      MinLineNo@1022 : Integer;
      Filter@1001 : Text[250];
      Text000@1003 : TextConst 'ENU=Executing Tests...\';
      Text001@1004 : TextConst 'ENU=Test Suite    #1###################\';
      Text003@1012 : TextConst 'ENU=Test Codeunit #2###################\';
      Text004@1013 : TextConst 'ENU=Test Function #3###################\';
      Text005@1005 : TextConst 'ENU=No. of Results with:\';
      WindowUpdateTime@1007 : Time;
      WindowIsOpen@1006 : Boolean;
      WindowTestSuite@1014 : Code[10];
      WindowTestGroup@1010 : Text[30];
      WindowTestCodeunit@1009 : Text[30];
      WindowTestFunction@1008 : Text[30];
      WindowTestSuccess@1015 : Integer;
      WindowTestFailure@1016 : Integer;
      WindowTestSkip@1017 : Integer;
      Text006@1018 : TextConst 'ENU="    Success   #4######\"';
      Text007@1019 : TextConst 'ENU="    Failure   #5######\"';
      Text008@1020 : TextConst 'ENU="    Skip      #6######\"';

    LOCAL PROCEDURE RunTests@1106000002();
    BEGIN
      WITH TestLine DO BEGIN
        OpenWindow;
        MODIFYALL(Result,Result::" ");
        MODIFYALL("First Error",'');
        COMMIT;
        Filter := GETVIEW;

        IF FINDFIRST THEN
          REPEAT
            IF "Line Type" = "Line Type"::Codeunit THEN BEGIN
              MinLineNo := "Line No.";
              MaxLineNo := GetMaxCodeunitLineNo;
              IF TestMgt.ISPUBLISHMODE THEN
                DeleteChildren;

              CODEUNIT.RUN("Test Codeunit");
            END;
          UNTIL NEXT = 0;
        CloseWindow;
      END;
    END;

    PROCEDURE OnBeforeTestRun@1102601000(CodeunitID@1102601000 : Integer;CodeunitName@1102601001 : Text[30];FunctionName@1102601002 : Text[30]) : Boolean;
    BEGIN
      UpDateWindow(
        TestLine."Test Suite",TestLine.Name,CodeunitName,FunctionName,
        WindowTestSuccess,WindowTestFailure,WindowTestSkip);

      UpdateCodeunit(FALSE,FALSE);

      IF FunctionName = '' THEN BEGIN
        TestLine.Result := TestLine.Result::" ";
        TestLine."Start Time" := CURRENTDATETIME;
        EXIT(TRUE);
      END;

      IF TestMgt.ISPUBLISHMODE THEN
        AddTestMethod(FunctionName)
      ELSE BEGIN
        IF NOT TryFindTestFunctionInGroup(FunctionName) THEN
          EXIT(FALSE);
        UpdateTestFunction(FALSE,FALSE);
        IF NOT TestLineFunction.Run OR NOT TestLine.Run THEN
          EXIT(FALSE);
      END;

      IF FunctionName = 'OnRun' THEN
        EXIT(TRUE);
      EXIT(TestMgt.ISTESTMODE);
    END;

    PROCEDURE OnAfterTestRun@1102601001(CodeunitID@1102601002 : Integer;CodeunitName@1102601001 : Text[30];FunctionName@1102601000 : Text[30];IsSuccess@1102601003 : Boolean);
    BEGIN
      IF (FunctionName <> '') AND (FunctionName <> 'OnRun') THEN
        IF IsSuccess THEN
          UpDateWindow(
            WindowTestSuite,WindowTestGroup,WindowTestCodeunit,WindowTestFunction,
            WindowTestSuccess + 1,WindowTestFailure,WindowTestSkip)
        ELSE
          UpDateWindow(
            WindowTestSuite,WindowTestGroup,WindowTestCodeunit,WindowTestFunction,
            WindowTestSuccess,WindowTestFailure + 1,WindowTestSkip);

      UpdateCodeunit(TRUE,IsSuccess);

      IF FunctionName = '' THEN
        EXIT;

      UpdateTestFunction(TRUE,IsSuccess);

      COMMIT;
      CLEARLASTERROR;
    END;

    PROCEDURE AddTestMethod@4(FunctionName@1000 : Text[30]);
    BEGIN
      WITH TestLineFunction DO BEGIN
        TestLineFunction := TestLine;
        "Line No." := MaxLineNo + 1;
        "Line Type" := "Line Type"::"Function";
        VALIDATE("Function",FunctionName);
        Run := TestLine.Run;
        "Start Time" := CURRENTDATETIME;
        "Finish Time" := CURRENTDATETIME;
        INSERT(TRUE);
      END;
      MaxLineNo := MaxLineNo + 1;
    END;

    PROCEDURE UpdateCodeunit@5(IsOnAfterTestRun@1000 : Boolean;IsSuccessOnAfterTestRun@1001 : Boolean);
    BEGIN
      WITH TestLine DO BEGIN
        IF NOT IsOnAfterTestRun THEN BEGIN
          IF TestMgt.ISTESTMODE AND (Result = Result::" ") THEN
            Result := Result::Skipped;
        END ELSE BEGIN
          IF TestMgt.ISPUBLISHMODE AND IsSuccessOnAfterTestRun THEN
            Result := Result::" "
          ELSE
            IF Result <> Result::Failure THEN BEGIN
              IF NOT IsSuccessOnAfterTestRun THEN BEGIN
                "First Error" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN("First Error"));
                Result := Result::Failure
              END ELSE
                Result := Result::Success;
            END;
        END;
        "Finish Time" := CURRENTDATETIME;
        MODIFY;
      END;
    END;

    PROCEDURE UpdateTestFunction@6(IsOnAfterTestRun@1001 : Boolean;IsSuccessOnAfterTestRun@1000 : Boolean);
    BEGIN
      WITH TestLineFunction DO BEGIN
        IF NOT IsOnAfterTestRun THEN BEGIN
          "Start Time" := CURRENTDATETIME;
          Result := Result::Skipped;
        END ELSE BEGIN
          IF NOT IsSuccessOnAfterTestRun THEN BEGIN
            "First Error" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN("First Error"));
            Result := Result::Failure
          END ELSE
            Result := TestLine.Result::Success;
        END;

        "Finish Time" := CURRENTDATETIME;
        MODIFY;
      END;
    END;

    PROCEDURE TryFindTestFunctionInGroup@9(FunctionName@1000 : Text[30]) : Boolean;
    BEGIN
      WITH TestLineFunction DO BEGIN
        RESET;
        SETVIEW(Filter);
        SETRANGE("Test Suite",TestLine."Test Suite");
        SETRANGE("Test Codeunit",TestLine."Test Codeunit");
        SETRANGE("Function",FunctionName);
        IF FIND('-') THEN
          REPEAT
            IF "Line No." IN [MinLineNo..MaxLineNo] THEN
              EXIT(TRUE);
          UNTIL NEXT = 0;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE OpenWindow@59();
    BEGIN
      Window.OPEN(
        Text000 +
        Text001 +
        Text003 +
        Text004 +
        Text005 +
        Text006 +
        Text007 +
        Text008);
      WindowIsOpen := TRUE;
    END;

    LOCAL PROCEDURE UpDateWindow@31(NewWindowTestSuite@1000 : Code[10];NewWindowTestGroup@1004 : Text[30];NewWindowTestCodeunit@1003 : Text[30];NewWindowTestFunction@1001 : Text[30];NewWindowTestSuccess@1006 : Integer;NewWindowTestFailure@1005 : Integer;NewWindowTestSkip@1002 : Integer);
    BEGIN
      WindowTestSuite := NewWindowTestSuite;
      WindowTestGroup := NewWindowTestGroup;
      WindowTestCodeunit := NewWindowTestCodeunit;
      WindowTestFunction := NewWindowTestFunction;
      WindowTestSuccess := NewWindowTestSuccess;
      WindowTestFailure := NewWindowTestFailure;
      WindowTestSkip := NewWindowTestSkip;

      IF IsTimeForUpdate THEN BEGIN
        IF NOT WindowIsOpen THEN
          OpenWindow;
        Window.UPDATE(1,WindowTestSuite);
        Window.UPDATE(2,WindowTestCodeunit);
        Window.UPDATE(3,WindowTestFunction);
        Window.UPDATE(4,WindowTestSuccess);
        Window.UPDATE(5,WindowTestFailure);
        Window.UPDATE(6,WindowTestSkip);
      END;
    END;

    LOCAL PROCEDURE CloseWindow@2();
    BEGIN
      IF WindowIsOpen THEN BEGIN
        Window.CLOSE;
        WindowIsOpen := FALSE;
      END;
    END;

    LOCAL PROCEDURE IsTimeForUpdate@69() : Boolean;
    BEGIN
      IF TRUE IN [WindowUpdateTime = 0T,TIME - WindowUpdateTime >= 1000] THEN BEGIN
        WindowUpdateTime := TIME;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

