OBJECT Codeunit 80011 Parcel Status History Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=26.03.15;
    Time=12:13:25;
    Modified=Yes;
    Version List=GOB,HME3878,T0082;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DateTime_glob@1000000000 : DateTime;
      DatePickup_glob@1000000003 : Date;
      DateDelivery_glob@1000000002 : Date;
      DateCommit_glob@1000000005 : Date;
      FileName_glob@1000000001 : Text[250];
      AccountNo_glob@1000000004 : Text[40];
      PurchasingCode_glob@1000000008 : Code[10];
      StatusCode_glob@1000000007 : Code[20];
      StatusSubCode_glob@1000000006 : Code[20];
      DirectionOfInformation_glob@1000000009 : ' ,Incoming,Outgoing';
      FPCGeneralSetup@1000000011 : Record 50055;
      FPCSetupRead@1000000010 : Boolean;
      UseDescriptionFields@1000000012 : ' ,Status Description,Status Sub Description,Both,Comment Part 1,Comment Part 2,Comment Part 3,Comment Part 4';
      ActionTypes@1000000013 : 'Ship,,ADD,First Scan,EDD,UPS,,,,,Update Return Order Status,Delivered,Confirm Cancel,Cancel Aborted,Reservation,Tracking Code Received';
      "*** P1282 Globals ***"@1000000015 : Integer;
      IsArchive@1000000014 : Boolean;
      isSpecialOrder@1100409000 : Boolean;

    PROCEDURE "------------FillInformations"@1000000005();
    BEGIN
    END;

    PROCEDURE FillHistoryByDocLine@1000000006(p_RecRef@1000000000 : RecordRef;p_Command@1000000010 : Integer;p_InfoDirection@1000000001 : 'Incoming,Outgoing';p_UsedInterface@1000000004 : ' ,EDI,DHL,DocData,Drop Shipment,Rhenus,UPS';p_ShippingAgentCode@1000000005 : Code[10];p_TrackingCode@1000000002 : Text[40];p_PieceCode@1000000003 : Text[40];p_StatusCode@1000000006 : Code[20];p_StatusSubCode@1000000007 : Code[20];p_CommentText@1000000009 : Text[1000];p_HowToHandleStatusDescription@1000000013 : ' ,Fill Parcel Status Description,See Comments');
    VAR
      ParcelStatusHistory@1000000008 : Record 80013;
      ParcelStatusCodes@1000000012 : Record 50188;
      FieldRef@1000000011 : FieldRef;
    BEGIN
      CLEAR(ParcelStatusHistory);

      WITH ParcelStatusHistory DO BEGIN
        INIT;
        "Entry No." := GetNextEntryNo(TRUE);

        CASE p_RecRef.NUMBER OF
          37,5108:  // Sales Line (Archive)
            BEGIN
              FieldRef := p_RecRef.FIELD(1);                        // "Sales Doc. Type"
              "Document Type" := FieldRef.VALUE;

              FieldRef := p_RecRef.FIELD(3);                        // "Sales Doc. No."
              //"Sales Doc. No." := FieldRef.VALUE;
              "Document No." := FORMAT(p_RecRef.FIELD(3));

              FieldRef := p_RecRef.FIELD(4);                        // "Sales Doc. Line No."
              "Document Line No." := FieldRef.VALUE;

              "Purchase Doc. Type" := "Purchase Doc. Type"::Order;  // "Purchase Doc. Type"

              // H1700, H3806, H3878 12.03.15  cc-are ++++++++++++++++++++++++++++++++
              IF isSpecialOrder THEN BEGIN
                FieldRef := p_RecRef.FIELD(5714);                   // "Special Order Purchase No."
                "Purchase Doc. No." := FieldRef.VALUE;
                FieldRef := p_RecRef.FIELD(5715);                   // "Special Order Purch. Line No."
                "Purchase Doc. Line No." := FieldRef.VALUE;
              END ELSE BEGIN
              // H1700, H3806, H3878 12.03.15  cc-are --------------------------------
              FieldRef := p_RecRef.FIELD(71);                       // "Purchase Doc. No."
              "Purchase Doc. No." := FieldRef.VALUE;

              FieldRef := p_RecRef.FIELD(72);                       // "Purchase Doc. Line No."
              "Purchase Doc. Line No." := FieldRef.VALUE;
              // H1700, H3806, H3878 12.03.15  cc-are +++++++++++++++++++++++++++++++++
              END;
              // H1700, H3806, H3878 12.03.15  cc-are ---------------------------------
            END;
          39,5110:  // Purchase Line (Archive)
            BEGIN
              "Document Type" := "Document Type"::Order;        // "Sales Doc. Type"

              // H1700, H3806, H3878 12.03.15  cc-are ++++++++++++++++++++++++++++++++
              IF isSpecialOrder THEN BEGIN
                FieldRef := p_RecRef.FIELD(5714);                   // "Special Order Sales No."
                "Document No." := FieldRef.VALUE;
                FieldRef := p_RecRef.FIELD(5715);                   // "Special Order Sales Line No."
                "Document Line No." := FieldRef.VALUE;
              END ELSE BEGIN
              // H1700, H3806, H3878 12.03.15  cc-are --------------------------------
              FieldRef := p_RecRef.FIELD(71);                       // "Sales Doc. No."
              "Document No." := FieldRef.VALUE;

              FieldRef := p_RecRef.FIELD(72);                       // "Sales Doc. Line No."
              "Document Line No." := FieldRef.VALUE;

              // H1700, H3806, H3878 12.03.15  cc-are ++++++++++++++++++++++++++++++++
              END;
              // H1700, H3806, H3878 12.03.15  cc-are --------------------------------
              //H1908 08.01.14 EHN +++++++++++++++++++++++++++++++++
              IF "Document No." = '' THEN BEGIN
                FieldRef := p_RecRef.FIELD(5714);                       // "Sales Doc. No."
                "Document No." := FieldRef.VALUE;
              END;

              IF "Document Line No." = 0 THEN BEGIN
                FieldRef := p_RecRef.FIELD(5715);                       // "Sales Doc. Line No."
                "Document Line No." := FieldRef.VALUE;
              END;
              //H1908 08.01.14 EHN ---------------------------------

              FieldRef := p_RecRef.FIELD(1);                        // "Purchase Doc. Type"
              "Purchase Doc. Type" := FieldRef.VALUE;

              FieldRef := p_RecRef.FIELD(3);                        // "Purchase Doc. No."
              "Purchase Doc. No." := FieldRef.VALUE;

              FieldRef := p_RecRef.FIELD(4);                        // "Purchase Doc. Line No."
              "Purchase Doc. Line No." := FieldRef.VALUE;
            END;
          // S/P1282
          5741,5745,5747:  // Transfer Line, Transfer Shipment Line, Transfer Receipt Line
            BEGIN
              "Document Type" := "Document Type"::"Transfer Order"; // "Document Type"

              FieldRef := p_RecRef.FIELD(1);                        // "Document No."
              "Document No." := FieldRef.VALUE;

              FieldRef := p_RecRef.FIELD(2);                        // "Document Line No."
              "Document Line No." := FieldRef.VALUE;
            END;
          // E/P1282
        END;

        IF p_ShippingAgentCode <> '' THEN BEGIN
          CheckAndCreateShippingAgent(p_ShippingAgentCode);
          "Shipping Agent Code" := p_ShippingAgentCode;
        END;

        IF ((p_ShippingAgentCode <> '') AND
            ((p_StatusCode <> '') OR (p_StatusSubCode <> '')))
        THEN BEGIN
          CheckAndCreateParcelStatus(
            p_HowToHandleStatusDescription,
            p_ShippingAgentCode,
            p_StatusCode,
            '',
            p_StatusSubCode,
            '');

          "Status Code" := p_StatusCode;
          "Status Sub Code" := p_StatusSubCode;
        END;

        "Tracking Code" := p_TrackingCode;
        "Piece Code" := p_PieceCode;

        "Direction of Information" := p_InfoDirection;
        "Used Interface" := p_UsedInterface;

        IF p_HowToHandleStatusDescription <> p_HowToHandleStatusDescription::"Fill Parcel Status Description" THEN BEGIN
          "Comment Part 1" := COPYSTR(p_CommentText,1,250);
          "Comment Part 2" := COPYSTR(p_CommentText,251,250);
          "Comment Part 3" := COPYSTR(p_CommentText,501,250);
          "Comment Part 4" := COPYSTR(p_CommentText,751,250);
        END;

        "Timestamp Insert" := CURRENTDATETIME;

        CASE p_Command OF
          0:; // Nothing
          1:  // Fill Globals
            BEGIN
              IF DateTime_glob <> 0DT THEN BEGIN
                "Timestamp Interface" := DateTime_glob;
                "Timestamp Difference" := "Timestamp Insert" - "Timestamp Interface";
                // S/P1170
                IF "Timestamp Difference" < 0 THEN
                  "Timestamp Difference" := "Timestamp Difference" * -1;
                // E/P1170
              END;
              IF FileName_glob <> '' THEN
                "File Name" := FileName_glob;
              IF DatePickup_glob <> 0D THEN
                "Date Pickup" := DatePickup_glob;
              IF DateDelivery_glob <> 0D THEN
                "Date Delivery" := DateDelivery_glob;
              IF DateCommit_glob <> 0D THEN
                "Date Commit" := DateCommit_glob;
              IF AccountNo_glob <> '' THEN
                "Account No." := AccountNo_glob;
            END;
        END;

        INSERT(TRUE);

        // S/P1180
        CASE p_RecRef.NUMBER OF
          5108:     MoveParcelInfosToArchive(4,'',0,0,'',"Entry No.");
          39,5110:  CheckIfArchivedOrder("Entry No.");
        END;
        // E/P1180
      END;
    END;

    PROCEDURE FillHistoryByDocInfos@1108200002(p_DocType@1108200000 : 'Sales Order,Purchase Order';p_OrderNo@1108200001 : Code[20];p_LineNo@1108200002 : Integer;p_StatusCode@1108200003 : Code[20];p_Comment@1108200004 : Text[1000];p_HowToHandleStatusDescription@1000000011 : ' ,Fill Parcel Status Description,See Comments');
    VAR
      ParcelStatusHistory@1000000007 : Record 80013;
      SalesLine@1000000003 : Record 37;
      SalesLineArchive@1000000004 : Record 5108;
      PurchaseLine@1000000005 : Record 39;
      Purchasing@1000000006 : Record 5721;
      RecRef@1000000008 : RecordRef;
      FieldRef@1000000009 : FieldRef;
      FPCManagement@1000000000 : Codeunit 50003;
      ShippingAgent@1000000010 : Code[10];
      DDShipmentDateDateTime@1000000002 : DateTime;
      GoOn@1000000001 : Boolean;
    BEGIN
      CASE p_DocType OF
        p_DocType::"Sales Order":
          BEGIN
            IF SalesLine.GET(SalesLine."Document Type"::Order,p_OrderNo,p_LineNo) THEN BEGIN
              IF (Purchasing.GET(SalesLine."Purchasing Code")) AND (Purchasing."Use New Order Status") THEN BEGIN
                GoOn := TRUE;
                SalesLine.CALCFIELDS("DD Shipment Date");
                DDShipmentDateDateTime := CREATEDATETIME(SalesLine."DD Shipment Date",0T);
                RecRef.GETTABLE(SalesLine);
                ShippingAgent := FPCManagement.GetShippingAgentSalesLine(SalesLine,'DOCDATA');
              END;
            END ELSE BEGIN
              SalesLineArchive.SETRANGE("Document Type",SalesLineArchive."Document Type"::Order);
              SalesLineArchive.SETRANGE("Document No.",p_OrderNo);
              SalesLineArchive.SETRANGE("Line No.",p_LineNo);
              IF SalesLineArchive.FINDFIRST THEN
                IF (Purchasing.GET(SalesLineArchive."Purchasing Code")) AND (Purchasing."Use New Order Status") THEN BEGIN
                  GoOn := TRUE;
                  //S/P1117/++S+++++++
                  //Field "DD Shipment Date" nicht in 5108 vorhanden
                  //SalesLineArchive.CALCFIELDS("DD Shipment Date");
                  //DDShipmentDateDateTime := CREATEDATETIME(SalesLineArchive."DD Shipment Date",0T);
                  //E/P1117/--E-------
                  RecRef.GETTABLE(SalesLineArchive);
                  ShippingAgent := FPCManagement.GetShippingAgentSalesLineArch(SalesLineArchive,'DOCDATA');
                END;
            END;
          END;
        p_DocType::"Purchase Order":
          BEGIN
            IF PurchaseLine.GET(PurchaseLine."Document Type"::Order,p_OrderNo,p_LineNo) THEN
              IF (Purchasing.GET(PurchaseLine."Purchasing Code")) AND (Purchasing."Use New Order Status") THEN BEGIN
                GoOn := TRUE;
                RecRef.GETTABLE(PurchaseLine);
              END;
          END;
      END;

      IF GoOn THEN BEGIN
        ParcelStatusHistory.INIT;
        ParcelStatusHistory."Entry No." := ParcelStatusHistory.GetNextEntryNo(TRUE);

        CASE p_DocType OF
          p_DocType::"Sales Order":
            BEGIN
              FieldRef := RecRef.FIELD(1);  // "Document Type"
              ParcelStatusHistory."Document Type" := FieldRef.VALUE;

              FieldRef := RecRef.FIELD(3);  // "Document No."
              ParcelStatusHistory."Document No." := FieldRef.VALUE;

              FieldRef := RecRef.FIELD(4);  // "Line No."
              ParcelStatusHistory."Document Line No." := FieldRef.VALUE;

              ParcelStatusHistory."Purchase Doc. Type" := ParcelStatusHistory."Purchase Doc. Type"::Order;

              FieldRef := RecRef.FIELD(71); // "Purchase Order No."
              ParcelStatusHistory."Purchase Doc. No." := FieldRef.VALUE;

              FieldRef := RecRef.FIELD(72); // "Purch. Order Line No."
              ParcelStatusHistory."Purchase Doc. Line No." := FieldRef.VALUE;

            END;
          p_DocType::"Purchase Order":
            BEGIN
              ParcelStatusHistory."Document Type" := ParcelStatusHistory."Document Type"::Order;

              FieldRef := RecRef.FIELD(71);  // "Sales Order No."
              ParcelStatusHistory."Document No." := FieldRef.VALUE;

              FieldRef := RecRef.FIELD(72);  // "Sales Order Line No."
              ParcelStatusHistory."Document Line No." := FieldRef.VALUE;

              FieldRef := RecRef.FIELD(1);  // "Document Type"
              ParcelStatusHistory."Document Type" := FieldRef.VALUE;

              FieldRef := RecRef.FIELD(3); // "Document No."
              ParcelStatusHistory."Purchase Doc. No." := FieldRef.VALUE;

              FieldRef := RecRef.FIELD(4); // "Line No."
              ParcelStatusHistory."Purchase Doc. Line No." := FieldRef.VALUE;
            END;
        END;

        // S/P1170
        //ParcelStatusHistory."Direction of Information" := ParcelStatusHistory."Direction of Information"::Incoming;
        CASE DirectionOfInformation_glob OF
          DirectionOfInformation_glob::" ",DirectionOfInformation_glob::Incoming:
            ParcelStatusHistory."Direction of Information" := ParcelStatusHistory."Direction of Information"::Incoming;
          DirectionOfInformation_glob::Outgoing:
            ParcelStatusHistory."Direction of Information" := ParcelStatusHistory."Direction of Information"::Outgoing;
        END;
        // E/P1170

        ParcelStatusHistory."Timestamp Insert" := CURRENTDATETIME;

        CASE Purchasing.Code OF
          'GER-4':
            BEGIN
              ParcelStatusHistory."Used Interface" := 2;  // "Used Interface":: ,EDI,DHL,DocData,Drop Shipment,Rhenus,UPS
              CheckAndCreateShippingAgent('DHL HD');
              ParcelStatusHistory."Shipping Agent Code" := 'DHL HD';
              CheckAndCreateParcelStatus(
                p_HowToHandleStatusDescription,
                'DHL HD',
                p_StatusCode,
                p_Comment,
                '',
                '');
              ParcelStatusHistory."Status Code" := p_StatusCode;
            END;
          //H1828,H1369,H1193 16.07.14 DMA ++++++++++++++++++++++++++++++++
          'AT-9','FRA-9','GER-9','NL-9', 'CH-9','BE-9','IT-9':
          //H1828,H1369,H1193 16.07.14 DMA --------------------------------
            BEGIN
              ParcelStatusHistory."Used Interface" := 3;  // "Used Interface":: ,EDI,DHL,DocData,Drop Shipment,Rhenus,UPS
              CheckAndCreateShippingAgent(ShippingAgent);
              ParcelStatusHistory."Shipping Agent Code" := ShippingAgent;
              // S/P1204
              IF ShippingAgent <> 'UPS' THEN BEGIN
              // E/P1204
                CheckAndCreateParcelStatus(
                  p_HowToHandleStatusDescription,
                  ShippingAgent,
                  p_StatusCode,
                  p_Comment,
                  '',
                  '');
                ParcelStatusHistory."Status Code" := p_StatusCode;
              // S/P1204
              END ELSE BEGIN
                CheckAndCreateParcelStatus(
                  p_HowToHandleStatusDescription,
                  ShippingAgent,
                  '',
                  '',
                  p_StatusCode,
                  p_Comment);
                ParcelStatusHistory."Status Sub Code" := p_StatusCode;
              END;
              // E/P1204
              ParcelStatusHistory."Timestamp Interface" := DDShipmentDateDateTime;
              // S/P1170
              //ParcelStatusHistory."Timestamp Difference" := DDShipmentDateDateTime - ParcelStatusHistory."Timestamp Insert";
              IF DDShipmentDateDateTime <> 0DT  THEN BEGIN
                ParcelStatusHistory."Timestamp Difference" := ParcelStatusHistory."Timestamp Insert" - DDShipmentDateDateTime;
                IF ParcelStatusHistory."Timestamp Difference" < 0 THEN
                  ParcelStatusHistory."Timestamp Difference" := ParcelStatusHistory."Timestamp Difference" * 1;
              END;
              // E/P1170
            END;
        END;

        IF p_HowToHandleStatusDescription <> p_HowToHandleStatusDescription::"Fill Parcel Status Description" THEN BEGIN
          ParcelStatusHistory."Comment Part 1" := COPYSTR(p_Comment,1,250);
          ParcelStatusHistory."Comment Part 2" := COPYSTR(p_Comment,251,250);
          ParcelStatusHistory."Comment Part 3" := COPYSTR(p_Comment,501,250);
          ParcelStatusHistory."Comment Part 4" := COPYSTR(p_Comment,751,250);
        END;

        ParcelStatusHistory.INSERT(TRUE);

        // S/P1180
        CASE RecRef.NUMBER OF
          5108:     MoveParcelInfosToArchive(4,'',0,0,'',ParcelStatusHistory."Entry No.");
          39,5110:  CheckIfArchivedOrder(ParcelStatusHistory."Entry No.");
        END;
        // E/P1180
      END;
    END;

    PROCEDURE "------------SetGlobals"@1000000008();
    BEGIN
    END;

    PROCEDURE SetDateTimeGlobal@1000000009(p_DateTime@1000000000 : DateTime);
    BEGIN
      DateTime_glob := p_DateTime;
    END;

    PROCEDURE SetDateGlobals@1000000011(p_DatePickup@1000000001 : Date;p_DateDelivery@1000000000 : Date;p_DateCommit@1000000002 : Date);
    BEGIN
      DatePickup_glob := p_DatePickup;
      DateDelivery_glob := p_DateDelivery;
      DateCommit_glob := p_DateCommit;
    END;

    PROCEDURE SetFileNameGlobal@1000000010(p_FileName@1000000000 : Text[250]);
    BEGIN
      FileName_glob := p_FileName;
    END;

    PROCEDURE SetAccountNo@1000000012(p_AccountNo@1000000000 : Text[40]);
    BEGIN
      AccountNo_glob := p_AccountNo;
    END;

    PROCEDURE SetSpecialOrder@1100409000(isSpecialOrderV@1000000000 : Boolean);
    BEGIN
      //H1700, H3806, H3878 12.03.15  cc-are +++++++++++++++++++++++++++++
      isSpecialOrder := isSpecialOrderV;
      //H1700, H3806, H3878 12.03.15  cc-are -----------------------------
    END;

    PROCEDURE "------------GeneralFunctions_1"@1000000002();
    BEGIN
    END;

    PROCEDURE ShowSalesDocument@1000000000(p_DocType@1000000000 : Integer;p_DocNo@1000000003 : Code[20]);
    VAR
      SalesHeader@1000000001 : Record 36;
      SalesHeaderArchive@1000000002 : Record 5107;
    BEGIN
      CLEAR(SalesHeader);
      CLEAR(SalesHeaderArchive);

      IF SalesHeader.GET(p_DocType,p_DocNo) THEN
        FORM.RUN(0,SalesHeader)
      ELSE BEGIN
        SalesHeaderArchive.SETRANGE("Document Type",p_DocType);
        SalesHeaderArchive.SETRANGE("No.",p_DocNo);
        IF SalesHeaderArchive.FINDLAST THEN
          FORM.RUN(0,SalesHeaderArchive)
      END;
    END;

    PROCEDURE ShowPurchaseDocument@1000000001(p_DocType@1000000004 : Integer;p_DocNo@1000000003 : Code[20]);
    VAR
      PurchaseHeader@1000000001 : Record 38;
      PurchaseHeaderArchive@1000000002 : Record 5109;
    BEGIN
      CLEAR(PurchaseHeader);
      CLEAR(PurchaseHeaderArchive);

      IF PurchaseHeader.GET(p_DocType,p_DocNo) THEN
        FORM.RUN(0,PurchaseHeader)
      ELSE BEGIN
        PurchaseHeaderArchive.SETRANGE("Document Type",p_DocType);
        PurchaseHeaderArchive.SETRANGE("No.",p_DocNo);
        IF PurchaseHeaderArchive.FINDLAST THEN
          FORM.RUN(0,PurchaseHeaderArchive)
      END;
    END;

    PROCEDURE "------------GeneralFunctions_2"@1000000014();
    BEGIN
    END;

    PROCEDURE CheckAndCreateShippingAgent@1000000003(p_Code@1000000000 : Code[10]);
    VAR
      ShippingAgent@1000000002 : Record 291;
    BEGIN
      CLEAR(ShippingAgent);

      IF ShippingAgent.GET(p_Code) THEN
        EXIT
      ELSE BEGIN
        ShippingAgent.INIT;
        ShippingAgent.Code := p_Code;
        ShippingAgent.Name := p_Code;
        ShippingAgent.INSERT;
      END;
    END;

    PROCEDURE CheckAndCreateParcelStatus@1000000007(p_HowToHandleStatusDescription@1000000000 : ' ,Fill Parcel Status Description,See Comments';p_ShippingAgent@1000000007 : Code[10];p_StatusCode@1000000006 : Code[20];p_StatusDescription@1000000005 : Text[250];p_StatusSubCode@1000000004 : Code[20];p_StatusSubDescription@1000000003 : Text[250]);
    VAR
      ParcelStatusCodes@1000000001 : Record 50188;
      ParcelStatusCodes2@1000000002 : Record 50188;
    BEGIN
      CLEAR(ParcelStatusCodes);
      WITH ParcelStatusCodes DO BEGIN
        // S/P1170
        { *****************
        //S/P1133
        //IF GET('',p_StatusCode,p_StatusSubCode) THEN
        //  RENAME(p_ShippingAgent,p_StatusCode,p_StatusSubCode);
        IF GET('',p_StatusCode,p_StatusSubCode) THEN
          IF RENAME(p_ShippingAgent,p_StatusCode,p_StatusSubCode) THEN;
        //E/P1133
        ***************** }
        IF GET('',p_StatusCode,p_StatusSubCode) THEN
          IF NOT ParcelStatusCodes2.GET(p_ShippingAgent,p_StatusCode,p_StatusSubCode) THEN
            RENAME(p_ShippingAgent,p_StatusCode,p_StatusSubCode);
        // E/P1170
        RESET;
        IF GET(p_ShippingAgent,p_StatusCode,p_StatusSubCode) THEN
          EXIT
        ELSE BEGIN
          INIT;
          "Shipping Agent Code" := p_ShippingAgent;
          "Status Code" := p_StatusCode;
          "Status Sub Code" := p_StatusSubCode;
          CASE p_HowToHandleStatusDescription OF
            p_HowToHandleStatusDescription::"Fill Parcel Status Description":
              BEGIN
                "Status Description" := p_StatusDescription;
                "Status Sub Description" := p_StatusSubDescription;
              END;
            p_HowToHandleStatusDescription::"See Comments":
              BEGIN
                "Status Description" := 'See Comments';
                "Status Sub Description" := 'See Comments';
              END;
          END;
          INSERT;
        END;
      END;
    END;

    PROCEDURE "------------GeneralFunctions_3"@1000000016();
    BEGIN
    END;

    PROCEDURE GetLastStatusDescription@1000000017(p_SourceTbl@1000000006 : Integer;p_DocType@1000000005 : Integer;p_DocNo@1000000004 : Code[20];p_DocLineNo@1000000003 : Integer;p_TrackingCode@1000000002 : Text[40];p_PieceCode@1000000001 : Text[40];p_Command_AddFilter@1000000000 : Integer) : Text[550];
    VAR
      ParcelStatusHistoryArchive@1000000014 : Record 50187;
      ParcelStatusHistory@1000000013 : Record 80013;
      RecRef@1000000012 : RecordRef;
      FieldRef@1000000011 : FieldRef;
      UseSubCode@1000000007 : Boolean;
      InternTxt@1000000009 : Text[250];
      CombinedStatusText@1000000008 : Text[550];
    BEGIN
      //S/P1133
      // S/P1232
      //CLEAR(UseSubCode);
      // E/P1232
      CLEAR(RecRef);
      CLEAR(FieldRef);
      CLEAR(ParcelStatusHistory);
      CLEAR(ParcelStatusHistoryArchive);

      CASE p_SourceTbl OF
        37:     // Sales Line
          BEGIN
            ParcelStatusHistory.SETCURRENTKEY(
              "Document No.","Document Line No.","Document Type");
            RecRef.GETTABLE(ParcelStatusHistory);
            FieldRef := RecRef.FIELD(11);   // "Sales Doc. No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(12);   // "Sales Doc. Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(10);   // "Sales Doc. Type"
            FieldRef.SETRANGE(p_DocType);
          END;
        5108:   // Sales Line Archvie
          BEGIN
            ParcelStatusHistoryArchive.SETCURRENTKEY(
              "Document No.","Document Line No.","Document Type");
            RecRef.GETTABLE(ParcelStatusHistoryArchive);
            FieldRef := RecRef.FIELD(11);   // "Sales Doc. No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(12);   // "Sales Doc. Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(10);   // "Sales Doc. Type"
            FieldRef.SETRANGE(p_DocType);
          END;
        39:     // Purchase Line
          BEGIN
            ParcelStatusHistory.SETCURRENTKEY(
              "Purchase Doc. No.","Purchase Doc. Line No.","Purchase Doc. Type");
            RecRef.GETTABLE(ParcelStatusHistory);
            FieldRef := RecRef.FIELD(16);   // "Purchase Doc. No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(17);   // "Purchase Doc. Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(15);   // "Purchase Doc. Type"
            FieldRef.SETRANGE(p_DocType);
          END;
        5110:   // Purchase Line Archive
          BEGIN
            ParcelStatusHistoryArchive.SETCURRENTKEY(
              "Purchase Doc. No.","Purchase Doc. Line No.","Purchase Doc. Type");
            RecRef.GETTABLE(ParcelStatusHistoryArchive);
            FieldRef := RecRef.FIELD(16);   // "Purchase Doc. No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(17);   // "Purchase Doc. Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(15);   // "Purchase Doc. Type"
            FieldRef.SETRANGE(p_DocType);
          END;
        // S/P1282
        5741:     // Transfer Line
          BEGIN
            ParcelStatusHistory.SETCURRENTKEY("Document No.","Document Line No.","Document Type");
            RecRef.GETTABLE(ParcelStatusHistory);
            FieldRef := RecRef.FIELD(11);   // "Document No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(12);   // "Document Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(10);   // "Document Type"
            FieldRef.SETRANGE(p_DocType);
          END;
        5745:     // Transfer Shipment Line
          BEGIN
            IF IsArchive THEN BEGIN
              ParcelStatusHistoryArchive.SETCURRENTKEY("Document No.","Document Line No.","Document Type");
              RecRef.GETTABLE(ParcelStatusHistoryArchive);
              FieldRef := RecRef.FIELD(11);   // "Document No."
              FieldRef.SETRANGE(p_DocNo);
              FieldRef := RecRef.FIELD(12);   // "Document Line No."
              FieldRef.SETRANGE(p_DocLineNo);
              FieldRef := RecRef.FIELD(10);   // "Document Type"
              FieldRef.SETRANGE(p_DocType);
            END ELSE BEGIN
              ParcelStatusHistory.SETCURRENTKEY("Document No.","Document Line No.","Document Type");
              RecRef.GETTABLE(ParcelStatusHistory);
              FieldRef := RecRef.FIELD(11);   // "Document No."
              FieldRef.SETRANGE(p_DocNo);
              FieldRef := RecRef.FIELD(12);   // "Document Line No."
              FieldRef.SETRANGE(p_DocLineNo);
              FieldRef := RecRef.FIELD(10);   // "Document Type"
              FieldRef.SETRANGE(p_DocType);
            END;
          END;
        5747:     // Transfer Receipt Line
          BEGIN
            ParcelStatusHistoryArchive.SETCURRENTKEY("Document No.","Document Line No.","Document Type");
            RecRef.GETTABLE(ParcelStatusHistoryArchive);
            FieldRef := RecRef.FIELD(11);   // "Document No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(12);   // "Document Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(10);   // "Document Type"
            FieldRef.SETRANGE(p_DocType);
          END;
        // E/P1282
      END;

      CASE p_Command_AddFilter OF
        0:;
        1:
          BEGIN
            FieldRef := RecRef.FIELD(35);       // "Used Interface"
            FieldRef.SETRANGE(2);               // "Used Interface"::DHL
            FieldRef := RecRef.FIELD(40);       // "Shipping Agent Code"
            FieldRef.SETRANGE('DHL HD');
          END;
        2:
          BEGIN
            FieldRef := RecRef.FIELD(35);       // "Used Interface"
            FieldRef.SETRANGE(3);               // "Used Interface"::DocData
          END;
        3:
          BEGIN
            FieldRef := RecRef.FIELD(40);       // "Shipping Agent Code"
            FieldRef.SETRANGE('UPS');
            FieldRef := RecRef.FIELD(50);       // "Status Code"
            FieldRef.SETRANGE('21');
            IF NOT RecRef.FINDLAST THEN BEGIN
              FieldRef := RecRef.FIELD(50);     // "Status Code"
              FieldRef.SETRANGE();
              FieldRef := RecRef.FIELD(52);     // "Status Sub Code"
              FieldRef.SETRANGE('21');
              // S/P1232
              //UseSubCode := TRUE;
              // E/P1232
            END;
          END;
        4:
          BEGIN
            FieldRef := RecRef.FIELD(35);       // "Used Interface"
            FieldRef.SETRANGE(4);               // "Used Interface"::"Drop Shipment"
          END;
      END;

      // S/P1232
      //RecRef.ASCENDING(FALSE);
      // E/P1232

      IF RecRef.FINDLAST THEN BEGIN
        // S/P1232
        { *****
        IF UseSubCode THEN
          // S/P1232
          //FieldRef := RecRef.FIELD(52)  // "Status Sub Code"
          FieldRef := RecRef.FIELD(53)  // "Status Sub Description"
          // E/P1232
        ELSE
          // S/P1232
          //FieldRef := RecRef.FIELD(50); // "Status Code"
          FieldRef := RecRef.FIELD(51); // "Status Description"
          // E/P1232
        FieldRef.CALCFIELD;
        EXIT(FieldRef.VALUE);
        ***** }

        CASE  UseDescriptionFields OF
          UseDescriptionFields::" ",
          UseDescriptionFields::"Status Description":
            BEGIN
              FieldRef := RecRef.FIELD(51); // "Status Description"
              FieldRef.CALCFIELD;
              EXIT(FieldRef.VALUE);
            END;
          UseDescriptionFields::"Status Sub Description":
            BEGIN
              FieldRef := RecRef.FIELD(53); // "Status Sub Description"
              FieldRef.CALCFIELD;
              EXIT(FieldRef.VALUE);
            END;
          UseDescriptionFields::Both:
            BEGIN
              FieldRef := RecRef.FIELD(51); // "Status Description"
              FieldRef.CALCFIELD;

              CombinedStatusText := FieldRef.VALUE;

              FieldRef := RecRef.FIELD(53); // "Status Sub Description"
              FieldRef.CALCFIELD;

              IF CombinedStatusText <> '' THEN BEGIN
                InternTxt := FieldRef.VALUE;
                CombinedStatusText += ', ' + InternTxt;
              END ELSE
                CombinedStatusText := FieldRef.VALUE;

              EXIT(CombinedStatusText);
            END;
          //H1298 11.07.14 DMA ++++++++++++++++++++++++++++++++++++++++
          UseDescriptionFields::"Comment Part 1":
            BEGIN
              FieldRef := RecRef.FIELD(210); // "Comment Part 1"
              EXIT(FieldRef.VALUE);
            END;
          UseDescriptionFields::"Comment Part 2":
            BEGIN
              FieldRef := RecRef.FIELD(211); // "Comment Part 2"
              EXIT(FieldRef.VALUE);
            END;
          UseDescriptionFields::"Comment Part 3":
            BEGIN
              FieldRef := RecRef.FIELD(212); // "Comment Part 3"
              EXIT(FieldRef.VALUE);
            END;
          UseDescriptionFields::"Comment Part 4":
            BEGIN
              FieldRef := RecRef.FIELD(213); // "Comment Part 4"
              EXIT(FieldRef.VALUE);
            END;
          //H1298 11.07.14 DMA ----------------------------------------
        END;
      END;

      EXIT('');
      //E/P1133
    END;

    PROCEDURE ShowStatusList@1000000018(p_SourceTbl@1000000006 : Integer;p_DocType@1000000005 : Integer;p_DocNo@1000000004 : Code[20];p_DocLineNo@1000000003 : Integer;p_TrackingCode@1000000002 : Text[40];p_PieceCode@1000000001 : Text[40];p_Command_AddFilter@1000000000 : Integer);
    VAR
      ParcelStatusHistoryArchive@1000000009 : Record 50187;
      ParcelStatusHistory@1000000010 : Record 80013;
      RecRef@1000000007 : RecordRef;
      FieldRef@1000000008 : FieldRef;
    BEGIN
      //S/P1133
      CLEAR(RecRef);
      CLEAR(FieldRef);
      CLEAR(ParcelStatusHistory);
      CLEAR(ParcelStatusHistoryArchive);

      CASE p_SourceTbl OF
        37:     // Sales Line
          BEGIN
            ParcelStatusHistory.SETCURRENTKEY(
              "Document No.","Document Line No.","Document Type");
            RecRef.GETTABLE(ParcelStatusHistory);
            FieldRef := RecRef.FIELD(11);   // "Sales Doc. No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(12);   // "Sales Doc. Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(10);   // "Sales Doc. Type"
            FieldRef.SETRANGE(p_DocType);
          END;
        5108:   // Sales Line Archvie
          BEGIN
            ParcelStatusHistoryArchive.SETCURRENTKEY(
              "Document No.","Document Line No.","Document Type");
            RecRef.GETTABLE(ParcelStatusHistoryArchive);
            FieldRef := RecRef.FIELD(11);   // "Sales Doc. No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(12);   // "Sales Doc. Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(10);   // "Sales Doc. Type"
            FieldRef.SETRANGE(p_DocType);
          END;
        39:     // Purchase Line
          BEGIN
            ParcelStatusHistory.SETCURRENTKEY(
              "Purchase Doc. No.","Purchase Doc. Line No.","Purchase Doc. Type");
            RecRef.GETTABLE(ParcelStatusHistory);
            FieldRef := RecRef.FIELD(16);   // "Purchase Doc. No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(17);   // "Purchase Doc. Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(15);   // "Purchase Doc. Type"
            FieldRef.SETRANGE(p_DocType);
          END;
        5110:   // Purchase Line Archive
          BEGIN
            ParcelStatusHistoryArchive.SETCURRENTKEY(
              "Purchase Doc. No.","Purchase Doc. Line No.","Purchase Doc. Type");
            RecRef.GETTABLE(ParcelStatusHistoryArchive);
            FieldRef := RecRef.FIELD(16);   // "Purchase Doc. No."
            FieldRef.SETRANGE(p_DocNo);
            FieldRef := RecRef.FIELD(17);   // "Purchase Doc. Line No."
            FieldRef.SETRANGE(p_DocLineNo);
            FieldRef := RecRef.FIELD(15);   // "Purchase Doc. Type"
            FieldRef.SETRANGE(p_DocType);
          END;
      END;

      CASE p_Command_AddFilter OF
        0:;
        1:
          BEGIN
            FieldRef := RecRef.FIELD(35);       // "Used Interface"
            FieldRef.SETRANGE(2);               // "Used Interface"::DHL
            FieldRef := RecRef.FIELD(40);       // "Shipping Agent Code"
            FieldRef.SETRANGE('DHL HD');
          END;
        2:
          BEGIN
            FieldRef := RecRef.FIELD(35);       // "Used Interface"
            FieldRef.SETRANGE(3);               // "Used Interface"::DocData
          END;
        3:
          BEGIN
            FieldRef := RecRef.FIELD(54);       // "Tracking Code"
            FieldRef.SETRANGE(p_TrackingCode);
            FieldRef := RecRef.FIELD(35);       // "Used Interface"
            FieldRef.SETFILTER('<>%1',5);       // <> "Used Interface"::Rhenus
          END;
        4:
          BEGIN
            FieldRef := RecRef.FIELD(35);       // "Used Interface"
            FieldRef.SETRANGE(5);               // "Used Interface"::Rhenus
          END;
        5:
          BEGIN
            FieldRef := RecRef.FIELD(40);       // "Shipping Agent Code"
            FieldRef.SETRANGE('VIR');
            IF NOT RecRef.FINDLAST THEN BEGIN
              FieldRef.SETRANGE();
              FieldRef := RecRef.FIELD(35);       // "Used Interface"
              FieldRef.SETRANGE(5);               // "Used Interface"::Rhenus
              IF RecRef.FINDLAST THEN
                FieldRef.SETRANGE()
              ELSE BEGIN
                FieldRef := RecRef.FIELD(54);       // "Tracking Code"
                FieldRef.SETRANGE(p_TrackingCode);
              END;
            END;
          END;
      END;

      RecRef.ASCENDING(FALSE);

      CASE p_SourceTbl OF
        37,39:
          BEGIN
            ParcelStatusHistory.SETVIEW(RecRef.GETVIEW);
            FORM.RUN(0,ParcelStatusHistory);
          END;
        5108,5110:
          BEGIN
            ParcelStatusHistoryArchive.SETVIEW(RecRef.GETVIEW);
            FORM.RUN(0,ParcelStatusHistoryArchive);
          END;
      END;
    END;

    PROCEDURE SetGlobalsForGetStatus@1000000019(p_PurchasingCode@1000000002 : Code[10];p_StatusCode@1000000000 : Code[20];p_StatusSubCode@1000000001 : Code[20]);
    BEGIN
      //S/P1133
      PurchasingCode_glob := p_PurchasingCode;
      StatusCode_glob := p_StatusCode;
      StatusSubCode_glob := p_StatusSubCode;
      //E/P1133
    END;

    PROCEDURE "------------GeneralFunctions_4"@1000000015();
    BEGIN
    END;

    PROCEDURE MoveParcelInfosToArchive@1000000004(p_Command@1000000002 : Integer;p_DocNo@1000000003 : Code[20];p_LineNo@1000000004 : Integer;p_DocType@1000000005 : Integer;p_DateFilterString@1000000006 : Text[100];p_EntryNo@1000000007 : Integer);
    VAR
      ParcelStatusHistory@1000000000 : Record 80013;
      ParcelStatusHistoryArchive@1000000001 : Record 50187;
      GoOn@1000000008 : Boolean;
    BEGIN
      //S/P1129
      //CLEAR(ParcelStatusHistory);
      ParcelStatusHistory.RESET;
      //E/P1129
      CLEAR(ParcelStatusHistoryArchive);

      CASE p_Command OF
        0:  // Archive All Entries
          BEGIN
          END;
        1:  // Archive by Sales Document
          BEGIN
            //S/P1129
            //IF (p_DocNo <> '') AND (p_DocType <> 0) THEN BEGIN
            IF (p_DocNo <> '') THEN BEGIN
            //E/P1129
              ParcelStatusHistory.SETCURRENTKEY("Document No.","Document Line No.","Document Type");
              ParcelStatusHistory.SETRANGE("Document No.",p_DocNo);
              IF p_LineNo <> 0 THEN
                ParcelStatusHistory.SETRANGE("Document Line No.",p_LineNo);
              ParcelStatusHistory.SETRANGE("Document Type",p_DocType);
              //S/P1129
              //GoOn := TRUE;
              //E/P1129
            END;
          END;
        2:  // Archive by Purchase Document
          BEGIN
            //S/P1129
            //IF (p_DocNo <> '') AND (p_DocType <> 0) THEN BEGIN
            IF (p_DocNo <> '') THEN BEGIN
            //E/P1129
              ParcelStatusHistory.SETCURRENTKEY("Purchase Doc. No.","Purchase Doc. Line No.","Purchase Doc. Type");
              ParcelStatusHistory.SETRANGE("Purchase Doc. No.",p_DocNo);
              IF p_LineNo <> 0 THEN
                ParcelStatusHistory.SETRANGE("Purchase Doc. Line No.",p_LineNo);
              ParcelStatusHistory.SETRANGE("Purchase Doc. Type",p_DocType);
              //S/P1129
              //GoOn := TRUE;
              //E/P1129
            END;
          END;
        3:  // Archive by Date
          BEGIN
            IF p_DateFilterString <> '' THEN BEGIN
              ParcelStatusHistory.SETCURRENTKEY("Timestamp Insert");
              ParcelStatusHistory.SETFILTER("Timestamp Insert",p_DateFilterString);
              //S/P1129
              //GoOn := TRUE;
              //E/P1129
            END;
          END;
        4:  // Archive by Entry No.
          BEGIN
            IF p_EntryNo <> 0 THEN BEGIN
              ParcelStatusHistory.SETRANGE("Entry No.",p_EntryNo);
              //S/P1129
              //GoOn := TRUE;
              //E/P1129
            END;
          END;
      END;

      IF ParcelStatusHistory.FIND('-') THEN
        REPEAT
          ParcelStatusHistoryArchive.INIT;
          ParcelStatusHistoryArchive.TRANSFERFIELDS(ParcelStatusHistory);
          IF ParcelStatusHistoryArchive.INSERT THEN
            ParcelStatusHistory.DELETE(TRUE);
        UNTIL ParcelStatusHistory.NEXT = 0;
    END;

    PROCEDURE CheckIfArchivedOrder@1000000022(p_EntryNo@1000000000 : Integer);
    VAR
      ParcelStatusHistory@1000000003 : Record 80013;
      SalesLine@1000000001 : Record 37;
      SalesLineArchive@1000000002 : Record 5108;
    BEGIN
      // S/P1180
      IF ParcelStatusHistory.GET(p_EntryNo) THEN
        IF NOT SalesLine.GET(
          ParcelStatusHistory."Document Type",ParcelStatusHistory."Document No.",ParcelStatusHistory."Document Line No.")
        THEN BEGIN
          SalesLineArchive.SETRANGE("Document Type",ParcelStatusHistory."Document Type");
          SalesLineArchive.SETRANGE("Document No.",ParcelStatusHistory."Document No.");
          SalesLineArchive.SETRANGE("Line No.",ParcelStatusHistory."Document Line No.");
          IF SalesLineArchive.FINDFIRST THEN
            MoveParcelInfosToArchive(
              1,                                          // p_Command
              ParcelStatusHistory."Document No.",       // p_DocNoCode
              ParcelStatusHistory."Document Line No.",  //p_LineNo
              ParcelStatusHistory."Document Type",      //p_DocType
              '',                                         // p_DateFilterString
             0);                                          // p_EntryNo
        END;
      // E/P1180
    END;

    PROCEDURE MarkOldDHLParcelEntriesArchive@1000000013(p_Command@1000000003 : Integer;p_SalesOrderNo@1000000000 : Code[20];p_SalesDocType@1000000004 : Integer);
    VAR
      DHLParcelStatusHistory@1000000001 : Record 50021;
      SalesLine@1000000002 : Record 37;
    BEGIN
      //S/P1129
      DHLParcelStatusHistory.RESET;
      DHLParcelStatusHistory.SETCURRENTKEY("Document No.","Document Line No.","Document Type","Time Stamp");
      DHLParcelStatusHistory.SETRANGE("Document No.",p_SalesOrderNo);
      DHLParcelStatusHistory.SETRANGE("Document Type",p_SalesDocType);
      IF DHLParcelStatusHistory.FINDSET(TRUE,FALSE) THEN BEGIN
        CASE p_Command OF
          0: DHLParcelStatusHistory.MODIFYALL(
                "Status for New Parcel History",
                DHLParcelStatusHistory."Status for New Parcel History"::"Is Active Order",
                FALSE);
          1: DHLParcelStatusHistory.MODIFYALL(
                "Status for New Parcel History",
                DHLParcelStatusHistory."Status for New Parcel History"::"Is Archived Order",
                FALSE);
        END;
      END ELSE BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",p_SalesDocType);
        SalesLine.SETRANGE("Document No.",p_SalesOrderNo);
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETFILTER("Purchase Order No.",'<>%1','');
        IF SalesLine.FINDSET THEN BEGIN
          DHLParcelStatusHistory.SETCURRENTKEY(
            "Purchase Order Code","PO Line No.","Current Status","Time Stamp","DHL Shipment Code","Rhenus Entry");
          REPEAT
            DHLParcelStatusHistory.RESET;
            DHLParcelStatusHistory.SETRANGE("Purchase Order Code",SalesLine."Purchase Order No.");
            DHLParcelStatusHistory.SETRANGE("PO Line No.",SalesLine."Purch. Order Line No.");
            DHLParcelStatusHistory.SETRANGE(
              "Status for New Parcel History",DHLParcelStatusHistory."Status for New Parcel History"::" ");
            IF DHLParcelStatusHistory.FINDSET(TRUE,FALSE) THEN
              CASE p_Command OF
                0: DHLParcelStatusHistory.MODIFYALL(
                      "Status for New Parcel History",
                      DHLParcelStatusHistory."Status for New Parcel History"::"Is Active Order",
                      FALSE);
                1: DHLParcelStatusHistory.MODIFYALL(
                      "Status for New Parcel History",
                      DHLParcelStatusHistory."Status for New Parcel History"::"Is Archived Order",
                      FALSE);
              END;
          UNTIL SalesLine.NEXT = 0;
        END;
      END;
      //E/P1129
    END;

    PROCEDURE "------------GeneralFunctions_5"@1000000021();
    BEGIN
    END;

    PROCEDURE SetDirectionOfInformation@1000000020(p_Direction@1000000000 : ' ,Incoming,Outgoing');
    BEGIN
      // S/P1170
      DirectionOfInformation_glob := p_Direction;
      // E/P1170
    END;

    PROCEDURE SetDescriptionFields@1000000023(p_UseDescriptionFields@1000000000 : ' ,Status Description,Status Sub Description,Both');
    BEGIN
      // S/P1232
      UseDescriptionFields := p_UseDescriptionFields;
      // E/P1232
    END;

    PROCEDURE "------------TrackingActions"@1000000028();
    BEGIN
      // S/P1228
      // E/P1228
    END;

    PROCEDURE TrackingActions@1000000027(p_ParcelStatusHistory@1000000001 : Record 80013);
    VAR
      SalesLineL@1000000000 : Record 37;
      SalesLineArchiveL@1000000005 : Record 5108;
      PurchasingL@1000000002 : Record 5721;
      SalesTrackingActionL@1000000003 : Record 50201;
      SalesHeaderL@1000000004 : Record 36;
      SIIFillLogCreateL@1000000006 : Codeunit 50169;
      BatchTrackingActionL@1000000007 : Record 50245;
      TrackingCodeL@1000000008 : Code[20];
    BEGIN
      // S/P1228
      IF NOT FPCSetupRead THEN BEGIN
        FPCGeneralSetup.GET;
        FPCSetupRead := TRUE;
      END;

      IF (p_ParcelStatusHistory."Document Type" = p_ParcelStatusHistory."Document Type"::Order) AND
         (p_ParcelStatusHistory."Document No." <> '') AND
         (p_ParcelStatusHistory."Document Line No." <> 0)
      THEN
        IF SalesLineL.GET(
          p_ParcelStatusHistory."Document Type",
          p_ParcelStatusHistory."Document No.",
          p_ParcelStatusHistory."Document Line No.")
        THEN BEGIN
          IF PurchasingL.GET(SalesLineL."Purchasing Code") THEN
            IF PurchasingL."Sales Tracking Code" <> '' THEN BEGIN

              IF FPCGeneralSetup."Sales Order Posting" = FPCGeneralSetup."Sales Order Posting"::"Goods in Transit" THEN //Ship
                IF SalesLineL."Outstanding Quantity" > 0 THEN
                  IF CheckActionValues(
                       //T0011 18.06.14 tec-cs ++++++++++++++++++++++++++++
                       ActionTypes::Ship,
                       //T0011 18.06.14 tec-cs ----------------------------
                       PurchasingL."Sales Tracking Code",
                       SalesTrackingActionL,
                       p_ParcelStatusHistory)
                  THEN
                    PostShipment(
                      SalesTrackingActionL,
                      SalesLineL,
                      p_ParcelStatusHistory);

                    //T0022 12.11.14 DMA ++++++++++++++++++++++++++++++++++++
                    IF (SalesLineL."Return Type" = SalesLineL."Return Type"::Cancelation) AND
                       (SalesLineL."Status Return Order" = SalesLineL."Status Return Order"::requested) AND
                       (SalesLineL.Quantity = 1) THEN BEGIN
                      IF CheckActionValues(
                               ActionTypes::"Confirm Cancel",
                               PurchasingL."Sales Tracking Code",
                               SalesTrackingActionL,
                               p_ParcelStatusHistory)
                          THEN
                            ConfirmCancel(SalesTrackingActionL,p_ParcelStatusHistory);
                    END;
                    IF (SalesLineL."Status Return Order" = SalesLineL."Status Return Order"::requested) AND
                       (SalesLineL.Quantity=1) AND (SalesLineL."Return Type" = SalesLineL."Return Type"::Cancelation) AND
                       CheckForIPLCancelEntry(SalesLineL."Document No.",SalesLineL."Line No.",SalesLineL."Document Type") THEN BEGIN
                      IF CheckActionValues(
                               ActionTypes::"Cancel Aborted",
                               PurchasingL."Sales Tracking Code",
                               SalesTrackingActionL,
                               p_ParcelStatusHistory) THEN
                            AbortCancel(SalesTrackingActionL,p_ParcelStatusHistory);
                    END;
                    //T0022 12.11.14 DMA ++++++++++++++++++++++++++++++++++++


              IF p_ParcelStatusHistory."Timestamp Insert" <> 0DT THEN
                //H1258,T0011 19.06.14 MSL ++++++++++++++++++++++++++++
                BEGIN
                  IF CheckActionValues(
                       ActionTypes::ADD,
                       PurchasingL."Sales Tracking Code",
                       SalesTrackingActionL,
                       p_ParcelStatusHistory)
                  THEN //ADD
                    UpdateDates(
                      SalesTrackingActionL,
                      SalesLineL."Actual Delivery Date",
                      FALSE,
                      0,
                      0,
                      ActionTypes::ADD,
                      p_ParcelStatusHistory);

                  IF CheckActionValues(
                       ActionTypes::"First Scan",
                       PurchasingL."Sales Tracking Code",
                       SalesTrackingActionL,
                       p_ParcelStatusHistory)
                  THEN //fs
                    UpdateDates(
                      SalesTrackingActionL,
                      SalesLineL."First Scan",
                      FALSE,
                      0,
                      0,
                      ActionTypes::"First Scan",
                      p_ParcelStatusHistory);

                  //H1540,H1259 01.10.14 MSL +++++++++++++++++++++++++++++++++++
                  IF CheckActionValues(
                       ActionTypes::EDD,
                       PurchasingL."Sales Tracking Code",
                       SalesTrackingActionL,
                       p_ParcelStatusHistory)
                  THEN //EDD
                    UpdateDates(
                      SalesTrackingActionL,
                      CREATEDATETIME(SalesLineL."Expected Delivery Date",0T),
                      FALSE,
                      0,
                    0,
                      ActionTypes::EDD,
                      p_ParcelStatusHistory);
                  //H1540,H1259 01.10.14 MSL -----------------------------------
                  //H1878 08.12.14 MIK +++++++++++++++++++++++++++++++++++
                  IF CheckActionValues(
                       ActionTypes::"Tracking Code Received",
                       PurchasingL."Sales Tracking Code",
                       SalesTrackingActionL,
                       p_ParcelStatusHistory) THEN BEGIN
                    SIIFillLogCreateL.CreateOrderItemDeliveryConfirm(p_ParcelStatusHistory);
                  END
                  //H1878 08.12.14 MIK -----------------------------------
                END;
                //H1258,T0011 19.06.14 MSL ----------------------------

              //H2064 24.02.15 MSL ++++++++++++++++++++++++++++++++++++
              IF p_ParcelStatusHistory."Tracking Code" <> '' THEN
                TrackingCodeL := COPYSTR(p_ParcelStatusHistory."Tracking Code",1,20)
              ELSE
                TrackingCodeL := COPYSTR(p_ParcelStatusHistory."Comment Part 1",STRPOS(p_ParcelStatusHistory."Comment Part 1",': ')+2,20
      );
              IF TrackingCodeL <> '' THEN BEGIN
                IF CheckActionValues(
                     ActionTypes::UPS,
                     PurchasingL."Sales Tracking Code",
                     SalesTrackingActionL,
                     p_ParcelStatusHistory)
                THEN  // Batch Entry for UPS Status Update
                  CreateBatchTrackingActionEntry(
                    SalesTrackingActionL,BatchTrackingActionL."Shipping Agent"::UPS,TrackingCodeL,p_ParcelStatusHistory);
              END;
              //H2064 24.02.15 MSL -------------------------------------
            END;
        END ELSE BEGIN
          SalesLineArchiveL.SETRANGE("Document Type",p_ParcelStatusHistory."Document Type");
          SalesLineArchiveL.SETRANGE("Document No.",p_ParcelStatusHistory."Document No.");
          SalesLineArchiveL.SETRANGE("Line No.",p_ParcelStatusHistory."Document Line No.");
          IF SalesLineArchiveL.FINDLAST THEN BEGIN
            IF PurchasingL.GET(SalesLineArchiveL."Purchasing Code") THEN
              IF PurchasingL."Sales Tracking Code" <> '' THEN BEGIN

                //T0022 12.11.14 DMA ++++++++++++++++++++++++++++++++++++
                IF (SalesLineArchiveL."Return Type" = SalesLineArchiveL."Return Type"::Cancelation) AND
                   (SalesLineArchiveL."Status Return Order" = SalesLineArchiveL."Status Return Order"::requested) AND
                   (SalesLineArchiveL.Quantity = 1) THEN BEGIN
                  IF CheckActionValues(
                           ActionTypes::"Confirm Cancel",
                           PurchasingL."Sales Tracking Code",
                           SalesTrackingActionL,
                           p_ParcelStatusHistory)
                      THEN
                        ConfirmCancel(SalesTrackingActionL,p_ParcelStatusHistory);
                END;

                IF (SalesLineArchiveL."Status Return Order" = SalesLineArchiveL."Status Return Order"::requested) AND
                   (SalesLineArchiveL.Quantity=1) AND (SalesLineArchiveL."Return Type" = SalesLineL."Return Type"::Cancelation) AND
                   CheckForIPLCancelEntry(SalesLineArchiveL."Document No.",
                    SalesLineArchiveL."Line No.",SalesLineArchiveL."Document Type") THEN BEGIN
                  IF CheckActionValues(
                           ActionTypes::"Cancel Aborted",
                           PurchasingL."Sales Tracking Code",
                           SalesTrackingActionL,
                           p_ParcelStatusHistory) THEN
                        AbortCancel(SalesTrackingActionL,p_ParcelStatusHistory);
                END;

                //T0022 12.11.14 DMA ++++++++++++++++++++++++++++++++++++


                IF p_ParcelStatusHistory."Timestamp Insert" <> 0DT THEN
                  //H1258,T0011 19.06.14 MSL ++++++++++++++++++++++++++++
                  BEGIN
                    IF CheckActionValues(
                         ActionTypes::ADD,
                         PurchasingL."Sales Tracking Code",
                         SalesTrackingActionL,
                         p_ParcelStatusHistory)
                    THEN //ADD
                      UpdateDates(
                        SalesTrackingActionL,
                        SalesLineArchiveL."Actual Delivery Date",
                        TRUE,
                        SalesLineArchiveL."Doc. No. Occurrence",
                        SalesLineArchiveL."Version No.",
                        ActionTypes::ADD,
                        p_ParcelStatusHistory);

                    IF CheckActionValues(
                         ActionTypes::"First Scan",
                         PurchasingL."Sales Tracking Code",
                         SalesTrackingActionL,
                         p_ParcelStatusHistory) THEN  //fs
                      UpdateDates(
                        SalesTrackingActionL,
                        SalesLineArchiveL."First Scan",
                        TRUE,
                        SalesLineArchiveL."Doc. No. Occurrence",
                        SalesLineArchiveL."Version No.",
                        ActionTypes::"First Scan",
                        p_ParcelStatusHistory);
                  END;
                  //H1258,T0011 19.06.14 MSL ----------------------------
              END;
          END;
        END;
      // E/P1228

      //T0011  tec-cs  17.06.14  ++++++++++++++++++++++++++++
      IF (p_ParcelStatusHistory."Document Type" = p_ParcelStatusHistory."Document Type"::"Return Order") AND
         (p_ParcelStatusHistory."Document Line No." <> 0) THEN
      BEGIN
        IF SalesLineL.GET(
          p_ParcelStatusHistory."Document Type",
          p_ParcelStatusHistory."Document No.",
          p_ParcelStatusHistory."Document Line No.") THEN
        BEGIN
          //T0049 02.09.14 tec-sf +++++++++++++++++++++++++++++
          SalesHeaderL.GET(SalesLineL."Document Type", SalesLineL."Document No.");
          IF SalesHeaderL."Return Type" = SalesHeaderL."Return Type"::Return THEN BEGIN
          //T0049 02.09.14 tec-sf -----------------------------
            IF PurchasingL.GET(SalesLineL."Purchasing Code") THEN BEGIN
              IF PurchasingL."Sales Tracking Code" <> '' THEN BEGIN

                IF CheckActionValues(
                  ActionTypes::"Update Return Order Status",
                  PurchasingL."Sales Tracking Code",
                  SalesTrackingActionL,
                  p_ParcelStatusHistory) THEN
                BEGIN
                  UpdateStatusReturnOrder(
                    SalesTrackingActionL,
                    p_ParcelStatusHistory);
                END;

              END;
            END;
          END;
        END ELSE BEGIN
          // use a archived sales line
          {
          SalesLineArchiveL.SETRANGE("Document Type", p_ParcelStatusHistory."Sales Doc. Type");
          SalesLineArchiveL.SETRANGE("Document No.", p_ParcelStatusHistory."Sales Doc. No.");
          SalesLineArchiveL.SETRANGE("Line No.", p_ParcelStatusHistory."Sales Doc. Line No.");
          IF SalesLineArchiveL.FINDLAST THEN BEGIN
            IF PurchasingL.GET(SalesLineArchiveL."Purchasing Code") THEN BEGIN
              IF PurchasingL."Sales Tracking Code" <> '' THEN BEGIN

                IF CheckActionValues(
                  ActionTypes::"Update Return Order Status",
                  PurchasingL."Sales Tracking Code",
                  SalesTrackingActionL,
                  p_ParcelStatusHistory) THEN
                BEGIN
                  // maybe do something in the future
                END;

              END;
            END;
          END;
          }
        END;
      END;
      //T0011  tec-cs  17.06.14  ----------------------------
    END;

    PROCEDURE CheckActionValues@1000000026(ActionTypeV@1000000010 : Option;TrackingCodeV@1000000011 : Code[10];VAR SalesTrackingActionR@1000000009 : Record 50201;p_ParcelStatusHistory@1000000005 : Record 80013) : Boolean;
    VAR
      SalesTrackingActionValueL@1000000000 : Record 50202;
      RecRefL@1000000002 : RecordRef;
      FieldRefL@1000000001 : FieldRef;
      LastGroupingCodeL@1000000004 : Code[10];
      TriggeredL@1000000003 : Boolean;
    BEGIN
      // S/P1228
      SalesTrackingActionR.RESET;
      SalesTrackingActionR.SETCURRENTKEY(Type, "Tracking Code", Priority);

      //H2064,T0022,H1259,H1234,H1258,T0011 25.02.15 MSL +++++++++++++++++++++++++++++++++++
      CASE ActionTypeV OF
        ActionTypes::Ship :
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::Ship,
            SalesTrackingActionR.Type::"Ship+Invoice");

        ActionTypes::ADD :
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::ADD);

        ActionTypes::"First Scan":
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::"First Scan");

        ActionTypes::EDD:
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::EDD);

        ActionTypes::"Update Return Order Status" :
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::"Update Return Order Status");

        ActionTypes::Delivered:
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::Delivered);

        ActionTypes::"Confirm Cancel":
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::"Cancel successful");

        ActionTypes::"Cancel Aborted":
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::"Cancel Aborted");

        //T0018 16.02.14 MIK ++++++++++++++++++++++++++++++++++
        ActionTypes::Reservation:
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::Reservation);
        //T0018 16.02.14 MIK ----------------------------------
        //H1878 08.12.14 MIK +++++++++++++++++++++++++++++++++++
        ActionTypes::"Tracking Code Received":
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::"Tracking Code Received");
        //H1878 08.12.14 MIK -----------------------------------
        ActionTypes::UPS:
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::UPS)
        ELSE
          SalesTrackingActionR.SETRANGE(Type,SalesTrackingActionR.Type::" ");
      END;
      //H2064,T0022,H1259,H1234,H1258,T0011 25.02.15 MSL -----------------------------------

      IF TrackingCodeV <> '' THEN
        SalesTrackingActionR.SETRANGE("Tracking Code",TrackingCodeV);

      SalesTrackingActionValueL.SETRANGE(Table,SalesTrackingActionValueL.Table::"Parcel Status History");
      IF SalesTrackingActionR.FINDSET THEN BEGIN
        REPEAT
          SalesTrackingActionValueL.SETRANGE("Action Code",SalesTrackingActionR.Code);
          IF SalesTrackingActionValueL.FINDSET THEN BEGIN

            RecRefL.GETTABLE(p_ParcelStatusHistory);
            LastGroupingCodeL := SalesTrackingActionValueL."Grouping Code";
            TriggeredL := TRUE;
            REPEAT
              IF (SalesTrackingActionValueL."Grouping Code" <> LastGroupingCodeL) THEN BEGIN
                IF TriggeredL THEN
                  EXIT(TRUE);
                TriggeredL := TRUE;
              END;

              IF TriggeredL THEN BEGIN
                FieldRefL := RecRefL.FIELD(SalesTrackingActionValueL."Field ID");
                //H1258 14.07.14 MSL ++++++++++++++++++++++++++++++++++++++++++++++
                //IF FORMAT(SalesTrackingActionValueL.Value) <> FORMAT(FieldRefL) THEN
                IF ((FORMAT(SalesTrackingActionValueL.Value) <> FORMAT(FieldRefL)) AND NOT SalesTrackingActionValueL.Exclude) OR
                   ((FORMAT(SalesTrackingActionValueL.Value) = FORMAT(FieldRefL)) AND SalesTrackingActionValueL.Exclude)
                THEN
                //H1258 14.07.14 MSL ----------------------------------------------
                  TriggeredL := FALSE;
              END;

              LastGroupingCodeL := SalesTrackingActionValueL."Grouping Code";
            UNTIL SalesTrackingActionValueL.NEXT = 0;
            IF TriggeredL THEN
              EXIT(TRUE);
          END;
        UNTIL SalesTrackingActionR.NEXT = 0;
      END;
      EXIT(FALSE);
      // E/P1228
    END;

    PROCEDURE PostShipment@1000000025(SalesTrackingActionV@1000000000 : Record 50201;SalesLineV@1000000001 : Record 37;ParcelStatusHistoryV@1000000002 : Record 80013);
    VAR
      SalesBatchPostHeaderL@1000000005 : Record 50225;
      PostingDateL@1000000006 : Date;
      TypeL@1000000004 : 'Ship,Invoice';
      TriggeredByL@1000000003 : ' ,Scanning Job,Parcel Status,ADD Filled';
    BEGIN
      // S/P1228
      //H1355,H0995 11.07.14 MBY +++++++++++++++++++++++++++++++++++++++++++++++++
      IF DT2DATE(ParcelStatusHistoryV."Timestamp Interface") <> 0D THEN
        PostingDateL := DT2DATE(ParcelStatusHistoryV."Timestamp Interface")
      ELSE
        IF DT2DATE(ParcelStatusHistoryV."Timestamp Insert") <> 0D THEN
          PostingDateL := DT2DATE(ParcelStatusHistoryV."Timestamp Insert")
        ELSE
          PostingDateL := WORKDATE;

      SalesBatchPostHeaderL.InsertNewRecord(SalesLineV,
                                            PostingDateL,
                                            TypeL::Ship,
                                            TriggeredByL::"Parcel Status",
                                            SalesTrackingActionV."Tracking Code",
                                            //T0082 25.11.14 tec-sh    +++++++++++++++++++++++++++++++++++
                                            //SalesTrackingActionV.Code);
                                            SalesTrackingActionV.Code,
                                            FALSE);
                                            //T0082 25.11.14 tec-sh    -----------------------------------
      //H1355,H0995 11.07.14 MBY -------------------------------------------------
      // E/P1228
    END;

    PROCEDURE UpdateDates@1000000024(SalesTrackingActionV@1000000000 : Record 50201;SalesLineDateV@1000000001 : DateTime;ArchivedV@1000000003 : Boolean;DocNoOccurenceV@1000000007 : Integer;VersionNoV@1000000008 : Integer;ActionTypeV@1000000010 : Option;p_ParcelStatusHistory@1000000009 : Record 80013);
    VAR
      FillSalesDatesL@1000000002 : Record 50203;
      FillSalesDatesArchiveL@1000000005 : Record 50204;
      SalesTrackingL@1000000013 : Record 50200;
      CalcDatesL@1000000004 : Codeunit 50115;
      RecExistsL@1000000006 : Boolean;
      DateTypeL@1000000011 : ',ADD,First Scan,EDD';
      TimeStampL@1000000012 : DateTime;
    BEGIN
       //H1258,P1228 19.06.14  MSL  ++++++++++++++++++++++++++++
      RecExistsL := FALSE;
      //H1355 11.07.14 MBY +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      IF DT2DATE(p_ParcelStatusHistory."Timestamp Interface") <> 0D THEN
        TimeStampL := p_ParcelStatusHistory."Timestamp Interface"
      ELSE
        IF DT2DATE(p_ParcelStatusHistory."Timestamp Insert") <> 0D THEN
          TimeStampL := p_ParcelStatusHistory."Timestamp Insert"
        ELSE
          TimeStampL := CREATEDATETIME(WORKDATE,TIME);
      //H1355 11.07.14 MBY -------------------------------------------------------------
      //H1258 19.06.14 MSL ++++++++++++++++
      CASE ActionTypeV OF

        ActionTypes::ADD:
          DateTypeL := FillSalesDatesL.Type::ADD;

        ActionTypes::"First Scan":
          DateTypeL := FillSalesDatesL.Type::"First Scan";

        //H1259 07.07.14  MSL +++++++++++++++++++++++++++++
        ActionTypes::EDD:
          DateTypeL := FillSalesDatesL.Type::EDD;
        //H1259 07.07.14  MSL -----------------------------
      END;
      //H1258 19.06.14 MSL -----------------
      IF NOT ArchivedV THEN BEGIN
        IF FillSalesDatesL.GET(
             p_ParcelStatusHistory."Document Type",
             p_ParcelStatusHistory."Document No.",
             p_ParcelStatusHistory."Document Line No.",
             SalesTrackingActionV.Code,
             DateTypeL)
        THEN
          IF (FillSalesDatesL.Priority > SalesTrackingActionV.Priority) OR
             (FillSalesDatesL.Status = FillSalesDatesL.Status::Failure) OR
             ((SalesLineDateV = 0DT) AND (FillSalesDatesL.Status = FillSalesDatesL.Status::Success))
             //H1258 19.06.14  MSL  ++++++++++++++++++++++++++++
             OR ((DateTypeL = DateTypeL::"First Scan") AND (FillSalesDatesL.Priority = SalesTrackingActionV.Priority) AND
                 (TimeStampL < FillSalesDatesL."Date/Time"))
             //H1258 19.06.14  MSL  ----------------------------

          THEN
            RecExistsL := TRUE
          ELSE
            EXIT;

        IF NOT RecExistsL THEN BEGIN
          FillSalesDatesL.INIT;
          FillSalesDatesL."Document Type" := p_ParcelStatusHistory."Document Type";
          FillSalesDatesL."Document No." := p_ParcelStatusHistory."Document No.";
          FillSalesDatesL."Line No." := p_ParcelStatusHistory."Document Line No.";
          FillSalesDatesL."Sales Tracking Action Code" := SalesTrackingActionV.Code;
          //H1258 19.06.14  MSL  ++++++++++++++++++++++++++++
          CASE DateTypeL OF
            DateTypeL::ADD:
          //H1258 19.06.14  MSL  ----------------------------
              FillSalesDatesL.Type := FillSalesDatesL.Type::ADD;
          //H1258 19.06.14  MSL  ++++++++++++++++++++++++++++
            DateTypeL::"First Scan":
              FillSalesDatesL.Type := FillSalesDatesL.Type::"First Scan";
            //H1259 07.07.14  MSL +++++++++++++++++++++++++++++
            DateTypeL::EDD:
              BEGIN
                FillSalesDatesL.Type := FillSalesDatesL.Type::EDD;
                IF SalesTrackingL.GET(SalesTrackingActionV."Tracking Code") THEN
                  FillSalesDatesL."Tracking Consolidation Group" := SalesTrackingL."Tracking Consolidation Group";
              END;
            //H1259 07.07.14  MSL -----------------------------

          END;
          //H1258 19.06.14  MSL  ----------------------------
        END ELSE BEGIN
          FillSalesDatesL."Actual Processing Date/Time" := 0DT;
          FillSalesDatesL."Error Text" := '';
        END;

        FillSalesDatesL.Priority := SalesTrackingActionV.Priority;
        FillSalesDatesL.Status := FillSalesDatesL.Status::Open;
        FillSalesDatesL."Creation Date/Time" := CURRENTDATETIME;
        //H1259 07.08.14 MSL++++++++++++++++
        FillSalesDatesL."User ID" := USERID;
        //H1259 07.08.14 MSL ---------------
        //H1355 11.07.14 MBY +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        IF SalesTrackingActionV."Shift Days" = 0 THEN
          FillSalesDatesL."Date/Time" := TimeStampL
        ELSE
          FillSalesDatesL."Date/Time" := CREATEDATETIME(
            CalcDatesL.GetNetDeliveryDate(
              DT2DATE(TimeStampL),
                    SalesTrackingActionV."Shift Days",
              'BC'),
            DT2TIME(TimeStampL));

        IF SalesTrackingActionV."Delayed Insert Days" = 0 THEN
          FillSalesDatesL."Planned Processing Date" := DT2DATE(TimeStampL)
        ELSE
          FillSalesDatesL."Planned Processing Date" :=
            CalcDatesL.GetNetDeliveryDate(
              DT2DATE(TimeStampL),
              SalesTrackingActionV."Delayed Insert Days",
              'BC');
        //H1355 11.07.14 MBY -------------------------------------------------------------

        IF NOT RecExistsL THEN
          FillSalesDatesL.INSERT
        ELSE
          FillSalesDatesL.MODIFY;

      END ELSE BEGIN
        //H1258 19.06.14  MSL  ++++++++++++++++++++++++++++
        IF FillSalesDatesArchiveL.GET(
             p_ParcelStatusHistory."Document Type",
             p_ParcelStatusHistory."Document No.",
             p_ParcelStatusHistory."Document Line No.",
             DocNoOccurenceV,
             VersionNoV,
             SalesTrackingActionV.Code,
             DateTypeL)
        //H1258 19.06.14  MSL  ----------------------------
        THEN
          IF (FillSalesDatesArchiveL.Priority > SalesTrackingActionV.Priority) OR
             (FillSalesDatesArchiveL.Status = FillSalesDatesArchiveL.Status::Failure) OR
             ((SalesLineDateV = 0DT) AND (FillSalesDatesArchiveL.Status = FillSalesDatesArchiveL.Status::Success))
             //H1258 19.06.14  MSL  ++++++++++++++++++++++++++++
             OR ((DateTypeL = DateTypeL::"First Scan") AND (FillSalesDatesArchiveL.Priority = SalesTrackingActionV.Priority) AND
                 (TimeStampL < FillSalesDatesArchiveL."Date/Time"))
             //H1258 19.06.14  MSL  ----------------------------

          THEN
            RecExistsL := TRUE
          ELSE
            EXIT;

        IF NOT RecExistsL THEN BEGIN
          FillSalesDatesArchiveL.INIT;
          FillSalesDatesArchiveL."Document Type" := p_ParcelStatusHistory."Document Type";
          FillSalesDatesArchiveL."Document No." := p_ParcelStatusHistory."Document No.";
          FillSalesDatesArchiveL."Line No." := p_ParcelStatusHistory."Document Line No.";
          FillSalesDatesArchiveL."Doc. No. Occurrence" := DocNoOccurenceV;
          FillSalesDatesArchiveL."Version No." := VersionNoV;
          FillSalesDatesArchiveL."Sales Tracking Action Code" := SalesTrackingActionV.Code;
          //H1258 19.06.14  MSL  ++++++++++++++++++++++++++++
          CASE DateTypeL OF
            DateTypeL::ADD:
          //H1258 19.06.14  MSL  ----------------------------
              FillSalesDatesArchiveL.Type := FillSalesDatesArchiveL.Type::ADD;
          //H1258 19.06.14  MSL  ++++++++++++++++++++++++++++
            DateTypeL::"First Scan":
              FillSalesDatesArchiveL.Type := FillSalesDatesArchiveL.Type::"First Scan";
          END;
          //H1258 19.06.14  MSL  ----------------------------


        END ELSE BEGIN
          FillSalesDatesArchiveL."Actual Processing Date/Time" := 0DT;
          FillSalesDatesArchiveL."Error Text" := '';
        END;

        FillSalesDatesArchiveL.Priority := SalesTrackingActionV.Priority;
        FillSalesDatesArchiveL.Status := FillSalesDatesArchiveL.Status::Open;
        FillSalesDatesArchiveL."Creation Date/Time" := CURRENTDATETIME;

        //H1258 19.06.14  MSL  ++++++++++++++++++++++++++++
        CASE DateTypeL OF
          DateTypeL::ADD,DateTypeL::"First Scan":
            BEGIN
        //H1258 19.06.14  MSL -----------------------------
        //H1355 11.07.14 MBY +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

              IF SalesTrackingActionV."Shift Days" = 0 THEN
                FillSalesDatesArchiveL."Date/Time" := TimeStampL
              ELSE
                FillSalesDatesArchiveL."Date/Time" := CREATEDATETIME(
                  CalcDatesL.GetNetDeliveryDate(
                    DT2DATE(TimeStampL),
                    SalesTrackingActionV."Shift Days",
                    'BC'),
                  DT2TIME(TimeStampL));

              IF SalesTrackingActionV."Delayed Insert Days" = 0 THEN
                FillSalesDatesArchiveL."Planned Processing Date" := DT2DATE(TimeStampL)
              ELSE
                FillSalesDatesArchiveL."Planned Processing Date" :=
                  CalcDatesL.GetNetDeliveryDate(
                    DT2DATE(TimeStampL),
                    SalesTrackingActionV."Delayed Insert Days",
                    'BC');
        //H1355 11.07.14 MBY -------------------------------------------------------------
        //H1258 19.06.14  MSL  ++++++++++++++++++++++++++++
            END;
        END;
        //H1258 19.06.14  MSL  ----------------------------

        IF NOT RecExistsL THEN
          FillSalesDatesArchiveL.INSERT
        ELSE
          FillSalesDatesArchiveL.MODIFY;
      END;
       //H1258,P1228 19.06.14  MSL
    END;

    PROCEDURE CreateBatchTrackingActionEntry@1000000042(SalesTrackingActionSetupV@1000000000 : Record 50201;TrackingActionTypeV@1000000010 : Option;TrackingCodeV@1000000003 : Code[20];p_ParcelStatusHistory@1000000009 : Record 80013);
    VAR
      BatchTrackingActionL@1000000002 : Record 50245;
      SalesTrackingL@1000000013 : Record 50200;
    BEGIN
      //H2064 25.02.15 MSL ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      IF BatchTrackingActionL.GET(
           p_ParcelStatusHistory."Document Type",
           p_ParcelStatusHistory."Document No.",
           p_ParcelStatusHistory."Document Line No.",
           SalesTrackingActionSetupV.Code,
           TrackingActionTypeV,
           TrackingCodeV)
      THEN
          EXIT;

      BatchTrackingActionL.INIT;
      BatchTrackingActionL."Document Type" := p_ParcelStatusHistory."Document Type";
      BatchTrackingActionL."Document No." := p_ParcelStatusHistory."Document No.";
      BatchTrackingActionL."Line No." := p_ParcelStatusHistory."Document Line No.";
      BatchTrackingActionL."Sales Tracking Action Code" := SalesTrackingActionSetupV.Code;
      BatchTrackingActionL."Parcel Status History Entry No" := p_ParcelStatusHistory."Entry No.";
      BatchTrackingActionL."Tracking Code" := TrackingCodeV;
      BatchTrackingActionL."Tracking Description" := COPYSTR(p_ParcelStatusHistory."Comment Part 1",1,50);
      BatchTrackingActionL."Shipping Agent" := TrackingActionTypeV;
      BatchTrackingActionL."Creation Date/Time" := CURRENTDATETIME;
      BatchTrackingActionL."User ID" := USERID;
      BatchTrackingActionL.INSERT;
      //H2064 25.02.15 MSL --------------------------------------------------------
    END;

    PROCEDURE TryToTrackViaBrowser@1000000029(p_ParcelStatusHistory@1000000000 : Record 80013);
    VAR
      NoTrackingNoError@1000000001 : TextConst 'ENU=No Tracking No for %1 %2 %3.';
      SelectionText@1000000002 : TextConst 'ENU=Tracking Code %1,Piece Code %2';
      Selection@1000000003 : Integer;
      SelectionString@1000000004 : Text[1024];
      NoSelectionError@1000000005 : TextConst 'ENU=No Selection';
      TrackingNoToTrack@1000000006 : Text[1024];
      NoShipAgentError@1000000007 : TextConst 'ENU=No Shipping Agent for %1 %2 %3.';
      FPCGeneralSetup@1000000008 : Record 50055;
      DPDSetup@1000000009 : Record 50221;
      CantTrackShipAgentError@1000000010 : TextConst 'ENU=You can not track Shipping Agent %1 via Internet Browser.';
    BEGIN
      //S/P1227
      IF (p_ParcelStatusHistory."Tracking Code" = '') AND (p_ParcelStatusHistory."Piece Code" = '') THEN
        ERROR(
          NoTrackingNoError,
          p_ParcelStatusHistory.TABLECAPTION,
          p_ParcelStatusHistory.FIELDCAPTION("Entry No."),
          p_ParcelStatusHistory."Entry No.");

      IF p_ParcelStatusHistory."Shipping Agent Code" = '' THEN
        ERROR(
          NoShipAgentError,
          p_ParcelStatusHistory.TABLECAPTION,
          p_ParcelStatusHistory.FIELDCAPTION("Entry No."),
          p_ParcelStatusHistory."Entry No.");

      IF (p_ParcelStatusHistory."Tracking Code" <> '') AND (p_ParcelStatusHistory."Piece Code" <> '') THEN BEGIN
        SelectionString := STRSUBSTNO(SelectionText,p_ParcelStatusHistory."Tracking Code",p_ParcelStatusHistory."Piece Code");
        Selection := STRMENU(SelectionString);
        CASE Selection OF
          1: TrackingNoToTrack := p_ParcelStatusHistory."Tracking Code";
          2: TrackingNoToTrack := p_ParcelStatusHistory."Piece Code";
          ELSE
            ERROR(NoSelectionError);
        END;
      END ELSE
        IF p_ParcelStatusHistory."Tracking Code" <> '' THEN
          TrackingNoToTrack := p_ParcelStatusHistory."Tracking Code"
        ELSE
          TrackingNoToTrack := p_ParcelStatusHistory."Piece Code";

      FPCGeneralSetup.GET;
      FPCGeneralSetup.TESTFIELD("Ship. Agent Code DHL");
      FPCGeneralSetup.TESTFIELD("Ship. Agent Code UPS");
      FPCGeneralSetup.TESTFIELD("Shipping Releation Bulky Goods");
      DPDSetup.GET;
      DPDSetup.TESTFIELD("Shipping Agent DPD");

      CASE p_ParcelStatusHistory."Shipping Agent Code" OF
        FPCGeneralSetup."Ship. Agent Code DHL",FPCGeneralSetup."Shipping Releation Bulky Goods"  :
          BEGIN
            HYPERLINK('http://nolp.dhl.de/nextt-online-public/set_identcodes.do?lang=de&idc=' +
            TrackingNoToTrack +
            '&rfn=&extendedSearch=true');
          END;
        FPCGeneralSetup."Ship. Agent Code UPS" :
          BEGIN
            HYPERLINK('http://wwwapps.ups.com/WebTracking/processInputRequest?sort_by=status&' +
             'tracknums_displ%20ayed=1&TypeOfInquiryNumber=T&loc=de_DE&InquiryNumber1=' +
             TrackingNoToTrack + '&track.x=0&track.y=0');
          END;
        DPDSetup."Shipping Agent DPD" :
          BEGIN
            HYPERLINK('https://tracking.dpd.de/parcelstatus?query=' + TrackingNoToTrack + '&locale=de_DE');
          END;
        ELSE
          ERROR(CantTrackShipAgentError,p_ParcelStatusHistory."Shipping Agent Code");
      END;
      //E/P1227
    END;

    PROCEDURE TryToTrackViaBrowserArchive@1000000030(p_ParcelStatusHistoryArchive@1000000000 : Record 50187);
    VAR
      NoTrackingNoError@1000000001 : TextConst 'ENU=No Tracking No for %1 %2 %3.';
      SelectionText@1000000002 : TextConst 'ENU=Tracking Code %1,Piece Code %2';
      Selection@1000000003 : Integer;
      SelectionString@1000000004 : Text[1024];
      NoSelectionError@1000000005 : TextConst 'ENU=No Selection';
      TrackingNoToTrack@1000000006 : Text[1024];
      NoShipAgentError@1000000007 : TextConst 'ENU=No Shipping Agent for %1 %2 %3.';
      FPCGeneralSetup@1000000008 : Record 50055;
      DPDSetup@1000000009 : Record 50221;
      CantTrackShipAgentError@1000000010 : TextConst 'ENU=You can not track Shipping Agent %1 via Internet Browser.';
    BEGIN
      //S/P1227
      IF (p_ParcelStatusHistoryArchive."Tracking Code" = '') AND (p_ParcelStatusHistoryArchive."Piece Code" = '') THEN
        ERROR(
          NoTrackingNoError,
          p_ParcelStatusHistoryArchive.TABLECAPTION,
          p_ParcelStatusHistoryArchive.FIELDCAPTION("Entry No."),
          p_ParcelStatusHistoryArchive."Entry No.");

      IF p_ParcelStatusHistoryArchive."Shipping Agent Code" = '' THEN
        ERROR(
          NoShipAgentError,
          p_ParcelStatusHistoryArchive.TABLECAPTION,
          p_ParcelStatusHistoryArchive.FIELDCAPTION("Entry No."),
          p_ParcelStatusHistoryArchive."Entry No.");

      IF (p_ParcelStatusHistoryArchive."Tracking Code" <> '') AND (p_ParcelStatusHistoryArchive."Piece Code" <> '') THEN BEGIN
        SelectionString := STRSUBSTNO(
          SelectionText,
          p_ParcelStatusHistoryArchive."Tracking Code",
          p_ParcelStatusHistoryArchive."Piece Code");
        Selection := STRMENU(SelectionString);
        CASE Selection OF
          1: TrackingNoToTrack := p_ParcelStatusHistoryArchive."Tracking Code";
          2: TrackingNoToTrack := p_ParcelStatusHistoryArchive."Piece Code";
          ELSE
            ERROR(NoSelectionError);
        END;
      END ELSE
        IF p_ParcelStatusHistoryArchive."Tracking Code" <> '' THEN
          TrackingNoToTrack := p_ParcelStatusHistoryArchive."Tracking Code"
        ELSE
          TrackingNoToTrack := p_ParcelStatusHistoryArchive."Piece Code";

      FPCGeneralSetup.GET;
      FPCGeneralSetup.TESTFIELD("Ship. Agent Code DHL");
      FPCGeneralSetup.TESTFIELD("Ship. Agent Code UPS");
      FPCGeneralSetup.TESTFIELD("Shipping Releation Bulky Goods");
      DPDSetup.GET;
      DPDSetup.TESTFIELD("Shipping Agent DPD");

      CASE p_ParcelStatusHistoryArchive."Shipping Agent Code" OF
        FPCGeneralSetup."Ship. Agent Code DHL",FPCGeneralSetup."Shipping Releation Bulky Goods"  :
          BEGIN
            HYPERLINK('http://nolp.dhl.de/nextt-online-public/set_identcodes.do?lang=de&idc=' +
            TrackingNoToTrack +
            '&rfn=&extendedSearch=true');
          END;
        FPCGeneralSetup."Ship. Agent Code UPS" :
          BEGIN
            HYPERLINK('http://wwwapps.ups.com/WebTracking/processInputRequest?sort_by=status&' +
             'tracknums_displ%20ayed=1&TypeOfInquiryNumber=T&loc=de_DE&InquiryNumber1=' +
             TrackingNoToTrack + '&track.x=0&track.y=0');
          END;
        DPDSetup."Shipping Agent DPD" :
          BEGIN
            HYPERLINK('https://tracking.dpd.de/parcelstatus?query=' + TrackingNoToTrack + '&locale=de_DE');
          END;
        ELSE
          ERROR(CantTrackShipAgentError,p_ParcelStatusHistoryArchive."Shipping Agent Code");
      END;
      //E/P1227
    END;

    PROCEDURE UpdateStatusReturnOrder@1000000031(SalesTrackingActionV@1000000000 : Record 50201;ParcelStatusHistoryV@1000000006 : Record 80013);
    VAR
      BatchSalesActionL@1000000009 : Record 50203;
    BEGIN
      //T0022,T0011 12.11.14 DMA ++++++++++++++++++++++++++++
      // update the "Status Return Order"-Field async via table 50203/50204
      BatchSalesActionL.INIT;
      BatchSalesActionL."Document Type" := ParcelStatusHistoryV."Document Type";
      BatchSalesActionL."Document No." := ParcelStatusHistoryV."Document No.";
      BatchSalesActionL."Line No." := ParcelStatusHistoryV."Document Line No.";
      BatchSalesActionL."Sales Tracking Action Code" := SalesTrackingActionV.Code;
      BatchSalesActionL.Type := BatchSalesActionL.Type::"Finish Return Status";
      BatchSalesActionL.Status := BatchSalesActionL.Status::Open;
      BatchSalesActionL."Planned Processing Date" := 0D;
      BatchSalesActionL."Creation Date/Time" := CURRENTDATETIME;
      //H1259 07.08.14 MSL +++++++++++++++
      BatchSalesActionL."User ID" := USERID;
      //H1259 07.08.14 MSL ---------------
      //T0042  21.08.14  tec-cs +++++++++++++++++++++++++++++++++
      IF NOT BatchSalesActionL.INSERT(TRUE) THEN BEGIN
        BatchSalesActionL.MODIFY;
      END;
      //T0042  21.08.14  tec-cs ---------------------------------
      //T0022,T0011 12.11.14 DMA ----------------------------
    END;

    PROCEDURE "*** P1282 Functions ***"@1000000032();
    BEGIN
    END;

    PROCEDURE MoveParcInfToArchWithoutDelete@1000000033(p_Command@1000000002 : Integer;p_DocNo@1000000003 : Code[20];p_LineNo@1000000004 : Integer;p_DocType@1000000005 : Integer;p_DateFilterString@1000000006 : Text[100];p_EntryNo@1000000007 : Integer);
    VAR
      ParcelStatusHistory@1000000000 : Record 80013;
      ParcelStatusHistoryArchive@1000000001 : Record 50187;
      GoOn@1000000008 : Boolean;
    BEGIN
      // S/P1282
      //S/P1129
      //CLEAR(ParcelStatusHistory);
      ParcelStatusHistory.RESET;
      //E/P1129
      CLEAR(ParcelStatusHistoryArchive);

      CASE p_Command OF
        0:  // Archive All Entries
          BEGIN
          END;
        1:  // Archive by Sales Document
          BEGIN
            //S/P1129
            //IF (p_DocNo <> '') AND (p_DocType <> 0) THEN BEGIN
            IF (p_DocNo <> '') THEN BEGIN
            //E/P1129
              ParcelStatusHistory.SETCURRENTKEY("Document No.","Document Line No.","Document Type");
              ParcelStatusHistory.SETRANGE("Document No.",p_DocNo);
              IF p_LineNo <> 0 THEN
                ParcelStatusHistory.SETRANGE("Document Line No.",p_LineNo);
              ParcelStatusHistory.SETRANGE("Document Type",p_DocType);
              //S/P1129
              //GoOn := TRUE;
              //E/P1129
            END;
          END;
        2:  // Archive by Purchase Document
          BEGIN
            //S/P1129
            //IF (p_DocNo <> '') AND (p_DocType <> 0) THEN BEGIN
            IF (p_DocNo <> '') THEN BEGIN
            //E/P1129
              ParcelStatusHistory.SETCURRENTKEY("Purchase Doc. No.","Purchase Doc. Line No.","Purchase Doc. Type");
              ParcelStatusHistory.SETRANGE("Purchase Doc. No.",p_DocNo);
              IF p_LineNo <> 0 THEN
                ParcelStatusHistory.SETRANGE("Purchase Doc. Line No.",p_LineNo);
              ParcelStatusHistory.SETRANGE("Purchase Doc. Type",p_DocType);
              //S/P1129
              //GoOn := TRUE;
              //E/P1129
            END;
          END;
        3:  // Archive by Date
          BEGIN
            IF p_DateFilterString <> '' THEN BEGIN
              ParcelStatusHistory.SETCURRENTKEY("Timestamp Insert");
              ParcelStatusHistory.SETFILTER("Timestamp Insert",p_DateFilterString);
              //S/P1129
              //GoOn := TRUE;
              //E/P1129
            END;
          END;
        4:  // Archive by Entry No.
          BEGIN
            IF p_EntryNo <> 0 THEN BEGIN
              ParcelStatusHistory.SETRANGE("Entry No.",p_EntryNo);
              //S/P1129
              //GoOn := TRUE;
              //E/P1129
            END;
          END;
      END;
      // E/P1282
    END;

    PROCEDURE UseArchive@1000000034(pUseArchive@1000000000 : Boolean);
    BEGIN
      // S/P1282
      IsArchive := pUseArchive;
      // E/P1282
    END;

    PROCEDURE ConfirmCancel@1000000035(SalesTrackingActionV@1000000002 : Record 50201;ParcelStatusHistoryV@1000000001 : Record 80013);
    VAR
      BatchSalesActionL@1000000000 : Record 50203;
    BEGIN
      //H2028,T0022 04.02.15 DMA ++++++++++++++++++++++++++++++++++++++
      IF NOT BatchSalesActionL.GET(ParcelStatusHistoryV."Document Type",ParcelStatusHistoryV."Document No.",
        ParcelStatusHistoryV."Document Line No.",SalesTrackingActionV.Code,BatchSalesActionL.Type::"Cancel successful") THEN  BEGIN
        BatchSalesActionL.INIT;
        BatchSalesActionL."Document Type" := ParcelStatusHistoryV."Document Type";
        BatchSalesActionL."Document No." := ParcelStatusHistoryV."Document No.";
        BatchSalesActionL."Line No." := ParcelStatusHistoryV."Document Line No.";
        BatchSalesActionL."Sales Tracking Action Code" := SalesTrackingActionV.Code;
        BatchSalesActionL.Type := BatchSalesActionL.Type::"Cancel successful";
        BatchSalesActionL.Status := BatchSalesActionL.Status::Open;
        BatchSalesActionL."Planned Processing Date" := 0D;
        BatchSalesActionL."Creation Date/Time" := CURRENTDATETIME;
        BatchSalesActionL."User ID" := USERID;
        BatchSalesActionL.INSERT(TRUE);
      END;
      //H2028,T0022 04.02.15 DMA --------------------------------------
    END;

    PROCEDURE AbortCancel@1000000036(SalesTrackingActionV@1000000002 : Record 50201;ParcelStatusHistoryV@1000000001 : Record 80013);
    VAR
      BatchSalesActionL@1000000000 : Record 50203;
    BEGIN
      //H2028,T0022 04.02.15 DMA ++++++++++++++++++++++++++++++++++++++
      IF NOT (BatchSalesActionL.GET(ParcelStatusHistoryV."Document Type",ParcelStatusHistoryV."Document No.",
        ParcelStatusHistoryV."Document Line No.",SalesTrackingActionV.Code,BatchSalesActionL.Type::"Cancel successful")) THEN  BEGIN
        BatchSalesActionL.INIT;
        BatchSalesActionL."Document Type" := ParcelStatusHistoryV."Document Type";
        BatchSalesActionL."Document No." := ParcelStatusHistoryV."Document No.";
        BatchSalesActionL."Line No." := ParcelStatusHistoryV."Document Line No.";
        BatchSalesActionL."Sales Tracking Action Code" := SalesTrackingActionV.Code;
        BatchSalesActionL.Type := BatchSalesActionL.Type::"Cancel Aborted";
        BatchSalesActionL.Status := BatchSalesActionL.Status::Open;
        BatchSalesActionL."Planned Processing Date" := 0D;
        BatchSalesActionL."Creation Date/Time" := CURRENTDATETIME;
        BatchSalesActionL."User ID" := USERID;
        BatchSalesActionL.INSERT(TRUE);
      END;
      //H2028,T0022 04.02.15 DMA --------------------------------------
    END;

    PROCEDURE CheckForIPLCancelEntry@1000000037(SalesDocumentNoV@1000000000 : Code[20];SalesLineNoV@1000000002 : Integer;DocumentTypeV@1000000003 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,External Logistic') HasCancelIPLLogO : Boolean;
    VAR
      InterfaceProcessLogL@1000000001 : Record 50087;
    BEGIN
      //T0022 12.11.14 DMA ++++++++++++++++++++++++++++++++++++++
      IF NOT FPCSetupRead THEN BEGIN
        FPCGeneralSetup.GET;
        FPCSetupRead := TRUE;
      END;

      FPCGeneralSetup.TESTFIELD(FPCGeneralSetup."Trigger Magento Cancel Manual");
      InterfaceProcessLogL.RESET;
      InterfaceProcessLogL.SETRANGE("Entry Type",InterfaceProcessLogL."Entry Type"::Sales);
      InterfaceProcessLogL.SETRANGE("Entry Subtype",DocumentTypeV);
      InterfaceProcessLogL.SETRANGE("Document No.",SalesDocumentNoV);
      InterfaceProcessLogL.SETRANGE("Document Line No.",SalesLineNoV);
      InterfaceProcessLogL.SETRANGE(InterfaceProcessLogL.Trigger,FPCGeneralSetup."Trigger Magento Cancel Manual");
      HasCancelIPLLogO := NOT InterfaceProcessLogL.ISEMPTY;
      //T0022 12.11.14 DMA --------------------------------------
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |     Cooperation GOB & Home24 NAV Team      |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      ______________________________________________

      P1117       25.09.13  gob-mlan  - Redesign of "DHL Parcel Status History"
                                      - Object created
      P1129       21.10.13  gob-mlan  - Phase 2
      P1133       28.10.13  gob-mlan  - Phase 3
      P1170       19.12.13  gob-mlan  - Fix after test response M. Matyushenko
      P1180       21.01.14  gob-mlan  - Fix after test response M. Matyushenko
      P1204       17.02.14  gob-mlan  - Fix after test response M. Matyushenko
      P1228       20.03.14  gob-mlan  - Adopt "Tracking Actions"-Logic (MBY) from T50021
      P1232       31.03.14  gob-mlan  - Rename "..RIC.." to "..Sub.."
      P1227       24.04.14  gob-rste  - Manuel Tracking via Internet Browser
      P1282       30.09.14  gob-ael   - Transfer Order added, Copy of MoveParcelInfosToArchive without Delete

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |     Cooperation Tectura & Home24 NAV Team  |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________

      T0011       17.06.14  tec-cs    FTTC Phase 2: Return tracking
                                      - introduced a new action type: "Status Return Order"
                                      - use a global option "ActionTypes" (see function CheckActionValue)
                                        for the option types (better readability)
      T0042       21.08.14  tec-cs    Check if record already exist
      T0049       02.09.14  tec-sf    Only process Return Order with "Return type" = "Return"
      T0082       25.11.14 tec-sh     added parameter in function T50225.InsertNewRecord
                                      "ManualPostingV"  (Boolean to mark manual postings)
      H3806       05.03.15  cc-are    Bugfix
      H3878       12.03.15  cc-are    Bugfix

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________

      H0995       07.04.14 ARI       Fill Batch Sales-Post Tables
      H1234       19.06.14 EHN       SO Workflow queue, checking for Delivered status
      H1258       19.06.14 MSL       ERP Performance: First Scan Redesign
      H1259       07.07.14 MSL       ERP Performance: EDDM Redesign
      H1355       11.07.14 MBY       Bugfix: Fill Sales Date table with Interface Timestamp from Parcel Status History
      H1298       11.07.14 DMA       Bugfix: DocData statuses wrong, because DPD Status Codes,CODECHANGE
      H1369       16.07.14 DMA       Bugfix: DocData statuses are not filled to Parcel Status History when Carrier TBP, CODECHANGE
      H1193       08.08.14 DMA       Belgium - Order identification creation and commissioning _MASTER, CODECHAGNE
      H1540       01.10.14 MSL       EDDM Redesign Activation
      H1828       17.11.14 DMA       BUG: Italy - DD Export/Import files, Status Code is not filled, CODECHANGE
      T0022       12.11.14 DMA       FTTC 3 - Phase 5 - Stornoprozess - Storno Tracking,CEDECLEANUP,NEW FUNCTION
      H1700       27.01.15 MKR       Hermes 2MH: Generation and transmission of IFTMIN: Special Order Handling
      H2028       21.01.15 DMA       BUG: Cancel Tracking - STA Import with more than 1 Status in STA File
      T0018       16.02.15 MIK       FTTC 3 - Phase 5 - Stornoprozess - Storno before Payment. New type: Reservation
      H1878       08.12.14 MIK       SII Redesign for the ORDERITEMDELIVERYCONFIRMATION
      H2064       25.02.15 MSL       UPS Redesign: Scanning to trigger based
    }
    END.
  }
}

