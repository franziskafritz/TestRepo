OBJECT Codeunit 50019 Admin Mail Queue Functions
{
  OBJECT-PROPERTIES
  {
    Date=29.05.15;
    Time=10:36:34;
    Modified=Yes;
    Version List=HME4305;
  }
  PROPERTIES
  {
    TableNo=50093;
    OnRun=BEGIN
            SendMail(Rec);
          END;

  }
  CODE
  {
    VAR
      AdminMailQueueSetup@1000000006 : Record 50092;
      AdminMailQueueLog@1000000004 : Record 50093;
      AdminMailQueueTxt@1000000005 : Record 50095;
      MailITSetup@1000000002 : Record 75402;
      MailIT@1000000001 : OCX "{C8C4804C-89BA-4291-AB58-4C6050B65175}:'ExpandIT.MailIT2'";
      Port@1000000000 : Integer;
      Text001@1000000003 : TextConst 'ENU=There is no Recipient!';
      Text002@1000000007 : TextConst 'ENU=Mail not active!';
      LastTextLine@1000000008 : Integer;
      CurrReturn@1000000009 : Char;
      IgnoreLineBreak@1000000010 : Boolean;

    PROCEDURE InitMail@1000000001(MailCodeV@1000000000 : Code[20];RecipientV@1000000001 : Text[100]) : Boolean;
    VAR
      AdminMailQueueLogL@1000000002 : Record 50093;
      AdminMailQueueCodesL@1000000003 : Record 50118;
    BEGIN
      AdminMailQueueSetup.GET;
      LastTextLine := 0;

      //A/gob-adb/11.11.13
      //AdminMailQueueLog.LOCKTABLE;
      //E/gob-adb/11.11.13

      AdminMailQueueLog.INIT;

      //A/gob-adb/11.11.13
      //IF AdminMailQueueLogL.FINDLAST THEN
      //  AdminMailQueueLog."Entry No." := AdminMailQueueLogL."Entry No." +1
      //ELSE
      //  AdminMailQueueLog."Entry No." := 1;

      AdminMailQueueLog."Entry No." := 0;


      //E/gob-adb/11.11.13

      AdminMailQueueLog.Status := AdminMailQueueLog.Status::Init;
      AdminMailQueueLog."Creating Date/Time" := CREATEDATETIME(WORKDATE,TIME);
      AdminMailQueueLog."Mail Code" := MailCodeV;

      CASE TRUE OF
        AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Commissioning Mail Code":
          BEGIN
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            IF AdminMailQueueCodesL.GET(AdminMailQueueSetup."Commissioning Mail Code") THEN BEGIN
              AdminMailQueueLog."Mail Type" := AdminMailQueueCodesL."Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueCodesL."Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueCodesL."Mail HTML";
            {
            //H0473 30.07.13  FF ----------------------------
            AdminMailQueueLog."Mail Type" := AdminMailQueueSetup."Commissioning Mail Type";
            AdminMailQueueLog.Sender := AdminMailQueueSetup."Commissioning Mail Sender";
            AdminMailQueueLog."Is HTML" := AdminMailQueueSetup."Commissioning Mail HTML";
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            }
              //IF NOT AdminMailQueueSetup."Commissioning Mail active" THEN BEGIN
              IF NOT AdminMailQueueCodesL."Mail active" THEN BEGIN
            //H0473 30.07.13  FF ----------------------------
                AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
                AdminMailQueueLog."Error Text" := Text002;
              END;
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            END;
            //H0473 30.07.13  FF ----------------------------

          END;
        AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Job Queue Mail Code":
          BEGIN
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            IF AdminMailQueueCodesL.GET(AdminMailQueueSetup."Job Queue Mail Code") THEN BEGIN
              AdminMailQueueLog."Mail Type" := AdminMailQueueCodesL."Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueCodesL."Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueCodesL."Mail HTML";
              {
              AdminMailQueueLog."Mail Type" := AdminMailQueueSetup."Job Queue Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueSetup."Job Queue Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueSetup."Job Queue Mail HTML";
              }
              //IF NOT AdminMailQueueSetup."Job Queue Mail active" THEN BEGIN
              IF NOT AdminMailQueueCodesL."Mail active" THEN BEGIN
              //H0473 30.07.13  FF ----------------------------
                AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
                AdminMailQueueLog."Error Text" := Text002;
              END;
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            END;
            //H0473 30.07.13  FF ----------------------------
          END;

        //H2101,H1322 25.03.15 MSL ++++++++++++++++++++++++++++
        ((AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Monitoring Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Rhenus Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."DocData Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Rhenus Whs. Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."DocData Whs. Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."FTP Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Rhenus Down Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."DocData Down Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Paypal Down Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Rhenus Up Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."DocData Up Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."OM Modification Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Change Log Mail Code") OR
        (AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."DHL Tracking Nos. Mail Code")):
          BEGIN
            IF AdminMailQueueCodesL.GET(AdminMailQueueLog."Mail Code") THEN BEGIN
              AdminMailQueueLog."Mail Type" := AdminMailQueueCodesL."Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueCodesL."Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueCodesL."Mail HTML";
              IF NOT AdminMailQueueCodesL."Mail active" THEN BEGIN
                AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
                AdminMailQueueLog."Error Text" := Text002;
              END;
            END;
          END;
        //H2101,H1322 25.03.15 MSL  ----------------------------


        AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Session Mail Code":
          BEGIN
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            IF AdminMailQueueCodesL.GET(AdminMailQueueSetup."Session Mail Code") THEN BEGIN
              AdminMailQueueLog."Mail Type" := AdminMailQueueCodesL."Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueCodesL."Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueCodesL."Mail HTML";
              {
              AdminMailQueueLog."Mail Type" := AdminMailQueueSetup."Session Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueSetup."Session Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueSetup."Session Mail HTML";
              }
              //IF NOT AdminMailQueueSetup."Session Mail active" THEN BEGIN
              IF NOT AdminMailQueueCodesL."Mail active" THEN BEGIN
            //H0473 30.07.13  FF ----------------------------
                AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
                AdminMailQueueLog."Error Text" := Text002;
              END;
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            END;
            //H0473 30.07.13  FF ----------------------------
          END;
        AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Alive Mail Code":
          BEGIN
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            IF AdminMailQueueCodesL.GET(AdminMailQueueSetup."Alive Mail Code") THEN BEGIN
              AdminMailQueueLog."Mail Type" := AdminMailQueueCodesL."Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueCodesL."Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueCodesL."Mail HTML";
              {
              AdminMailQueueLog."Mail Type" := AdminMailQueueSetup."Alive Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueSetup."Alive Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueSetup."Alive Mail HTML";
              }
              //IF NOT AdminMailQueueSetup."Alive Mail active" THEN BEGIN
              IF NOT AdminMailQueueCodesL."Mail active" THEN BEGIN

            //H0473 30.07.13  FF ----------------------------
                AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
                AdminMailQueueLog."Error Text" := Text002;
              END;
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            END;
            //H0473 30.07.13  FF ----------------------------
          END;
        AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Finance Stat. Mail Code":
          BEGIN
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            IF AdminMailQueueCodesL.GET(AdminMailQueueSetup."Finance Stat. Mail Code") THEN BEGIN
              AdminMailQueueLog."Mail Type" := AdminMailQueueCodesL."Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueCodesL."Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueCodesL."Mail HTML";
              {
              AdminMailQueueLog."Mail Type" := AdminMailQueueSetup."Finance Stat. Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueSetup."Finance Stat. Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueSetup."Finance Stat. Mail HTML";
              }
              //IF NOT AdminMailQueueSetup."Finance Stat. Mail active" THEN BEGIN
              IF NOT AdminMailQueueCodesL."Mail active" THEN BEGIN
              //H0473 30.07.13  FF ----------------------------
                AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
                AdminMailQueueLog."Error Text" := Text002;
              END;
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            END;
            //H0473 30.07.13  FF ----------------------------
          END;
        AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."ERP Stat. Mail Code":
          BEGIN
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            IF AdminMailQueueCodesL.GET(AdminMailQueueSetup."ERP Stat. Mail Code") THEN BEGIN
              AdminMailQueueLog."Mail Type" := AdminMailQueueCodesL."Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueCodesL."Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueCodesL."Mail HTML";
              {
              AdminMailQueueLog."Mail Type" := AdminMailQueueSetup."ERP Stat. Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueSetup."ERP Stat. Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueSetup."ERP Stat. Mail HTML";
              }
              //IF NOT AdminMailQueueSetup."ERP Stat. Mail active" THEN BEGIN
              IF NOT AdminMailQueueCodesL."Mail active" THEN BEGIN
              //H0473 30.07.13  FF ----------------------------
                AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
                AdminMailQueueLog."Error Text" := Text002;
              END;
            //H0473 30.07.13  FF ++++++++++++++++++++++++++++
            END;
            //H0473 30.07.13  FF ----------------------------
          END;

      // H0531 FX 29.08.13 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."EDI Mail Code":
          BEGIN
            IF AdminMailQueueCodesL.GET(AdminMailQueueSetup."EDI Mail Code") THEN BEGIN
              AdminMailQueueLog."Mail Type" := AdminMailQueueCodesL."Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueCodesL."Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueCodesL."Mail HTML";
              IF NOT AdminMailQueueCodesL."Mail active" THEN BEGIN
                AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
                AdminMailQueueLog."Error Text" := Text002;
              END;
            END;
          END;
      // H0531 FX 29.08.13 ----------------------------------------------------------------

      // H0555 FF 10.09.13 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        AdminMailQueueLog."Mail Code" = AdminMailQueueSetup."Action Worksheet Mail Code":
          BEGIN
            IF AdminMailQueueCodesL.GET(AdminMailQueueSetup."Action Worksheet Mail Code") THEN BEGIN
              AdminMailQueueLog."Mail Type" := AdminMailQueueCodesL."Mail Type";
              AdminMailQueueLog.Sender := AdminMailQueueCodesL."Mail Sender";
              AdminMailQueueLog."Is HTML" := AdminMailQueueCodesL."Mail HTML";
              IF NOT AdminMailQueueCodesL."Mail active" THEN BEGIN
                AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
                AdminMailQueueLog."Error Text" := Text002;
              END;
            END;
          END;
      // H0555 FF 10.09.13 ----------------------------------------------------------------

      END;

      IF AdminMailQueueLog.Sender = '' THEN
        AdminMailQueueLog.Sender := AdminMailQueueSetup."Administrator E-Mail";

      AdminMailQueueLog.INSERT;

      AddRecipient(RecipientV);
    END;

    PROCEDURE AddRecipient@1000000002(RecipientV@1000000000 : Text[100]) : Boolean;
    BEGIN
      IF AdminMailQueueLog."Entry No." = 0 THEN
        EXIT(FALSE);

      IF AdminMailQueueLog."Recipient 1" = '' THEN BEGIN
        AdminMailQueueLog."Recipient 1" := RecipientV;
        EXIT(TRUE);
      END;

      IF AdminMailQueueLog."Recipient 2" = '' THEN BEGIN
        AdminMailQueueLog."Recipient 2" := RecipientV;
        EXIT(TRUE);
      END;

      IF AdminMailQueueLog."Recipient 3" = '' THEN BEGIN
        AdminMailQueueLog."Recipient 3" := RecipientV;
        EXIT(TRUE);
      END;

      IF AdminMailQueueLog."Recipient 4" = '' THEN BEGIN
        AdminMailQueueLog."Recipient 4" := RecipientV;
        EXIT(TRUE);
      END;

      IF AdminMailQueueLog."Recipient 5" = '' THEN BEGIN
        AdminMailQueueLog."Recipient 5" := RecipientV;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE AddRecipientCC@1000000003(RecipientCCV@1000000000 : Text[100]) : Boolean;
    BEGIN
      IF AdminMailQueueLog."Entry No." = 0 THEN
        EXIT(FALSE);

      IF AdminMailQueueLog."Recipient CC 1" = '' THEN BEGIN
        AdminMailQueueLog."Recipient CC 1" := RecipientCCV;
        EXIT(TRUE);
      END;

      IF AdminMailQueueLog."Recipient CC 2" = '' THEN BEGIN
        AdminMailQueueLog."Recipient CC 2" := RecipientCCV;
        EXIT(TRUE);
      END;

      IF AdminMailQueueLog."Recipient CC 3" = '' THEN BEGIN
        AdminMailQueueLog."Recipient CC 3" := RecipientCCV;
        EXIT(TRUE);
      END;

      IF AdminMailQueueLog."Recipient CC 4" = '' THEN BEGIN
        AdminMailQueueLog."Recipient CC 4" := RecipientCCV;
        EXIT(TRUE);
      END;

      IF AdminMailQueueLog."Recipient CC 5" = '' THEN BEGIN
        AdminMailQueueLog."Recipient CC 5" := RecipientCCV;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE AddSubject@1000000004(SubjectV@1000000000 : Text[250]) : Boolean;
    BEGIN
      IF AdminMailQueueLog."Entry No." = 0 THEN
        EXIT(FALSE);

      AdminMailQueueLog.Subject := SubjectV;
      AdminMailQueueLog.MODIFY;
      EXIT(TRUE);
    END;

    PROCEDURE AddText@1000000006(MailTextV@1000000000 : Text[1024]) : Boolean;
    BEGIN
      IF AdminMailQueueLog."Entry No." = 0 THEN
        EXIT(FALSE);

      AdminMailQueueTxt.INIT;
      AdminMailQueueTxt."Attached to Entry No." := AdminMailQueueLog."Entry No.";
      AdminMailQueueTxt."Line No." := LastTextLine +10000;
      //H0633 23.10.13  FF +++++++++++++++++++++
      //AdminMailQueueTxt.Textline := MailTextV;
      AdminMailQueueTxt.Textline := COPYSTR(MailTextV,1,250);
      //H0633 23.10.13  FF ---------------------
      AdminMailQueueTxt."Ignore Line Break" := IgnoreLineBreak;

      AdminMailQueueTxt.INSERT;

      LastTextLine += 10000;
    END;

    PROCEDURE FinishMail@1000000005() : Boolean;
    VAR
      AdminMailDefaultRecipientsL@1000000000 : Record 50081;
    BEGIN
      IF AdminMailQueueLog."Entry No." = 0 THEN
        EXIT(FALSE);

      IF AdminMailQueueLog."Recipient 1" +
        AdminMailQueueLog."Recipient 2" +
        AdminMailQueueLog."Recipient 3" +
        AdminMailQueueLog."Recipient 4" +
        AdminMailQueueLog."Recipient 5" +
        AdminMailQueueLog."Recipient CC 1" +
        AdminMailQueueLog."Recipient CC 2" +
        AdminMailQueueLog."Recipient CC 3" +
        AdminMailQueueLog."Recipient CC 4" +
        AdminMailQueueLog."Recipient CC 5" = '' THEN BEGIN
        AdminMailDefaultRecipientsL.SETRANGE("Mail Code",AdminMailQueueLog."Mail Code");
        AdminMailDefaultRecipientsL.SETRANGE("Adress Active",TRUE);
        IF AdminMailDefaultRecipientsL.ISEMPTY THEN BEGIN
          AdminMailQueueLog.Status := AdminMailQueueLog.Status::Error;
          AdminMailQueueLog."Error Text" := Text001;
          AdminMailQueueLog.MODIFY;
        END;
      END;

      IF AdminMailQueueLog.Status = AdminMailQueueLog.Status::Error THEN
        EXIT(FALSE);

      AdminMailQueueLog.Status := AdminMailQueueLog.Status::Unprocessed;
      AdminMailQueueLog.MODIFY;
      LastTextLine := 0;
    END;

    PROCEDURE SendMail@1000000000(AdminMailQueueLogV@1000000000 : Record 50093);
    VAR
      AdminMailDefaultRecipientsL@1000000001 : Record 50081;
    BEGIN
      AdminMailQueueSetup.GET;
      AdminMailQueueSetup.TESTFIELD("Send Mail activ");
      AdminMailQueueSetup.TESTFIELD("Mail Account Adress");
      AdminMailQueueSetup.TESTFIELD("Mail Account Password");

      MailITSetup.GET;
      MailITSetup.TESTFIELD("Mail Server");

      // Initialize the email
      MailIT.SetService('SMTP');

      IF AdminMailQueueLogV.Sender <> '' THEN
        MailIT.SetFrom(AdminMailQueueLogV.Sender)
      ELSE
        MailIT.SetFrom(AdminMailQueueSetup."Administrator E-Mail");

      //Add Recipient
      IF AdminMailQueueLogV."Recipient 1" <> '' THEN
        MailIT.AddRecipient(AdminMailQueueLogV."Recipient 1",AdminMailQueueLogV."Recipient 1");

      IF AdminMailQueueLogV."Recipient 2" <> '' THEN
        MailIT.AddRecipient(AdminMailQueueLogV."Recipient 2",AdminMailQueueLogV."Recipient 2");

      IF AdminMailQueueLogV."Recipient 3" <> '' THEN
        MailIT.AddRecipient(AdminMailQueueLogV."Recipient 3",AdminMailQueueLogV."Recipient 3");

      IF AdminMailQueueLogV."Recipient 4" <> '' THEN
        MailIT.AddRecipient(AdminMailQueueLogV."Recipient 4",AdminMailQueueLogV."Recipient 4");

      IF AdminMailQueueLogV."Recipient 5" <> '' THEN
        MailIT.AddRecipient(AdminMailQueueLogV."Recipient 5",AdminMailQueueLogV."Recipient 5");

      // Add Recipient CC
      IF AdminMailQueueLogV."Recipient CC 1" <> '' THEN
        MailIT.AddRecipientCC(AdminMailQueueLogV."Recipient CC 1",AdminMailQueueLogV."Recipient CC 1");

      IF AdminMailQueueLogV."Recipient CC 2" <> '' THEN
        MailIT.AddRecipientCC(AdminMailQueueLogV."Recipient CC 2",AdminMailQueueLogV."Recipient CC 2");

      IF AdminMailQueueLogV."Recipient CC 3" <> '' THEN
        MailIT.AddRecipientCC(AdminMailQueueLogV."Recipient CC 3",AdminMailQueueLogV."Recipient CC 3");

      IF AdminMailQueueLogV."Recipient CC 4" <> '' THEN
        MailIT.AddRecipientCC(AdminMailQueueLogV."Recipient CC 4",AdminMailQueueLogV."Recipient CC 4");

      IF AdminMailQueueLogV."Recipient CC 5" <> '' THEN
        MailIT.AddRecipientCC(AdminMailQueueLogV."Recipient CC 5",AdminMailQueueLogV."Recipient CC 5");

      IF AdminMailQueueSetup."Administrator E-Mail" <> '' THEN
        MailIT.AddRecipientBCC(AdminMailQueueLogV."Recipient CC 5",AdminMailQueueLogV."Recipient CC 5");

      AdminMailDefaultRecipientsL.SETRANGE("Mail Code",AdminMailQueueLogV."Mail Code");
      AdminMailDefaultRecipientsL.SETRANGE("Adress Active",TRUE);
      IF AdminMailDefaultRecipientsL.FINDSET THEN
        REPEAT
          CASE AdminMailDefaultRecipientsL."Sending Type" OF
            AdminMailDefaultRecipientsL."Sending Type"::"To":MailIT.AddRecipient(AdminMailDefaultRecipientsL."E-Mail Adress",
                                                                                 AdminMailDefaultRecipientsL."E-Mail Adress");
            AdminMailDefaultRecipientsL."Sending Type"::Cc:MailIT.AddRecipientCC(AdminMailDefaultRecipientsL."E-Mail Adress",
                                                                                   AdminMailDefaultRecipientsL."E-Mail Adress");
            AdminMailDefaultRecipientsL."Sending Type"::Bcc:MailIT.AddRecipientBCC(AdminMailDefaultRecipientsL."E-Mail Adress",
                                                                                     AdminMailDefaultRecipientsL."E-Mail Adress");
          END;
        UNTIL AdminMailDefaultRecipientsL.NEXT = 0;

      //H1787 26.11.14 TST ++++++++++++++++++++++++++++

      IF EXISTS(FORMAT(AdminMailQueueLogV."Attachement 1")) THEN
        MailIT.AddAttachment(FORMAT( AdminMailQueueLogV."Attachement 1"));
      IF EXISTS(FORMAT( AdminMailQueueLogV."Attachement 2")) THEN
        MailIT.AddAttachment(FORMAT( AdminMailQueueLogV."Attachement 2"));
      //H1787 26.11.14 TST ----------------------------


      CASE AdminMailQueueLogV."Mail Type" OF
        AdminMailQueueLogV."Mail Type"::Info:
            MailIT.SetSubject('Information: ' + AdminMailQueueLogV.Subject + ' [' + GetDatabaseName + ': ' + COMPANYNAME + ']');

        AdminMailQueueLogV."Mail Type"::Warning:
            MailIT.SetSubject('Warning: ' + AdminMailQueueLogV.Subject + ' [' + GetDatabaseName + ': ' + COMPANYNAME + ']');

        AdminMailQueueLogV."Mail Type"::Error:
            MailIT.SetSubject('ERROR: ' + AdminMailQueueLogV.Subject + ' [' + GetDatabaseName + ': ' + COMPANYNAME + ']');
      END;

      CurrReturn := 13;

      AdminMailQueueTxt.RESET;
      AdminMailQueueTxt.SETRANGE("Attached to Entry No.",AdminMailQueueLogV."Entry No.");
      IF AdminMailQueueTxt.FINDSET THEN
        REPEAT
          IF AdminMailQueueTxt."Ignore Line Break" THEN BEGIN
            IF AdminMailQueueLogV."Is HTML" THEN BEGIN
                MailIT.AppendHTML(AdminMailQueueTxt.Textline)
            END ELSE
              MailIT.AppendText(AdminMailQueueTxt.Textline);
          END ELSE BEGIN
            IF AdminMailQueueLogV."Is HTML" THEN BEGIN
                MailIT.AppendHTML(AdminMailQueueTxt.Textline + '<br>')
            END ELSE
              MailIT.AppendText(AdminMailQueueTxt.Textline + FORMAT(CurrReturn));
          END;
        UNTIL AdminMailQueueTxt.NEXT = 0;

      //H0473 30.07.13  FF +++++++++++++++++++++++++
      MailIT.SetServer(MailITSetup."Mail Server");
      {
      IF MailITSetup."Server Port" = '' THEN
        Port := 25
      ELSE
        EVALUATE(Port,MailITSetup."Server Port");
      }
      IF AdminMailQueueSetup."Server Port" = '' THEN
        Port := 25
      ELSE
        EVALUATE(Port,AdminMailQueueSetup."Server Port");

      //H0473 30.07.13  FF -------------------------

      MailIT.SetPort(Port);

      MailIT.SetLogin(AdminMailQueueSetup."Mail Account Adress");
      MailIT.SetPassword(AdminMailQueueSetup."Mail Account Password");

      MailIT.Send();
    END;

    PROCEDURE GetDatabaseName@1112400000() : Text[1024];
    BEGIN
      EXIT(GetParameterValue('database'));
    END;

    PROCEDURE GetServerName@1112400001() : Text[1024];
    BEGIN
      EXIT(GetParameterValue('servername'));
    END;

    PROCEDURE GetServerType@1112400002() : Text[1024];
    BEGIN
      EXIT(GetParameterValue('servertype'));
    END;

    PROCEDURE GetParameterValue@1112400003(Parameter@1112400000 : Text[30]) Value : Text[1024];
    BEGIN
      Parameter := DELCHR(Parameter,'>','=') + '=';
      IF STRPOS(CONTEXTURL,Parameter) = 0 THEN
        EXIT('<empty>');
      Value := COPYSTR(CONTEXTURL,STRPOS(CONTEXTURL,Parameter) + STRLEN(Parameter));
      IF STRPOS(Value,'&') <> 0 THEN
        EXIT(COPYSTR(Value,1,STRPOS(Value,'&') - 1));
      EXIT(Value);
    END;

    PROCEDURE SetIgnoreLineBreak@1000000007(IgnoreLineBreakV@1000000000 : Boolean);
    BEGIN
      IgnoreLineBreak := IgnoreLineBreakV;
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________

      FPC002      07.09.12  ABR       Created
      FPC005      11.09.12  ABR       Changed Recipient CC
      H0009       27.09.12  ABR       Send Alive Mail
      H0011       27.09.12  ABR       Send Finance Statistic Mail
      H0023       10.10.12  ABR       Set Databasename & Companyname in Subject
      H0031       15.10.12  ABR       Send ERP Statistic Mail
      H0034       17.10.12  ABR       Ignore Line Break for Format
      H0036       17.10.12  ABR       Own E-Mail Adress
      H0060       26.10.12  ABR       Default Mail Recipients
      H0062       29.10.12  ABR       Filter Changed for Default Recipients
      H0072       05.11.12  ABR       Locktable
      H0175       24.01.13  FF        Changed MailCodeV length to 20
      H0242       11.03.13  FF        InitMail: If Monitoring Mails not active all Monitoring Mails in log "Error"
      H0265       26.03.13  FX        Improvement in Fuchs-report
      H0473       30.07.13  FF        Server Port and Mail Cases changed
      H0531       29.08.13  FX        Add "EDI Mail Code" to the InitMail options
      H0555       10.09.13  FF        Added "Action Worksheet Mail Code" to InitMail function
      H0633       23.10.13  FF        AddText: MailtextV length changed to 1024
      P1143       11.11.13  gob-adb   Entry No. filling disabled (now AutoIncrement = Yes)
      H1322       02.07.14  FF        Monitoring Mail Options - MONITORING* mails - Added Options to InitMail function
      H1787       27.11.14  TST       AddAttachement
      H2101       23.03.15  MSL       Create Notification when running out of DHL No's
      H4270       21.05.15  JM        BUG: In Admin Mail Queue the "entry no" must not be set in "auto increment"
      H4305       29.06.15  ARI       Rollback of Project H4270
    }
    END.
  }
}

