OBJECT Codeunit 50230 Home24 Testing Toolset
{
  OBJECT-PROPERTIES
  {
    Date=27.11.14;
    Time=12:00:00;
    Version List=HME1743;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
            RANDOMIZE(1);
          END;

  }
  CODE
  {
    VAR
      SalesHeader@1000000007 : Record 36;
      SalesHeaderArchive@1000000064 : Record 5107;
      SalesReturn@1000000057 : Record 36;
      SalesLine@1000000008 : Record 37;
      SalesInvHeader@1000000044 : Record 112;
      SalesInvLine@1000000045 : Record 113;
      SalesLineArchive@1000000066 : Record 5108;
      Vendor@1000000076 : Record 23;
      Vendor2@1000000077 : Record 23;
      PurchHeader@1000000013 : Record 38;
      PurchLine@1000000028 : Record 39;
      UserSetup@1000000036 : Record 91;
      ReturnReason@1000000065 : Record 6635;
      SalesShipmentHeader@1000000030 : Record 110;
      SalesShipmentLine@1000000034 : Record 111;
      eBayNavCXMLLog@1000000027 : Record 5096060;
      MyFile@1000000026 : Record 2000000022;
      AdminMailQueueSetup@1000000000 : Record 50092;
      eBayNavCSalesHeader@1000000004 : Record 5251571;
      Item@1000000003 : Record 27;
      Item2@1000000072 : Record 27;
      DimValue@1000000018 : Record 349;
      DimValue2@1000000079 : Record 349;
      DefaultDim@1000000073 : Record 352;
      DefaultDim2@1000000074 : Record 352;
      DocDim@1000000017 : Record 357;
      Customer@1000000006 : Record 18;
      PaymentMethod@1000000009 : Record 289;
      Purchasing@1000000037 : Record 5721;
      BatchPostDoc@1000000011 : Record 50043;
      TestSetup@1000000019 : Record 80006;
      TestBuffer@1000000031 : Record 80008;
      eBayNavCAccount@1000000041 : Record 5251550;
      WebshopItem@1000000061 : Record 5251566;
      eBayNavCWebshop@1000000062 : Record 5251553;
      ItemUoM@1000000067 : Record 5404;
      JobQueueEntry@1000000078 : Record 472;
      FileInfoItem@1000000058 : File;
      Assert@1000000035 : Codeunit 50200;
      NoSeriesManagement@1000000032 : Codeunit 396;
      ChannelMgt@1000000056 : Codeunit 50093;
      ReleaseSalesDocument@1000000010 : Codeunit 414;
      ReleasePurchDocument@1000000015 : Codeunit 415;
      LibrarySCM@1000000005 : Codeunit 50210;
      eBayNavCDocumentUtil@1000000001 : Codeunit 5251544;
      BatchAutomProcess@1000000012 : Codeunit 50031;
      AutomEMailProc@1000000014 : Codeunit 50030;
      TestFunctions@1000000021 : Codeunit 50231;
      ReleaseSalesDoc@1000000052 : Codeunit 414;
      ArchiveManagement@1000000063 : Codeunit 5063;
      eBayNavCAccountUtil@1000000042 : Codeunit 5251542;
      FPCManagement@1000000055 : Codeunit 50003;
      eBayNavCLogBuffer@1000000043 : Codeunit 5251568;
      eBayCopyItem@1000000060 : Report 5095800;
      RandomNumber@1000000002 : Integer;
      SalesLineCount@1000000033 : Integer;
      PostedSalesInvoiceNo@1000000046 : Code[20];
      SalesOrderNo@1000000020 : Code[20];
      CustomerNo@1000000029 : Code[20];
      FileSystemObj@1000000023 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      RequestMessage@1000000025 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      ResponseMessage@1000000024 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      FilePath@1000000022 : Text[1024];
      FolderPath@1000000051 : Text[1024];
      BigRow@1000000059 : Text[1024];
      isInitialized@1000000016 : Boolean;
      Okey@1000000039 : Boolean;
      VATAmountErrorMessage@1000000050 : TextConst 'ENU=VAT Amount must be %1 in %2.';
      FieldError@1000000049 : TextConst 'ENU=Number of Lines for %1 and %2  must be equal.';
      AmountError@1000000048 : TextConst 'ENU=%1 must be Equal in %2.';
      CurrencyError@1000000047 : TextConst 'ENU=%1 must be Equal in %2.';
      Text001@1000000053 : TextConst 'ENU=There are no available documents to perform this test.';
      Text002@1000000054 : TextConst 'ENU=Error in Kommissionierung for Order %1';
      Text003@1000000070 : TextConst 'ENU="I cannot import "';
      Text004@1000000071 : TextConst 'ENU=Sales Order %1 has no lines.';
      Text005@1000000075 : TextConst 'ENU=Error in Default Dimension Item No. %1';
      DocumentErr@1000000068 : TextConst 'ENU=The document %1 was not found.';
      BatchPostDocErr@1000000069 : TextConst 'ENU=There is no Batch-Post Document Entry for the Document %1.';

    LOCAL PROCEDURE Initialize@4();
    VAR
      BackupMgt@1001 : Codeunit 50201;
    BEGIN
      RANDOMIZE;
      IF isInitialized THEN
        EXIT;
      isInitialized := TRUE;
      TestSetup.GET;
      UserSetup.GET(USERID);
      IF UserSetup."Export Test Path" <> '' THEN
        FolderPath := UserSetup."Export Test Path"
      ELSE
        FolderPath := TestSetup."Web Orders Folder Path";
      IF ISCLEAR(RequestMessage) THEN
        CREATE(RequestMessage);
      IF ISCLEAR(ResponseMessage) THEN
        CREATE(ResponseMessage);
      IF ISCLEAR(FileSystemObj) THEN
        CREATE(FileSystemObj);
    END;

    [Test]
    PROCEDURE ImportCustomerAcc@1000000002();
    BEGIN
      Initialize;

      // Import Customer's Account
      MyFile.SETRANGE(Path, FolderPath + 'Customer\');
      MyFile.SETRANGE("Is a file", TRUE);
      MyFile.SETFILTER(Name, '*.xml');
      MyFile.FINDFIRST;

      REPEAT
        CustomerNo := COPYSTR(MyFile.Name, 1, STRPOS(MyFile.Name, '.') - 1);
        FilePath := eBayNavCXMLLog."Request Document".IMPORT(FolderPath + 'Customer\' + MyFile.Name, FALSE);
        RequestMessage.load(FilePath);
        TestFunctions.ProcessXMLRequest(RequestMessage, ResponseMessage);
        TestFunctions.InsertBuffer(1, CustomerNo);

        // Verifies Customer Account exists
        eBayNavCAccount.SETRANGE("External Account No.", CustomerNo);
        eBayNavCAccount.FINDSET;
      UNTIL MyFile.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(HandlerFunctionMsg)]
    PROCEDURE ImportWebOrder@1000000006();
    BEGIN
      Initialize;

      // Imports all the Items!
      ImportItems;

      // Imports all the Vendors!
      ImportVendors;

      // Imports Customer
      MyFile.SETRANGE(Path, FolderPath + 'Customer\');
      MyFile.SETRANGE("Is a file", TRUE);
      MyFile.SETFILTER(Name, '*.xml');
      MyFile.FINDFIRST;

      REPEAT
        CustomerNo := COPYSTR(MyFile.Name, 1, STRPOS(MyFile.Name, '.') - 1);
        TestFunctions.InsertBuffer(1, CustomerNo);
        FilePath := eBayNavCXMLLog."Request Document".IMPORT(FolderPath + 'Customer\' + MyFile.Name, FALSE);
        RequestMessage.load(FilePath);
        TestFunctions.ProcessXMLRequest(RequestMessage, ResponseMessage);
      UNTIL MyFile.NEXT = 0;

      // Import Web Orders
      MyFile.SETRANGE(Path, FolderPath + 'Order\');
      MyFile.SETRANGE("Is a file", TRUE);
      MyFile.SETFILTER(Name, '*.xml');
      MyFile.FIND('-');

      REPEAT
        SalesHeaderArchive.SETRANGE("No.", COPYSTR(MyFile.Name, 1, STRPOS(MyFile.Name, '.') - 1));
        IF NOT SalesHeaderArchive.FINDFIRST THEN BEGIN

          FilePath := eBayNavCXMLLog."Request Document".IMPORT(FolderPath + 'Order\' + MyFile.Name, FALSE);
          RequestMessage.load(FilePath);
          SalesOrderNo := TestFunctions.ProcessXMLRequest(RequestMessage, ResponseMessage);
          TestFunctions.InsertBuffer(2, SalesOrderNo);

          // Verifications about Customer
          SalesHeader.GET(SalesHeader."Document Type"::Order, SalesOrderNo);
          Customer.GET(SalesHeader."Sell-to Customer No.");
          CustomerNo := Customer."No.";
          Customer.TESTFIELD(Name);
          Customer.TESTFIELD(Address);
          Customer.TESTFIELD("Post Code");
          Customer.TESTFIELD(City);
          Customer.TESTFIELD("Country/Region Code");
          Customer.TESTFIELD("Search Name", UPPERCASE(Customer.Name));
          Customer.TESTFIELD("E-Mail");
          Customer.TESTFIELD("Gen. Bus. Posting Group");
          Customer.TESTFIELD("VAT Bus. Posting Group");
          Customer.TESTFIELD("Language Code");
          TestFunctions.InsertBuffer(1, Customer."No.");

          // Verifications on new Sales Order Header
          SalesHeader.TESTFIELD("Order Date", SalesHeader."Document Date");
          SalesHeader.TESTFIELD("External Document No.", SalesHeader."No.");
          SalesHeader.TESTFIELD("Sell-to Customer No.", Customer."No.");
          SalesHeader.TESTFIELD("Sell-to Address", Customer.Address);
          SalesHeader.TESTFIELD("Sell-to Post Code", Customer."Post Code");
          SalesHeader.TESTFIELD("Sell-to City", Customer.City);
          SalesHeader.TESTFIELD("Website No.");
          SalesHeader.TESTFIELD("VAT Bus. Posting Group");
          SalesHeader.TESTFIELD("Bill-to Customer No.", Customer."No.");
          SalesHeader.TESTFIELD("Bill-to Address", Customer.Address);
          SalesHeader.TESTFIELD("Bill-to Post Code", Customer."Post Code");
          SalesHeader.TESTFIELD("Bill-to City", Customer.City);
          SalesHeader.TESTFIELD("Ship-to Code");
          SalesHeader.TESTFIELD("Ship-to Name");
          SalesHeader.TESTFIELD("Ship-to Address");
          SalesHeader.TESTFIELD("Ship-to Post Code");
          SalesHeader.TESTFIELD("Ship-to City");
          PaymentMethod.GET(SalesHeader."Payment Method Code");
          IF (PaymentMethod."Cash in advance") OR (PaymentMethod.Creditcard) THEN
            SalesHeader.TESTFIELD("Prepayment %", 100);

          // Checks about Sales Line
          COMMIT;
          SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
          SalesLine.SETRANGE("Document No.", SalesHeader."No.");
          SalesLine.FINDFIRST;
          REPEAT
            SalesLine.GET(SalesLine."Document Type", SalesOrderNo, SalesLine."Line No.");
            SalesLine.TESTFIELD("Bill-to Customer No.", CustomerNo);
            SalesLine.TESTFIELD("Sell-to Customer No.", CustomerNo);
            SalesLine.TESTFIELD("Document No.", SalesOrderNo);
            IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
              Item.GET(SalesLine."No.");
              SalesLine.TESTFIELD("Shortcut Dimension 2 Code", Item."No.");
              SalesLine.TESTFIELD("Vendor No.");
            END;
            SalesLine.TESTFIELD("Gen. Bus. Posting Group", Customer."Gen. Bus. Posting Group");
            SalesLine.TESTFIELD("Gen. Prod. Posting Group");
            SalesLine.TESTFIELD("VAT Bus. Posting Group", Customer."VAT Bus. Posting Group");
            SalesLine.TESTFIELD("VAT Prod. Posting Group");
            IF SalesLine."Cancellation Qty." = 0 THEN
              SalesLine.TESTFIELD(Quantity, 1);
            IF SalesLine.Type = SalesLine.Type::Item THEN
              Purchasing.GET(SalesLine."Purchasing Code");
            SalesLine.TESTFIELD("Planned Delivery Date");
            SalesLine.TESTFIELD("Planned Shipment Date");
          UNTIL SalesLine.NEXT = 0;
        END;

        MESSAGE('Dummy');

      UNTIL MyFile.NEXT = 0;
    END;

    [Test]
    PROCEDURE ImportPayment@1000000007();
    BEGIN
      // Only imports the Payments for Orders in Buffer
      Initialize;
      MyFile.SETRANGE(Path, FolderPath + 'Payment\');
      MyFile.SETRANGE("Is a file", TRUE);
      MyFile.SETFILTER(Name, '*.xml');
      IF MyFile.FINDFIRST THEN REPEAT

        TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
        TestBuffer.SETRANGE("Entry Value Code", COPYSTR(MyFile.Name, 1, STRPOS(MyFile.Name, '.') - 1));
        TestBuffer.SETRANGE("Use for Test", TRUE);
        IF TestBuffer.FINDFIRST THEN BEGIN

          FilePath := eBayNavCXMLLog."Request Document".IMPORT(FolderPath + 'Payment\' + MyFile.Name, FALSE);
          RequestMessage.load(FilePath);
          SalesOrderNo := TestFunctions.ProcessXMLRequestPmt(RequestMessage, ResponseMessage);
          TestFunctions.InsertBuffer(2, SalesOrderNo);

          // Verifies Payment's done
          COMMIT;
          TestFunctions.InsertBuffer(2, SalesOrderNo);
          IF SalesHeader."Payment Method Code" IN ['FREE','GSVERK','PAID','RECHNUNG'] THEN
            ERROR(Text001, SalesHeader."Payment Method Code", SalesHeader."No.");
          SalesHeader.GET(SalesHeader."Document Type"::Order, SalesOrderNo);
          SalesHeader.TESTFIELD("Payment received at");
          SalesHeader.TESTFIELD(Status, SalesHeader.Status::Released);
          IF (SalesHeader.Kommissionierung = FALSE) AND (SalesHeader."XML Kommissionierung" = FALSE) THEN
            ERROR(STRSUBSTNO(Text002, SalesOrderNo));

        END;

      UNTIL MyFile.NEXT = 0;
    END;

    [Test]
    PROCEDURE ReleaseSalesOrder@1000000005();
    BEGIN
      // Makes a manual release
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      IF TestBuffer.FINDFIRST THEN
        REPEAT
          SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
          ReleaseSalesDoc.PerformManualRelease(SalesHeader);

          // Verifies the result
          COMMIT;
          SalesHeader.TESTFIELD(Status, SalesHeader.Status::Released);

        UNTIL TestBuffer.NEXT = 0
      ELSE
        ERROR(Text001);
    END;

    [Test]
    PROCEDURE ReopenSalesOrder@1000000015();
    BEGIN
      // Reopens the Sales Order
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      IF TestBuffer.FINDFIRST THEN
        REPEAT
          SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
          ReleaseSalesDoc.PerformManualReopen(SalesHeader);

          // Verifies the result
          COMMIT;
          SalesHeader.TESTFIELD(Status, SalesHeader.Status::Open);

        UNTIL TestBuffer.NEXT = 0
      ELSE
        ERROR(Text001);
    END;

    [Test]
    PROCEDURE ShipWebSalesOrder@1000000009();
    BEGIN
      // Ships all the SalesHeaders found in Buffer table.
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FIND('-');
      REPEAT

        // Post Sales Order as Shipmt.
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.", SalesHeader."No.");
        SalesLine.SETFILTER(Type, '%1', SalesLine.Type::Item);
        SalesLine.SETRANGE("Quantity Shipped", 0);
        IF SalesLine.FIND('-') THEN BEGIN
          REPEAT
            SalesLine.TESTFIELD(Quantity, 1);
          UNTIL SalesLine.NEXT = 0;
        END ELSE
          EXIT;

        IF SalesLine."Quantity Shipped" <> SalesLine.Quantity THEN BEGIN
          LibrarySCM.PostSalesHeader2(SalesHeader, TRUE, FALSE);
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
          SalesLine.SETRANGE("Document No.", TestBuffer."Entry Value Code");
          SalesLine.SETFILTER(Type, '%1|%2', SalesLine.Type::Item, SalesLine.Type::Resource);
          IF SalesLine.FIND('-') THEN
            SalesLineCount := SalesLine.COUNT
          ELSE
            ERROR(Text004, SalesHeader."No.");

          // Verify Sales Shipment Line Count = Sales Line Count.
          COMMIT;
          SalesShipmentHeader.SETRANGE("Order No.", SalesHeader."No.");
          SalesShipmentHeader.FIND('-');
          TestFunctions.InsertBuffer(3, SalesShipmentHeader."No.");
          SalesShipmentLine.SETRANGE("Document No.", SalesShipmentHeader."No.");
          Assert.AreEqual(SalesLineCount, SalesShipmentLine.COUNT,
            STRSUBSTNO(FieldError, SalesLine."Document No.", SalesShipmentLine."Document No."));
          SalesShipmentHeader.TESTFIELD("Order No.", SalesHeader."No.");
          SalesShipmentHeader.TESTFIELD("Ship-to Code", SalesHeader."Ship-to Code");
          SalesShipmentHeader.TESTFIELD("Ship-to Name", SalesHeader."Ship-to Name");
          SalesShipmentHeader.TESTFIELD("Ship-to Address", SalesHeader."Ship-to Address");
          SalesShipmentHeader.TESTFIELD("Ship-to Post Code", SalesHeader."Ship-to Post Code");
          SalesShipmentHeader.TESTFIELD("Ship-to City", SalesHeader."Ship-to City");
        END;

      UNTIL TestBuffer.NEXT = 0;
    END;

    [Test]
    PROCEDURE InvoiceWebSalesOrder@1000000017();
    VAR
      DiscountAmount@1000000001 : Decimal;
      AllLinesAreInvoiced@1000000000 : Boolean;
    BEGIN
      // Posts SalesHeaders in Buffer table.

      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FINDFIRST;
      REPEAT

        // Posts Sales Order as Invoice
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.", SalesHeader."No.");
        SalesLine.FIND('-');
        REPEAT
          SalesLine.TESTFIELD(Quantity, 1);
        UNTIL SalesLine.NEXT = 0;

        LibrarySCM.PostSalesHeader3(SalesHeader, TRUE, TRUE);
        SalesLine.SETRANGE("Document No.", TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLineCount := SalesLine.COUNT;

        // Verify new Invoice exists
        COMMIT;

        SalesInvHeader.SETRANGE("Order No.", SalesHeader."No.");
        SalesInvHeader.FINDLAST;
        SalesInvHeader.CALCFIELDS(Amount, "Amount Including VAT");
        SalesInvHeader.TESTFIELD("Order No.", SalesHeader."No.");
        SalesInvHeader.TESTFIELD("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
        SalesInvHeader.TESTFIELD("Bill-to Name", SalesHeader."Bill-to Name");
        SalesInvHeader.TESTFIELD("Bill-to Address", SalesHeader."Bill-to Address");
        SalesInvHeader.TESTFIELD("Bill-to Post Code", SalesHeader."Bill-to Post Code");
        SalesInvHeader.TESTFIELD("Bill-to City", SalesHeader."Bill-to City");

        SalesInvHeader.CALCFIELDS("Amount Including VAT");
        {
        DiscountAmount := 0;
        SalesInvLine.SETRANGE("Document No.", SalesInvHeader."No.");
        SalesInvLine.FIND('-');
        REPEAT
          DiscountAmount += SalesInvLine."Line Discount Amount";
        UNTIL SalesInvLine.NEXT = 0;
        }
        VerifyGLEntry(SalesInvHeader."No.", SalesInvHeader."Amount Including VAT");
        VerifyCustomerLedgerEntry(SalesInvHeader."No.", SalesInvHeader."Amount Including VAT");
        VerifyVATEntry(SalesInvHeader."No.", SalesInvHeader."Amount Including VAT" - SalesInvHeader.Amount);  // Only VAT?
        VerifyValueEntry(SalesInvHeader."No.", SalesInvHeader.Amount);

        TestFunctions.InsertBuffer(8, SalesHeader."No.");
        TestFunctions.InsertBuffer(5, SalesInvHeader."No.");

        AllLinesAreInvoiced := FALSE;
        REPEAT
          IF (SalesLine."Qty. to Invoice" = 0) AND (SalesLine."Quantity Invoiced" = SalesLine.Quantity) THEN
            AllLinesAreInvoiced := TRUE;
        UNTIL (SalesLine.NEXT = 0) OR (AllLinesAreInvoiced);
        IF AllLinesAreInvoiced THEN
          TestBuffer.DELETE;

      UNTIL TestBuffer.NEXT = 0;
    END;

    [Test]
    PROCEDURE ShipAndInvoiceSalesOrder@1000000019();
    VAR
      AllLinesAreInvoicedL@1000000000 : Boolean;
    BEGIN
      // Posts SalesHeaders in Buffer table.

      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FINDFIRST;
      REPEAT

        // Posts Sales Order as Ship+Invoice
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.", SalesHeader."No.");
        SalesLine.FIND('-');
        REPEAT
          SalesLine.TESTFIELD(Quantity, 1);
          SalesLine.VALIDATE("Qty. to Ship", 1);
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;

        LibrarySCM.PostSalesHeader(SalesHeader, TRUE, TRUE);
        SalesLine.SETRANGE("Document No.", TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLineCount := SalesLine.COUNT;

        // Verify new Invoice exists
        COMMIT;

        SalesInvHeader.SETRANGE("Order No.", SalesHeader."No.");
        SalesInvHeader.FINDLAST;
        SalesInvHeader.CALCFIELDS(Amount, "Amount Including VAT");
        SalesInvHeader.TESTFIELD("Order No.", SalesHeader."No.");
        SalesInvHeader.TESTFIELD("Bill-to Customer No.", SalesHeader."Bill-to Customer No.");
        SalesInvHeader.TESTFIELD("Bill-to Name", SalesHeader."Bill-to Name");
        SalesInvHeader.TESTFIELD("Bill-to Address", SalesHeader."Bill-to Address");
        SalesInvHeader.TESTFIELD("Bill-to Post Code", SalesHeader."Bill-to Post Code");
        SalesInvHeader.TESTFIELD("Bill-to City", SalesHeader."Bill-to City");

        SalesInvHeader.CALCFIELDS("Amount Including VAT");

        VerifyGLEntry(SalesInvHeader."No.", SalesInvHeader."Amount Including VAT");
        VerifyCustomerLedgerEntry(SalesInvHeader."No.", SalesInvHeader."Amount Including VAT");
        VerifyVATEntry(SalesInvHeader."No.", SalesInvHeader."Amount Including VAT" - SalesInvHeader.Amount);  // Only VAT?
        VerifyValueEntry(SalesInvHeader."No.", SalesInvHeader.Amount);

        TestFunctions.InsertBuffer(8, SalesHeader."No.");
        TestFunctions.InsertBuffer(5, SalesInvHeader."No.");

        AllLinesAreInvoicedL := FALSE;
        REPEAT
          IF (SalesLine."Qty. to Invoice" = 0) AND (SalesLine."Quantity Invoiced" = SalesLine.Quantity) THEN
            AllLinesAreInvoicedL := TRUE;
        UNTIL (SalesLine.NEXT = 0) OR (AllLinesAreInvoicedL);
        IF AllLinesAreInvoicedL THEN
          TestBuffer.DELETE;

      UNTIL TestBuffer.NEXT = 0;
    END;

    [Test]
    PROCEDURE CreatePurchOrder@1000000011();
    VAR
      supertexto@1000000000 : Text[1024];
    BEGIN
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FINDFIRST;
      REPEAT

        // Verifies the Order exists
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");

        // Is PO required?
        BatchPostDoc.CheckIfCreateOrderRecRequired(SalesHeader);
        // Creates Batch-Post line Purch. Order
        BatchPostDoc.CreatePurchOrder(SalesHeader);
        // Verifies Batch-Post lines exist
        BatchPostDoc.SETRANGE("Document No.", TestBuffer."Entry Value Code");
        BatchPostDoc.SETFILTER("Action Type", '%1', BatchPostDoc."Action Type"::"Create Purch. Order");
        IF BatchPostDoc.FINDFIRST THEN BEGIN

          // Runs the Batch-Post action
          COMMIT;
          BatchAutomProcess.SetBatchLine(BatchPostDoc);
          BatchAutomProcess.Code;

          // Verifies Purchase Order(s)
          SalesLine.SETRANGE("Document No.", SalesHeader."No.");
          SalesLine.SETFILTER("Purchase Order No.", '<>%1', '');
          SalesLine.FINDFIRST;
          REPEAT
            PurchHeader.GET(SalesHeader."Document Type"::Order, SalesLine."Purchase Order No.");
            PurchLine.SETRANGE("Document Type", PurchLine."Document Type"::Order);
            PurchLine.SETRANGE("Document No.", PurchHeader."No.");
            PurchLine.FINDFIRST;
            REPEAT
              PurchLine.GET(PurchLine."Document Type", PurchLine."Document No.", PurchLine."Line No.");
              TestFunctions.InsertBuffer(4, PurchLine."Document No.");
            UNTIL SalesLine.NEXT = 0;
          UNTIL SalesLine.NEXT = 0;

        END;

      UNTIL TestBuffer.NEXT = 0;
    END;

    [Test]
    PROCEDURE CancelSalesOrder@1000000004();
    BEGIN
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FINDFIRST;
      REPEAT
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document No.", TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLine.FINDFIRST;
        REPEAT
          ReturnReason.SETRANGE("Return Type", ReturnReason."Return Type"::Cancelation);
          ReturnReason.NEXT(RANDOM(ReturnReason.COUNT));
          SalesLine."Return Type" := SalesLineArchive."Return Type"::Cancelation;
          SalesLine."Return Reason Code" := ReturnReason.Code;
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
        CLEAR(FPCManagement);
        FPCManagement.InitCancelWithoutInterfaces(SalesHeader."No.", 0);
        FPCManagement.RUN;
      UNTIL TestBuffer.NEXT = 0;

      COMMIT;
      // Verifies the order and all its lines are cancelled
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FINDFIRST;
      REPEAT
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        SalesHeader.TESTFIELD(Status, SalesHeader.Status::Canceled);
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type", SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.", SalesHeader."No.");
        IF SalesLine.FIND('-') THEN
          REPEAT
            SalesLine.TESTFIELD("Line Status", 'CANCELED');
          UNTIL SalesLine.NEXT = 0;
      UNTIL TestBuffer.NEXT = 0;
    END;

    [Test]
    PROCEDURE CancelSalesLines@1000000008();
    VAR
      FPCManagementL@1000000000 : Codeunit 50003;
    BEGIN
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FIND('-');
      REPEAT
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document No.", TestBuffer."Entry Value Code");
        SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Order);
        SalesLine.SETFILTER("Line Status", '<>%1', 'CANCELED');
        SalesLine.SETRANGE("Quantity Shipped", 0);
        IF SalesLine.FIND('-') THEN BEGIN
          REPEAT
            ReturnReason.SETRANGE("Return Type", ReturnReason."Return Type"::Cancelation);
            ReturnReason.NEXT(RANDOM(ReturnReason.COUNT));
            SalesLine."Return Type" := SalesLineArchive."Return Type"::Cancelation;
            SalesLine."Return Reason Code" := ReturnReason.Code;
            SalesLine.MODIFY(TRUE);
            //H0587 22.07.14 HCN +++++++++++++++++++++++++++++
            IF ChannelMgt.CheckIfDropShipmentOrCrossDock(SalesLine) THEN
            //H0587 22.07.14 HCN -----------------------------
              ChannelMgt.CancelDropShipment(SalesLine, FALSE)
            ELSE
              SalesLine.MagentoCancel(FALSE,FALSE);
          UNTIL SalesLine.NEXT = 0;
        END ELSE
          ERROR('NOM HAI LI¥AS!!');
        COMMIT;
      UNTIL TestBuffer.NEXT = 0;

      // Verifies the Lines are cancelled
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FIND('-');
      REPEAT
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        SalesLine.RESET;
        SalesLine.SETRANGE("Document No.", SalesHeader."No.");
        SalesLine.SETRANGE("Document Type", SalesHeader."Document Type");
        IF SalesLine.FIND('-') THEN
          REPEAT
            SalesLine.TESTFIELD("Line Status", 'CANCELED');
          UNTIL SalesLine.NEXT = 0;
      UNTIL TestBuffer.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(HandlerFunctionMsg)]
    PROCEDURE CreateReturnOrder@1000000010();
    BEGIN
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::ArchSalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      IF TestBuffer.FIND('-') THEN
        REPEAT

          SalesHeaderArchive.SETRANGE("Document Type", SalesHeaderArchive."Document Type"::Order);
          SalesHeaderArchive.SETRANGE("No.", TestBuffer."Entry Value Code");
          SalesHeaderArchive.FINDFIRST;
          SalesLineArchive.SETRANGE("Document No.", SalesHeaderArchive."No.");
          SalesLineArchive.SETRANGE("Document Type", SalesLineArchive."Document Type"::Order);
          SalesLineArchive.SETRANGE(Type, SalesLineArchive.Type::Item);
          SalesLineArchive.SETFILTER("Line Status", '<>%1', 'CANCELED');
          SalesLineArchive.SETFILTER(SalesLineArchive."Return Type", '%1', SalesLineArchive."Return Type"::" ");
          //SalesLineArchive.SETRANGE("Return Order No.", '');
          SalesLineArchive.FIND('-');
          REPEAT
            ReturnReason.SETRANGE("Return Type", ReturnReason."Return Type"::Return);
            ReturnReason.NEXT(RANDOM(ReturnReason.COUNT));
            SalesLineArchive."Return Type" := SalesLineArchive."Return Type"::Return;
            SalesLineArchive."Return Reason Code" := ReturnReason.Code;
            //SalesLineArchive."Offered prevention" := SalesLineArchive."Offered prevention"::"2";
            SalesLineArchive."Customer Prevention" := SalesLineArchive."Customer Prevention"::Offered;
            SalesLineArchive.MODIFY(TRUE);
          UNTIL SalesLineArchive.NEXT = 0;

          FPCManagement.CreateReturnOrder(SalesHeaderArchive."No.", 1);
          COMMIT;
          // Verifies the Return Order exists
          SalesReturn.RESET;
          SalesReturn.SETRANGE("External Document No.", TestBuffer."Entry Value Code");
          SalesReturn.FIND('-');
          TestFunctions.InsertBuffer(7, SalesReturn."No.");

        UNTIL TestBuffer.NEXT = 0;

      MESSAGE(SalesReturn."No.");
    END;

    [Test]
    PROCEDURE MailReturnOrder@1000000018();
    BEGIN
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::ReturnOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FINDFIRST;
      REPEAT

        SalesReturn.GET(SalesReturn."Document Type"::"Return Order", TestBuffer."Entry Value Code");
        BatchPostDoc.SETRANGE("Document Type", BatchPostDoc."Document Type"::"Return Order");
        BatchPostDoc.SETRANGE("Document No.", TestBuffer."Entry Value Code");
        BatchPostDoc.FINDFIRST;

        CASE BatchPostDoc."Return E-Mail Type" OF

          BatchPostDoc."Return E-Mail Type"::"ReturnLabel&ReturnList":
            BEGIN
              SalesReturn.GET(SalesReturn."Document Type"::"Return Order", BatchPostDoc."Document No.");
              AutomEMailProc.CreateSalesReturnMailLabel(SalesReturn);
            END;

          BatchPostDoc."Return E-Mail Type"::ReturnConfirmation:
            BEGIN
              SalesReturn.GET(SalesReturn."Document Type"::"Return Order", BatchPostDoc."Document No.");
              AutomEMailProc."CreateSalesReturnMailConfirma."(SalesReturn);
              // AutomEMailProc.Proceed_FTTC_TriggerMsg(SalesReturn);
            END;

        ELSE
          ERROR('OPTION NOT AVAILABLE!');

        END;

      UNTIL TestBuffer.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(HandlerConfirmMenu)]
    PROCEDURE ChannelChange@1000000013();
    BEGIN
      // Makes a channel change for SalesHeaders found in Buffer table.
      Initialize;
      TestBuffer.SETRANGE("Entry Type", TestBuffer."Entry Type"::SalesOrder);
      TestBuffer.SETRANGE("Use for Test", TRUE);
      TestBuffer.FINDFIRST;
      REPEAT
        SalesHeader.GET(SalesHeader."Document Type"::Order, TestBuffer."Entry Value Code");
        ChannelMgt.MakeChangeChannel(SalesHeader);
      UNTIL TestBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE "~~ Other Functions ~~"@1000000012();
    BEGIN
      // BELOW HERE THERE ARE NON-TEST FUNCTIONS
    END;

    [Test]
    PROCEDURE ImportItems@1000000014();
    VAR
      LibrarySales@1000000000 : Codeunit 50701;
    BEGIN
      Initialize;
      IF NOT FileSystemObj.FolderExists(FolderPath + 'Item\') THEN
        EXIT;

      MyFile.SETRANGE(Path, FolderPath + 'Item\');
      MyFile.SETRANGE("Is a file", TRUE);
      MyFile.SETFILTER(Name, '*.item');
      MyFile.FIND('-');
      REPEAT
        FileInfoItem.OPEN(FolderPath + 'Item\' + MyFile.Name);
        FileInfoItem.READ(BigRow);
        Item.INIT;
        Item."No." := SELECTSTR(1, BigRow);
        Item.Description := SELECTSTR(2, BigRow);
        Item."Base Unit of Measure" := SELECTSTR(3, BigRow);
        Item."Shipping Type" := SELECTSTR(4, BigRow);
        Item."Item Category Code" := SELECTSTR(5, BigRow);
        Item."Product Group Code" := SELECTSTR(6, BigRow);
        Item."Product Group Code 2" := SELECTSTR(7, BigRow);
        Item."Gen. Prod. Posting Group" := SELECTSTR(8, BigRow);
        Item."VAT Prod. Posting Group" := SELECTSTR(9, BigRow);
        Item."Inventory Posting Group" := SELECTSTR(10, BigRow);
        Item."VAT Bus. Posting Gr. (Price)" := SELECTSTR(11, BigRow);
        Item."Vendor No." := SELECTSTR(12, BigRow);
        Item."Vendor Item No." := SELECTSTR(13, BigRow);
        Item."Global Dimension 2 Code" := COPYSTR(SELECTSTR(14, BigRow), STRLEN(Item."No."));
        Item."Shipping Code" := SELECTSTR(15, BigRow);
        EVALUATE(Item."Automatic Ext. Texts", SELECTSTR(16, BigRow));

        IF NOT Item.INSERT THEN BEGIN
          Item2.GET(Item."No.");
          Item2.Description := SELECTSTR(2, BigRow);
          Item2."Base Unit of Measure" := SELECTSTR(3, BigRow);
          Item2."Shipping Type" := SELECTSTR(4, BigRow);
          Item2."Item Category Code" := SELECTSTR(5, BigRow);
          Item2."Product Group Code" := SELECTSTR(6, BigRow);
          Item2."Product Group Code 2" := SELECTSTR(7, BigRow);
          Item2."Gen. Prod. Posting Group" := SELECTSTR(8, BigRow);
          Item2."VAT Prod. Posting Group" := SELECTSTR(9, BigRow);
          Item2."Inventory Posting Group" := SELECTSTR(10, BigRow);
          Item2."VAT Bus. Posting Gr. (Price)" := SELECTSTR(11, BigRow);
          Item2."Vendor No." := SELECTSTR(12, BigRow);
          Item2."Vendor Item No." := SELECTSTR(13, BigRow);
          Item2."Global Dimension 2 Code" := COPYSTR(SELECTSTR(14, BigRow), STRLEN(Item2."No."));
          Item2."Shipping Code" := SELECTSTR(15, BigRow);
          EVALUATE(Item2."Automatic Ext. Texts", SELECTSTR(16, BigRow));
          IF NOT Item2.MODIFY THEN
            ERROR(Text003 + Item."No.");
        END;

        DefaultDim.INIT;
        DefaultDim."Table ID" := 27;
        DefaultDim."No." := SELECTSTR(1, BigRow);
        DefaultDim."Dimension Code" := 'KTR';
        DefaultDim."Dimension Value Code" := SELECTSTR(1, BigRow);
        DefaultDim."Value Posting" := DefaultDim."Value Posting"::"Same Code";
        IF NOT DefaultDim.INSERT THEN BEGIN
          DefaultDim2.GET(27,SELECTSTR(1, BigRow),'KTR');
          DefaultDim2."Table ID" := 27;
          DefaultDim2."No." := SELECTSTR(1, BigRow);
          DefaultDim2."Dimension Code" := 'KTR';
          DefaultDim2."Dimension Value Code" := SELECTSTR(1, BigRow);
          IF NOT DefaultDim2.MODIFY THEN
            ERROR(Text005, Item."No.");
        END;

        DimValue.INIT;
        DimValue."Dimension Code" := 'KTR';
        DimValue.Code := SELECTSTR(1, BigRow);
        DimValue.Name := 'Artikel ' +  SELECTSTR(1, BigRow);
        DimValue."Dimension Value Type" := DimValue."Dimension Value Type"::Standard;
        DimValue."Shortcut Dimension No." := 2;
        IF NOT DimValue.INSERT THEN BEGIN
          DimValue2.GET('KTR', SELECTSTR(1, BigRow));
          DimValue2."Dimension Code" := 'KTR';
          DimValue2.Code := SELECTSTR(1, BigRow);
          DimValue2.Name := 'Artikel ' +  SELECTSTR(1, BigRow);
          DimValue2."Dimension Value Type" := DimValue."Dimension Value Type"::Standard;
          DimValue2."Shortcut Dimension No." := 2;
          IF NOT DimValue2.MODIFY THEN
            ERROR(Text005, Item."No.");
        END;

        eBayNavCWebshop.RESET;
        eBayNavCWebshop.FINDFIRST;
        REPEAT
          WebshopItem.INIT;
          WebshopItem."Webshop Code" := eBayNavCWebshop.Code;
          WebshopItem.SKU := Item."No.";
          WebshopItem."Item No." := Item."No.";
          IF NOT WebshopItem.INSERT(TRUE) THEN
            IF NOT WebshopItem.MODIFY(TRUE) THEN
              ERROR(Text003 + Item."No.");
        UNTIL eBayNavCWebshop.NEXT = 0;
        IF NOT ItemUoM.GET(Item."No.", 'STK') THEN BEGIN
          ItemUoM."Item No." := Item."No.";
          ItemUoM.Code := 'STK';
          ItemUoM.INSERT(TRUE);
        END;

        LibrarySales.ChangeVendorChannel(LibrarySales.GetVendorNo(Item."No."),'1','GER-3'); // Change Vendors Channels.
      UNTIL MyFile.NEXT = 0;
    END;

    [Test]
    PROCEDURE ImportVendors@1000000021();
    BEGIN
      Initialize;
      IF NOT FileSystemObj.FolderExists(FolderPath + 'Vendor\') THEN
        EXIT;

      MyFile.SETRANGE(Path, FolderPath + 'Vendor\');
      MyFile.SETRANGE("Is a file", TRUE);
      MyFile.SETFILTER(Name, '*.vendor');
      MyFile.FIND('-');
      REPEAT
        FileInfoItem.OPEN(FolderPath + 'Vendor\' + MyFile.Name);
        FileInfoItem.READ(BigRow);
        Vendor.INIT;
        Vendor."No." := SELECTSTR(1, BigRow);
        Vendor.Name := SELECTSTR(2, BigRow);
        Vendor."Gen. Bus. Posting Group" := SELECTSTR(3, BigRow);
        Vendor."VAT Bus. Posting Group" := SELECTSTR(4, BigRow);
        Vendor."Vendor Posting Group" := SELECTSTR(5, BigRow);

        IF NOT Vendor.INSERT THEN BEGIN
          Vendor2.GET(SELECTSTR(1, BigRow));
          Vendor2."No." := SELECTSTR(1, BigRow);
          Vendor2.Name := SELECTSTR(2, BigRow);
          Vendor2."Gen. Bus. Posting Group" := SELECTSTR(3, BigRow);
          Vendor2."VAT Bus. Posting Group" := SELECTSTR(4, BigRow);
          Vendor2."Vendor Posting Group" := SELECTSTR(5, BigRow);
          IF NOT Vendor2.MODIFY THEN
            ERROR(Text003 + Item."No.");
        END;

      // check if other tables need to filled too

      UNTIL MyFile.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGLEntry@2(DocumentNo@1000 : Code[20];AmountV@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
      GeneralLedgerSetup@1004 : Record 98;
      TotalGLAmount@1003 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      TotalGLAmount := 0;
      GLEntry.SETRANGE("Document No.", DocumentNo);
      GLEntry.SETFILTER(Amount, '>0');
      GLEntry.FINDLAST;
      {
      REPEAT
        TotalGLAmount += ABS(GLEntry.Amount);
      UNTIL GLEntry.NEXT = 0;
      }

      Assert.AreNearlyEqual(AmountV, GLEntry.Amount, GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError, GLEntry.FIELDCAPTION(Amount), GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVATEntry@7(DocumentNo@1001 : Code[20];AmountV@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      VATEntry@1002 : Record 254;
      VATAmountL@1000000000 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      VATEntry.SETRANGE("Document No.", DocumentNo);
      IF VATEntry.FIND('-') THEN
        REPEAT
          VATAmountL += VATEntry.Amount;
        UNTIL VATEntry.NEXT = 0;

      Assert.AreNearlyEqual(AmountV, ABS(VATAmountL), GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError, VATEntry.FIELDCAPTION(Amount), VATEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@11(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      CustLedgerEntry@1002 : Record 21;
      GeneralLedgerSetup@1003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      CustLedgerEntry.SETRANGE("Document No.", DocumentNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.CALCFIELDS("Amount (LCY)");
      Assert.AreNearlyEqual(Amount,CustLedgerEntry."Amount (LCY)", GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError, CustLedgerEntry.FIELDCAPTION("Amount (LCY)"), CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyValueEntry@15(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      ValueEntry@1002 : Record 5802;
      SalesAmount@1004 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDSET;
      REPEAT
        SalesAmount += ValueEntry."Sales Amount (Actual)"
      UNTIL ValueEntry.NEXT = 0;
      Assert.AreNearlyEqual(Amount,SalesAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,ValueEntry.FIELDCAPTION("Sales Amount (Actual)"),ValueEntry.TABLECAPTION));
    END;

    [MessageHandler]
    PROCEDURE HandlerFunctionMsg@1000000001(Mensaxe@1000000000 : Text[1024]);
    BEGIN
      EXIT;
    END;

    [ReportHandler]
    PROCEDURE HandlerFunctionRpt@1000000000(VAR ReportNo@1000000000 : Report 50020);
    BEGIN
      EXIT;
    END;

    [ConfirmHandler]
    PROCEDURE HandlerConfirmMenu@1000000003(Question@1000000000 : Text[1024];VAR Reply@1000000001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ReportHandler]
    PROCEDURE HandlerRptItemeBay@1000000020(VAR ReportNo@1000000000 : Report 5095800);
    BEGIN
      EXIT;
    END;

    EVENT ResponseMessage@1000000024::ondataavailable@198();
    BEGIN
    END;

    EVENT ResponseMessage@1000000024::onreadystatechange@-609();
    BEGIN
    END;

    EVENT RequestMessage@1000000025::ondataavailable@198();
    BEGIN
    END;

    EVENT RequestMessage@1000000025::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      H0513       03.09.13  FX        Simulates creation of a webshop sales order
      H0665       02.12.13  FX        Change Channel
      H0939       14.03.14  MM        Testautomation: Main business cases - Channel 3
      H0587       22.07.14  HCN       Redesign Cancellation Process
      H1010       21.07.14  MBY       Cleanup of old shipment posting and invoicing jobs
    }
    END.
  }
}

