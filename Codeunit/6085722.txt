OBJECT Codeunit 6085722 DC Approval Management
{
  OBJECT-PROPERTIES
  {
    Date=17.03.14;
    Time=01:00:00;
    Version List=DCW13.70.00.3.50.07;
  }
  PROPERTIES
  {
    Permissions=TableData 38=rm,
                TableData 454=rimd,
                TableData 455=ri,
                TableData 6085749=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@161024041 : TextConst 'DEU=Es wurden keine offenen Genehmigungspositionen gefunden.;ENU=No open approval entries was found.';
      Text002@161024040 : TextConst 'DEU=Der Beleg wurde nicht gefunden.;ENU=The document was not found.';
      Text003@161024039 : TextConst 'DEU=Die Genehmigung wurde weitergeleitet.;ENU=The approval has been forwarded.';
      Text004@161024038 : TextConst 'DEU=Sie kînnen den %1 nur weiterleiten, wenn Sie der aktive Genehmiger sind.;ENU=You can only forward the %1 if you are the active approver.';
      Text005@161024037 : TextConst 'DEU=Weitergeleitet von %1 zu %2.;ENU=Forwarded from %1 to %2';
      Text006@161024036 : TextConst 'DEU=%1 %2 wurde genehmigt.;ENU=%1 %2 was approved';
      Text007@161024035 : TextConst 'DEU=%1 %2 wurde zurÅckgewiesen;ENU=%1 %2 was rejected';
      Text008@161024016 : TextConst 'DEU=51 %2 wurde zurÅckgeschickt;ENU=%1 %2 was sent back';
      Text009@161024033 : TextConst 'DEU=ZurÅckschicken an %1,Abgewiesen;ENU=Send back to %1,Reject';
      Text010@161024032 : TextConst 'DEU=Sie mÅssen einen Kommentar abgeben.;ENU=You must enter a comment.';
      Text011@161024027 : TextConst 'DEU=Genehmigung forciert durch %1;ENU=Approval forced by %1';
      Text012@161024026 : TextConst 'DEU=Mîchten Sie Genehmigung von %1 %2 forcieren?;ENU=Do you wish to force the approval of %1 %2?';
      Text013@161024025 : TextConst 'DEU=Sie sind nicht berechtigt, diese Aktion durchzufÅhren. \\Um diese Aktion durchzufÅhren, mÅssen Sie die Rolle ''%1'' besitzen.;ENU=You are not allowed to perform this action.\\In order to perform this action you must be member of the role ''%1''.';
      Text014@161024024 : TextConst 'DEU=Betrag exkl. MwSt. stimmt nicht Åberein\;ENU=Amount Excl. VAT does not match\';
      Text015@161024023 : TextConst 'DEU=Betrag inkl. MwSt stimmt nicht Åberein\;ENU=Amount Incl. VAT does not match\';
      Text016@161024022 : TextConst 'DEU=" - importiert: %1\";ENU=" - Imported: %1\"';
      Text017@161024021 : TextConst 'DEU=" - Åbergeben: %1\";ENU=" - Assigned: %1\"';
      Text018@161024020 : TextConst 'DEU=\Mîchten Sie den Beleg dennoch genehmigen?;ENU=\Do you want to approve the document anyway?';
      Text019@161024019 : TextConst 'DEU=Genehmigen && weiterleiten,Ohne Genehmigung weiterleiten,Weiterleiten und Beleg nach Genehmigung an mich zurÅcksenden;ENU=Approve && Forward,Forward without approval,Forward and send the document back to me after approval';
      Text020@161024018 : TextConst 'DEU=Genehmigt und weitergeleitet von %1 zu %2;ENU=Approved and forwarded from %1 to %2';
      Text021@161024017 : TextConst 'DEU=%1 wurde als Genehmiger zugefÅgt;ENU=%1 added as approver';
      Text022@161024015 : TextConst 'DEU=Die Rechnungen wurden automatisch genehmigt.;ENU=The invoice was automatically approved.';
      Text023@161024014 : TextConst 'DEU=Die Gutschrift wurde automatisch genehmigt.;ENU=The credit memo was automatically approved.';
      Text024@161024013 : TextConst 'DEU=%1 %2 wurde auf abwarten gesetzt.;ENU=%1 %2 was put on hold.';
      Text025@161024012 : TextConst 'DEU=%1 %2 ist nicht weiter auf abwarten gesetzt.;ENU=%1 %2 is no longer on hold.';
      PurchDocMgnt@161024042 : Codeunit 6085709;
      WebSearchMgnt@161024043 : Codeunit 6085748;
      Text026@161024028 : TextConst 'DEU=Ihr Genehmigungslimit erlaubt es Ihnen nicht, den %1 zu genehmigen.;ENU=Your approval limit does not allow you to approve this %1.';
      Text027@161024029 : TextConst 'DEU=%1 wurde von %2 im Namen von %3 genehmigt.;ENU=%1 approved by %2 on behalf of %3.';
      Text028@161024030 : TextConst 'DEU=Ihr Genehmigungslimit erlaubt es Ihnen nicht, diesen %1 weiterzuleiten.;ENU=Your approval limit does not allow you to forward this %1.';
      Text029@161024031 : TextConst 'DEU=Importierter Betrag exkl. MwSt stimmt nicht mit dem zugewiesenen Betrag exkl. MwSt Åberein. \\Mîchten Sie den importierten Betrag exkl. MwSt auf %1 (zugewiesener Betrag) setzen?;ENU=Imported amount excl. VAT is not the same as the assigned amount excl. VAT.\\Do you want to set imported amount excl. VAT to %1 (assigned)?';
      Text031@161024044 : TextConst 'DEU=muss offen oder vorhanden sein.;ENU=must be Open or Created.';
      Text032@161024045 : TextConst 'DEU=Mîchten Sie %1 in %2 Ñndern?;ENU=Do you want to change %1 to %2?';
      Text033@161024046 : TextConst 'DEU=Sie kînnen nur einen neuen %1 nach dem offenen %1 hinzufÅgen.;ENU=You can only add a new %1 after the open %1.';
      Text034@161024047 : TextConst 'DEU=Genehmiger %1 wurde hinzugefÅgt.;ENU=Approver %1 was added';
      Text035@161024048 : TextConst 'DEU=Genehmiger %1 in %2 geÑndert.;ENU=Approver %1 changed to %2';
      Text036@161024049 : TextConst 'DEU=Genehmiger %1 wurde gelîscht.;ENU=Approver %1 was deleted';
      Text037@161024050 : TextConst 'DEU=Die Dimensionen in %1 %2, Zeilennummer %3 sind ungÅltig. %4;ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4';

    PROCEDURE PurchDocSubmittingForApproval@161024029(VAR PurchHeader@161024013 : Record 38);
    VAR
      GLSetup@6085573 : Record 98;
      Document@161024017 : Record 6085590;
      AmountExclVAT@161024012 : Decimal;
      AmountInclVAT@161024014 : Decimal;
      LineAmountExclVAT@161024015 : Decimal;
      LineAmountInclVAT@161024016 : Decimal;
    BEGIN
      // *********************************************************************************************************************************
      // This function is called when a purchase document is being submitted and BEFORE approval entries are created
      // *********************************************************************************************************************************
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      IF NOT Document.FINDFIRST THEN
        EXIT;

      PurchDocMgnt.GetPurchStatusAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,LineAmountExclVAT,LineAmountInclVAT);

      GLSetup.GET;

      IF (LineAmountInclVAT <> 0 ) AND (ABS(AmountInclVAT - LineAmountInclVAT) > GLSetup."Max. VAT Difference Allowed") AND
        (AmountExclVAT <> LineAmountExclVAT) AND GUIALLOWED
      THEN BEGIN
        IF CONFIRM(Text029,TRUE,LineAmountExclVAT) THEN BEGIN
          Document."Amount Excl. VAT" := LineAmountExclVAT;
          Document.MODIFY;
        END;
      END;
    END;

    PROCEDURE PurchDocSubmittedForApproval@161024038(VAR PurchHeader@161024012 : Record 38;VAR MessageType@161024024 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval');
    VAR
      Setup@161024013 : Record 6085573;
      GLSetup@6085573 : Record 98;
      PurchLine@161024018 : Record 39;
      PurchLine2@161024029 : Record 39;
      PurchRcptHeader@161024027 : Record 120;
      PurchRcptLine@161024038 : Record 121;
      RetShptHeader@161024028 : Record 6650;
      RetShptLine@1161054000 : Record 6651;
      PurchAllocHeader@161024014 : Record 6085730;
      PurchAllocHeader2@161024016 : Record 6085730;
      PurchAllocLine@161024015 : Record 6085731;
      Document@161024026 : Record 6085590;
      Template@161024025 : Record 6085579;
      ApprovalEntry@161024035 : Record 454;
      DtldApprovalEntry@161024036 : Record 6085744;
      MessageText@161024034 : Text[1024];
      AmountExclVAT@161024022 : Decimal;
      AmountInclVAT@161024021 : Decimal;
      LineAmountExclVAT@161024020 : Decimal;
      LineAmountInclVAT@161024019 : Decimal;
      SourceAmount@161024030 : Decimal;
      NewAmount@161024031 : Decimal;
      HasAmount@161024023 : Boolean;
      SkipAmtExclVATTest@161024032 : Boolean;
      SkipAmtInclVATTest@161024033 : Boolean;
      PurchAllocPosted@161024017 : Boolean;
    BEGIN
      // *********************************************************************************************************************************
      // This function is called when a purchase document is being submitted and AFTER approval entries are created
      // *********************************************************************************************************************************

      Setup.GET;

      PurchDocMgnt.GetPurchStatusAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,LineAmountExclVAT,LineAmountInclVAT);
      PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");

      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      // *********************************************************************************************************************************
      // AUTO APPROVE
      // *********************************************************************************************************************************
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      IF Document.FINDFIRST AND (Document."Template No." <> '') THEN BEGIN
        Template.GET(Document."Template No.");
        IF Template."Purch. Auto App. within Var." THEN BEGIN
          PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchLine.SETRANGE("Document No.",PurchHeader."No.");
          IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
            PurchLine.SETFILTER("Receipt No.",'<>%1','')
          ELSE
            PurchLine.SETFILTER("Return Shipment No.",'<>%1','');

          IF PurchLine.FINDFIRST THEN BEGIN
            REPEAT
              IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN BEGIN
                PurchRcptHeader.GET(PurchLine."Receipt No.");
                PurchRcptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.");
                PurchLine2.GET(PurchLine2."Document Type"::Order,PurchRcptHeader."Order No.",PurchLine."Receipt Line No.");
                IF PurchLine2.Quantity <> 0 THEN
                  SourceAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * PurchRcptLine.Quantity;
              END ELSE BEGIN
                RetShptHeader.GET(PurchLine."Return Shipment No.");
                RetShptLine.GET(PurchLine."Return Shipment No.",PurchLine."Return Shipment Line No.");
                PurchLine2.GET(PurchLine2."Document Type"::"Return Order",RetShptHeader."Return Order No.",
                  PurchLine."Return Shipment Line No.");
                IF PurchLine2.Quantity <> 0 THEN
                  SourceAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * RetShptLine.Quantity;
              END;

              NewAmount += PurchLine."Line Amount";
            UNTIL PurchLine.NEXT = 0;

            IF Template."Purch. Variance Posting Acc." <> '' THEN BEGIN
              PurchLine.RESET;
              PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine.SETRANGE("Document No.",PurchHeader."No.");
              PurchLine.SETRANGE(Type,PurchLine.Type::"G/L Account");
              PurchLine.SETRANGE("No.",Template."Purch. Variance Posting Acc.");
              IF PurchLine.FINDFIRST THEN
                REPEAT
                  NewAmount += PurchLine."Line Amount";
                UNTIL PurchLine.NEXT = 0;
            END;

            IF PurchDocMgnt.AmountsWithinTolerance(Template,SourceAmount,NewAmount) THEN BEGIN
              SkipAmtExclVATTest :=
                (Template."Purch. Amount Approval Valid." =
                  Template."Purch. Amount Approval Valid."::"Only Amount Incl. VAT must match imported amounts") OR
                (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");
              SkipAmtInclVATTest :=
                (Template."Purch. Amount Approval Valid." =
                  Template."Purch. Amount Approval Valid."::"Only Amount Excl. VAT must match imported amounts") OR
                (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");

              IF (NOT SkipAmtExclVATTest) AND (AmountExclVAT <> LineAmountExclVAT) THEN
                MessageText := Text014 + STRSUBSTNO(Text016,AmountExclVAT) + STRSUBSTNO(Text017,LineAmountExclVAT);

              GLSetup.GET;
              IF (NOT SkipAmtInclVATTest) AND
                ((ABS(AmountInclVAT - LineAmountInclVAT) > GLSetup."Max. VAT Difference Allowed"))
              THEN BEGIN
                IF MessageText <> '' THEN
                  MessageText := MessageText + '\';
                MessageText := MessageText + Text015 + STRSUBSTNO(Text016,AmountInclVAT) + STRSUBSTNO(Text017,LineAmountInclVAT);
              END;

              IF MessageText <> '' THEN
                ERROR(MessageText);

              CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
              MessageType := MessageType::AutomaticRelease;

              ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
              ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
              ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
              ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
              ApprovalEntry.DELETEALL;

              DtldApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
              DtldApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
              DtldApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
              DtldApprovalEntry.DELETEALL;

              IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
                CreateAppvlCmtLine(PurchHeader,USERID,Text022)
              ELSE
                CreateAppvlCmtLine(PurchHeader,USERID,Text023);
            END;
          END;
        END;
      END;

      IF NOT Setup."Auto. Post Purch. Allocation" THEN
        EXIT;

      // *********************************************************************************************************************************
      // POST ALLOCATION IF CONFIGURED
      // *********************************************************************************************************************************
      PurchAllocHeader.SETCURRENTKEY("Document Type","Document No.");
      PurchAllocHeader.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchAllocHeader.SETRANGE("Document No.",PurchHeader."No.");
      PurchAllocHeader.SETFILTER(Status,'>%1',PurchAllocHeader.Status::Open);
      IF NOT PurchAllocHeader.ISEMPTY THEN
        EXIT;

      PurchAllocHeader.SETRANGE(Status);
      IF PurchAllocHeader.FINDFIRST THEN
        REPEAT
          PurchAllocLine.SETRANGE("Document No.",PurchAllocHeader."No.");
          PurchAllocLine.SETFILTER(Amount,'>%1',0);
          IF NOT PurchAllocLine.ISEMPTY THEN BEGIN
            PurchAllocHeader2 := PurchAllocHeader;
            CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Post",PurchAllocHeader2);
            PurchAllocPosted := TRUE;
          END;
        UNTIL PurchAllocHeader.NEXT = 0;

      IF Setup."Purch. Alloc. Amounts to Use" = Setup."Purch. Alloc. Amounts to Use"::"Use Lines or Imported Amounts" THEN
        HasAmount := (AmountExclVAT <> 0) OR (LineAmountExclVAT <> 0)
      ELSE
        HasAmount := AmountExclVAT <> 0;

      IF (NOT PurchAllocPosted) AND HasAmount THEN BEGIN
        PurchAllocHeader.INIT;
        PurchAllocHeader."No." := '';
        PurchAllocHeader.INSERT(TRUE);

        PurchAllocHeader.VALIDATE("Document Type",PurchHeader."Document Type");
        PurchAllocHeader.VALIDATE("Document No.",PurchHeader."No.");
        PurchAllocHeader.MODIFY(TRUE);

        PurchAllocHeader.AutoCreateLines;

        CODEUNIT.RUN(CODEUNIT::"Purch. Alloc.-Post",PurchAllocHeader);
      END;

      PurchAllocHeader.SETRANGE(Status,PurchAllocHeader.Status::Open);
      PurchAllocHeader.DELETEALL(TRUE);
    END;

    PROCEDURE Approve@1000000040(VAR PurchHeader@1000000000 : Record 38);
    VAR
      ApprovalEntry@1000000001 : Record 454;
      ApprovalMgt@1000000002 : Codeunit 439;
    BEGIN
      FilterApprovalEntry(PurchHeader,ApprovalEntry,TRUE);
      ApprovalMgt.ApproveApprovalRequest(ApprovalEntry);
      IF ApprovalEntry.ISEMPTY THEN
        MESSAGE(Text006,PurchHeader."Document Type",PurchHeader."No.");
    END;

    PROCEDURE Reject@1000000041(VAR PurchHeader@1000000000 : Record 38);
    VAR
      ApprovalEntry@1000000002 : Record 454;
      ApprovalSetup@1000000003 : Record 452;
      ApprovalMgt@161024013 : Codeunit 439;
      ApprovalCmtMgnt@161024016 : Codeunit 6085600;
      ApprovalComment@1000000004 : Form 660;
      Answer@161024012 : 'Dialog Cancelled,Send Back,Reject';
    BEGIN
      FilterApprovalEntry(PurchHeader,ApprovalEntry,TRUE);

      Answer := SendBackOrRejectApprovalReq(ApprovalEntry);

      IF Answer = Answer::"Dialog Cancelled" THEN
        ERROR('');

      ApprovalSetup.GET;
      IF ApprovalSetup."Request Rejection Comment" THEN
        ApprovalCmtMgnt.RequestComment(PurchHeader);

      IF Answer = Answer::"Send Back" THEN
        SendBackApprovalRequest(ApprovalEntry)
      ELSE
        ApprovalMgt.RejectApprovalRequest(ApprovalEntry);

      WebSearchMgnt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgnt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,USERID);

      IF ApprovalEntry.ISEMPTY THEN BEGIN
        IF Answer = Answer::"Send Back" THEN
          MESSAGE(Text008,PurchHeader."Document Type",PurchHeader."No.")
        ELSE
          MESSAGE(Text007,PurchHeader."Document Type",PurchHeader."No.");
      END;
    END;

    PROCEDURE Delegate@1000000043(VAR PurchHeader@1000000000 : Record 38);
    VAR
      ApprovalEntry@1000000002 : Record 454;
      ApprovalMgt@1000000001 : Codeunit 439;
    BEGIN
      FilterApprovalEntry(PurchHeader,ApprovalEntry,NOT IsApprovalAdminUser(FALSE));
      DelegateApprovalRequest(ApprovalEntry);
      MESSAGE(Text003);
    END;

    PROCEDURE PutOnHold@161024049(VAR PurchHeader@161024012 : Record 38);
    VAR
      ApprovalEntry@161024017 : Record 454;
      ApprovalCmtMgnt@161024013 : Codeunit 6085600;
    BEGIN
      FilterApprovalEntry(PurchHeader,ApprovalEntry,TRUE);
      ApprovalCmtMgnt.RequestComment(PurchHeader);

      PurchHeader."On Hold" := COPYSTR(USERID,1,MAXSTRLEN(PurchHeader."On Hold"));
      PurchHeader.MODIFY(TRUE);

      MESSAGE(Text024,PurchHeader."Document Type",PurchHeader."No.");
    END;

    PROCEDURE RemoveOnHold@161024051(VAR PurchHeader@161024012 : Record 38);
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      FilterApprovalEntry(PurchHeader,ApprovalEntry,TRUE);

      PurchHeader."On Hold" := '';
      PurchHeader.MODIFY(TRUE);

      MESSAGE(Text025,PurchHeader."Document Type",PurchHeader."No.");
    END;

    PROCEDURE GetNextApprover@161024027(PurchHeader@161024012 : Record 38) : Code[20];
    VAR
      ApprovalEntry@161024013 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF ApprovalEntry.FINDFIRST THEN
        EXIT(ApprovalEntry."Approver ID");
    END;

    PROCEDURE SendBackOrRejectApprovalReq@161024025(ApprovalEntry@161024012 : Record 454) : Integer;
    VAR
      ApprovalEntry2@161024013 : Record 454;
      Purchaser@161024014 : Record 13;
      UserSetup@161024016 : Record 91;
      Answer@161024015 : 'Dialog Cancelled,Send Back,Reject';
    BEGIN
      ApprovalEntry2.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry2.SETRANGE("Table ID",ApprovalEntry."Table ID");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETRANGE("Sequence No.",0,ApprovalEntry."Sequence No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry.Status::Approved);
      IF ApprovalEntry2.FINDFIRST THEN BEGIN
        UserSetup.GET(ApprovalEntry2."Approver ID");
        IF Purchaser.GET(UserSetup."Salespers./Purch. Code") THEN
          IF Purchaser.Name = '' THEN
            Purchaser.Name := Purchaser.Code;
        IF Purchaser.Name = '' THEN
          Purchaser.Name := ApprovalEntry2."Approver ID";

        Answer := STRMENU(STRSUBSTNO(Text009,Purchaser.Name));
      END ELSE
        Answer := Answer::Reject;

      EXIT(Answer);
    END;

    PROCEDURE SendBackApprovalRequest@8(ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalSetup@1008 : Record 452;
      PurchHeader@1005 : Record 38;
      AppMgntNotifi@1009 : Codeunit 440;
      SendMail@1002 : Boolean;
    BEGIN
      ApprovalEntry.TESTFIELD("Table ID",DATABASE::"Purchase Header");

      PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");

      ApprovalSetup.GET;
      ApprovalEntry.Status := ApprovalEntry.Status::Created;
      ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
      ApprovalEntry."Last Modified By ID" := USERID;
      ApprovalEntry.MODIFY;

      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",ApprovalEntry."Table ID");
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
      ApprovalEntry.SETRANGE("Sequence No.",0,ApprovalEntry."Sequence No.");

      ApprovalEntry.FINDLAST;

      ApprovalEntry.Status := ApprovalEntry.Status::Open;
      ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
      ApprovalEntry."Last Modified By ID" := USERID;
      ApprovalEntry.MODIFY;
      IF ApprovalSetup.Approvals THEN
        AppMgntNotifi.SendPurchaseApprovalsMail(PurchHeader,ApprovalEntry);
    END;

    PROCEDURE DelegateApprovalRequest@161024013(VAR ApprovalEntry@161024015 : Record 454);
    VAR
      UserSetup@161024014 : Record 91;
      ApprovalSharing@161024012 : Record 6085749;
      Selection@161024021 : 'Cancel,ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';
    BEGIN
      IF NOT (UPPERCASE(USERID) IN [ApprovalEntry."Sender ID",ApprovalEntry."Approver ID"]) THEN BEGIN
        IF NOT IsApprovalAdminUser(FALSE) THEN BEGIN
          FilterApprovalSharingToUser(ApprovalSharing,USERID);
          ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Approver ID");
          IF ApprovalSharing.ISEMPTY THEN
            IsApprovalAdminUser(TRUE);
        END;
      END;

      UserSetup.GET(USERID);

      IF ApprovalEntry."Approver ID" <> UPPERCASE(USERID) THEN
        Selection := Selection::DelegateWithoutApproval
      ELSE
        Selection := STRMENU(Text019);

      IF Selection = Selection::Cancel THEN
        ERROR('');

      IF UserSetup.GET(UserSetup.Substitute) THEN;

      IF FORM.RUNMODAL(FORM::"Purch. Delegate to User",UserSetup) <> ACTION::LookupOK THEN
        ERROR('');

      DelegateApprovalRequest2(ApprovalEntry,Selection-1,UserSetup."User ID",USERID);
    END;

    PROCEDURE DelegateApprovalRequest2@161024043(VAR ApprovalEntry@161024015 : Record 454;ApprovalAction@161024021 : 'ApproveAndDelegate,DelegateWithoutApproval,DelegateAndSendBack';NewUserId@161024018 : Code[20];CurrUserId@161024026 : Code[20]);
    VAR
      PurchHeader@161024012 : Record 38;
      ApprovalSetup@161024013 : Record 452;
      UserSetup@161024014 : Record 91;
      DCSetup@161024017 : Record 6085573;
      ApprovalEntry2@161024024 : Record 454;
      ApprovalEntry3@161024025 : Record 454;
      ApprovalTempl@161024028 : Record 464;
      AppMgntNotifi@161024019 : Codeunit 440;
      ApprovalMgt@161024023 : Codeunit 439;
      AdvAppvlMgt@161024027 : Codeunit 6085746;
      Comment@161024022 : Text[80];
      PrevUserId@161024020 : Code[20];
      NextSeqNo@161024029 : Integer;
      RecreateHierarchy@161024030 : Boolean;
    BEGIN
      DCSetup.GET;
      ApprovalSetup.GET;

      PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");

      PrevUserId := ApprovalEntry."Approver ID";

      IF NewUserId = PrevUserId THEN
        ERROR('');

      UserSetup.GET(NewUserId);

      ApprovalTempl.SETCURRENTKEY("Table ID","Document Type",Enabled);
      ApprovalTempl.SETRANGE("Table ID",ApprovalEntry."Table ID");
      ApprovalTempl.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalTempl.SETRANGE(Enabled,TRUE);
      ApprovalTempl.FINDFIRST;

      ApprovalEntry2 := ApprovalEntry;
      ApprovalEntry2.SETRANGE("Table ID",ApprovalEntry2."Table ID");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry2."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry2."Document No.");

      RecreateHierarchy := (DCSetup."Purch.: Recreate Appvl. Hiera.") AND (PurchHeader."Approval Flow Code" = '');

      CASE ApprovalAction OF
        ApprovalAction::ApproveAndDelegate:
          BEGIN
            // Move pending approval entries forward
            ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry2."Sequence No.");
            ApprovalEntry2.ASCENDING(FALSE);
            IF ApprovalEntry2.FINDFIRST THEN
              REPEAT
                ApprovalEntry3 := ApprovalEntry2;
                ApprovalEntry3."Sequence No." := ApprovalEntry3."Sequence No." + 10000;
                ApprovalEntry3."Last Modified By ID" := CurrUserId;
                ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
                ApprovalEntry3.INSERT;
                ApprovalEntry2.DELETE;
              UNTIL ApprovalEntry2.NEXT = 0;

            IF RecreateHierarchy THEN BEGIN
              ApprovalEntry2.SETRANGE("Sequence No.");
              ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
              ApprovalEntry2.DELETEALL(TRUE);
            END;

            // Insert the new entry
            ApprovalEntry2 := ApprovalEntry;
            ApprovalEntry2.Status := ApprovalEntry2.Status::Created;
            ApprovalEntry2."Sequence No." := ApprovalEntry2."Sequence No." + 10000;
            ApprovalEntry2."Last Modified By ID" := CurrUserId;
            ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
            ApprovalEntry2."Approver ID" := NewUserId;
            ApprovalEntry2."Original Approver ID" := CurrUserId;
            ApprovalEntry2.INSERT;

            IF (ApprovalTempl."Approval Type" <> ApprovalTempl."Approval Type"::"Advanced Approver") AND (RecreateHierarchy) THEN BEGIN
              // Call the standard function to find approvers
              PurchHeader."Purchaser Code" := UserSetup."Salespers./Purch. Code";
              ApprovalMgt.FindApproverPurchase(PurchHeader,ApprovalSetup,ApprovalTempl);
            END;

            ApprovalMgt.SetCurrUserId(CurrUserId);
            ApprovalMgt.ApproveApprovalRequest(ApprovalEntry);

            Comment := STRSUBSTNO(Text020,PrevUserId,NewUserId);
          END;

        ApprovalAction::DelegateWithoutApproval:
          BEGIN
            ApprovalEntry3 := ApprovalEntry;
            ApprovalEntry3."Last Modified By ID" := CurrUserId;
            ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
            ApprovalEntry3."Approver ID" := NewUserId;
            ApprovalEntry3.MODIFY;

            Comment := STRSUBSTNO(Text005,PrevUserId,NewUserId);

            IF (ApprovalTempl."Approval Type" <> ApprovalTempl."Approval Type"::"Advanced Approver") AND (RecreateHierarchy) THEN BEGIN
               // We need to recreate the approval hierarchy so we need to delete all pending approval entries
              ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
              ApprovalEntry2.DELETEALL(TRUE);

              // Call the standard function to find approvers
              PurchHeader."Purchaser Code" := UserSetup."Salespers./Purch. Code";
              ApprovalMgt.FindApproverPurchase(PurchHeader,ApprovalSetup,ApprovalTempl);
            END;
          END;

        ApprovalAction::DelegateAndSendBack:
          BEGIN
            ApprovalEntry2.ASCENDING(FALSE);
            IF ApprovalEntry2.FINDFIRST THEN
              REPEAT
                ApprovalEntry3 := ApprovalEntry2;
                IF ApprovalEntry2."Sequence No." = ApprovalEntry."Sequence No." THEN
                  ApprovalEntry3.Status := ApprovalEntry3.Status::Created;
                ApprovalEntry3."Sequence No." := ApprovalEntry3."Sequence No." + 10000;
                ApprovalEntry3."Last Modified By ID" := CurrUserId;
                ApprovalEntry3."Last Date-Time Modified" := CURRENTDATETIME;
                ApprovalEntry3.INSERT;
                ApprovalEntry2.DELETE;

                IF ApprovalEntry2.NEXT = 0 THEN
                  ApprovalEntry2."Sequence No." := -1;
              UNTIL ApprovalEntry2."Sequence No." < ApprovalEntry."Sequence No.";

            ApprovalEntry2 := ApprovalEntry;
            ApprovalEntry2."Last Modified By ID" := CurrUserId;
            ApprovalEntry2."Last Date-Time Modified" := CURRENTDATETIME;
            ApprovalEntry2."Approver ID" := NewUserId;
            ApprovalEntry2."Original Approver ID" := CurrUserId;
            ApprovalEntry2.INSERT;

            Comment := STRSUBSTNO(Text021,PrevUserId,NewUserId);
          END;
      END;

      IF (ApprovalTempl."Approval Type" <> ApprovalTempl."Approval Type"::"Advanced Approver") AND (RecreateHierarchy) AND
        (ApprovalAction IN [ApprovalAction::ApproveAndDelegate,ApprovalAction::DelegateWithoutApproval])
      THEN BEGIN
        // This will remove dublicated approvers and make sure that approval entries have the correct sequence
        ApprovalEntry2.ASCENDING(TRUE);
        ApprovalEntry3.COPY(ApprovalEntry2);
        ApprovalEntry3.SETFILTER(Status,'%1|%2|%3',ApprovalEntry3.Status::Created,ApprovalEntry3.Status::Open,
          ApprovalEntry3.Status::Approved);

        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
        IF ApprovalEntry2.FINDSET(FALSE,FALSE) THEN
          REPEAT
            ApprovalEntry3.SETFILTER("Sequence No.",'<>%1',ApprovalEntry2."Sequence No.");
            ApprovalEntry3.SETRANGE("Approver ID",ApprovalEntry2."Approver ID");
            IF NOT ApprovalEntry3.ISEMPTY THEN
              ApprovalEntry2.DELETE(TRUE);
          UNTIL ApprovalEntry2.NEXT = 0;

        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
        ApprovalEntry2.FINDFIRST;
        NextSeqNo := ApprovalEntry2."Sequence No." + 10000;

        ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);
        IF ApprovalEntry2.FINDFIRST THEN
          REPEAT
            IF ApprovalEntry2."Sequence No." <> NextSeqNo THEN BEGIN
              ApprovalEntry3 := ApprovalEntry2;
              ApprovalEntry3."Sequence No." := NextSeqNo;
              ApprovalEntry3.INSERT;
              ApprovalEntry2.DELETE(TRUE);
            END;
            NextSeqNo := NextSeqNo + 10000;
          UNTIL ApprovalEntry2.NEXT = 0;
      END;

      CreateAppvlCmtLine(PurchHeader,CurrUserId,Comment);

      IF ApprovalTempl."Approval Type" = ApprovalTempl."Approval Type"::"Advanced Approver" THEN
        AdvAppvlMgt.DelegateApprovalRequest(ApprovalEntry,NewUserId,ApprovalAction = ApprovalAction::ApproveAndDelegate);

      WebSearchMgnt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgnt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,CurrUserId);

      IF ApprovalSetup.Delegations THEN
        AppMgntNotifi.SendPurchaseDelegationsMail(PurchHeader,ApprovalEntry);
    END;

    PROCEDURE ForceApproval@161024026(VAR PurchHeader@161024012 : Record 38);
    VAR
      ApprovalSetup@161024014 : Record 452;
      AppvlTemplate@161024015 : Record 464;
      UserSetup@161024016 : Record 91;
      ApprovalCmtLine@161024013 : Record 455;
      AppTemplate@161024020 : Record 464;
      ApprovalEntry@161024021 : Record 454;
      AppMgnt@161024017 : Codeunit 439;
      ApprovalAmount@161024018 : Decimal;
      ApprovalAmountLCY@161024019 : Decimal;
    BEGIN
      IsApprovalAdminUser(TRUE);

      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);

      IF NOT CONFIRM(Text012,TRUE,PurchHeader."Document Type",PurchHeader."No.") THEN
        ERROR('');

      CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);

      ApprovalSetup.GET;

      AppvlTemplate.SETCURRENTKEY("Table ID","Document Type",Enabled);
      AppvlTemplate.SETRANGE("Table ID",DATABASE::"Purchase Header");
      AppvlTemplate.SETRANGE("Document Type",PurchHeader."Document Type");
      AppvlTemplate.SETRANGE(Enabled,TRUE);
      AppvlTemplate.FINDFIRST;

      UserSetup.GET(USERID);

      AppMgnt.CalcPurchaseDocAmount(PurchHeader,ApprovalAmount,ApprovalAmountLCY);
      AppMgnt.MakeApprovalEntry(
        DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",PurchHeader."Purchaser Code",
        ApprovalSetup,USERID,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
        PurchHeader."Currency Code",AppTemplate,0);

      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.FINDLAST;
      ApprovalEntry.Status := ApprovalEntry.Status::Approved;
      ApprovalEntry.MODIFY;

      ApprovalCmtLine."Table ID" := DATABASE::"Purchase Header";
      ApprovalCmtLine."Document Type" := PurchHeader."Document Type";
      ApprovalCmtLine."Document No." := PurchHeader."No.";
      ApprovalCmtLine."User ID" := USERID;
      ApprovalCmtLine."Date and Time" := CURRENTDATETIME;
      ApprovalCmtLine.Comment := STRSUBSTNO(Text011,USERID);
      ApprovalCmtLine.INSERT(TRUE);
    END;

    PROCEDURE IsApprovalAdminUser@161024028(ShowError@161024014 : Boolean) : Boolean;
    VAR
      DCSetup@161024019 : Record 6085573;
      MemberOf@161024013 : Record 2000000003;
      SIDConversion@161024015 : Record 2000000055;
      WinAccessCtrl@161024016 : Record 2000000053;
      Session@161024017 : Record 2000000009;
      AppAdminPermCheck@161024018 : Record 6085734;
    BEGIN
      DCSetup.GET;
      DCSetup.TESTFIELD("Approval Administrator Role ID");

      IF MemberOf.GET(USERID,DCSetup."Approval Administrator Role ID") THEN
        EXIT(TRUE);

      IF MemberOf.GET(USERID,DCSetup."Approval Administrator Role ID",COMPANYNAME) THEN
        EXIT(TRUE);

      Session.SETRANGE("My Session",TRUE);
      Session.FINDFIRST;

      SIDConversion.SETCURRENTKEY(ID);
      SIDConversion.ID := Session."User ID";;
      IF SIDConversion.FIND THEN BEGIN
        IF WinAccessCtrl.GET(SIDConversion.SID,DCSetup."Approval Administrator Role ID") THEN
          EXIT(TRUE);

        IF WinAccessCtrl.GET(SIDConversion.SID,DCSetup."Approval Administrator Role ID",COMPANYNAME) THEN
          EXIT(TRUE);
      END;

      IF AppAdminPermCheck.WRITEPERMISSION THEN
        EXIT(TRUE);

      IF ShowError THEN
        ERROR(Text013,DCSetup."Approval Administrator Role ID");
    END;

    PROCEDURE SendApprovalEmails@161024015();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Purch. Approval E-Mail");
    END;

    PROCEDURE ShowPurchDocFromApprEntry@161024024(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        FilterPurchHeaderForApprover(ApprovalEntry."Document Type",ApprovalEntry."Approver ID",PurchHeader);
        IF NOT PurchHeader.GET("Document Type","Document No.") THEN
          EXIT;
        CASE "Document Type" OF
          "Document Type"::Quote:
            FORM.RUN(FORM::"Purchase Quote",PurchHeader);
          "Document Type"::Order:
            FORM.RUN(FORM::"Purchase Order",PurchHeader);
          "Document Type"::Invoice:
            ShowDocumentFromApprovalEntry(PurchHeader);
          "Document Type"::"Credit Memo":
            ShowDocumentFromApprovalEntry(PurchHeader);
          "Document Type"::"Blanket Order":
            FORM.RUN(FORM::"Blanket Purchase Order",PurchHeader);
          "Document Type"::"Return Order":
            FORM.RUN(FORM::"Purchase Return Order",PurchHeader);
        END;
      END;
    END;

    PROCEDURE ShowDocumentFromApprovalEntry@1000000031(VAR PurchHeader@1000000001 : Record 38);
    VAR
      Setup@1000000000 : Record 6085573;
    BEGIN
      Setup.GET;

      IF (Setup."Purch: Use TIFF-Form for Appr.") THEN BEGIN
        CASE PurchHeader."Document Type" OF
          PurchHeader."Document Type"::Invoice:
            FORM.RUNMODAL(FORM::"Purch. Invoice With Image",PurchHeader);
          PurchHeader."Document Type"::"Credit Memo":
            FORM.RUNMODAL(FORM::"Purch. Credit Memo With Image",PurchHeader);
        END;
      END ELSE BEGIN
        CASE PurchHeader."Document Type" OF
          PurchHeader."Document Type"::Invoice:
            FORM.RUNMODAL(FORM::"Purchase Invoice",PurchHeader);
          PurchHeader."Document Type"::"Credit Memo":
            FORM.RUNMODAL(FORM::"Purchase Credit Memo",PurchHeader);
        END;
      END;
    END;

    PROCEDURE FilterApprovalEntry@1000000042(VAR PurchHeader@1000000000 : Record 38;VAR ApprovalEntry@1000000001 : Record 454;OnlyCurrUser@161024012 : Boolean);
    VAR
      UserFilter@161024013 : Text[1024];
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      IF OnlyCurrUser THEN BEGIN
        UserFilter := GetApprovalSharingToUserFilter(USERID);
        IF UserFilter = '' THEN
          ApprovalEntry.SETRANGE("Approver ID",USERID)
        ELSE
          ApprovalEntry.SETFILTER("Approver ID",USERID + '|' + UserFilter);
      END;
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF NOT ApprovalEntry.FINDFIRST THEN
        ERROR(Text001);
    END;

    PROCEDURE FilterPurchHeaderForApprover@161024030(DocType@161024016 : Integer;ApproverID@161024012 : Code[20];VAR PurchHeader@161024013 : Record 38);
    VAR
      ApprovalSharing@161024014 : Record 6085749;
      NextApproverId@161024015 : Code[20];
    BEGIN
      FilterApprovalSharingToUser(ApprovalSharing,ApproverID);
      IF DocType = -1 THEN
        PurchHeader.SETFILTER("Document Type",'%1|%2',PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo")
      ELSE
        PurchHeader.SETRANGE("Document Type",DocType);
      IF PurchHeader.FINDFIRST THEN
        REPEAT
          NextApproverId := GetNextApprover(PurchHeader);
          IF NextApproverId = ApproverID THEN
            PurchHeader.MARK(TRUE)
          ELSE BEGIN
            ApprovalSharing.SETRANGE("Owner User ID",NextApproverId);
            IF NOT ApprovalSharing.ISEMPTY THEN
              PurchHeader.MARK(TRUE);
          END;
        UNTIL PurchHeader.NEXT = 0;
      PurchHeader.MARKEDONLY(TRUE);
    END;

    PROCEDURE OnBeforeApproveApprovalRequest@161024036(VAR ApprovalEntry@161024012 : Record 454;CurrUserId@161024027 : Code[20]);
    VAR
      ApprovalEntry2@161024020 : Record 454;
      PurchHeader@161024017 : Record 38;
      PurchLine@161024026 : Record 39;
      Setup@161024018 : Record 6085573;
      GLSetup@6085577 : Record 98;
      Document@161024021 : Record 6085590;
      Template@161024023 : Record 6085579;
      DocDim@161024029 : Record 357;
      DimMgt@161024028 : Codeunit 408;
      MessageText@161024022 : Text[1024];
      AmountExclVAT@161024016 : Decimal;
      AmountInclVAT@161024015 : Decimal;
      LineAmountExclVAT@161024014 : Decimal;
      LineAmountInclVAT@161024013 : Decimal;
      HasMoreApprovers@161024019 : Boolean;
      SkipAmtExclVATTest@161024024 : Boolean;
      SkipAmtInclVATTest@161024025 : Boolean;
      TableIDArr@161024031 : ARRAY [10] OF Integer;
      NumberArr@161024030 : ARRAY [10] OF Code[20];
    BEGIN
      IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN
        EXIT;

      IF NOT PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
        EXIT;

      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      PurchHeader."On Hold" := '';
      PurchHeader.MODIFY;

      PurchDocMgnt.GetPurchStatusAmounts(PurchHeader,AmountExclVAT,AmountInclVAT,LineAmountExclVAT,LineAmountInclVAT);

      Setup.GET;

      IF CurrUserId = '' THEN
        CurrUserId := USERID;

      ApprovalEntry2.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry.Status::Created);
      HasMoreApprovers := ApprovalEntry2.FINDFIRST;

      IF NOT HasUserDocumentPermission(ApprovalEntry,CurrUserId) THEN
        ERROR(STRSUBSTNO(Text026,LOWERCASE(FORMAT(PurchHeader."Document Type"))));


      IF (NOT HasMoreApprovers) AND (Setup."Check Dimensions on Approval") THEN BEGIN
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER(Type,'>%1',PurchLine.Type::" ");
        PurchLine.SETFILTER("No.",'<>%1','');

        IF PurchLine.FINDFIRST THEN
          REPEAT
            DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
            DocDim.SETRANGE("Document Type",PurchHeader."Document Type");
            DocDim.SETRANGE("Document No.",PurchHeader."No.");
            DocDim.SETRANGE("Line No.",PurchLine."Line No.");

            TableIDArr[1] := DimMgt.TypeToTableID3(PurchLine.Type);
            NumberArr[1] := PurchLine."No.";
            TableIDArr[2] := DATABASE::Job;
            NumberArr[2] := PurchLine."Job No.";
            TableIDArr[3] := DATABASE::"Work Center";
            NumberArr[3] := PurchLine."Work Center No.";
            IF NOT DimMgt.CheckDocDimValuePosting(DocDim,TableIDArr,NumberArr) THEN
              ERROR(
                Text037,
                PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No.",DimMgt.GetDimValuePostingErr);
          UNTIL PurchLine.NEXT = 0;
      END;


      IF HasMoreApprovers AND NOT Setup."Purch: Req. Full Amt. Approval" THEN
        EXIT;

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      IF NOT Document.FINDFIRST THEN
        EXIT;

      IF Document."Template No." = '' THEN
        EXIT;

      Template.GET(Document."Template No.");
      SkipAmtExclVATTest :=
        (Template."Purch. Amount Approval Valid." =
          Template."Purch. Amount Approval Valid."::"Only Amount Incl. VAT must match imported amounts") OR
        (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");
      SkipAmtInclVATTest :=
        (Template."Purch. Amount Approval Valid." =
          Template."Purch. Amount Approval Valid."::"Only Amount Excl. VAT must match imported amounts") OR
        (Template."Purch. Amount Approval Valid." = Template."Purch. Amount Approval Valid."::"No match required");

      IF (NOT SkipAmtExclVATTest) AND (AmountExclVAT <> LineAmountExclVAT) THEN
        MessageText := Text014 + STRSUBSTNO(Text016,AmountExclVAT) + STRSUBSTNO(Text017,LineAmountExclVAT);

      GLSetup.GET;
      IF (NOT SkipAmtInclVATTest) AND ((ABS(AmountInclVAT - LineAmountInclVAT) > GLSetup."Max. VAT Difference Allowed")) THEN BEGIN
        IF MessageText <> '' THEN
          MessageText := MessageText + '\';
        MessageText := MessageText + Text015 + STRSUBSTNO(Text016,AmountInclVAT) + STRSUBSTNO(Text017,LineAmountInclVAT);
      END;

      IF MessageText = '' THEN
        EXIT;

      IF GUIALLOWED THEN
        IF IsApprovalAdminUser(FALSE) THEN BEGIN
          MessageText := MessageText + Text018;
          IF NOT CONFIRM(MessageText,FALSE) THEN
            ERROR('');
          EXIT;
        END;

      IF Setup."Purch: Req. Full Amt. Approval" THEN
        ERROR(MessageText)
      ELSE BEGIN
        IF NOT HasMoreApprovers THEN
          ERROR(MessageText);
      END;
    END;

    PROCEDURE OnAfterApproveApprovalRequest@161024018(VAR ApprovalEntry@161024013 : Record 454;CurrUserId@161024012 : Code[20]);
    VAR
      PurchHeader@161024017 : Record 38;
      PurchHeaderArchive@161024016 : Record 5109;
      Setup@161024015 : Record 6085573;
      ArchiveMgnt@161024014 : Codeunit 5063;
      AdvApprovalMgnt@161024018 : Codeunit 6085746;
    BEGIN
      IF ApprovalEntry."Table ID" <> DATABASE::"Purchase Header" THEN
        EXIT;

      IF NOT PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
        EXIT;

      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]) THEN
        EXIT;

      Setup.GET;

      IF CurrUserId = '' THEN
        CurrUserId := USERID;

      IF Setup."Purch: Archive Doc. on Approv." THEN BEGIN
        ArchiveMgnt.StorePurchDocument(PurchHeader,FALSE);

        IF NOT GUIALLOWED THEN BEGIN
          PurchHeaderArchive.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchHeaderArchive.SETRANGE("No.",PurchHeader."No.");
          PurchHeaderArchive.FINDLAST;
          PurchHeaderArchive."Archived By" := CurrUserId;
          PurchHeaderArchive.MODIFY;
        END;
      END;

      IF (ApprovalEntry."Table ID" = DATABASE::"Purchase Header") AND
        (ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver")
      THEN
        AdvApprovalMgnt.ApproveApprovalRequest(ApprovalEntry,CurrUserId);

      IF ApprovalEntry."Approver ID" <> CurrUserId THEN BEGIN
        CreateAppvlCmtLine(PurchHeader,CurrUserId,STRSUBSTNO(Text027,PurchHeader."Document Type",CurrUserId,ApprovalEntry."Approver ID")
      );

        ApprovalEntry."Approver ID" := CurrUserId;
        ApprovalEntry.MODIFY;
      END;

      WebSearchMgnt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,ApprovalEntry."Approver ID");
      WebSearchMgnt.UpdateWebSearchFromAppvlEntry(ApprovalEntry,CurrUserId);
    END;

    PROCEDURE GetNoOfApprovalEntries@1000000035(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      EXIT(ApprovalEntry.COUNT);
    END;

    PROCEDURE DrillDownApprovalEntries@1000000033(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalEntry@1000000001 : Record 454;
    BEGIN
      ApprovalEntry.FILTERGROUP(4);
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalEntry.FILTERGROUP(0);
      FORM.RUN(FORM::"Purch. Approval Req. Entries",ApprovalEntry);
    END;

    PROCEDURE GetNoOfApprovalComments@161024019(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalCmt@1000000001 : Record 455;
    BEGIN
      ApprovalCmt.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalCmt.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalCmt.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalCmt.SETRANGE("Document No.",PurchHeader."No.");
      EXIT(ApprovalCmt.COUNT);
    END;

    PROCEDURE DrillDownApprovalComments@161024017(VAR PurchHeader@1000000000 : Record 38) : Integer;
    VAR
      ApprovalCmt@161024012 : Record 455;
    BEGIN
      ApprovalCmt.FILTERGROUP(4);
      ApprovalCmt.SETCURRENTKEY("Table ID","Document Type","Document No.");
      ApprovalCmt.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalCmt.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalCmt.SETRANGE("Document No.",PurchHeader."No.");
      ApprovalCmt.FILTERGROUP(0);
      FORM.RUN(FORM::"Purch. Approval Comment List",ApprovalCmt);
    END;

    PROCEDURE FilterApprovalSharingToUser@161024012(VAR ApprovalSharing@161024012 : Record 6085749;_UserId@161024013 : Code[20]) : Boolean;
    BEGIN
      ApprovalSharing.RESET;
      ApprovalSharing.SETCURRENTKEY("Shared to User ID");
      ApprovalSharing.SETRANGE("Shared to User ID",_UserId);
      ApprovalSharing.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharing.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      EXIT(ApprovalSharing.FINDFIRST);
    END;

    PROCEDURE FilterApprovalSharingFromUser@161024020(VAR ApprovalSharing@161024012 : Record 6085749;_UserId@161024013 : Code[20]) : Boolean;
    BEGIN
      ApprovalSharing.RESET;
      ApprovalSharing.SETCURRENTKEY("Owner User ID");
      ApprovalSharing.SETRANGE("Owner User ID",_UserId);
      ApprovalSharing.SETRANGE("Valid From",0D,TODAY);
      ApprovalSharing.SETFILTER("Valid To",'%1|%2..',0D,TODAY);
      EXIT(ApprovalSharing.FINDFIRST);
    END;

    PROCEDURE GetApprovalSharingToUserFilter@161024014(_UserId@161024013 : Code[20]) FilterString : Text[1024];
    VAR
      ApprovalSharing@161024012 : Record 6085749;
    BEGIN
      IF NOT FilterApprovalSharingToUser(ApprovalSharing,_UserId) THEN
        EXIT;

      IF ApprovalSharing.FINDFIRST THEN
        REPEAT
          IF FilterString = '' THEN
            FilterString := ApprovalSharing."Owner User ID"
          ELSE
            FilterString := FilterString + '|' + ApprovalSharing."Owner User ID"
        UNTIL ApprovalSharing.NEXT = 0;
    END;

    PROCEDURE BuildApprovalEntriesForUser@161024016(VAR TempApprovalEntry@161024014 : TEMPORARY Record 454;IncludeNormalSharing@161024012 : Boolean;IncludeOutOfOfficeSharing@161024016 : Boolean);
    VAR
      ApprovalEntry@161024013 : Record 454;
      ApprovalSharing@161024015 : Record 6085749;
      NextSeqNo@161024017 : Integer;
      i@161024018 : Integer;
    BEGIN
      TempApprovalEntry.RESET;
      TempApprovalEntry.DELETEALL;

      ApprovalEntry.SETCURRENTKEY("Approver ID");
      ApprovalEntry.SETRANGE("Approver ID",USERID);
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");

      IF ApprovalEntry.FINDFIRST THEN
        REPEAT
          TempApprovalEntry := ApprovalEntry;
          TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::Normal;
          TempApprovalEntry.INSERT;
        UNTIL ApprovalEntry.NEXT = 0;

      IF (NOT IncludeNormalSharing) AND (NOT IncludeOutOfOfficeSharing) THEN
        EXIT;

      IF NOT FilterApprovalSharingToUser(ApprovalSharing,USERID) THEN
        EXIT;

      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);

      ApprovalSharing.FINDFIRST;
      REPEAT
        ApprovalEntry.SETRANGE("Approver ID",ApprovalSharing."Owner User ID");
        IF ApprovalEntry.FINDFIRST THEN BEGIN
          NextSeqNo := NextSeqNo + 1;
          i := 0;
          CLEAR(TempApprovalEntry);
          TempApprovalEntry."Table ID" := DATABASE::"Purchase Header";
          TempApprovalEntry."Document Type" := 6;
          TempApprovalEntry."Sequence No." := NextSeqNo;
          TempApprovalEntry."Approver ID" := ApprovalSharing."Owner User ID";
          IF ApprovalSharing."Sharing Type" = ApprovalSharing."Sharing Type"::Normal THEN
            TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Normal Sharing"
          ELSE
            TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Out of Office Sharing";
          TempApprovalEntry."Temp. Display Sorting" := i;
          TempApprovalEntry.Status := TempApprovalEntry.Status::Open;
          TempApprovalEntry.INSERT(TRUE);

          REPEAT
            i := i + 1;
            TempApprovalEntry := ApprovalEntry;
            IF ApprovalSharing."Sharing Type" = ApprovalSharing."Sharing Type"::Normal THEN
              TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Normal Sharing"
            ELSE
              TempApprovalEntry."Temp. Entry Type" := TempApprovalEntry."Temp. Entry Type"::"Out of Office Sharing";
            TempApprovalEntry."Temp. Display Sorting" := i;
            TempApprovalEntry.INSERT;
          UNTIL ApprovalEntry.NEXT = 0;
        END;
      UNTIL ApprovalSharing.NEXT = 0;
    END;

    PROCEDURE HasUserDocumentPermission@161024022(ApprovalEntry@161024012 : Record 454;CurrUserId@161024013 : Code[20]) IsValidApprover : Boolean;
    VAR
      ApprovalEntry2@161024014 : Record 454;
      ApprovalSharing@161024016 : Record 6085749;
      UserSetup@161024017 : Record 91;
    BEGIN
      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Advanced Approver" THEN
        EXIT(TRUE);

      IF CurrUserId = '' THEN
        CurrUserId := USERID;

      IF ApprovalEntry."Approver ID" = CurrUserId THEN
        EXIT(TRUE);

      ApprovalEntry2.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry."Sequence No.");
      IF NOT ApprovalEntry2.ISEMPTY THEN
        EXIT(TRUE);

      FilterApprovalSharingToUser(ApprovalSharing,CurrUserId);
      ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Approver ID");
      IF ApprovalSharing.FINDFIRST THEN
        REPEAT
          IF ApprovalSharing."Use Owners Limts & Permissions" THEN
            UserSetup.GET(ApprovalSharing."Owner User ID")
          ELSE
            UserSetup.GET(ApprovalSharing."Shared to User ID");

          IF UserSetup."Unlimited Purchase Approval" THEN
            IsValidApprover := TRUE
          ELSE IF UserSetup."Purchase Amount Approval Limit" >= ApprovalEntry."Amount (LCY)" THEN
            IsValidApprover := TRUE
        UNTIL (ApprovalSharing.NEXT = 0) OR IsValidApprover;
    END;

    PROCEDURE SetOutOfOffice@161024023(ApproverId@161024012 : Code[20];ForwardToApproverId@161024015 : Code[20];FromDate@161024013 : Date;ToDate@161024014 : Date);
    VAR
      ApprovalSharing@161024016 : Record 6085749;
    BEGIN
      ApprovalSharing.SETRANGE("Owner User ID",ApproverId);
      ApprovalSharing.SETRANGE("Sharing Type",ApprovalSharing."Sharing Type"::"Out of Office");
      ApprovalSharing.DELETEALL;

      IF ((FromDate = 0D) AND (ToDate = 0D)) OR (ForwardToApproverId = '') THEN
        EXIT;

      ApprovalSharing."Owner User ID" := ApproverId;
      ApprovalSharing."Sharing Type" := ApprovalSharing."Sharing Type"::"Out of Office";
      ApprovalSharing."Valid From" := FromDate;
      ApprovalSharing."Valid To" := ToDate;
      ApprovalSharing."Shared to User ID" := ForwardToApproverId;
      ApprovalSharing."Forward E-mails" := TRUE;
      ApprovalSharing."Use Owners Limts & Permissions" := TRUE;
      ApprovalSharing.INSERT(TRUE);
    END;

    PROCEDURE GetOutOfOffice@161024021(ApproverId@161024014 : Code[20];VAR ForwardToApproverId@161024015 : Code[20];VAR FromDate@161024013 : Date;VAR ToDate@161024012 : Date) : Boolean;
    VAR
      ApprovalSharing@161024016 : Record 6085749;
    BEGIN
      ApprovalSharing.SETRANGE("Owner User ID",ApproverId);
      ApprovalSharing.SETRANGE("Sharing Type",ApprovalSharing."Sharing Type"::"Out of Office");

      IF NOT ApprovalSharing.FINDFIRST THEN
        EXIT(FALSE);

      ForwardToApproverId := ApprovalSharing."Shared to User ID";
      FromDate := ApprovalSharing."Valid From";
      ToDate := ApprovalSharing."Valid To";
      EXIT(TRUE);
    END;

    PROCEDURE CreateAppvlCmtLine@6085573(PurchHeader@6085573 : Record 38;_UserId@6085574 : Code[50];Comment@6085575 : Text[80]);
    VAR
      ApprovalCmtLine@6085576 : Record 455;
    BEGIN
      ApprovalCmtLine."Table ID" := DATABASE::"Purchase Header";
      ApprovalCmtLine."Document Type" := PurchHeader."Document Type";
      ApprovalCmtLine."Document No." := PurchHeader."No.";
      ApprovalCmtLine.Comment := Comment;

      ApprovalCmtLine.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalCmtLine.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalCmtLine.SETRANGE("Document No.",PurchHeader."No.");

      ApprovalCmtLine.INSERT(TRUE);
    END;

    PROCEDURE UpdateApprvlEntriesByApprover@161024031(VAR Entries@161024013 : TEMPORARY Record 6085738);
    VAR
      ApprovalEntry@161024012 : Record 454;
      UserSetup@161024014 : Record 91;
      Purchaser@161024016 : Record 13;
      Name@161024015 : Text[50];
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Approver ID",Status);
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      IF NOT ApprovalEntry.FINDFIRST THEN
        EXIT;

      REPEAT
        ApprovalEntry.SETRANGE("Approver ID",ApprovalEntry."Approver ID");
        Name := '';
        IF UserSetup.GET(ApprovalEntry."Approver ID") THEN
          IF Purchaser.GET(UserSetup."Salespers./Purch. Code") THEN
            Name := Purchaser.Name;

        IF Name = '' THEN
          Name := ApprovalEntry."Approver ID";

        Entries.INIT;
        Entries."Approver ID" := ApprovalEntry."Approver ID";
        Entries.Name := Name;
        Entries.INSERT;

        ApprovalEntry.FINDLAST;
        ApprovalEntry.SETRANGE("Approver ID");
      UNTIL ApprovalEntry.NEXT = 0;

      Entries.SETFILTER("Due Date Filter",'<%1',TODAY);

      IF Entries.FINDFIRST THEN;
    END;

    PROCEDURE FindPurchaseApprovers@161024032(PurchHeader@161024012 : Record 38;ApprovalSetup@161024015 : Record 452;AppTemplate@161024016 : Record 464;ApprovalAmount@161024017 : Decimal;ApprovalAmountLCY@161024018 : Decimal);
    VAR
      AppvlFlowLine@161024014 : Record 6085726;
      UserSetup@161024019 : Record 91;
      AppvlMgnt@161024013 : Codeunit 439;
    BEGIN
      PurchHeader.TESTFIELD("Approval Flow Code");
      AppvlFlowLine.SETRANGE("Approval Flow Code",PurchHeader."Approval Flow Code");
      AppvlFlowLine.FINDFIRST;
      REPEAT
        UserSetup.GET(AppvlFlowLine."Approver ID");
        AppvlMgnt.MakeApprovalEntry(
          DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",PurchHeader."Purchaser Code",
          ApprovalSetup,AppvlFlowLine."Approver ID",AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
          PurchHeader."Currency Code",AppTemplate,0);
      UNTIL AppvlFlowLine.NEXT = 0;
    END;

    PROCEDURE ManuallyInsertAppvlEntry@161024033(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      PurchHeader@161024019 : Record 38;
      ApprovalSetup@161024020 : Record 452;
      AppvlTemplate@161024021 : Record 464;
      ApprovalEntry2@161024013 : Record 454;
      ApprovalEntry3@161024017 : Record 454;
      ApprovalCmtLine@161024025 : Record 455;
      UserSetup@161024022 : Record 91;
      ApprovalMgnt@161024018 : Codeunit 439;
      ApprovalAmount@161024023 : Decimal;
      ApprovalAmountLCY@161024024 : Decimal;
      NewSeqNo@161024016 : Integer;
    BEGIN
      IsApprovalAdminUser(TRUE);

      PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");
      ApprovalEntry2.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETFILTER("Sequence No.",'<%1',ApprovalEntry."Sequence No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
      IF ApprovalEntry2.ISEMPTY THEN BEGIN
        MESSAGE(Text033,LOWERCASE(ApprovalEntry.TABLECAPTION));
        EXIT;
      END;

      ApprovalSetup.GET;

      AppvlTemplate.SETCURRENTKEY("Table ID","Document Type",Enabled);
      AppvlTemplate.SETRANGE("Table ID",DATABASE::"Purchase Header");
      AppvlTemplate.SETRANGE("Document Type",PurchHeader."Document Type");
      AppvlTemplate.SETRANGE(Enabled,TRUE);
      AppvlTemplate.FINDFIRST;

      UserSetup.GET(ApprovalEntry."Approver ID");

      ApprovalMgnt.CalcPurchaseDocAmount(PurchHeader,ApprovalAmount,ApprovalAmountLCY);
      ApprovalMgnt.MakeApprovalEntry(
        DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",PurchHeader."Purchaser Code",
        ApprovalSetup,ApprovalEntry."Approver ID",AppvlTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
        PurchHeader."Currency Code",AppvlTemplate,0);

      ApprovalEntry2.SETRANGE(Status);
      ApprovalEntry2.SETRANGE("Sequence No.");
      ApprovalEntry2.FINDLAST;

      IF ApprovalEntry2."Sequence No." <> ApprovalEntry."Sequence No." THEN BEGIN
        ApprovalEntry3 := ApprovalEntry2;
        ApprovalEntry2."Sequence No." := ApprovalEntry."Sequence No.";
        ApprovalEntry2.INSERT;
        ApprovalEntry3.DELETE;
      END;

      ApprovalEntry := ApprovalEntry2;


      ApprovalCmtLine."Table ID" := DATABASE::"Purchase Header";
      ApprovalCmtLine."Document Type" := ApprovalEntry."Document Type";
      ApprovalCmtLine."Document No." := ApprovalEntry."Document No.";
      ApprovalCmtLine.Comment := COPYSTR(STRSUBSTNO(Text034,ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment));
      ApprovalCmtLine.INSERT(TRUE);
    END;

    PROCEDURE ManuallyEditAppvlEntry@161024034(VAR ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalEntry2@161024013 : Record 454;
      ApprovalCmtLine@161024014 : Record 455;
    BEGIN
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD("Approver ID");

      ApprovalEntry2 := ApprovalEntry;
      IF NOT ApprovalEntry2.FIND THEN
        EXIT;

      IF ApprovalEntry2."Approver ID" <> '' THEN
        IF NOT CONFIRM(Text032,TRUE,ApprovalEntry.FIELDCAPTION("Approver ID"),ApprovalEntry."Approver ID") THEN
          ERROR('');

      IF NOT (ApprovalEntry.Status IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Created]) THEN
        ApprovalEntry.FIELDERROR(Status,Text031);

      ApprovalEntry2.LOCKTABLE;
      ApprovalEntry2.FIND;
      IF ApprovalEntry2."Approver ID" <> ApprovalEntry."Approver ID" THEN BEGIN
        ApprovalCmtLine."Table ID" := DATABASE::"Purchase Header";
        ApprovalCmtLine."Document Type" := ApprovalEntry."Document Type";
        ApprovalCmtLine."Document No." := ApprovalEntry."Document No.";
        ApprovalCmtLine.Comment := COPYSTR(STRSUBSTNO(Text035,ApprovalEntry2."Approver ID",ApprovalEntry."Approver ID"),
          1,MAXSTRLEN(ApprovalCmtLine.Comment));
        ApprovalCmtLine.INSERT(TRUE);

        ApprovalEntry2."Approver ID" := ApprovalEntry."Approver ID";
        ApprovalEntry2.MODIFY;
      END;
    END;

    PROCEDURE ManuallyDeleleteAppvlEntry@161024035(ApprovalEntry@161024012 : Record 454);
    VAR
      ApprovalCmtLine@161024014 : Record 455;
    BEGIN
      IsApprovalAdminUser(TRUE);

      ApprovalEntry.TESTFIELD(Status,ApprovalEntry.Status::Created);

      ApprovalEntry.DELETE(TRUE);

      ApprovalCmtLine."Table ID" := DATABASE::"Purchase Header";
      ApprovalCmtLine."Document Type" := ApprovalEntry."Document Type";
      ApprovalCmtLine."Document No." := ApprovalEntry."Document No.";
      ApprovalCmtLine.Comment := COPYSTR(STRSUBSTNO(Text036,ApprovalEntry."Approver ID"),1,MAXSTRLEN(ApprovalCmtLine.Comment));
      ApprovalCmtLine.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

