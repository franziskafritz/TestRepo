OBJECT Codeunit 50072 SC Utils
{
  OBJECT-PROPERTIES
  {
    Date=01.10.12;
    Time=12:00:00;
    Version List=HME0007;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'DEU=Verkauf,Bestellvorschlagszeile,Einkauf,Artikel Buch.-Blatt,StÅckliste Buch.-Blatt,Artikelposten,FA-Zeile,FA-Komponente,Planungszeile,Planungskomponente,Umlagerung,Serviceauftrag;ENU=Sales,Purchase,Customer';

    PROCEDURE StringTrim@1000000006(inStr@1000000000 : Text[1024]) : Text[1024];
    BEGIN
      EXIT ( DELCHR(inStr, '<>', '  ') );
    END;

    PROCEDURE StringReplace@1000000001(String@1000000000 : Text[1024];OldPattern@1000000001 : Text[1024];NewPattern@1000000002 : Text[1024];MaxLen@1000000009 : Integer;ReplaceAll@1000000004 : Boolean;IgnoreCase@1000000005 : Boolean) Result : Text[1024];
    VAR
      Offset@1000000003 : Integer;
      SearchStr@1000000006 : Text[1024];
      Patt@1000000007 : Text[1024];
      NewStr@1000000008 : Text[1024];
    BEGIN
      IF ( IgnoreCase ) THEN
        BEGIN
          SearchStr := UPPERCASE(String);
          Patt := UPPERCASE(OldPattern);
        END
      ELSE
        BEGIN
          SearchStr := String;
          Patt := OldPattern;
        END;

      NewStr := String;
      Result := '';

      IF ( MaxLen <= 0 ) OR ( MaxLen > 1024 ) THEN
        MaxLen := 1024;

      WHILE ( SearchStr <> '' ) DO
        BEGIN
          Offset := STRPOS(SearchStr, Patt);
          IF ( Offset = 0 ) THEN
          BEGIN
            Result := Result + COPYSTR(NewStr,1, MaxLen-STRLEN(Result));
            EXIT(Result);
          END;
          Result := Result + COPYSTR(COPYSTR(NewStr, 1, Offset - 1) + NewPattern, 1, MaxLen-STRLEN(Result));
          NewStr := COPYSTR(NewStr, Offset + STRLEN(OldPattern), 1024);
          IF ( NOT ReplaceAll ) THEN
          BEGIN
            Result := Result + COPYSTR(NewStr, 1,  MaxLen-STRLEN(Result));
            EXIT(Result);
          END;
          SearchStr := COPYSTR(SearchStr, Offset + STRLEN(Patt), 1024);
        END;
    END;

    PROCEDURE StringToken@1112100009(InStr@1112100000 : Text[250];VAR pos@1112100001 : Integer;KeyDelimiter@1112100003 : Char) Result : Text[250];
    VAR
      StartPos@1112100002 : Integer;
    BEGIN
      IF ( pos < 0 ) THEN pos := 0;
      pos += 1;
      StartPos := pos;
      Result:= '';
      WHILE (pos <= STRLEN(InStr)) AND (InStr[pos] <> KeyDelimiter) DO
        pos += 1;

      Result := COPYSTR(InStr,StartPos,pos-StartPos);
    END;

    PROCEDURE ConvertToXMLKey@18(StringL@1000 : Text[255]) Result : Text[250];
    BEGIN
      Result := CONVERTSTR(StringL, ' ./\&%$ı?!=()[]{}@#~*+,;:<>|', '____________________________');
      Result := StringReplace(Result, 'Ñ', 'ae', 250, TRUE, FALSE);
      Result := StringReplace(Result, 'î', 'oe', 250, TRUE, FALSE);
      Result := StringReplace(Result, 'Å', 'ue', 250, TRUE, FALSE);
      Result := StringReplace(Result, 'é', 'Ae', 250, TRUE, FALSE);
      Result := StringReplace(Result, 'ô', 'Oe', 250, TRUE, FALSE);
      Result := StringReplace(Result, 'ö', 'Ue', 250, TRUE, FALSE);
      Result := StringReplace(Result, '·', 'ss', 250, TRUE, FALSE);
    END;

    PROCEDURE XmlAddElement@1(VAR Node@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";ElementName@1002 : Text[254];ElementValue@1003 : Text[1024];VAR NewNode@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode") @1000 : Boolean;
    BEGIN
      NewNode := Node.ownerDocument.createNode('element', ElementName, '');

      IF ISCLEAR(NewNode) THEN
        EXIT(FALSE);

      IF ( ElementValue <> '' ) THEN
        NewNode.text := ElementValue;

      Node.appendChild(NewNode);
      EXIT(TRUE);
    END;

    PROCEDURE XmlAddAttribute@1000000003(VAR Node@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";AttName@1002 : Text[260];AttValue@1003 : Text[260]) @1000 : Boolean;
    VAR
      NewAttribute@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      NewAttribute := Node.ownerDocument.createAttribute(AttName);

      IF ISCLEAR(NewAttribute) THEN
        EXIT(FALSE);

      IF ( AttValue <> '' ) THEN
        NewAttribute.nodeValue := AttValue;

      Node.attributes.setNamedItem(NewAttribute);
      EXIT(TRUE);
    END;

    PROCEDURE XmlGetNode@1112100004(XmlRootNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";NodePath@1001 : Text[250];VAR XmlNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode") : Boolean;
    BEGIN
      IF ISCLEAR(XmlRootNode) THEN
        EXIT(FALSE);  // no node no fun =======>

      XmlNode := XmlRootNode.selectSingleNode(NodePath);

      IF ISCLEAR(XmlNode) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE XmlGetNodeText@1112100002(XmlRootNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";NodePath@1001 : Text[250];MaxLen@1000000000 : Integer) : Text[250];
    VAR
      XmlNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      IF XmlGetNode(XmlRootNode, NodePath, XmlNode) THEN
        BEGIN
          IF MaxLen > 0 THEN
            EXIT(COPYSTR(XmlNode.text, 1, MaxLen))
          ELSE
            EXIT(XmlNode.text);
        END
      ELSE
        EXIT('');
    END;

    PROCEDURE XmlGetAttributeText@1112100003(XmlNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";AttrName@1112100000 : Text[250];MaxLen@1000000000 : Integer) : Text[250];
    VAR
      XmlAttr@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF85-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMAttribute";
    BEGIN
      IF ISCLEAR(XmlNode) THEN
        EXIT('');

      XmlAttr := XmlNode.attributes.getNamedItem(AttrName);

      IF ISCLEAR(XmlAttr) THEN
        EXIT('')
      ELSE
        BEGIN
          IF MaxLen > 0 THEN
            EXIT(COPYSTR(XmlAttr.text, 1, MaxLen))
          ELSE
            EXIT(XmlAttr.text);
        END;
    END;

    PROCEDURE XmlGetNodes@1112100001(XMLRootNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";NodePath@1001 : Text[250];VAR ReturnedXMLNodeList@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList") : Boolean;
    BEGIN
      IF ISCLEAR(XMLRootNode) THEN
        EXIT(FALSE); // no node no fun =======>

      ReturnedXMLNodeList := XMLRootNode.selectNodes(NodePath);

      IF ISCLEAR(ReturnedXMLNodeList) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE ValueToXmlStr@1000000004(Value@1000000000 : Variant) : Text[1024];
    BEGIN
      EXIT ( FORMAT(Value, 0, 9) );  // Wandel in Xml-Format ab Nav 4.0 !!
    END;

    PROCEDURE TextToDecimal@3(VarText@1000 : Text[250]) : Decimal;
    VAR
      VarDecimal@1001 : Decimal;
      BaseVarDecimal@1002 : Decimal;
      DecimalSymbol@1003 : Text[1];
    BEGIN
      IF VarText = '' THEN
        EXIT(0);
      BaseVarDecimal := 1.2;
      DecimalSymbol := COPYSTR(FORMAT(BaseVarDecimal),2,1);
      IF DecimalSymbol = ',' THEN
        VarText := CONVERTSTR(VarText,'.',DecimalSymbol)
      ELSE
        VarText := CONVERTSTR(VarText,',',DecimalSymbol);

      EVALUATE(VarDecimal,VarText);

      EXIT(VarDecimal);
    END;

    PROCEDURE TextToBoolean@15(VarText@1000 : Text[10]) : Boolean;
    VAR
      VarBoolean@1001 : Boolean;
    BEGIN
      CASE UPPERCASE(COPYSTR(VarText, 1,1)) OF
        '1', 'Y', 'T', 'J', '+' : VarBoolean := TRUE;
        '0', 'N', 'F', '-'      : VarBoolean := FALSE;
        ELSE IF NOT EVALUATE(VarBoolean,VarText) THEN
              VarBoolean := FALSE;
      END;

      EXIT(VarBoolean);
    END;

    PROCEDURE TextToDate@1000000000(VarText@1000 : Text[30]) : Date;
    VAR
      SepPos@1000000000 : Integer;
      D@1000000002 : Date;
    BEGIN
      IF (VarText = '') THEN
        EXIT(0D);

      // ggfs. aus Datetime nur Dateanteil, Trennung durch ' ' oder 'T'
      SepPos := STRPOS(VarText,'T');
      IF SepPos <= 0 THEN
        SepPos := STRPOS(VarText,' ');
      IF SepPos > 0 THEN
        VarText := COPYSTR(VarText, 1, SepPos-1);

      //Convert To Date  XML-Format (9)
      IF EVALUATE(D, VarText, 9) THEN
        EXIT(D)
      ELSE
        EXIT(0D);
    END;

    PROCEDURE TextToTime@19(VarText@1000 : Text[30]) : Time;
    VAR
      VarTime@1001 : Time;
      SepPos@1000000000 : Integer;
    BEGIN
      // ggfs. aus Datetime nur Timeanteil, Trennung durch ' ' oder 'T'
      SepPos := STRPOS(VarText,'T');
      IF SepPos <= 0 THEN
        SepPos := STRPOS(VarText,' ');

      IF SepPos > 0 THEN
        VarText := COPYSTR(VarText, (SepPos+1), 12);

      IF EVALUATE(VarTime,VarText, 9) THEN // XML-Format(9)
        EXIT(VarTime)
      ELSE
        EXIT(0T);
    END;

    PROCEDURE TextToDateTime@1000000005(VarText@1000 : Text[30]) : DateTime;
    VAR
      dt@1001 : DateTime;
    BEGIN
      IF (VarText = '') THEN
        EXIT(0DT);

      //Convert To DateTime XML-Format(9)
      IF EVALUATE(dt, VarText, 9) THEN
        EXIT(dt)
      ELSE
        EXIT(0DT);
    END;

    PROCEDURE TextToOption@1000000009(VarText@1000 : Text[250]) : Integer;
    BEGIN
      EXIT(TextToInteger(VarText));
    END;

    PROCEDURE TextToInteger@1000000013(VarText@1000 : Text[250]) : Integer;
    VAR
      VarInteger@1001 : Integer;
    BEGIN
      IF VarText = '' THEN
        EXIT(0);
      EVALUATE(VarInteger,VarText);
      EXIT(VarInteger);
    END;

    PROCEDURE CreateSCText@1000000002(SCQueueLogV@1001 : Record 50103) @1000 : Text[80];
    VAR
      SourceType@1002 : ' ,Sales,Purchase,Customer';
      CalcSalesLine@1000000004 : Record 37;
      CalcPurchLine@1000000003 : Record 39;
      CalcItemJnlLine@1000000002 : Record 83;
      CalcProdOrderLine@1000000001 : Record 5406;
      CalcJobJnlLine@1000000000 : Record 210;
    BEGIN
      WITH SCQueueLogV DO BEGIN
        CASE "Source Type" OF
          DATABASE::Customer:
            BEGIN
              SourceType := SourceType::Customer;
              IF "Test Mail" THEN
                EXIT(STRSUBSTNO('%1 %2 %3','TEST:',SELECTSTR(SourceType,Text001),
                  "Source ID"))
              ELSE
                EXIT(STRSUBSTNO('%1 %2',SELECTSTR(SourceType,Text001),
                  "Source ID"))
            END;
          DATABASE::"Sales Header",DATABASE::"Sales Line":
            BEGIN
              SourceType := SourceType::Sales;
              CalcSalesLine."Document Type" := "Source Subtype";
              IF "Test Mail" THEN
                EXIT(STRSUBSTNO('%1 %2 %3 %4','TEST:',SELECTSTR(SourceType,Text001),
                  CalcSalesLine."Document Type","Source ID"))
              ELSE
                EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,Text001),
                  CalcSalesLine."Document Type","Source ID"))
            END;
          DATABASE::"Purchase Header",DATABASE::"Purchase Line":
            BEGIN
              SourceType := SourceType::Purchase;
              CalcPurchLine."Document Type" := "Source Subtype";
              IF "Test Mail" THEN
                EXIT(STRSUBSTNO('%1 %2 %3 %4','TEST:',SELECTSTR(SourceType,Text001),
                  CalcPurchLine."Document Type","Source ID"))
              ELSE
                EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,Text001),
                  CalcPurchLine."Document Type","Source ID"));
            END;
        END;

        EXIT('');
      END;
    END;

    PROCEDURE CreateSCArchText@1000000007(SCQueueLogV@1001 : Record 50103) @1000 : Text[80];
    VAR
      SourceType@1002 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry,Prod. Order Line,Prod. Order Component,Planning Line,Planning Component,Transfer,Service Order,Job Journal';
      CalcSalesLine@1000000004 : Record 37;
      CalcPurchLine@1000000003 : Record 39;
      CalcItemJnlLine@1000000002 : Record 83;
      CalcProdOrderLine@1000000001 : Record 5406;
      CalcJobJnlLine@1000000000 : Record 210;
    BEGIN
      WITH SCQueueLogV DO BEGIN
        CASE "Source Type" OF
          DATABASE::"Sales Header",DATABASE::"Sales Line":
            BEGIN
              SourceType := SourceType::Sales;
              CalcSalesLine."Document Type" := "Source Subtype";
              IF "Test Mail" THEN
                EXIT(STRSUBSTNO('%1 %2 %3 %4','TEST:',SELECTSTR(SourceType,Text001),
                  CalcSalesLine."Document Type","Source ID"))
              ELSE
                EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,Text001),
                  CalcSalesLine."Document Type","Source ID"))
            END;
          DATABASE::"Purchase Header",DATABASE::"Purchase Line":
            BEGIN
              SourceType := SourceType::Purchase;
              CalcPurchLine."Document Type" := "Source Subtype";
              IF "Test Mail" THEN
                EXIT(STRSUBSTNO('%1 %2 %3 %4','TEST:',SELECTSTR(SourceType,Text001),
                  CalcPurchLine."Document Type","Source ID"))
              ELSE
                EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,Text001),
                  CalcPurchLine."Document Type","Source ID"));
            END;
        END;

        EXIT('');
      END;
    END;

    PROCEDURE CheckSOAPToolkitExist@1000000008() : Boolean;
    VAR
      SoapHttpConnectorL@1000000001 : Automation "{46BF17C2-9257-11D5-87EA-00B0D0BE6479} 3.0:{0AF40C55-9257-11D5-87EA-00B0D0BE6479}:'Microsoft Soap WinHttp Connector Type Library (v3.0)'.WinHttpConnector30";
      SoapSerializerL@1000000000 : Automation "{91147A58-DFE4-47C0-8E76-987FC1A6001B} 3.0:{B76585B0-9257-11D5-87EA-00B0D0BE6479}:'Microsoft Soap Type Library v3.0'.SoapSerializer30";
    BEGIN
      CLEAR(SoapHttpConnectorL);
      CLEAR(SoapSerializerL);

      IF NOT CREATE(SoapHttpConnectorL) THEN
        EXIT(FALSE);

      IF NOT CREATE(SoapSerializerL) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________

      *** Module: Shop Connector - Create Shipping Mails ***
      H0007       27.09.12 ABR       Created

      *** Module: Miscellaneous
    }
    END.
  }
}

