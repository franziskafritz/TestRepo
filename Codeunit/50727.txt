OBJECT Codeunit 50727 Unit Test - Custom
{
  OBJECT-PROPERTIES
  {
    Date=14.07.15;
    Time=14:37:27;
    Modified=Yes;
    Version List=HME4420,T0082;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000000000 : Codeunit 50200;
      TextAssertAreEqual@1000000002 : TextConst 'ENU=%1 should be equal to %2!';
      TextAssertAreNotEqual@1000000001 : TextConst 'ENU=%1 should not be equal to %2!';
      LibrarySCM@1000000003 : Codeunit 50210;
      UnitTestMacro@1000000004 : TextConst 'ENU=UNITTEST';
      AssertNoMacro@1000000005 : TextConst 'ENU="ASSERT %1: "';
      TextErrorNotExist@1000000006 : TextConst 'ENU=The record does not exist!';
      TextErrorExist@1000000007 : TextConst 'ENU=The record exists!';

    [Test]
    PROCEDURE Template@1000000001();
    BEGIN
      //Initalize and Prepare

      //Run Code

      //Check Results
    END;

    [Test]
    PROCEDURE T20225_OnDelete@1000000000();
    VAR
      BatchPostHeader@1000000000 : Record 50225;
      BatchPostLine@1000000001 : Record 50226;
    BEGIN
      //Initalize and Prepare
      IF BatchPostHeader.GET(BatchPostHeader."Document Type"::Quote,'TEST',1) THEN
        BatchPostHeader.DELETE;
      BatchPostHeader.INIT;
      BatchPostHeader."Document Type" := BatchPostHeader."Document Type"::Quote;
      BatchPostHeader."Document No." := 'TEST';
      BatchPostHeader."Process ID" := 1;
      BatchPostHeader.INSERT;

      BatchPostLine.INIT;
      BatchPostLine."Document Type" := BatchPostHeader."Document Type"::Quote;
      BatchPostLine."Document No." := 'TEST';
      BatchPostLine."Line No." := 10000;
      BatchPostLine.INSERT;

      BatchPostLine.INIT;
      BatchPostLine."Document Type" := BatchPostHeader."Document Type"::Quote;
      BatchPostLine."Document No." := 'TEST';
      BatchPostLine."Line No." := 20000;
      BatchPostLine.INSERT;

      //Run Code
      BatchPostHeader.DELETE(TRUE);

      //Check Results

      Assert.IsFalse(BatchPostHeader.GET(BatchPostHeader."Document Type"::Quote,'TEST'),'Deleteion of header failed');
      Assert.IsFalse(BatchPostLine.GET(BatchPostHeader."Document Type"::Quote,'TEST',10000),'Deleteion of lines failed');
      Assert.IsFalse(BatchPostLine.GET(BatchPostHeader."Document Type"::Quote,'TEST',20000),'Deleteion of lines failed');
    END;

    [Test]
    PROCEDURE T50225_CheckIfLineExists@1000000002();
    VAR
      BatchPostHeader@1000000001 : Record 50225;
      BatchPostLine@1000000000 : Record 50226;
      SalesLine@1000000002 : Record 37;
    BEGIN
      //Initalize and Prepare
      BatchPostHeader.INIT;
      BatchPostHeader."Document Type" := BatchPostHeader."Document Type"::Quote;
      BatchPostHeader."Document No." := 'TEST';
      BatchPostHeader."Posting Type" := BatchPostHeader."Posting Type"::Ship;



      SalesLine.INIT;
      SalesLine."Document Type" := BatchPostHeader."Document Type"::Quote;
      SalesLine."Document No." := 'TEST';
      SalesLine."Line No." := 20000;


      //Run Code
      //T0082 08.12.14 TEC-GH ++++++++++++++++++++++++++++++++++++++++++++++++++
      // Extend Manual Parameter
      Assert.IsFalse(BatchPostHeader.CheckIfLineExists(SalesLine,BatchPostHeader."Posting Type"::Ship,FALSE),'BPH does Not exists!');
      //T0082 08.12.14 TEC-GH --------------------------------------------------
      BatchPostHeader.INSERT;
      //T0082 08.12.14 TEC-GH ++++++++++++++++++++++++++++++++++++++++++++++++++
      // Extend Manual Parameter
      Assert.IsTrue(BatchPostHeader.CheckIfLineExists(SalesLine,BatchPostHeader."Posting Type"::Ship,FALSE),'Batch Post Header exists!')
      ;
      //T0082 08.12.14 TEC-GH --------------------------------------------------
      //Check Results


      BatchPostHeader.DELETE;
    END;

    [Test]
    PROCEDURE C50087_UseOldReserve@1000000003();
    VAR
      SalesHeaderL@1000000001 : Record 36;
      FPCInterfaceSetupL@1000000003 : Record 50014;
      InterfaceProcessMgtL@1000000000 : Codeunit 50087;
      LibraryResource@1000000002 : Codeunit 50205;
    BEGIN
      //Initalize and Prepare
      SalesHeaderL.INIT;
      SalesHeaderL."Document Type" := SalesHeaderL."Document Type"::Order;
      SalesHeaderL."No." := 'UNITTEST001';
      SalesHeaderL.Kommissionierung := TRUE;
      SalesHeaderL.INSERT(TRUE);

      //Run Code
      FPCInterfaceSetupL.SETRANGE("Interface Process Log Active", FALSE);
      IF NOT FPCInterfaceSetupL.FINDFIRST THEN
        Assert.Fail(STRSUBSTNO('%1 table is empty!',FPCInterfaceSetupL.TABLECAPTION));

      //Check Results
      Assert.AreEqual(
        NOT FPCInterfaceSetupL."Interface Process Log Active",
        InterfaceProcessMgtL.UseOldReserve(SalesHeaderL, FPCInterfaceSetupL.Code),
        STRSUBSTNO('Output of UseOldReserve function must be %1!', FPCInterfaceSetupL."Interface Process Log Active"));

      FPCInterfaceSetupL.RESET;
      FPCInterfaceSetupL.SETRANGE("Interface Process Log Active", TRUE);
      IF NOT FPCInterfaceSetupL.FINDFIRST THEN
        Assert.Fail(STRSUBSTNO('%1 table is empty!',FPCInterfaceSetupL.TABLECAPTION));

      Assert.AreEqual(
        NOT FPCInterfaceSetupL."Interface Process Log Active",
        InterfaceProcessMgtL.UseOldReserve(SalesHeaderL, FPCInterfaceSetupL.Code),
        STRSUBSTNO('Output of UseOldReserve function must be %1!', FPCInterfaceSetupL."Interface Process Log Active"));

      SalesHeaderL.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE C50087_UseOldPicking@1000000004();
    VAR
      SalesHeaderL@1000000001 : Record 36;
      FPCInterfaceSetupL@1000000003 : Record 50014;
      InterfaceProcessMgtL@1000000000 : Codeunit 50087;
      LibraryResource@1000000002 : Codeunit 50205;
    BEGIN
      //Initalize and Prepare

      SalesHeaderL.INIT;
      SalesHeaderL."Document Type" := SalesHeaderL."Document Type"::Order;
      SalesHeaderL."No." := 'UNITTEST001';
      SalesHeaderL.Kommissionierung := TRUE;
      SalesHeaderL.INSERT(TRUE);

      //Run Code
      FPCInterfaceSetupL.SETRANGE("Interface Process Log Active", FALSE);
      IF NOT FPCInterfaceSetupL.FINDFIRST THEN
        Assert.Fail(STRSUBSTNO('%1 table is empty!',FPCInterfaceSetupL.TABLECAPTION));

      //Check Results
      {
      Assert.AreEqual(
        NOT FPCInterfaceSetupL."Interface Process Log Active",
        InterfaceProcessMgtL.UseOldPicking(SalesHeaderL, FPCInterfaceSetupL.Code),
        STRSUBSTNO('Output of UseOldReserve function must be %1!', FPCInterfaceSetupL."Interface Process Log Active"));
      }
      FPCInterfaceSetupL.RESET;
      FPCInterfaceSetupL.SETRANGE("Interface Process Log Active", TRUE);
      IF NOT FPCInterfaceSetupL.FINDFIRST THEN
        Assert.Fail(STRSUBSTNO('%1 table is empty!',FPCInterfaceSetupL.TABLECAPTION));

      {
      Assert.AreEqual(
        NOT FPCInterfaceSetupL."Interface Process Log Active",
        InterfaceProcessMgtL.UseOldPicking(SalesHeaderL, FPCInterfaceSetupL.Code),
        STRSUBSTNO('Output of UseOldReserve function must be %1!', FPCInterfaceSetupL."Interface Process Log Active"));
      }
      SalesHeaderL.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE CU50029_CountWHLFSales@1000000015();
    VAR
      WHLFSalesLogL@1000000001 : Record 50312;
      Home24FTPFuncsL@1000000000 : Codeunit 50029;
      ExpectedValueL@1000000002 : Integer;
    BEGIN

      //Initalize and Prepare
      WHLFSalesLogL.INIT;
      WHLFSalesLogL."Entry No." := RANDOM(10000000);
      WHLFSalesLogL."Action Type":= WHLFSalesLogL."Action Type"::Export;
      WHLFSalesLogL."Action Subtype" := WHLFSalesLogL."Action Subtype"::KAD;
      WHLFSalesLogL."Processing Date" := TODAY;
      WHLFSalesLogL."Processing Time" := TIME;

      //Run Code
      ExpectedValueL := Home24FTPFuncsL.CountWHLFSales;
      WHLFSalesLogL.INSERT;

      //Check Results
      Assert.AreEqual(
        ExpectedValueL+1,
        Home24FTPFuncsL.CountWHLFSales,
        STRSUBSTNO(
          TextAssertAreEqual,
          ExpectedValueL+1,
          Home24FTPFuncsL.CountWHLFSales));
      //Cleanup
      WHLFSalesLogL.DELETE;

      //Check Results
      Assert.AreNotEqual(
        ExpectedValueL+1,
        Home24FTPFuncsL.CountWHLFSales,
        STRSUBSTNO(
          TextAssertAreNotEqual,
          ExpectedValueL+1,
          Home24FTPFuncsL.CountWHLFSales));
    END;

    [Test]
    PROCEDURE CU50029_CountWHLFPurchase@1000000014();
    VAR
      WHLFPurchLogL@1000000002 : Record 50313;
      Home24FTPFuncsL@1000000001 : Codeunit 50029;
      ExpectedValueL@1000000000 : Integer;
    BEGIN
      //Initalize and Prepare
      WHLFPurchLogL.INIT;
      WHLFPurchLogL."Entry No." := RANDOM(10000000);
      WHLFPurchLogL."Action Type":= WHLFPurchLogL."Action Type"::Export;
      WHLFPurchLogL."Action Subtype" := WHLFPurchLogL."Action Subtype"::WEA;
      WHLFPurchLogL."Processing Date" := TODAY;
      WHLFPurchLogL."Processing Time" := TIME;

      //Run Code
      ExpectedValueL := Home24FTPFuncsL.CountWHLFSales;
      WHLFPurchLogL.INSERT;

      //Check Results
      Assert.AreEqual(
        ExpectedValueL+1,
        Home24FTPFuncsL.CountWHLFPurch,
        STRSUBSTNO(
          TextAssertAreEqual,
          ExpectedValueL+1,
          Home24FTPFuncsL.CountWHLFPurch));
      //Cleanup
      WHLFPurchLogL.DELETE;

      //Check Results
      Assert.AreNotEqual(
        ExpectedValueL+1,
        Home24FTPFuncsL.CountWHLFPurch,
        STRSUBSTNO(
          TextAssertAreNotEqual,
          ExpectedValueL+1,
          Home24FTPFuncsL.CountWHLFPurch));
    END;

    [Test]
    PROCEDURE T38_RhenusWEAAllowed@1000000005();
    VAR
      ItemL@1000000001 : Record 27;
      ItemUnitOfMeasureL@1000000003 : Record 5404;
      UnitOfMeasureL@1000000004 : Record 204;
      LocationL@1000000002 : Record 14;
      PurchaseLineL@1000000000 : Record 39;
      PurchaseHeaderL@1000000005 : Record 38;
      CodeToUseL@1000000007 : Code[10];
      IsAllowedL@1000000006 : Boolean;
    BEGIN
      //H1796 17.11.14 DMA +++++++++++++++++++++++++
      //Initalize and Prepare
      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),1,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := 'TEST';
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      LocationL.SETRANGE("Rhenus Location",TRUE);
      LocationL.FINDFIRST;

      PurchaseHeaderL.INIT;
      PurchaseHeaderL."Document Type" := PurchaseHeaderL."Document Type"::Order;
      PurchaseHeaderL."No." := CodeToUseL;
      PurchaseHeaderL.INSERT;

      PurchaseLineL.INIT;
      PurchaseLineL."Document Type" := PurchaseLineL."Document Type"::Order;
      PurchaseLineL."Document No." := CodeToUseL;
      PurchaseLineL."Line No." := 10000;
      PurchaseLineL.Type := PurchaseLineL.Type::Item;
      PurchaseLineL."No." := CodeToUseL;
      PurchaseLineL."Location Code" := LocationL.Code;
      PurchaseLineL.INSERT;

      //Check Results
      IsAllowedL := PurchaseHeaderL.RhenusWEAAllowed(PurchaseLineL);

      //Cleanup
      PurchaseLineL.DELETE;
      PurchaseHeaderL.DELETE;
      UnitOfMeasureL.DELETE;
      ItemL.DELETE;
      //LocationL.DELETE;


      //Check Results
      Assert.IsTrue(IsAllowedL,'Wrong Result!');
      //H1796 17.11.14 DMA -------------------------
    END;

    [Test]
    PROCEDURE T38_LudwigsfeldeWEAAllowed@1000000006();
    VAR
      ItemL@1000000007 : Record 27;
      ItemUnitOfMeasureL@1000000006 : Record 5404;
      UnitOfMeasureL@1000000005 : Record 204;
      LocationL@1000000004 : Record 14;
      PurchaseLineL@1000000003 : Record 39;
      PurchaseHeaderL@1000000002 : Record 38;
      CodeToUseL@1000000001 : Code[10];
      IsAllowedL@1000000000 : Boolean;
    BEGIN
      //H1796 17.11.14 DMA +++++++++++++++++++++++++
      //Initalize and Prepare
      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),1,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := 'TEST';
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      LocationL.SETRANGE(LocationL."Is LF Whse.",TRUE);
      LocationL.FINDFIRST;

      PurchaseHeaderL.INIT;
      PurchaseHeaderL."Document Type" := PurchaseHeaderL."Document Type"::Order;
      PurchaseHeaderL."No." := CodeToUseL;
      PurchaseHeaderL.INSERT;

      PurchaseLineL.INIT;
      PurchaseLineL."Document Type" := PurchaseLineL."Document Type"::Order;
      PurchaseLineL."Document No." := CodeToUseL;
      PurchaseLineL."Line No." := 10000;
      PurchaseLineL.Type := PurchaseLineL.Type::Item;
      PurchaseLineL."No." := CodeToUseL;
      PurchaseLineL."Location Code" := LocationL.Code;
      PurchaseLineL.INSERT;

      //Check Results
      IsAllowedL := PurchaseLineL.LudwigsfeldeWEAAllowed();

      //Cleanup
      PurchaseLineL.DELETE;
      PurchaseHeaderL.DELETE;
      UnitOfMeasureL.DELETE;
      ItemL.DELETE;
      //LocationL.DELETE;


      //Check Results
      Assert.IsTrue(IsAllowedL,'Wrong Result!');
      //H1796 17.11.14 DMA -------------------------
    END;

    [Test]
    PROCEDURE T38_RhenusWEAAllowedNeg@1000000009();
    VAR
      ItemL@1000000001 : Record 27;
      ItemUnitOfMeasureL@1000000003 : Record 5404;
      UnitOfMeasureL@1000000004 : Record 204;
      LocationL@1000000002 : Record 14;
      PurchaseLineL@1000000000 : Record 39;
      PurchaseHeaderL@1000000005 : Record 38;
      CodeToUseL@1000000007 : Code[10];
      IsAllowedL@1000000006 : Boolean;
    BEGIN
      //H1796 17.11.14 DMA +++++++++++++++++++++++++
      //Initalize and Prepare
      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),1,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := 'TEST';
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      LocationL.SETRANGE("Rhenus Location",FALSE);
      LocationL.FINDFIRST;

      PurchaseHeaderL.INIT;
      PurchaseHeaderL."Document Type" := PurchaseHeaderL."Document Type"::Order;
      PurchaseHeaderL."No." := CodeToUseL;
      PurchaseHeaderL.INSERT;

      PurchaseLineL.INIT;
      PurchaseLineL."Document Type" := PurchaseLineL."Document Type"::Order;
      PurchaseLineL."Document No." := CodeToUseL;
      PurchaseLineL."Line No." := 10000;
      PurchaseLineL.Type := PurchaseLineL.Type::Item;
      PurchaseLineL."No." := CodeToUseL;
      PurchaseLineL."Location Code" := LocationL.Code;
      PurchaseLineL.INSERT;

      //Check Results
      IsAllowedL := PurchaseHeaderL.RhenusWEAAllowed(PurchaseLineL);

      //Cleanup
      PurchaseLineL.DELETE;
      PurchaseHeaderL.DELETE;
      UnitOfMeasureL.DELETE;
      ItemL.DELETE;

      //Check Results
      Assert.IsFalse(IsAllowedL,'Wrong Result!');
      //H1796 17.11.14 DMA -------------------------
    END;

    [Test]
    PROCEDURE T38_LudwigsfeldeWEAAllowedNeg@1000000008();
    VAR
      ItemL@1000000007 : Record 27;
      ItemUnitOfMeasureL@1000000006 : Record 5404;
      UnitOfMeasureL@1000000005 : Record 204;
      LocationL@1000000004 : Record 14;
      PurchaseLineL@1000000003 : Record 39;
      PurchaseHeaderL@1000000002 : Record 38;
      CodeToUseL@1000000001 : Code[10];
      IsAllowedL@1000000000 : Boolean;
    BEGIN
      //H1796 17.11.14 DMA +++++++++++++++++++++++++
      //Initalize and Prepare
      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),1,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := 'TEST';
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      LocationL.SETRANGE(LocationL."Is LF Whse.",FALSE);
      LocationL.FINDFIRST;

      PurchaseHeaderL.INIT;
      PurchaseHeaderL."Document Type" := PurchaseHeaderL."Document Type"::Order;
      PurchaseHeaderL."No." := CodeToUseL;
      PurchaseHeaderL.INSERT;

      PurchaseLineL.INIT;
      PurchaseLineL."Document Type" := PurchaseLineL."Document Type"::Order;
      PurchaseLineL."Document No." := CodeToUseL;
      PurchaseLineL."Line No." := 10000;
      PurchaseLineL.Type := PurchaseLineL.Type::Item;
      PurchaseLineL."No." := CodeToUseL;
      PurchaseLineL."Location Code" := LocationL.Code;
      PurchaseLineL.INSERT;

      //Check Results
      IsAllowedL := PurchaseLineL.LudwigsfeldeWEAAllowed();

      //Cleanup
      PurchaseLineL.DELETE;
      PurchaseHeaderL.DELETE;
      UnitOfMeasureL.DELETE;
      ItemL.DELETE;

      //Check Results
      Assert.IsFalse(IsAllowedL,'Wrong Result!');
      //H1796 17.11.14 DMA -------------------------
    END;

    [Test]
    PROCEDURE CU50603_ApplyShipAgentTransl@1000000025();
    VAR
      ItemImportAppDomDataL@1000000000 : Record 50601;
      ebayNavChippingModuleL@1000000001 : Record 5251557;
      IWSAppDomainDataHandlingL@1000000003 : Codeunit 50603;
      ErrorMessageL@1000000002 : Text[250];
    BEGIN
      //H1846 11.12.14 MSL +++++++++++++++++++++++++++++++++++++++++++++++++++++
      //Initialize and Prepare
      ItemImportAppDomDataL.INIT;
      ItemImportAppDomDataL."Attached to Request ID" := RANDOM(1000000);
      ItemImportAppDomDataL."App Domain" := 1;
      //ItemImportAppDomDataL.INSERT;
      ebayNavChippingModuleL.SETRANGE(ebayNavChippingModuleL."Webshop Code",FORMAT(1));

      IF ebayNavChippingModuleL.FINDSET THEN
        REPEAT
          ItemImportAppDomDataL."Webshop Shipping Module" := ebayNavChippingModuleL.Identifier;

          //Execute
          IWSAppDomainDataHandlingL.ApplyShippingAgentMapping(ItemImportAppDomDataL,ErrorMessageL);

          //check
          Assert.AreEqual(
            ebayNavChippingModuleL."Shipping Agent Code",
            ItemImportAppDomDataL."Evaluated Ship. Agent Code",
            STRSUBSTNO(
              TextAssertAreEqual,
              ItemImportAppDomDataL."Evaluated Ship. Agent Code",
              ebayNavChippingModuleL."Shipping Agent Code"));
          Assert.AreEqual(
            '',
            ErrorMessageL,
            STRSUBSTNO(TextAssertAreEqual,ErrorMessageL,''));
        UNTIL ebayNavChippingModuleL.NEXT = 0;

      //Negative

      //Init and prepare
      ItemImportAppDomDataL."Webshop Shipping Module" := '';
      //Execute
      IWSAppDomainDataHandlingL.ApplyShippingAgentMapping(ItemImportAppDomDataL,ErrorMessageL);
      //Check
      Assert.AreNotEqual(
        '',
        ErrorMessageL,
        STRSUBSTNO(TextAssertAreEqual,ErrorMessageL,''));

      //Cleanup
      //ItemImportAppDomDataL.DELETE;
      //H1846 11.12.14 MSL ------------------------------------------------------
    END;

    [Test]
    PROCEDURE CU50603_ModifyWebShopItem@1000000026();
    VAR
      ItemImportAppDomDataL@1000000000 : Record 50601;
      IWSAppDomainDataHandlingL@1000000003 : Codeunit 50603;
      eBayNavCWebshopItemL@1000000001 : Record 5251566;
      ErrorMessageL@1000000002 : Text[250];
    BEGIN
      //H1846 11.12.14 MSL ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      //Initialize and Prepare
      ItemImportAppDomDataL.INIT;
      ItemImportAppDomDataL."Attached to Request ID" := RANDOM(1000000);
      ItemImportAppDomDataL."App Domain" := 1;
      ItemImportAppDomDataL."Evaluated Ship. Agent Code" := 'RHEHD';
      //ItemImportAppDomDataL.INSERT;
      eBayNavCWebshopItemL.INIT;
      eBayNavCWebshopItemL."Webshop Code" := '1';
      eBayNavCWebshopItemL.SKU := 'UT-'+ FORMAT(RANDOM(1000000)) ;
      eBayNavCWebshopItemL."Shipping Agent Code" := '';
      eBayNavCWebshopItemL.INSERT;

      //Execute
      IWSAppDomainDataHandlingL.ModifyWebShopItem(eBayNavCWebshopItemL,ItemImportAppDomDataL);

      //Check
      Assert.AreEqual(
        eBayNavCWebshopItemL."Shipping Agent Code",
        ItemImportAppDomDataL."Evaluated Ship. Agent Code",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Evaluated Ship. Agent Code",eBayNavCWebshopItemL."Shipping Agent Code"));

      Assert.AreEqual(
        ItemImportAppDomDataL."Import Status"::Finished,
        ItemImportAppDomDataL."Import Status",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Import Status",ItemImportAppDomDataL."Import Status"::Finished));

      //negative (reprocess already updated)
      //setup
      ItemImportAppDomDataL."Import Status" := ItemImportAppDomDataL."Import Status"::Imported;

      //Execute
      IWSAppDomainDataHandlingL.ModifyWebShopItem(eBayNavCWebshopItemL,ItemImportAppDomDataL);

      //Check
      Assert.AreNotEqual(
        ItemImportAppDomDataL."Import Status"::Finished,
        ItemImportAppDomDataL."Import Status",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Import Status",ItemImportAppDomDataL."Import Status"::Finished));

      //Cleanup
      //ItemImportAppDomDataL.DELETE;
      eBayNavCWebshopItemL.DELETE;
      //H1846 11.12.14 MSL ---------------------------------------------
    END;

    [Test]
    PROCEDURE CU50603_EvaluateData@1000000027();
    VAR
      ItemImportAppDomDataL@1000000000 : Record 50601;
      IWSAppDomainDataHandlingL@1000000003 : Codeunit 50603;
      eBayNavCWebshopItemL@1000000001 : Record 5251566;
      ErrorMessageL@1000000002 : Text[250];
    BEGIN
      //H1846 11.12.14 MSL ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      //Initialize and Prepare
      ItemImportAppDomDataL.INIT;
      ItemImportAppDomDataL."Attached to Request ID" := 111222;//RANDOM(1000000);
      ItemImportAppDomDataL."App Domain" := 1;
      ItemImportAppDomDataL."Webshop Shipping Module" := 'DHL';
      ItemImportAppDomDataL."Transportation Type" := 'SHIPPINGCOMPANY';
      ItemImportAppDomDataL."Special Price" := RANDOM(100);
      ItemImportAppDomDataL."Transportation Time" := RANDOM(100);
      ItemImportAppDomDataL.INSERT;

      //Execute
      IWSAppDomainDataHandlingL.EvaluateData(ItemImportAppDomDataL,ErrorMessageL);
      COMMIT;
      ItemImportAppDomDataL.FIND('=');

      //Check
      Assert.AreNotEqual(
        '',ItemImportAppDomDataL."Evaluated Ship. Agent Code",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Evaluated Ship. Agent Code",''));
      Assert.AreNotEqual(
        '',ItemImportAppDomDataL."Evaluated Freight Type",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Evaluated Ship. Agent Code",''));
      Assert.AreNotEqual(
        '',ItemImportAppDomDataL."Evaluated Unit Price",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Evaluated Unit Price",''));
      Assert.AreEqual(
        ItemImportAppDomDataL."Import Status"::Evaluated,
        ItemImportAppDomDataL."Import Status",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Import Status",ItemImportAppDomDataL."Import Status"::Evaluated));

      //negative
      //setup
      ItemImportAppDomDataL.INIT;
      ItemImportAppDomDataL.MODIFY;

      //exec
      IWSAppDomainDataHandlingL.EvaluateData(ItemImportAppDomDataL,ErrorMessageL);

      //check
      Assert.AreEqual(
        '',ItemImportAppDomDataL."Evaluated Ship. Agent Code",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Evaluated Ship. Agent Code",''));
      Assert.AreEqual(
        '',ItemImportAppDomDataL."Evaluated Freight Type",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Evaluated Ship. Agent Code",''));
      Assert.AreEqual(
        0,ItemImportAppDomDataL."Evaluated Unit Price",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Evaluated Unit Price",''));
      Assert.AreNotEqual(
        ItemImportAppDomDataL."Import Status"::Evaluated,
        ItemImportAppDomDataL."Import Status",
        STRSUBSTNO(TextAssertAreEqual,ItemImportAppDomDataL."Import Status",ItemImportAppDomDataL."Import Status"::Evaluated));

      //Cleanup
      ItemImportAppDomDataL.DELETE;
      //H1846 11.12.14 MSL --------------------------------------------
    END;

    [Test]
    PROCEDURE CU50005_GetPurchCodeV2@1000000506();
    VAR
      SalesHeaderL@1000000006 : Record 36;
      SalesLineL@1000000000 : Record 37;
      CustomerL@1000000007 : Record 18;
      ItemL@1000000008 : Record 27;
      VendorL@1000000010 : Record 23;
      VendorChannelsperCountryL@1000000011 : Record 50094;
      ChannelSelectionL@1000000002 : Record 50334;
      CreateOrderMgtL@1000000004 : Codeunit 50005;
      LibrarySCML@1000000005 : Codeunit 50210;
      WebShopCodeL@1000000001 : Code[10];
      ExpectedValueL@1000000003 : Integer;
      ErrorL@1000000009 : Text[100];
      GeneralPostingSetupL@1000000014 : Record 252;
      VATPostingSetupL@1000000013 : Record 325;
      VendorPostingGroupL@1000000012 : Record 93;
    BEGIN
      //Initalize and Prepare
      CLEAR(SalesHeaderL);
      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(SalesHeaderL,SalesHeaderL."Document Type"::Order,CustomerL."No.");

      ItemL.INIT;
      ItemL."No." := COPYSTR(FORMAT(CREATEGUID()),1,10);
      ItemL.Description := 'UT_Example';
      ItemL."Base Unit of Measure" := COPYSTR(FORMAT(CREATEGUID()),1,10);;
      ItemL.INSERT;


      SalesLineL.INIT;
      SalesLineL."Document Type" := SalesLineL."Document Type"::Order;
      SalesLineL."Document No." := SalesHeaderL."No.";//FORMAT(RANDOM(10000));
      SalesLineL."Line No." := 10000;
      SalesLineL.Type := SalesLineL.Type::Item;
      SalesLineL."No." := ItemL."No.";
      SalesLineL."Transp. Type" := SalesLineL."Transp. Type"::"Parcel Service";
      WebShopCodeL := '1';
      SalesLineL."Shipping Source" := '101';
      ChannelSelectionL.GET(WebShopCodeL,SalesLineL."Shipping Source",SalesLineL."Transp. Type");

      //VendorChannelsperCountryL."Vendor No." := VendorL."No.";
      //VendorChannelsperCountryL."Webshop Code" := WebShopCodeL;
      //VendorChannelsperCountryL."Purchasing Code" := ChannelSelectionL."Purchasing Code";
      //VendorChannelsperCountryL.INSERT;
      //Run Code
      CreateOrderMgtL.GetPurchCodeV2(WebShopCodeL,SalesLineL);

      //Check Results
      Assert.AreEqual(
        ChannelSelectionL."Purchasing Code",
        SalesLineL."Purchasing Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Purchasing Code",ChannelSelectionL."Purchasing Code"));

      //5 digit

      //Cleanup
      SalesHeaderL.DELETE;
      CustomerL.FIND;
      CustomerL.DELETE;
      ItemL.DELETE;

      //VendorChannelsperCountryL.DELETE;
    END;

    PROCEDURE CU50303_IsSequenceLocked@1000000024();
    VAR
      ItemL@1000000006 : Record 27;
      ItemUnitOfMeasureL@1000000005 : Record 5404;
      UnitOfMeasureL@1000000004 : Record 204;
      LocationL@1000000003 : Record 14;
      SalesLineL@1000000002 : Record 37;
      SalesHeaderL@1000000001 : Record 36;
      PurchasingL@1000000000 : Record 5721;
      WhseLFSalesInterfaceMgtL@1000000008 : Codeunit 50303;
      CodeToUseL@1000000007 : Code[10];
      IsLockedL@1000000009 : Boolean;
    BEGIN
      //H1999 16.01.15 DMA +++++++++++++++++++++++++
      //Initalize and Prepare
      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),1,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := 'TEST';
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      LocationL.SETRANGE(LocationL."Is LF Whse.",TRUE);
      LocationL.FINDFIRST;

      PurchasingL.SETRANGE(PurchasingL."Location Code",LocationL.Code);
      PurchasingL.FINDFIRST;

      SalesHeaderL.INIT;
      SalesHeaderL."Document Type" := SalesHeaderL."Document Type"::Order;
      SalesHeaderL."No." := CodeToUseL;
      SalesHeaderL.INSERT;

      SalesLineL.INIT;
      SalesLineL."Document Type" := SalesLineL."Document Type"::Order;
      SalesLineL."Document No." := CodeToUseL;
      SalesLineL."Line No." := 10000;
      SalesLineL.Type := SalesLineL.Type::Item;
      SalesLineL."No." := CodeToUseL;
      SalesLineL."Location Code" := LocationL.Code;
      SalesLineL."Purchasing Code" := PurchasingL.Code;
      SalesLineL.INSERT;

      //Run Code
      IsLockedL := WhseLFSalesInterfaceMgtL.IsSequenceLocked(SalesHeaderL);

      //Check Results
      Assert.IsFalse(IsLockedL,'Wrong Result!');

      //Cleanup
      SalesLineL.DELETE;
      SalesHeaderL.DELETE;
      ItemL.DELETE;
      UnitOfMeasureL.DELETE;

      //H1999 16.01.15 DMA -------------------------
    END;

    [Test]
    PROCEDURE CU50303_IsSequenceLockedNeg@1000000013();
    VAR
      ItemL@1000000006 : Record 27;
      ItemUnitOfMeasureL@1000000005 : Record 5404;
      UnitOfMeasureL@1000000004 : Record 204;
      LocationL@1000000003 : Record 14;
      SalesLineL@1000000002 : Record 37;
      SalesHeaderL@1000000001 : Record 36;
      PurchasingL@1000000000 : Record 5721;
      ParcelStatusHistoryL@1000000010 : Record 80013;
      WhseLFSetupL@1000000011 : Record 50300;
      WhseLFSalesExportHeaderL@1000000012 : Record 50304;
      WhseLFSalesExportLineL@1000000013 : Record 50305;
      WhseLFSalesInterfaceMgtL@1000000008 : Codeunit 50303;
      CodeToUseL@1000000007 : Code[10];
      IsLockedL@1000000009 : Boolean;
    BEGIN
      //H1999 16.01.15 DMA +++++++++++++++++++++++++
      //Initalize and Prepare
      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),1,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := 'TEST';
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      LocationL.SETRANGE(LocationL."Is LF Whse.",TRUE);
      LocationL.FINDFIRST;

      PurchasingL.SETRANGE(PurchasingL."Location Code",LocationL.Code);
      PurchasingL.FINDFIRST;

      SalesHeaderL.INIT;
      SalesHeaderL."Document Type" := SalesHeaderL."Document Type"::Order;
      SalesHeaderL."No." := CodeToUseL;
      SalesHeaderL.INSERT;

      SalesLineL.INIT;
      SalesLineL."Document Type" := SalesLineL."Document Type"::Order;
      SalesLineL."Document No." := CodeToUseL;
      SalesLineL."Line No." := 10000;
      SalesLineL.Type := SalesLineL.Type::Item;
      SalesLineL."No." := CodeToUseL;
      SalesLineL."Location Code" := LocationL.Code;
      SalesLineL."Purchasing Code" := PurchasingL.Code;
      SalesLineL.INSERT;

      IF NOT WhseLFSetupL.FINDFIRST THEN BEGIN
        WhseLFSetupL.INIT;
        WhseLFSetupL."Sequence Locking Status" := '20';
      END;

      ParcelStatusHistoryL.INIT;
      ParcelStatusHistoryL."Document Type" := SalesLineL."Document Type";
      ParcelStatusHistoryL."Document No." := SalesHeaderL."No.";
      ParcelStatusHistoryL."Document Line No." := SalesLineL."Line No.";
      ParcelStatusHistoryL."Status Sub Code" := '20';
      ParcelStatusHistoryL.INSERT;

      WhseLFSalesExportHeaderL.INIT;
      WhseLFSalesExportHeaderL."Document No.":=SalesHeaderL."No.";
      WhseLFSalesExportHeaderL."Document Type":=SalesHeaderL."Document Type";
      WhseLFSalesExportHeaderL."Sequence No.":='001';
      WhseLFSalesExportHeaderL."LF Order No.":=SalesHeaderL."No."+'001';
      WhseLFSalesExportHeaderL.INSERT;

      WhseLFSalesExportLineL.INIT;
      WhseLFSalesExportLineL."Entry No.":=WhseLFSalesExportHeaderL."Entry No.";
      WhseLFSalesExportLineL."Attached to Document Type":=SalesLineL."Document Type";
      WhseLFSalesExportLineL."Attached to Document No.":=SalesLineL."Document No.";
      WhseLFSalesExportLineL."Pos. No.":=SalesLineL."Line No." / 10000;
      WhseLFSalesExportLineL.Type:=WhseLFSalesExportLineL.Type::Item;
      WhseLFSalesExportLineL."No." := SalesLineL."No.";
      WhseLFSalesExportLineL.Quantity := 1;
      WhseLFSalesExportLineL.INSERT;

      //Run Code
      IsLockedL := WhseLFSalesInterfaceMgtL.IsSequenceLocked(SalesHeaderL);

      //Check Results
      Assert.IsTrue(IsLockedL,'Wrong Result!');

      //Cleanup
      SalesLineL.DELETE;
      SalesHeaderL.DELETE;
      ItemL.DELETE;
      UnitOfMeasureL.DELETE;
      ParcelStatusHistoryL.DELETE;
      WhseLFSalesExportHeaderL.DELETE;
      WhseLFSalesExportLineL.DELETE;

      //H1999 16.01.15 DMA -------------------------
    END;

    [Test]
    PROCEDURE CU50320_GetValueFromCSVString@1000000010();
    VAR
      CsvLineL@1000000001 : Text[1024];
      TextFromCsvStringL@1000000000 : Text[250];
      TrackingImporterMgtL@1000000002 : Codeunit 50320;
    BEGIN
      //H1987 21.01.15 DMA +++++++++++++++++++++++++
      //Initalize and Prepare
      CsvLineL :=
      '"I am a veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy long te'
            +
      'xt and I am pround of it veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy muchhhhhhhhhhhhhhhhhhhhhhhhh'
            + 'hhhhhhhhh!!!"|"test"|"test"';
      //Run Code
      TextFromCsvStringL := TrackingImporterMgtL.GetValueFromCsvString(CsvLineL,'|','"');
      //Check Results
      Assert.AreNotEqual(250,STRLEN(TextFromCsvStringL),'');

      //H1987 21.01.15 DMA -------------------------
    END;

    [Test]
    PROCEDURE CU50240_ProcSingleEntry_Retry@1000010005();
    VAR
      BatchSalesActionL@1000000002 : Record 50203;
      FPCGeneralSetupL@1000000001 : Record 50055;
      SalesActionServiceL@1000000000 : Codeunit 50240;
      ExpectedValueL@1000000003 : Integer;
    BEGIN
      //Initalize and Prepare
      FPCGeneralSetupL.GET;
      BatchSalesActionL.INIT;
      BatchSalesActionL."Document No." := 'UT-' + FORMAT(RANDOM(10000000));
      BatchSalesActionL.Status := BatchSalesActionL.Status::Open;
      BatchSalesActionL."No. of tries" := FPCGeneralSetupL."Batch Sales Action Max. Tries" - 1;
      BatchSalesActionL."Planned Processing Date" := WORKDATE;
      BatchSalesActionL.INSERT;

      //Run Code
      ExpectedValueL := FPCGeneralSetupL."Batch Sales Action Max. Tries";
      SalesActionServiceL.ProcessSingleEntry(BatchSalesActionL);
      COMMIT;
      BatchSalesActionL.FIND('=');

      //Check Results
      Assert.AreEqual(
        BatchSalesActionL.Status::Success,
        BatchSalesActionL.Status,
        STRSUBSTNO(TextAssertAreEqual,BatchSalesActionL.Status,BatchSalesActionL.Status::Success));
      Assert.AreEqual(
        ExpectedValueL,
        BatchSalesActionL."No. of tries",
        STRSUBSTNO(TextAssertAreEqual,BatchSalesActionL."No. of tries",ExpectedValueL));

      //Run Code 2
      SalesActionServiceL.ProcessSingleEntry(BatchSalesActionL);
      COMMIT;
      BatchSalesActionL.FIND('=');

      //Check Results 2 //no increment, stays success
      Assert.AreEqual(
        BatchSalesActionL.Status::Success,
        BatchSalesActionL.Status,
        STRSUBSTNO(TextAssertAreEqual,BatchSalesActionL.Status,BatchSalesActionL.Status::Success));
      Assert.AreEqual(
        ExpectedValueL,
        BatchSalesActionL."No. of tries",
        STRSUBSTNO(TextAssertAreEqual,BatchSalesActionL."No. of tries",ExpectedValueL));

      //Cleanup
      BatchSalesActionL.DELETE;
    END;

    [Test]
    PROCEDURE CU50320_FormatDate2DateTime@1000000012();
    VAR
      StringToParseL@1000000000 : Text[30];
      FormatToParseInL@1000000003 : Text[30];
      DateTimeL@1000000001 : DateTime;
      TrackingImporterMgtL@1000000002 : Codeunit 50320;
      ErrorMessageL@1000000004 : Text[250];
    BEGIN
      //H1987 21.01.15 DMA +++++++++++++++++++++++++
      //Initalize and Prepare
      FormatToParseInL := 'DD.MM.YYYY hh:mm';
      StringToParseL := '31.12.2014 08:05';

      //Run Code
      DateTimeL := TrackingImporterMgtL.FormatDate2DateTime(FormatToParseInL,StringToParseL,ErrorMessageL);

      //Check Results
      StringToParseL := '31.12.14 08:05';
      Assert.AreEqual(StringToParseL,FORMAT(DateTimeL),'Wrong parsing of datetime!!!');

      //H1987 21.01.15 DMA -------------------------
    END;

    [Test]
    PROCEDURE CU50320_FormatDate2DateTimeNeg@1000000016();
    VAR
      StringToParseL@1000000004 : Text[30];
      FormatToParseInL@1000000003 : Text[30];
      DateTimeL@1000000002 : DateTime;
      TrackingImporterMgtL@1000000001 : Codeunit 50320;
      ErrorMessageL@1000000000 : Text[250];
    BEGIN
      //H1987 21.01.15 DMA +++++++++++++++++++++++++
      //Initalize and Prepare
      FormatToParseInL := 'DD.MM.YYYY hh:mm';
      StringToParseL := '.. :';

      //Run Code
      DateTimeL := TrackingImporterMgtL.FormatDate2DateTime(FormatToParseInL,StringToParseL,ErrorMessageL);

      //Check Results
      Assert.AreEqual('',FORMAT(DateTimeL),'Wrong parsing of datetime!!!');

      //H1987 21.01.15 DMA -------------------------
    END;

    [Test]
    PROCEDURE CU448_CalculateAverageDuration@1000000018();
    VAR
      JobQueueEntryL@1000000003 : Record 472;
      JobQueueLogEntryL@1000000002 : Record 474;
      JobQueueDispacherL@1000000000 : Codeunit 448;
      i@1000000001 : Integer;
      a@1000000004 : Codeunit 50170;
    BEGIN
      //H4420,H2009  14.07.15  MSL ++++++++++++++++++++++++++++++++++++++++++
      //setup0
      JobQueueEntryL.INIT;
      JobQueueEntryL.ID := FORMAT(CREATEGUID());
      JobQueueEntryL."Parameter String" := UnitTestMacro;
      //JobQueueEntryL."Average Duration Days go back" := 7;
      JobQueueLogEntryL.INIT;
      JobQueueLogEntryL.ID := JobQueueEntryL.ID;
      JobQueueLogEntryL."Start Date/Time" := CREATEDATETIME(WORKDATE,TIME);
      JobQueueLogEntryL."End Date/Time" := CREATEDATETIME(WORKDATE,TIME + 900000);
      JobQueueLogEntryL."Parameter String" := UnitTestMacro;
      JobQueueLogEntryL.Duration := JobQueueLogEntryL."End Date/Time" - JobQueueLogEntryL."Start Date/Time";

      //execute&verify - no log_entries
      Assert.AreEqual(
        '',
        FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
        STRSUBSTNO(AssertNoMacro,i) + STRSUBSTNO(
          TextAssertAreEqual,
          FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
        ''));

      //setup1
      JobQueueEntryL.INSERT;
      JobQueueLogEntryL.INSERT;
      //execute&verify - first log_entry
      Assert.AreEqual
        ('15 minutes',
        FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
        STRSUBSTNO(AssertNoMacro,i+1) + STRSUBSTNO(
          TextAssertAreEqual,
          FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
        '15 minutes'));

      //setup2 -2nd logentry
      COMMIT;
      JobQueueLogEntryL.INIT;
      JobQueueLogEntryL."Entry No." := JobQueueLogEntryL."Entry No." + 1;
      JobQueueLogEntryL.ID := JobQueueEntryL.ID;
      JobQueueLogEntryL."Start Date/Time" :=
        CREATEDATETIME(
          WORKDATE+7,
          TIME - 3780000);
      JobQueueLogEntryL."End Date/Time" :=
        CREATEDATETIME(
          WORKDATE+7,
          TIME - 3720000);
      JobQueueLogEntryL."Parameter String" := UnitTestMacro;
      JobQueueLogEntryL.Status := JobQueueLogEntryL.Status::Error;
      JobQueueLogEntryL.INSERT;

      //execute&verify - 2nd log_entry error
      Assert.AreEqual('15 minutes',
                      FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
                      STRSUBSTNO(AssertNoMacro,i+2) + STRSUBSTNO(
                        TextAssertAreEqual,
                        FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
                      '15 minutes'));


      //setup  2nd log_entry correct status
      JobQueueLogEntryL.Status := JobQueueLogEntryL.Status::Success;
      JobQueueLogEntryL.Duration  := 60000;
      JobQueueLogEntryL.MODIFY;
      COMMIT;

      Assert.AreNotEqual('15 minutes',
                      FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
                      STRSUBSTNO(AssertNoMacro,i+3) +
                      STRSUBSTNO(
                        TextAssertAreNotEqual,
                        FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
                      '15 minutes'));


      //setup  2nd log_entry outside exec. time range
      JobQueueLogEntryL."Start Date/Time" :=
        CREATEDATETIME((CALCDATE('<-1D>',DT2DATE(JobQueueLogEntryL."Start Date/Time"))),DT2TIME(JobQueueLogEntryL."Start Date/Time"));
      JobQueueLogEntryL."End Date/Time" :=
        CREATEDATETIME(DT2DATE(JobQueueLogEntryL."Start Date/Time"),DT2TIME(JobQueueLogEntryL."Start Date/Time")+3780000);
      JobQueueLogEntryL.MODIFY;
      COMMIT;
      Assert.AreEqual(
        '1 minute',
         FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
         STRSUBSTNO(AssertNoMacro,i+4) + STRSUBSTNO(
           TextAssertAreEqual,
           FORMAT(JobQueueDispacherL.CalculateAverageDuration(JobQueueLogEntryL)),
         '1 minute'));


      //cleanup
      JobQueueEntryL.DELETE;
      JobQueueLogEntryL.SETRANGE("Parameter String",UnitTestMacro);
      JobQueueLogEntryL.DELETEALL;
      //H4420,H2009  14.07.15  MSL ------------------------------------------
    END;

    [Test]
    [HandlerFunctions(T0018_MessageHandler)]
    PROCEDURE T0018_Scenario_Test@1000000020();
    VAR
      SalesHeaderL@1000000003 : Record 36;
      SalesLineL@1000000005 : Record 37;
      SIISetupL@1000000004 : Record 50140;
      SIILogManualTriggerL@1000000008 : Record 50155;
      LibrarySalesL@1000000006 : Codeunit 50701;
      CancelBeforePaymentL@1000000000 : Codeunit 50315;
      SalesProcessHelperL@1000000001 : Codeunit 50715;
      ComplaintRequestMgtL@1000000007 : Codeunit 50313;
      SalesOrderNoL@1000000002 : Code[20];
    BEGIN
      //Initalize and Prepare
      IF NOT LibrarySalesL.FindNoSeries('TEST') THEN
        LibrarySalesL.CreateNoSeries('TEST');

      SalesOrderNoL := SalesProcessHelperL.ImportSalesOrderTemplate('Ger3Single',FALSE {do not import payment});
      SalesHeaderL.GET(SalesHeaderL."Document Type"::Order,SalesOrderNoL);

      SalesProcessHelperL.SetReturnTypeToLine(SalesHeaderL."No.",SalesLineL."Return Type"::Cancelation);

      //Run Code
      ComplaintRequestMgtL.ProcessComplaintRequestSH(SalesHeaderL, FALSE);

      //Check Results
      SalesHeaderL.FIND('=');
      SalesHeaderL.TESTFIELD("Status Return Order",SalesHeaderL."Status Return Order"::finished);

      //SII Message exists.
      SIISetupL.GET;
      SIILogManualTriggerL.RESET;
      SIILogManualTriggerL.SETRANGE(Status,SIILogManualTriggerL.Status::Unprocessed);
      SIILogManualTriggerL.SETRANGE("Attached to Table",DATABASE::"Sales Header");
      SIILogManualTriggerL.SETRANGE("Attached to Document Type",SalesHeaderL."Document Type");
      SIILogManualTriggerL.SETRANGE("Attached to Document No.",SalesHeaderL."No.");
      SIILogManualTriggerL.SETRANGE("Message Code NAV",SIISetupL."Cancellation NAV");
      SIILogManualTriggerL.FINDFIRST;

      //Cleanup
      SalesHeaderL.DELETE(TRUE);
    END;

    [MessageHandler]
    PROCEDURE T0018_MessageHandler@1000000021(MessageText@1000000000 : Text[1024]);
    BEGIN
    END;

    [Test]
    PROCEDURE CU50302_CheckWhse24STALocation@1000000095();
    VAR
      WhseLFSetupL@1000000000 : Record 50300;
      WhseH24SubInterfaceL@1000000001 : Record 50506;
      FPCInterSetupL@1000000002 : Record 50014;
    BEGIN
      //H2157 20.02.15 DMO ++++++++++++++++++++++++++
      WhseLFSetupL.GET;
      WhseLFSetupL.TESTFIELD("Record Type STA");

      WhseH24SubInterfaceL.RESET;
      WhseH24SubInterfaceL.SETRANGE("File Type",WhseLFSetupL."Record Type STA");
      WhseH24SubInterfaceL.FINDSET;
      REPEAT
        WhseH24SubInterfaceL.TESTFIELD("FPC Interface Setup Code");

        FPCInterSetupL.GET(WhseH24SubInterfaceL."FPC Interface Setup Code");
        FPCInterSetupL.TESTFIELD("Import Folder");
        FPCInterSetupL.TESTFIELD("Archive Root Folder");
      UNTIL WhseH24SubInterfaceL.NEXT = 0;

      //H2157 20.02.15 DMO --------------------------
    END;

    PROCEDURE C50162_ClosePeriodsTrue@1000001005();
    VAR
      InventoryLogHeaderL@1000000001 : Record 50208;
      GLSetupL@1000000003 : Record 98;
      StopServicesL@1000000000 : Codeunit 50162;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      InventoryLogHeaderL.INIT;
      InventoryLogHeaderL."No." := RANDOM(1000000);
      InventoryLogHeaderL.Status := InventoryLogHeaderL.Status::"In Process";
      InventoryLogHeaderL."Posting Date" := CALCDATE('<-CM-1D>',TODAY);
      InventoryLogHeaderL.INSERT;

      GLSetupL.GET;
      GLSetupL."Allow Posting From" := CALCDATE('<-1M>',InventoryLogHeaderL."Posting Date");
      GLSetupL.MODIFY;

      COMMIT;

      //Run Code
      CLEAR(StopServicesL);
      StopServicesL.ClosePeriod(InventoryLogHeaderL."No.");

      //Check Results
      GLSetupL.GET;
      Assert.AreEqual(
        FORMAT(CALCDATE('<+1D',InventoryLogHeaderL."Posting Date")),FORMAT(GLSetupL."Allow Posting From"),
        STRSUBSTNO(
          TextAssertAreEqual,
          FORMAT(CALCDATE('<+1D',InventoryLogHeaderL."Posting Date")),
          FORMAT(GLSetupL."Allow Posting From")));

      //Cleanup
      InventoryLogHeaderL.DELETE(TRUE);
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50162_ClosePeriodsFalse@1000001008();
    VAR
      InventoryLogHeaderL@1000000002 : Record 50208;
      GLSetupL@1000000001 : Record 98;
      StopServicesL@1000000000 : Codeunit 50162;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      InventoryLogHeaderL.INIT;
      InventoryLogHeaderL."No." := RANDOM(1000000);
      InventoryLogHeaderL.Status := InventoryLogHeaderL.Status::"In Process";
      InventoryLogHeaderL."Posting Date" := CALCDATE('<-CM-1D>',TODAY);
      InventoryLogHeaderL.INSERT;

      GLSetupL.GET;
      GLSetupL."Allow Posting From" := CALCDATE('<+15D>',InventoryLogHeaderL."Posting Date");
      GLSetupL.MODIFY;

      COMMIT;

      //Run Code
      CLEAR(StopServicesL);
      StopServicesL.ClosePeriod(InventoryLogHeaderL."No.");

      //Check Results
      GLSetupL.GET;
      Assert.AreNotEqual(
        FORMAT(CALCDATE('<+1D',InventoryLogHeaderL."Posting Date")),FORMAT(GLSetupL."Allow Posting From"),
        STRSUBSTNO(
          TextAssertAreNotEqual,
          FORMAT(CALCDATE('<+1D',InventoryLogHeaderL."Posting Date")),
          FORMAT(GLSetupL."Allow Posting From")));

      //Cleanup
      InventoryLogHeaderL.DELETE(TRUE);
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE CU50303_TriggerWh24PurchInterf@1000000011();
    VAR
      WhseH24BranchL@1000000000 : Record 50507;
      ItemL@1000000002 : Record 27;
      VendorL@1000000003 : Record 23;
      PurchHeaderL@1000000004 : Record 38;
      PurchLineL@1000000005 : Record 39;
      WhseH24PurchExportHdr@1000000006 : Record 50301;
      UnitOfMeasureL@1000000008 : Record 204;
      GenProductPostingGroupL@1000000013 : Record 251;
      InventoryPostingGroupL@1000000012 : Record 94;
      VATPostingSetupL@1000000011 : Record 325;
      LibrarySCML@1000000001 : Codeunit 50210;
      CodeToUseL@1000000010 : Code[10];
      IsWhseH24WEAAllowedL@1000000007 : Boolean;
    BEGIN
      //H2146 18.02.15 EHN +++++++++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      WhseH24BranchL.RESET;
      WhseH24BranchL.SETRANGE("Trigger Kommission",TRUE);
      WhseH24BranchL.FINDFIRST;

      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),1,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := 'TEST';
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      GenProductPostingGroupL.FINDFIRST;
      InventoryPostingGroupL.FINDFIRST;
      VATPostingSetupL.RESET;
      VATPostingSetupL.SETFILTER("VAT Bus. Posting Group",'<>%1','');
      VATPostingSetupL.SETFILTER("VAT Prod. Posting Group",'<>%1','');
      VATPostingSetupL.FINDFIRST;

      ItemL.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroupL.Code);
      ItemL.VALIDATE("VAT Prod. Posting Group",VATPostingSetupL."VAT Prod. Posting Group");
      ItemL.VALIDATE("Inventory Posting Group",InventoryPostingGroupL.Code);
      ItemL.MODIFY;

      LibrarySCML.CreateVendor(VendorL);
      LibrarySCML.CreatePurchaseHeader(PurchHeaderL,1,VendorL."No.");
      PurchHeaderL.Kommissionierung := TRUE;
      PurchHeaderL.MODIFY;
      LibrarySCML.CreatePurchaseLine(PurchHeaderL,PurchLineL,2,ItemL."No.",1);
      PurchLineL."Order Status Code" := '30';
      PurchLineL.MODIFY;
      PurchLineL."Location Code" := WhseH24BranchL."Location Code";
      PurchLineL.MODIFY;

      //Run Code
      IsWhseH24WEAAllowedL := PurchLineL.LudwigsfeldeWEAAllowed;

      //Check Results
      Assert.IsTrue(IsWhseH24WEAAllowedL,'WEA will not be triggered!');

      //Cleanup
      PurchLineL.DELETE;
      PurchHeaderL.DELETE;
      UnitOfMeasureL.DELETE;
      ItemL.DELETE;
      VendorL.DELETE;
      //H2146 18.02.15 EHN ---------------------------------------------
    END;

    [MessageHandler]
    PROCEDURE MsgHandler@1000000007(Text@1000000000 : Text[1024]);
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50162_UpdateJobQueueEntry@1000001006();
    VAR
      InventoryLogHeaderL@1000000001 : Record 50208;
      StopServicesL@1000000000 : Codeunit 50162;
      JobQueueEntryL@1000000002 : Record 472;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      InventoryLogHeaderL.INIT;
      InventoryLogHeaderL."No." := RANDOM(1000000);
      InventoryLogHeaderL.Status := InventoryLogHeaderL.Status::"In Process";
      InventoryLogHeaderL."Posting Date" := CALCDATE('<-CM-1D>',TODAY);
      InventoryLogHeaderL.INSERT;

      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50096);
      JobQueueEntryL.FINDLAST;
      JobQueueEntryL."Parameter String" := '';
      JobQueueEntryL.MODIFY;

      COMMIT;

      //Run Code
      CLEAR(StopServicesL);
      StopServicesL.UpdateJobQueueEntry(InventoryLogHeaderL."No.");

      //Check Results
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50096);
      JobQueueEntryL.FINDLAST;

      Assert.AreEqual(
        FORMAT(InventoryLogHeaderL."No."),JobQueueEntryL."Parameter String",
        STRSUBSTNO(
          TextAssertAreEqual,
          FORMAT(InventoryLogHeaderL."No."),
          FORMAT(JobQueueEntryL."Parameter String")));

      //Cleanup
      InventoryLogHeaderL.DELETE(TRUE);
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50163_CYCLECOUNTPOST_True@1000002009();
    VAR
      CYCCL@1000000000 : Codeunit 50163;
      ItemL@1000000001 : Record 27;
      InvRecInboundL@1000000002 : Record 50813;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      ItemL.RESET;
      ItemL.SETRANGE(Blocked,FALSE);
      ItemL.FINDFIRST;
      CLEAR(InvRecInboundL);
      InvRecInboundL."No." := ItemL."No.";
      InvRecInboundL.INSERT;
      //Run Code
      CLEAR(CYCCL);

      //Check Results
      Assert.IsTrue(CYCCL."CYCLECOUNTPOST(Y/N)"(InvRecInboundL),'Item exists and is not blocked');

      InvRecInboundL.DELETE;
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50163_CYCLECOUNTPOST_False@1000001010();
    VAR
      CYCCL@1000000000 : Codeunit 50163;
      ItemL@1000000001 : Record 27;
      InvRecInboundL@1000000002 : Record 50813;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      ItemL.RESET;
      ItemL.SETRANGE(Blocked,TRUE);
      IF NOT ItemL.FINDFIRST THEN BEGIN
        ItemL.INIT;
        ItemL."No." := 'UnitTest';
        ItemL.Blocked := TRUE;
        ItemL.INSERT;
      END;
      CLEAR(InvRecInboundL);
      InvRecInboundL."No." := ItemL."No.";
      InvRecInboundL.INSERT;
      //Run Code
      CLEAR(CYCCL);

      //Check Results
      Assert.IsFalse(CYCCL."CYCLECOUNTPOST(Y/N)"(InvRecInboundL),'Item does not exists or is blocked');

      InvRecInboundL.DELETE;
      IF ItemL.GET('UnitTest') THEN
        ItemL.DELETE;
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50164_UPDATEJOBQUEUEENTRY@1000001011();
    VAR
      InventoryLogHeaderL@1000000000 : Record 50208;
      JobQueueEntryL@1000000001 : Record 472;
      StartServicesPhysInvL@1000000002 : Codeunit 50164;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      InventoryLogHeaderL.INIT;
      InventoryLogHeaderL."No." := RANDOM(1000000);
      InventoryLogHeaderL.Status := InventoryLogHeaderL.Status::"In Process";
      InventoryLogHeaderL."Posting Date" := CALCDATE('<-CM-1D>',TODAY);
      InventoryLogHeaderL.INSERT;

      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50096);
      JobQueueEntryL.FINDLAST;
      JobQueueEntryL."Parameter String" := FORMAT(InventoryLogHeaderL."No.");
      JobQueueEntryL.MODIFY;

      //Run Code
      CLEAR(StartServicesPhysInvL);
      StartServicesPhysInvL.UpdateJobQueueEntry(InventoryLogHeaderL."No.");
      //Check Results

      JobQueueEntryL.FINDLAST;

      Assert.AreEqual(
        '',JobQueueEntryL."Parameter String",
        STRSUBSTNO(
          TextAssertAreEqual,
          FORMAT(''),
          FORMAT(JobQueueEntryL."Parameter String")));


      InventoryLogHeaderL.DELETE;
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50096_CheckCalendar_True@1000001012();
    VAR
      PhysInvSetupL@1000000000 : Record 50336;
      CalendarMgmtL@1000000001 : Codeunit 7600;
      BaseCalendarChangeL@1000000002 : Record 7601;
      PeriodNoL@1000000003 : Integer;
      AutInvBatchL@1000000004 : Codeunit 50096;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      PhysInvSetupL.GET;

      BaseCalendarChangeL.RESET;
      BaseCalendarChangeL.SETRANGE("Base Calendar Code",PhysInvSetupL."Base Calender");
      BaseCalendarChangeL.SETRANGE(Date,TODAY);
      IF BaseCalendarChangeL.FIND('-') THEN BEGIN
        BaseCalendarChangeL.DELETE;
        PeriodNoL := BaseCalendarChangeL.Day;
      END;
      BaseCalendarChangeL.INIT;
      BaseCalendarChangeL."Base Calendar Code" := PhysInvSetupL."Base Calender";
      BaseCalendarChangeL.Date := TODAY;
      BaseCalendarChangeL.Nonworking := TRUE;
      BaseCalendarChangeL.Day := PeriodNoL;
      BaseCalendarChangeL.INSERT;

      //Run Code
      CLEAR(AutInvBatchL);

      //Check Results
      Assert.IsTrue(AutInvBatchL.CheckCalender(),'Today is a working day');
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50096_CheckCalendar_False@1000001016();
    VAR
      PhysInvSetupL@1000000000 : Record 50336;
      CalendarMgmtL@1000000001 : Codeunit 7600;
      BaseCalendarChangeL@1000000002 : Record 7601;
      PeriodNoL@1000000003 : Integer;
      AutInvBatchL@1000000004 : Codeunit 50096;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      PhysInvSetupL.GET;

      BaseCalendarChangeL.RESET;
      BaseCalendarChangeL.SETRANGE("Base Calendar Code",PhysInvSetupL."Base Calender");
      BaseCalendarChangeL.SETRANGE(Date,TODAY);
      IF BaseCalendarChangeL.FIND('-') THEN BEGIN
        BaseCalendarChangeL.DELETE;
        PeriodNoL := BaseCalendarChangeL.Day;
      END;
      BaseCalendarChangeL.INIT;
      BaseCalendarChangeL."Base Calendar Code" := PhysInvSetupL."Base Calender";
      BaseCalendarChangeL.Date := TODAY;
      BaseCalendarChangeL.Nonworking := FALSE;
      BaseCalendarChangeL.Day := PeriodNoL;
      BaseCalendarChangeL.INSERT;

      //Run Code
      CLEAR(AutInvBatchL);

      //Check Results
      Assert.IsFalse(AutInvBatchL.CheckCalender(),'Today is a nonworking day');
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50096_CreateInvLogHeader@1000001013();
    VAR
      AutInvBatchL@1000000000 : Codeunit 50096;
      InvLogNoL@1000000001 : Integer;
      InvLogHeaderL@1000000002 : Record 50208;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      CLEAR(AutInvBatchL);
      InvLogNoL := 0;
      //Run Code

      InvLogNoL := AutInvBatchL.CreateInvLogHeader();
      //Check Results
      CLEAR(InvLogHeaderL);
      Assert.IsTrue(InvLogHeaderL.GET(InvLogNoL),'Inventory Log Header was not created');

      IF InvLogHeaderL."No." <> 0 THEN
        InvLogHeaderL.DELETE;
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50096_CheckInvLogLine_True@1000001017();
    VAR
      AutInvBatchL@1000000002 : Codeunit 50096;
      InvLogNoL@1000000001 : Integer;
      InvLogHeaderL@1000000000 : Record 50208;
      InvLogLineL@1000000003 : Record 50209;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      CLEAR(AutInvBatchL);
      InvLogNoL := 0;
      InvLogNoL := AutInvBatchL.CreateInvLogHeader();
      InvLogHeaderL.GET(InvLogNoL);
      CLEAR(InvLogLineL);
      //Run Code


      //Check Results
      Assert.IsTrue(AutInvBatchL.CheckInvLogLine(InvLogLineL,0,InvLogNoL,'',1,''),'Inventory Log line is finished');

      InvLogHeaderL.DELETE(TRUE);
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50096_CheckInvLogLine_False@1000001018();
    VAR
      AutInvBatchL@1000000002 : Codeunit 50096;
      InvLogNoL@1000000001 : Integer;
      InvLogHeaderL@1000000000 : Record 50208;
      InvLogLineL@1000000003 : Record 50209;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      CLEAR(AutInvBatchL);
      InvLogNoL := 0;
      InvLogNoL := AutInvBatchL.CreateInvLogHeader();
      InvLogHeaderL.GET(InvLogNoL);
      CLEAR(InvLogLineL);
      AutInvBatchL.UpdateCreateInLogLine(InvLogLineL,1,'',1,InvLogNoL,'');
      InvLogLineL.Status := InvLogLineL.Status::Error;
      InvLogLineL.MODIFY;

      //Check Results
      Assert.IsFalse(AutInvBatchL.CheckInvLogLine(InvLogLineL,1,InvLogNoL,'',1,''),'Inventory Log line is not finished');

      InvLogHeaderL.DELETE(TRUE);
      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE C50096_UpdateCreateInLogLine@1000001019();
    VAR
      AutInvBatchL@1000000003 : Codeunit 50096;
      InvLogNoL@1000000002 : Integer;
      InvLogHeaderL@1000000001 : Record 50208;
      InvLogLineL@1000000000 : Record 50209;
    BEGIN
      //H1794 05.02.15 TST +++++++++++++++++++++++++++++
      //Initalize and Prepare
      CLEAR(AutInvBatchL);
      InvLogNoL := 0;
      InvLogNoL := AutInvBatchL.CreateInvLogHeader();
      InvLogHeaderL.GET(InvLogNoL);
      CLEAR(InvLogLineL);
      AutInvBatchL.UpdateCreateInLogLine(InvLogLineL,1,'',1,InvLogNoL,'');

      //Run Code
      InvLogLineL.SETRANGE("Log Header No.",InvLogHeaderL."No.");
      //Check Results

      Assert.IsFalse(InvLogLineL.ISEMPTY,'Inventory Log line was not created');

      InvLogHeaderL.DELETE(TRUE);

      //H1794 05.02.15 TST -----------------------------
    END;

    [Test]
    PROCEDURE CU80011_UpdateTrackingStatus@1000000110();
    VAR
      ItemL@1000000006 : Record 27;
      CustomerL@1000000015 : Record 18;
      ItemUnitOfMeasureL@1000000005 : Record 5404;
      UnitOfMeasureL@1000000004 : Record 204;
      LocationL@1000000003 : Record 14;
      SalesLineL@1000000002 : Record 37;
      SalesHeaderL@1000000001 : Record 36;
      PurchasingL@1000000000 : Record 5721;
      SalesTrackingActionL@1000000016 : Record 50201;
      ParcelStatusHistoryL@1000000010 : Record 80013;
      BatchTrackingActionL@1000000008 : Record 50245;
      LibrarySCML@1000000014 : Codeunit 50210;
      CodeToUseL@1000000007 : Code[10];
      NextEntryNo@1000000013 : Integer;
    BEGIN
      //H2064 25.02.15 MSL +++++++++++++++++++++++++++++
      //Initalize and Prepare
      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),2,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := UnitTestMacro;
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      LocationL.SETRANGE(LocationL."Is LF Whse.",TRUE);
      LocationL.FINDLAST; //WHLF

      PurchasingL.SETRANGE(PurchasingL."Location Code",LocationL.Code);
      PurchasingL.FINDFIRST;

      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(SalesHeaderL,SalesHeaderL."Document Type"::Order,CustomerL."No.");

      SalesLineL.INIT;
      SalesLineL."Document Type" := SalesLineL."Document Type"::Order;
      SalesLineL."Document No." := SalesHeaderL."No.";
      SalesLineL."Line No." := 10000;
      SalesLineL.Type := SalesLineL.Type::Item;
      SalesLineL."No." := CodeToUseL;
      SalesLineL."Location Code" := LocationL.Code;
      SalesLineL."Purchasing Code" := PurchasingL.Code;
      SalesLineL.INSERT;

      ParcelStatusHistoryL.FINDLAST;
      NextEntryNo := ParcelStatusHistoryL."Entry No." + 1;

      SalesTrackingActionL.SETRANGE("Tracking Code",PurchasingL."Sales Tracking Code");
      SalesTrackingActionL.SETRANGE(Type,SalesTrackingActionL.Type::UPS);
      SalesTrackingActionL.FINDFIRST;

      ParcelStatusHistoryL.INIT;
      ParcelStatusHistoryL."Entry No." := NextEntryNo;
      ParcelStatusHistoryL."Timestamp Insert" := CREATEDATETIME(WORKDATE,TIME);
      ParcelStatusHistoryL."Document Type" := SalesLineL."Document Type";
      ParcelStatusHistoryL."Document No." := SalesHeaderL."No.";
      ParcelStatusHistoryL."Document Line No." := SalesLineL."Line No.";
      ParcelStatusHistoryL."Status Sub Code" := '31';
      ParcelStatusHistoryL."Used Interface" := 8;
      ParcelStatusHistoryL."Shipping Agent Code" := 'UPS';
      ParcelStatusHistoryL."Tracking Code" := UnitTestMacro;

      //Run Code
      ParcelStatusHistoryL.INSERT(TRUE);
      COMMIT;
      //Check Results
      Assert.IsTrue(BatchTrackingActionL.GET(ParcelStatusHistoryL."Document Type",
                                             ParcelStatusHistoryL."Document No.",
                                             ParcelStatusHistoryL."Document Line No.",
                                             SalesTrackingActionL.Code,
                                             BatchTrackingActionL."Shipping Agent"::UPS,
                                             ParcelStatusHistoryL."Tracking Code"),
                    TextErrorNotExist);

      //Cleanup
      SalesLineL.DELETE;
      SalesHeaderL.DELETE;
      ItemL.DELETE;
      UnitOfMeasureL.DELETE;
      ParcelStatusHistoryL.DELETE;
      BatchTrackingActionL.DELETE;
      //H2064 25.02.15 MSL -------------------------------
    END;

    [Test]
    PROCEDURE CU50108_DeleteBatchTrackStaEnt@1000000112();
    VAR
      ItemL@1000000006 : Record 27;
      CustomerL@1000000015 : Record 18;
      ItemUnitOfMeasureL@1000000005 : Record 5404;
      UnitOfMeasureL@1000000004 : Record 204;
      LocationL@1000000003 : Record 14;
      SalesLineL@1000000002 : Record 37;
      SalesHeaderL@1000000001 : Record 36;
      PurchasingL@1000000000 : Record 5721;
      SalesTrackingActionL@1000000016 : Record 50201;
      ParcelStatusHistoryL@1000000010 : Record 80013;
      BatchTrackingActionL@1000000008 : Record 50245;
      LibrarySCML@1000000014 : Codeunit 50210;
      UPSTrackingL@1000000011 : Codeunit 50108;
      CodeToUseL@1000000007 : Code[10];
      NextEntryNo@1000000013 : Integer;
      BatchTrackActionCountL@1000000009 : Integer;
    BEGIN
      //H2064 25.02.15 MSL +++++++++++++++++++++++++++++
      //Initalize and Prepare
      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),2,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := UnitTestMacro;
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      LocationL.SETRANGE(LocationL."Is LF Whse.",TRUE);
      LocationL.FINDLAST; //WHLF

      PurchasingL.SETRANGE(PurchasingL."Location Code",LocationL.Code);
      PurchasingL.FINDFIRST;

      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(SalesHeaderL,SalesHeaderL."Document Type"::Order,CustomerL."No.");

      SalesLineL.INIT;
      SalesLineL."Document Type" := SalesLineL."Document Type"::Order;
      SalesLineL."Document No." := SalesHeaderL."No.";
      SalesLineL."Line No." := 10000;
      SalesLineL.Type := SalesLineL.Type::Item;
      SalesLineL."No." := CodeToUseL;
      SalesLineL."Location Code" := LocationL.Code;
      SalesLineL."Purchasing Code" := PurchasingL.Code;
      SalesLineL.INSERT;

      ParcelStatusHistoryL.FINDLAST;
      NextEntryNo := ParcelStatusHistoryL."Entry No." + 1;

      SalesTrackingActionL.SETRANGE("Tracking Code",PurchasingL."Sales Tracking Code");
      SalesTrackingActionL.SETRANGE(Type,SalesTrackingActionL.Type::UPS);
      SalesTrackingActionL.FINDFIRST;

      ParcelStatusHistoryL.INIT;
      ParcelStatusHistoryL."Entry No." := NextEntryNo;
      ParcelStatusHistoryL."Timestamp Insert" := CREATEDATETIME(WORKDATE,TIME);
      ParcelStatusHistoryL."Document Type" := SalesLineL."Document Type";
      ParcelStatusHistoryL."Document No." := SalesHeaderL."No.";
      ParcelStatusHistoryL."Document Line No." := SalesLineL."Line No.";
      ParcelStatusHistoryL."Status Sub Code" := '31';
      ParcelStatusHistoryL."Used Interface" := 8;
      ParcelStatusHistoryL."Shipping Agent Code" := 'UPS';
      ParcelStatusHistoryL."Tracking Code" := UnitTestMacro;
      ParcelStatusHistoryL.INSERT(TRUE);
      COMMIT;
      BatchTrackActionCountL := BatchTrackingActionL.COUNT;

      //Run Code
      UPSTrackingL.DeleteBatchTrackingActionEntry(
                     ParcelStatusHistoryL."Document Type",
                     ParcelStatusHistoryL."Document No.",
                     ParcelStatusHistoryL."Document Line No.");
      //Check Results
      Assert.AreEqual(BatchTrackActionCountL-1,BatchTrackingActionL.COUNT,
                      STRSUBSTNO(TextAssertAreEqual,BatchTrackingActionL.COUNT,BatchTrackActionCountL-1));
      Assert.IsFalse(BatchTrackingActionL.GET(ParcelStatusHistoryL."Document Type",
                                              ParcelStatusHistoryL."Document No.",
                                              ParcelStatusHistoryL."Document Line No.",
                                              SalesTrackingActionL.Code,
                                              BatchTrackingActionL."Shipping Agent"::UPS),TextErrorExist) ;
      //Cleanup
      SalesLineL.DELETE;
      SalesHeaderL.DELETE;
      ItemL.DELETE;
      UnitOfMeasureL.DELETE;
      ParcelStatusHistoryL.DELETE;
      //H2064 25.02.15 MSL -------------------------------
    END;

    [Test]
    PROCEDURE CU50108_CreateTrackReqstToUPS@1000000107();
    VAR
      ItemL@1000000006 : Record 27;
      CustomerL@1000000015 : Record 18;
      ItemUnitOfMeasureL@1000000005 : Record 5404;
      UnitOfMeasureL@1000000004 : Record 204;
      LocationL@1000000003 : Record 14;
      SalesLineL@1000000002 : Record 37;
      SalesHeaderL@1000000001 : Record 36;
      PurchasingL@1000000000 : Record 5721;
      SalesTrackingActionL@1000000016 : Record 50201;
      ParcelStatusHistoryL@1000000010 : Record 80013;
      BatchTrackingActionL@1000000008 : Record 50245;
      FPCGeneralSetupL@1000000017 : Record 50055;
      LibrarySCML@1000000014 : Codeunit 50210;
      UPSTrackingL@1000000011 : Codeunit 50108;
      CodeToUseL@1000000007 : Code[10];
      NextEntryNo@1000000013 : Integer;
      UPSResponceFilesCount@1000000009 : Integer;
      FilesRecL@1000000012 : Record 2000000022;
    BEGIN
      //H2064 25.02.15 MSL +++++++++++++++++++++++++++++
      //Initalize and Prepare
      CodeToUseL := COPYSTR(FORMAT(CREATEGUID()),2,10);
      UnitOfMeasureL.INIT;
      UnitOfMeasureL.Code := CodeToUseL;
      UnitOfMeasureL.INSERT;

      ItemL.INIT;
      ItemL."No." := CodeToUseL;
      ItemL.Description := UnitTestMacro;
      ItemL."Base Unit of Measure" := CodeToUseL;
      ItemL.INSERT;

      LocationL.SETRANGE(LocationL."Is LF Whse.",TRUE);
      LocationL.FINDLAST; //WHLF

      PurchasingL.SETRANGE(PurchasingL."Location Code",LocationL.Code);
      PurchasingL.FINDFIRST;

      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(SalesHeaderL,SalesHeaderL."Document Type"::Order,CustomerL."No.");

      SalesLineL.INIT;
      SalesLineL."Document Type" := SalesLineL."Document Type"::Order;
      SalesLineL."Document No." := SalesHeaderL."No.";
      SalesLineL."Line No." := 10000;
      SalesLineL.Type := SalesLineL.Type::Item;
      SalesLineL."No." := CodeToUseL;
      SalesLineL."Location Code" := LocationL.Code;
      SalesLineL."Purchasing Code" := PurchasingL.Code;
      SalesLineL.INSERT;

      ParcelStatusHistoryL.FINDLAST;
      NextEntryNo := ParcelStatusHistoryL."Entry No." + 1;

      SalesTrackingActionL.SETRANGE("Tracking Code",PurchasingL."Sales Tracking Code");
      SalesTrackingActionL.SETRANGE(Type,SalesTrackingActionL.Type::UPS);
      SalesTrackingActionL.FINDFIRST;

      ParcelStatusHistoryL.INIT;
      ParcelStatusHistoryL."Entry No." := NextEntryNo;
      ParcelStatusHistoryL."Timestamp Insert" := CREATEDATETIME(WORKDATE,TIME);
      ParcelStatusHistoryL."Document Type" := SalesLineL."Document Type";
      ParcelStatusHistoryL."Document No." := SalesHeaderL."No.";
      ParcelStatusHistoryL."Document Line No." := SalesLineL."Line No.";
      ParcelStatusHistoryL."Status Sub Code" := '31';
      ParcelStatusHistoryL."Used Interface" := 8;
      ParcelStatusHistoryL."Shipping Agent Code" := 'UPS';
      ParcelStatusHistoryL."Tracking Code" := CodeToUseL;
      ParcelStatusHistoryL.INSERT(TRUE);
      COMMIT;
      FPCGeneralSetupL.GET;

      //Run Code
      UPSTrackingL.CreateTrackingRequestToUPS;

      FilesRecL.RESET;
      FilesRecL.SETRANGE(Path,'C:\');
      IF FilesRecL.FIND('-') THEN;
      FilesRecL.SETRANGE(Path,FPCGeneralSetupL."UPS Import Tracking path");
      FilesRecL.SETRANGE("Is a file",TRUE);
      //FilesRecL.SETRANGE(Name,CodeToUseL);

      //Check Results
      Assert.IsTrue(FilesRecL.FINDFIRST,TextErrorNotExist);

      //Cleanup
      SalesLineL.DELETE;
      SalesHeaderL.DELETE;
      ItemL.DELETE;
      UnitOfMeasureL.DELETE;
      ParcelStatusHistoryL.DELETE;
      BatchTrackingActionL.DELETE;
      //H2064 25.02.15 MSL -------------------------------
    END;

    BEGIN
    {

      _______ Unit Test Object Range _______________
       ID:        1 .. 999         - MS Basic
       ID:     1000 .. 49999       - MS Advanced
       ID:    50000 .. 99999       - Custom
       ID:   100000 .. 9999999     - External
       ID: 10000000 .. 2000009999  - Special
      ______________________________________________

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      H1621       07.10.14  ABR       Created
      H1277       08.10.14  DMA       Tests C50087_UseOldReserve, C50087_UseOldPicking added
      H1414       09.10.14  MSL       Tests CU50029_CountWHLFSales,CU50029_CountWHLFPurchase added
      H1796       23.11.14  DMA       Tests T38_RhenusWEA* and T38_LudwigsfeldeWEA* added
      H1678       11.12.14  MSL       Tests CU50240_ProcSingleEntry_Retry added
      H1846       11.12.14  MSL       Tests CU50603_ApplyShipAgentTransl,CU50603_ModifyWebShopItem,CU50603_EvaluateData
      H1636       22.12.14  MSL       Tests CU50005_GetPurchCodeV2 added
      H1999       15.01.15  DMA       BUG:Deliverd item transmitted again in new Seq no. KAD  (H1911)
      H1987       27.01.15  DMA       CSV Tracking Importer Improvements for Hermes
      H2009       18.02.15  MSL       Tests CU448_CalculateAverageDuration,CU448_GetAVGDuraDaysToGoBack added
      T0018       16.02.14  MIK       Test for T0018. T0018_Scenario_Test()
      H2157       19.02.15  DMO       CU50302_CheckWhse24STALocation is added
      H1794       05.02.15  TST       Tests C50162_ClosePeriodsTrue, C50162_ClosePeriodsFalse, C50163_CYCLECOUNTPOST_True,
                                      C50163_CYCLECOUNTPOST_False, C50164_UPDATEJOBQUEUEENTRY, C50096_CheckCalendar_True
                                      C50096_CreateInvLogHeader, C50096_CheckInvLogLine_True, C50096_CheckInvLogLine_False,
                                      C50096_UpdateCreateInLogLine
      H2064       25.02.15  MSL       Tests CU80011_UpdateTrackingStatus,CU50108_DeleteBatchTrackStaEnt added
      H3783       12.03.15  DMA       FTTC 3 - Phase 5 Cancel Process - Cancel Tracking - Cancel Tracking List
      H2146       18.02.15  EHN       Dynamic location for all home24 operated warehouses in WEA

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |     Cooperation Tectura & Home24 NAV Team  |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      T0082       08.12.14  TEC-GH    Manual Posting by Batch, Extende Parameter in Line
      H4420       14.07.15  MSL       Improve Job Queue Entry average calculation: Test "CU448_GetAVGDuraDaysToGoBack" removed
    }
    END.
  }
}

