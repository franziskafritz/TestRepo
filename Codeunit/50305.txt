OBJECT Codeunit 50305 Whse. LF Purch. Im/Export Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=17.04.15;
    Time=12:00:00;
    Modified=Yes;
    Version List=HME2146;
  }
  PROPERTIES
  {
    TableNo=50301;
    OnRun=BEGIN
            ExportWEA(Rec);
            //Test
          END;

  }
  CODE
  {
    VAR
      WhseLFSetup@1000000000 : Record 50300;
      FPCInterfaceSetup@1000000003 : Record 50014;
      WhseLFGeneralMgt@1000000002 : Codeunit 50307;
      FileName@1000000001 : Text[255];

    PROCEDURE "--- Export ---"@1000000004();
    BEGIN
    END;

    PROCEDURE ExportWEA@1000000000(VAR PurchExportHeaderR@1000000000 : Record 50301);
    VAR
      WhseH24SubInterfaceL@1000000007 : Record 50506;
      PurchExportLineL@1000000001 : Record 50302;
      FileRecL@1000000004 : File;
      FilePathL@1000000005 : Text[255];
      TextLineL@1000000002 : Text[1024];
      P1100_001@1000000003 : TextConst 'DEU=File could not be created.;ENU=File could not be created.';
      P1100_002@1000000008 : TextConst 'DEU=File could not be opened.;ENU=File could not be opened.';
      P1100_003@1000000006 : TextConst 'DEU=File could not be converted to UFT-8.;ENU=File could not be converted to UFT-8.';
    BEGIN
      PurchExportLineL.SETRANGE("Entry No.",PurchExportHeaderR."Entry No.");
      PurchExportLineL.FINDFIRST;
      //Test
      CLEAR(FileRecL);
      CLEAR(TextLineL);

      WhseLFSetup.GET();
      //H2146 17.02.15 EHN +++++++++++++++++++++++++++++++++++++++
      WhseLFSetup.TESTFIELD("Record Type WEA");
      PurchExportHeaderR.TESTFIELD("Whse. H24 Identifier Code");
      WhseH24SubInterfaceL.GET(WhseLFSetup."Record Type WEA",PurchExportHeaderR."Whse. H24 Identifier Code");
      FPCInterfaceSetup.GET(WhseH24SubInterfaceL."FPC Interface Setup Code");
      //H2146 17.02.15 EHN ---------------------------------------

      FPCInterfaceSetup.TESTFIELD("Export Folder");
      FilePathL := FPCInterfaceSetup."Export Folder";
      //H2146 17.02.15 EHN ++++++++++++++++
      FileName := CreateWEAFile(PurchExportHeaderR."Whse. H24 Identifier Code");
      //H2146 17.02.15 EHN ----------------

      IF COPYSTR(FilePathL,STRLEN(FilePathL),1) <> '\' THEN
        FilePathL := FilePathL + '\';

      // Datei anlegen und îffnen.
      IF NOT WhseLFGeneralMgt.FileCreate(FilePathL,FileName) THEN
        ERROR(P1100_001);
      IF NOT WhseLFGeneralMgt.FileOpen(FilePathL,FileName) THEN
        ERROR(P1100_002);

      //Ab hier Zuweisung der einzelnen Werte gemÑ· Rhenus Spezifikation

      // Satzart -> WEA
      WhseLFGeneralMgt.AppendToString(TextLineL,WhseLFSetup."Record Type WEA",3,' ',0);

      // Mandant ->
      //H2146 17.02.15 EHN +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      WhseLFGeneralMgt.AppendToString(TextLineL,PurchExportHeaderR."Whse. H24 Identifier Code",4,' ',0);
      //H2146 17.02.15 EHN -----------------------------------------------------------

      // öbertragungsgrund
      CASE PurchExportHeaderR."Transmission Mode" OF
        PurchExportHeaderR."Transmission Mode"::New: WhseLFGeneralMgt.AppendToString(TextLineL,'1',1,' ',0);
        PurchExportHeaderR."Transmission Mode"::Cancel: WhseLFGeneralMgt.AppendToString(TextLineL,'2',1,' ',0);
        PurchExportHeaderR."Transmission Mode"::Update: WhseLFGeneralMgt.AppendToString(TextLineL,'3',1,' ',0);
      END;

      // Niederlassungsnummer
      //H2146, H1412 11.08.14 EHN ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      WhseLFGeneralMgt.AppendToString(TextLineL,PurchExportHeaderR."Branch Code",6,' ',1);
      //H2146, H1412 11.08.14 EHN ----------------------------------------------------------------

      // Wareneingangsnummer
      WhseLFGeneralMgt.AppendToString(TextLineL,PurchExportHeaderR."LF Order No.",15,' ',1);

      // Artikeltypnummer
      WhseLFGeneralMgt.AppendToString(TextLineL,PurchExportLineL."No.",30,' ',1);

      // Artikeltypbezeichnung
      WhseLFGeneralMgt.AppendToString(TextLineL,PurchExportLineL.Description,50,' ',1);

      // Artikeltypbarcode
      WhseLFGeneralMgt.AppendToString(TextLineL,PurchExportLineL.Barcode,32,' ',1);

      // Menge
      WhseLFGeneralMgt.AppendToString(TextLineL,FORMAT(ROUND(PurchExportLineL.Quantity,1)),5,' ',0);

      // PackstÅcke
      WhseLFGeneralMgt.AppendToString(TextLineL,FORMAT(ROUND(PurchExportLineL."No. of Packages",1)),2,' ',0);

      // Volumen
      WhseLFGeneralMgt.AppendToString(TextLineL,FORMAT(ROUND(PurchExportLineL."Unit Volume",1)),5,' ',0);

      // Gewicht
      WhseLFGeneralMgt.AppendToString(TextLineL,FORMAT(ROUND(PurchExportLineL."Unit Weight",1)),4,' ',0);

      // Liefertermin
      WhseLFGeneralMgt.AppendToString(TextLineL,
        FORMAT(PurchExportLineL."Promised Receipt Date",0,'<Day,2>.<Month,2>.<Year4,4>'),10,' ',0);

      // Kundenauftragsnummer
      WhseLFGeneralMgt.AppendToString(TextLineL,PurchExportLineL."LF Sales Order No.",20,' ',1);

      // Satzabschluss
      TextLineL := TextLineL + ';';

      // Zeile anhÑngen
      WhseLFGeneralMgt.FileAddLine(TextLineL,TRUE);

      // Datei schlie·en und in UTF-8 konvertieren
      WhseLFGeneralMgt.FileSave();

      IF NOT WhseLFGeneralMgt.FileConvertToUTF8(FilePathL,FileName) THEN
        ERROR(P1100_003);

      PurchExportHeaderR.Filename := FileName;
      PurchExportHeaderR."Process Timestamp" := CURRENTDATETIME;
      PurchExportHeaderR.MODIFY;
    END;

    LOCAL PROCEDURE CreateWEAFile@1000000005(WhseH24IDV@1000000002 : Code[10]) : Text[50];
    VAR
      WEAIdentL@1000000000 : Code[10];
      ClientIdentL@1000000001 : Code[10];
      TimestampTxtL@1000000003 : Text[50];
    BEGIN
      WhseLFSetup.TESTFIELD("Record Type WEA");
      WhseLFSetup.TESTFIELD("LF Client Identifier");
      WEAIdentL := WhseLFSetup."Record Type WEA";
      //H2146 17.02.15 EHN ++++++++++++++++++
      ClientIdentL := WhseH24IDV;
      //H2146 17.02.15 EHN ------------------
      TimestampTxtL := FORMAT(CURRENTDATETIME,0,'<Year4><Month,2><Day,2><Hours24,2><Minutes,2><Seconds,2><Thousands,3>');
      EXIT(WEAIdentL + ClientIdentL + TimestampTxtL + '.txt');
    END;

    LOCAL PROCEDURE SetFilename@1000000006(FilenameV@1000000000 : Text[250]);
    BEGIN
      FileName := FilenameV;
    END;

    PROCEDURE GetFilename@1000000003() : Text[250];
    BEGIN
      EXIT(FileName);
    END;

    PROCEDURE DeleteFileAfterError@1000000012();
    BEGIN
      WhseLFGeneralMgt.FileSave();
      WhseLFGeneralMgt.FileDeleteAfterError(FPCInterfaceSetup."Export Folder",FileName);
    END;

    PROCEDURE "--- Import ---"@1000000007();
    BEGIN
    END;

    PROCEDURE ReadWEM@1000000001(FileNameV@1000000000 : Text[1024];FileName2V@1000000005 : Text[250]) : Boolean;
    VAR
      FileRecL@1000000003 : File;
      NewLineL@1000000002 : Text[1024];
      UTFStreamL@1000000001 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      CharL@1000000004 : Char;
      WemTypeL@1000000013 : Text[30];
      ClientIdentifierL@1000000012 : Code[10];
      BranchCodeL@1000000011 : Code[10];
      ReceiptNoL@1000000010 : Code[20];
      ShipmentNoL@1000000009 : Code[20];
      ParentEntryNoL@1000000008 : Integer;
      ShipmentPositionL@1000000007 : Integer;
    BEGIN
      FileRecL.OPEN(FileNameV);
      CREATE(UTFStreamL);

      UTFStreamL.Open();
      UTFStreamL.Charset('UTF-8');
      UTFStreamL.LoadFromFile(FileNameV);

      WHILE NOT UTFStreamL.EOS DO BEGIN
        EVALUATE(CharL,UTFStreamL.ReadText(1));
        IF (CharL <> 10) AND (CharL <> 13) THEN BEGIN
          NewLineL := NewLineL + FORMAT(CharL);
        END ELSE BEGIN
          IF (NewLineL <> '') AND (STRLEN(NewLineL) > 0) THEN BEGIN
            ProcessWEMLine(NewLineL,FileName2V);
            NewLineL := '';
          END;
        END;
      END;
      UTFStreamL.Close;
      FileRecL.CLOSE;

      EXIT(TRUE);
    END;

    PROCEDURE ProcessWEMLine@1000000002(TextLineV@1000000000 : Text[1024];FileNameV@1000000002 : Text[250]);
    VAR
      WhseLFPurchImportL@1000000001 : Record 50303;
    BEGIN
      // Entry No. Integer (PK)
      WhseLFPurchImportL."Entry No." := WhseLFGeneralMgt.GetNextEntryNo(50303);
      WhseLFPurchImportL.INSERT;

      // Setting Import Fields
      WhseLFPurchImportL."Import Timestamp" := CURRENTDATETIME;
      WhseLFPurchImportL."Import Status" := WhseLFPurchImportL."Import Status"::Unprocessed;
      WhseLFPurchImportL."Process Timestamp" := 0DT;

      // "Satzart" (Pos. 1) from file
      WhseLFPurchImportL."Record Type" := COPYSTR(TextLineV,1,3);

      // "Mandant" (Pos. 4) from file
      WhseLFPurchImportL."Client Identifier" := COPYSTR(TextLineV,4,4);

      // "Niederlassungsnummer" (Pos. 8) from file
      WhseLFPurchImportL."Branch Code" := COPYSTR(TextLineV,8,6);

      // "Wareneingangsnummer" (Pos. 14) from file
      WhseLFPurchImportL."Receipt No." := COPYSTR(TextLineV,14,15);

      // "Lieferscheinnummer" (Pos. 29) from file
      WhseLFPurchImportL."Shipment No." := COPYSTR(TextLineV,29,30);

      // "Lieferscheinposition" (Pos. 59) from file
      EVALUATE(WhseLFPurchImportL."Shipment Pos.",COPYSTR(TextLineV,59,5));

      // "Menge" (Pos. 64) from file
      EVALUATE(WhseLFPurchImportL.Quantity,COPYSTR(TextLineV,64,5));

      // "Bestandsart" (Pos. 69) from file
      WhseLFPurchImportL."Stock Type" := COPYSTR(TextLineV,69,1);

      // "davon Menge beschÑdigt" (Pos. 70) from file
      EVALUATE(WhseLFPurchImportL."Qty. Damaged",COPYSTR(TextLineV,70,4));

      // "Artikeltypnummer" (Pos. 74) from file
      WhseLFPurchImportL."Item No." := COPYSTR(TextLineV,74,30);

      // "Artikeltybeschreibung" (Pos. 104) from file
      WhseLFPurchImportL."Item Description" := COPYSTR(TextLineV,104,50);

      // "Artikeltypbarcode" (Pos. 154) from file
      WhseLFPurchImportL."Item Barcode" := COPYSTR(TextLineV,154,32);

      //H1412 15.09.14 EHN ++++++++++++++++++++++++++++++++
      // "PackstÅcke" (Pos. 186) from file
      //EVALUATE(WhseLFPurchImportL."No. of Packages",COPYSTR(TextLineV,186,2));

      // "Volumen" (Pos. 188) from file
      //EVALUATE(WhseLFPurchImportL.Volume,COPYSTR(TextLineV,188,5));

      // "Gewicht" (Pos. 193) from file
      //EVALUATE(WhseLFPurchImportL.Weight,COPYSTR(TextLineV,193,4));
      //H1412 15.09.14 EHN --------------------------------

      // "Wareneingangsdatum" (Pos. 197) from file
      EVALUATE(WhseLFPurchImportL."Receipt Date",COPYSTR(TextLineV,197,10));

      // "Kundenauftragsnummer" (Pos. 207) from file
      WhseLFPurchImportL."Customer Order No." := COPYSTR(TextLineV,207,20);

      // "Teilabschlusskennzeichen (Pos. 227) from file (if transmitted, else position is "Satzabschlusskennzeichen" (;) )
      IF COPYSTR(TextLineV,227,1) = '1' THEN
        WhseLFPurchImportL."Partially Completed" := TRUE
      ELSE
        WhseLFPurchImportL."Partially Completed" := FALSE;

      WhseLFPurchImportL.Filename := FileNameV;

      // Final MODIFY
      WhseLFPurchImportL.MODIFY;
    END;

    PROCEDURE "*** H0854 ***"@1000000008();
    BEGIN
    END;

    PROCEDURE ProcessWEMPSELine@1000000017(TextLineV@1000000000 : Text[1024];ClientIdentifierV@1000000002 : Code[10];BranchCodeV@1000000003 : Code[10];ReceiptNoV@1000000004 : Code[20];ShipmentNoV@1000000005 : Code[20];ShipmentPositionV@1000000007 : Integer;ParentEntryNoV@1000000006 : Integer;FileNameV@1000000008 : Text[250]);
    VAR
      WhseLFPurchImportL@1000000001 : Record 50303;
      TempStringL@1000000009 : Text[30];
    BEGIN
      // Entry No. Integer (PK)
      WhseLFPurchImportL."Entry No." := WhseLFGeneralMgt.GetNextEntryNo(50303);

      // Setting Import Fields
      WhseLFPurchImportL."Import Timestamp" := CURRENTDATETIME;
      WhseLFPurchImportL.Filename := FileNameV;
      WhseLFPurchImportL."Import Status" := WhseLFPurchImportL."Import Status"::Unprocessed;
      WhseLFPurchImportL."Process Timestamp" := 0DT;
      WhseLFPurchImportL."Parent Entry No." := ParentEntryNoV;
      WhseLFPurchImportL."Shipment Pos." := ShipmentPositionV;

      // "Satzart" (Pos. 1) from file
      WhseLFPurchImportL."Record Type" := COPYSTR(TextLineV,1,3);

      // "Menge" (Pos. 64) from file
      EVALUATE(WhseLFPurchImportL.Quantity,COPYSTR(TextLineV,67,5));

      // "Bestandsart" (Pos. 69) from file
      WhseLFPurchImportL."Stock Type" := COPYSTR(TextLineV,72,1);

      // "davon Menge beschÑdigt" (Pos. 70) from file
      IF COPYSTR(TextLineV,34,1) = 'N' THEN
        EVALUATE(WhseLFPurchImportL."Qty. Damaged",COPYSTR(TextLineV,67,5));

      // "Artikeltypnummer" (Pos. 74) from file
      WhseLFPurchImportL."Item No." := COPYSTR(TextLineV,4,30);

      // "Artikeltybeschreibung" (Pos. 104) from file
      WhseLFPurchImportL."Item Description" := COPYSTR(TextLineV,35,32);

      //H1882 05.01.15 EHN ++++++++++++++++++++++++++++++++++++++++++++++
      {
      // "PackstÅcke" (Pos. 186) from file
      TempStringL := COPYSTR(TextLineV,35,5);
      TempStringL := COPYSTR(TempStringL,STRPOS(TempStringL,'/')+1,STRLEN(TempStringL)-STRPOS(TempStringL,'/'));

      IF STRPOS(TempStringL, ' ') <> 0 THEN
        TempStringL := COPYSTR(TempStringL, 1, STRPOS(TempStringL, ' '));

      EVALUATE(WhseLFPurchImportL."No. of Packages",TempStringL);
      }
      //H1882 05.01.15 EHN ----------------------------------------------

      // Add data from WEM line
      WhseLFPurchImportL."Client Identifier" := ClientIdentifierV;
      WhseLFPurchImportL."Branch Code" := BranchCodeV;
      WhseLFPurchImportL."Receipt No." := ReceiptNoV;
      WhseLFPurchImportL."Shipment No." := ShipmentNoV;

      // Final MODIFY
      WhseLFPurchImportL.INSERT;
    END;

    PROCEDURE ReadWMP@1000000020(FileNameV@1000000000 : Text[1024];FileName2V@1000000005 : Text[250]) : Boolean;
    VAR
      FileRecL@1000000003 : File;
      NewLineL@1000000002 : Text[1024];
      UTFStreamL@1000000001 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      CharL@1000000004 : Char;
      "*** H0854 ***"@1000000006 : Integer;
      WemTypeL@1000000013 : Text[30];
      ClientIdentifierL@1000000012 : Code[10];
      BranchCodeL@1000000011 : Code[10];
      ReceiptNoL@1000000010 : Code[20];
      ShipmentNoL@1000000009 : Code[20];
      ParentEntryNoL@1000000008 : Integer;
      ShipmentPositionL@1000000007 : Integer;
    BEGIN
      FileRecL.OPEN(FileNameV);
      CREATE(UTFStreamL);

      UTFStreamL.Open;
      UTFStreamL.Charset('UTF-8');
      UTFStreamL.LoadFromFile(FileNameV);

      WHILE NOT UTFStreamL.EOS DO BEGIN
        EVALUATE(CharL,UTFStreamL.ReadText(1));
        IF (CharL <> 10) AND (CharL <> 13) THEN BEGIN
          NewLineL := NewLineL + FORMAT(CharL);
        END ELSE BEGIN
          IF (NewLineL <> '') AND (STRLEN(NewLineL) > 0) THEN BEGIN
            IF NOT (COPYSTR(NewLineL,1,1) = '#') THEN BEGIN
              WemTypeL := COPYSTR(NewLineL,1,3);
              IF WemTypeL = 'PSE' THEN
                ProcessWEMPSELine(NewLineL,ClientIdentifierL,BranchCodeL,ReceiptNoL,ShipmentNoL,ShipmentPositionL,
                  ParentEntryNoL,FileName2V)
              ELSE BEGIN
                ParentEntryNoL := 0;
                ProcessWMPLine(NewLineL,FileName2V);
                ParentEntryNoL := WhseLFGeneralMgt.GetLastEntryNo(DATABASE::"Whse. LF Purchase Import",5,UPPERCASE(WemTypeL));
                ClientIdentifierL := COPYSTR(NewLineL,4,4);
                BranchCodeL := COPYSTR(NewLineL,8,6);
                ReceiptNoL := COPYSTR(NewLineL,14,15);
                ShipmentNoL := COPYSTR(NewLineL,29,20);
                EVALUATE(ShipmentPositionL,COPYSTR(NewLineL,59,5));
              END;
            END;
            NewLineL := '';
          END;
        END;
      END;
      UTFStreamL.Close;
      FileRecL.CLOSE;

      EXIT(TRUE);
    END;

    PROCEDURE ProcessWMPLine@1000000019(TextLineV@1000000000 : Text[1024];FileNameV@1000000002 : Text[250]);
    VAR
      WhseLFPurchImportL@1000000001 : Record 50303;
    BEGIN
      // Entry No. Integer (PK)
      WhseLFPurchImportL."Entry No." := WhseLFGeneralMgt.GetNextEntryNo(50303);
      WhseLFPurchImportL.INSERT;

      // Setting Import Fields
      WhseLFPurchImportL."Import Timestamp" := CURRENTDATETIME;
      WhseLFPurchImportL."Import Status" := WhseLFPurchImportL."Import Status"::Unprocessed;
      WhseLFPurchImportL."Process Timestamp" := 0DT;

      // "Satzart" (Pos. 1) from file
      WhseLFPurchImportL."Record Type" := COPYSTR(TextLineV,1,3);

      // "Mandant" (Pos. 4) from file
      WhseLFPurchImportL."Client Identifier" := COPYSTR(TextLineV,4,4);

      // "Niederlassungsnummer" (Pos. 8) from file
      WhseLFPurchImportL."Branch Code" := COPYSTR(TextLineV,8,6);

      // "Wareneingangsnummer" (Pos. 14) from file
      WhseLFPurchImportL."Receipt No." := COPYSTR(TextLineV,14,15);

      // "Lieferscheinnummer" (Pos. 29) from file
      WhseLFPurchImportL."Shipment No." := COPYSTR(TextLineV,29,20);

      // "Lieferscheinposition" (Pos. 59) from file
      EVALUATE(WhseLFPurchImportL."Shipment Pos.",COPYSTR(TextLineV,59,5));

      // "Menge" (Pos. 64) from file
      EVALUATE(WhseLFPurchImportL.Quantity,COPYSTR(TextLineV,64,5));

      // "Bestandsart" (Pos. 69) from file
      WhseLFPurchImportL."Stock Type" := COPYSTR(TextLineV,69,1);

      // "davon Menge beschÑdigt" (Pos. 70) from file
      EVALUATE(WhseLFPurchImportL."Qty. Damaged",COPYSTR(TextLineV,70,4));

      // "Artikeltypnummer" (Pos. 74) from file
      WhseLFPurchImportL."Item No." := COPYSTR(TextLineV,74,30);

      // "Artikeltybeschreibung" (Pos. 104) from file
      WhseLFPurchImportL."Item Description" := COPYSTR(TextLineV,104,50);

      // "Artikeltypbarcode" (Pos. 154) from file
      WhseLFPurchImportL."Item Barcode" := COPYSTR(TextLineV,154,32);

      // "PackstÅcke" (Pos. 186) from file
      EVALUATE(WhseLFPurchImportL."No. of Packages",COPYSTR(TextLineV,186,2));

      // "Volumen" (Pos. 188) from file
      EVALUATE(WhseLFPurchImportL.Volume,COPYSTR(TextLineV,188,5));

      // "Gewicht" (Pos. 193) from file
      EVALUATE(WhseLFPurchImportL.Weight,COPYSTR(TextLineV,193,4));

      // "Wareneingangsdatum" (Pos. 197) from file
      EVALUATE(WhseLFPurchImportL."Receipt Date",COPYSTR(TextLineV,197,10));

      // "Kundenauftragsnummer" (Pos. 207) from file
      WhseLFPurchImportL."Customer Order No." := COPYSTR(TextLineV,207,20);

      // "Teilabschlusskennzeichen (Pos. 227) from file (if transmitted, else position is "Satzabschlusskennzeichen" (;) )
      IF COPYSTR(TextLineV,227,1) = '1' THEN
        WhseLFPurchImportL."Partially Completed" := TRUE
      ELSE
        WhseLFPurchImportL."Partially Completed" := FALSE;

      WhseLFPurchImportL.Filename := FileNameV;

      // Final MODIFY
      WhseLFPurchImportL.MODIFY;
    END;

    PROCEDURE "*** H0856 ***"@1000000009();
    BEGIN
    END;

    PROCEDURE ReadUMP@1000000014(FilePathNameV@1000000000 : Text[1024];FileNameV@1000000006 : Text[250]) : Boolean;
    VAR
      FileRecL@1000000003 : File;
      NewLineL@1000000002 : Text[1024];
      UTFStreamL@1000000001 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      CharL@1000000004 : Char;
      UmpTypeL@1000000007 : Text[30];
      ClientIdentifierL@1000000011 : Code[10];
      BranchCodeL@1000000010 : Code[10];
      ReceiptNoL@1000000009 : Code[20];
      ReceiptDateL@1000000008 : Date;
      ParentEntryNoL@1000000005 : Integer;
      EntryTimestampL@1000000012 : DateTime;
    BEGIN
      FileRecL.OPEN(FilePathNameV);
      CREATE(UTFStreamL);

      UTFStreamL.Open;
      UTFStreamL.Charset('UTF-8');
      UTFStreamL.LoadFromFile(FilePathNameV);

      WHILE NOT UTFStreamL.EOS DO BEGIN
        EVALUATE(CharL,UTFStreamL.ReadText(1));
        IF (CharL <> 10) AND (CharL <> 13) THEN BEGIN
          NewLineL := NewLineL + FORMAT(CharL);
        END ELSE BEGIN
          IF (NewLineL <> '') AND (STRLEN(NewLineL) > 0) THEN BEGIN
            IF NOT (COPYSTR(NewLineL,1,1) = '#') THEN BEGIN
              UmpTypeL := COPYSTR(NewLineL,1,3);
              IF UmpTypeL = 'PSE' THEN
                ProcessUMPPSELine(NewLineL,ClientIdentifierL,BranchCodeL,ReceiptNoL,ReceiptDateL,ParentEntryNoL,
                  EntryTimestampL,FileNameV)
              ELSE BEGIN
                ParentEntryNoL := 0;
                ProcessUMPLine(NewLineL,FileNameV);
                ParentEntryNoL := WhseLFGeneralMgt.GetLastEntryNo(DATABASE::"Whse. LF UMP Import Line",5,'UMP');
                ClientIdentifierL := COPYSTR(NewLineL,4,4);
                BranchCodeL := COPYSTR(NewLineL,8,6);
                ReceiptNoL := COPYSTR(NewLineL,14,30);
                EVALUATE(ReceiptDateL,COPYSTR(NewLineL,81,10));
                EVALUATE(EntryTimestampL,CONVERTSTR(COPYSTR(NewLineL,81,19),'-',' '));
              END;
            END;
            NewLineL := '';
          END;
        END;
      END;
      UTFStreamL.Close;
      FileRecL.CLOSE;

      EXIT(TRUE);
    END;

    PROCEDURE ProcessUMPLine@1000000013(TextLineV@1000000000 : Text[1024];FileNameV@1000000002 : Text[250]);
    VAR
      UMPImportLineL@1000000001 : Record 50309;
    BEGIN
      // Entry No. Integer (PK)
      UMPImportLineL."Entry No." := WhseLFGeneralMgt.GetNextEntryNo(DATABASE::"Whse. LF UMP Import Line");

      // Setting Import Fields
      UMPImportLineL."Import Timestamp" := CURRENTDATETIME;
      UMPImportLineL."File Name" := FileNameV;
      UMPImportLineL."Import Status" := UMPImportLineL."Import Status"::Unprocessed;
      UMPImportLineL."Process Timestamp" := 0DT;

      // "Satzart" (Pos. 1) from file
      UMPImportLineL."Record Type" := COPYSTR(TextLineV,1,3);

      // "Mandant" (Pos. 4) from file
      UMPImportLineL."Client Identifier" := COPYSTR(TextLineV,4,4);

      // "Niederlassungsnummer" (Pos. 8) from file
      UMPImportLineL."Branch Code" := COPYSTR(TextLineV,8,6);

      // "Artikeltypnummer" (Pos. 14) from file
      UMPImportLineL."Item No." := COPYSTR(TextLineV,14,30);

      // "Menge" (Pos. 44) from file
      EVALUATE(UMPImportLineL.Quantity,COPYSTR(TextLineV,44,5));

      // "Bewertung" (Pos. 49) from file
      CASE COPYSTR(TextLineV,49,1) OF
        'V': UMPImportLineL."Item Type" := UMPImportLineL."Item Type"::Sellable;
        'N': UMPImportLineL."Item Type" := UMPImportLineL."Item Type"::Unsellable;
      END;

      //"öbertragungsgrund" (Pos. 50) from file
      EVALUATE(UMPImportLineL."Relocation Reason",COPYSTR(TextLineV,50,1));

      //WE_Umb_Ent (Pos. 51) from file
      UMPImportLineL."Transfer Description" := COPYSTR(TextLineV,51,30);

      //Zeitstempel (Pos. 81) from file
      EVALUATE(UMPImportLineL."Entry Timestamp",CONVERTSTR(COPYSTR(TextLineV,81,19),'-',' '));

      // Final MODIFY
      UMPImportLineL.INSERT;
    END;

    PROCEDURE ProcessUMPPSELine@1000000016(TextLineV@1000000000 : Text[1024];ClientIdentifierV@1000000002 : Code[10];BranchCodeV@1000000003 : Code[10];ReceiptNoV@1000000004 : Code[20];ReceiptDateV@1000000005 : Date;ParentEntryNoV@1000000006 : Integer;EntryTimestampV@1000000007 : DateTime;FileNameV@1000000008 : Text[30]);
    VAR
      UMPImportLineL@1000000001 : Record 50309;
    BEGIN
      // Entry No. Integer (PK)
      UMPImportLineL."Entry No." := WhseLFGeneralMgt.GetNextEntryNo(DATABASE::"Whse. LF UMP Import Line");

      // Setting Import Fields
      UMPImportLineL."Import Timestamp" := CURRENTDATETIME;
      UMPImportLineL."File Name" := FileNameV;
      UMPImportLineL."Import Status" := UMPImportLineL."Import Status"::Unprocessed;
      UMPImportLineL."Process Timestamp" := 0DT;
      UMPImportLineL."Parent Entry No." := ParentEntryNoV;
      UMPImportLineL."Entry Timestamp" := EntryTimestampV;

      // "Satzart" (Pos. 1) from file
      UMPImportLineL."Record Type" := COPYSTR(TextLineV,1,3);

      // "Menge" (Pos. 64) from file
      EVALUATE(UMPImportLineL.Quantity,COPYSTR(TextLineV,67,5));

      // "Bestandsart" (Pos. 69) from file
      UMPImportLineL."Inventory Type" := COPYSTR(TextLineV,72,1);


      // "Referenz" (Pos. 34) from file
      CASE COPYSTR(TextLineV,34,1) OF
        'V': UMPImportLineL."Item Type" := UMPImportLineL."Item Type"::Sellable;
        'N': UMPImportLineL."Item Type" := UMPImportLineL."Item Type"::Unsellable;
      END;

      // "Artikeltypnummer" (Pos. 74) from file
      UMPImportLineL."Item No." := COPYSTR(TextLineV,4,30);

      // "Artikeltybeschreibung" (Pos. 104) from file
      UMPImportLineL."Item Description" := COPYSTR(TextLineV,35,32);

      // Add data from UMP line
      UMPImportLineL."Client Identifier" := ClientIdentifierV;
      UMPImportLineL."Branch Code" := BranchCodeV;

      UMPImportLineL.INSERT;
    END;

    PROCEDURE "*** H0857 ***"@1000000011();
    BEGIN
    END;

    PROCEDURE ReadBMP@1000000010(FilePathNameV@1000000012 : Text[1024];FileNameV@1000000000 : Text[250]) : Boolean;
    VAR
      WhseLFBMPImportL@1000000010 : Record 50199;
      FileRecL@1000000003 : File;
      UTFStreamL@1000000001 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      ReceiptDateL@1000000005 : DateTime;
      BmpTypeL@1000000009 : Text[30];
      NewLineL@1000000002 : Text[1024];
      ClientIdentifierL@1000000008 : Code[10];
      BranchCodeL@1000000007 : Code[10];
      ReceiptNoL@1000000006 : Code[20];
      CharL@1000000004 : Char;
      ParentEntryNoL@1000000011 : Integer;
    BEGIN
      FileRecL.OPEN(FilePathNameV);
      CREATE(UTFStreamL);

      UTFStreamL.Open;
      UTFStreamL.Charset('UTF-8');
      UTFStreamL.LoadFromFile(FilePathNameV);

      WhseLFBMPImportL.RESET;
      WhseLFBMPImportL.DELETEALL;

      WHILE NOT UTFStreamL.EOS DO BEGIN
        EVALUATE(CharL,UTFStreamL.ReadText(1));
        IF (CharL <> 10) AND (CharL <> 13) THEN BEGIN
          NewLineL := NewLineL + FORMAT(CharL);
        END ELSE BEGIN
          IF (NewLineL <> '') AND (STRLEN(NewLineL) > 0) THEN BEGIN
            IF NOT (COPYSTR(NewLineL,1,1) = '#') THEN BEGIN
              BmpTypeL := COPYSTR(NewLineL,1,3);

              IF BmpTypeL = 'PSE' THEN
                ProcessBMPPSELine(NewLineL,ClientIdentifierL,BranchCodeL,ReceiptNoL,ReceiptDateL,
                  ParentEntryNoL,FileNameV)
              ELSE BEGIN
                ParentEntryNoL := 0;
                ProcessBMPLine(NewLineL,FileNameV);
                ParentEntryNoL := WhseLFGeneralMgt.GetLastEntryNo(DATABASE::"Whse. LF BMP Import",5,'BMA');
                ClientIdentifierL := COPYSTR(NewLineL,4,4);
                BranchCodeL := COPYSTR(NewLineL,8,6);
                ReceiptNoL := COPYSTR(NewLineL,14,15);
                EVALUATE(ReceiptDateL,COPYSTR(NewLineL,60,10));
              END;
            END;
          END;
          NewLineL := '';
        END;
      END;
      UTFStreamL.Close;
      FileRecL.CLOSE;

      EXIT(TRUE);
    END;

    PROCEDURE ProcessBMPLine@1000000018(TextLineV@1000000000 : Text[1024];FileNameV@1000000002 : Text[250]);
    VAR
      WhseLFBMPImportL@1000000001 : Record 50310;
    BEGIN
      // Entry No. Integer (PK)
      WhseLFBMPImportL.INIT;
      WhseLFBMPImportL."Entry No." := WhseLFGeneralMgt.GetNextEntryNo(DATABASE::"Whse. LF BMP Import");

      // Setting Import Fields
      WhseLFBMPImportL."Import Timestamp" := CURRENTDATETIME;
      WhseLFBMPImportL."File Name" := FileNameV;
      WhseLFBMPImportL."Import Status" := WhseLFBMPImportL."Import Status"::Unprocessed;
      WhseLFBMPImportL."Process Timestamp" := 0DT;

      // "Satzart" (Pos. 1) from file
      WhseLFBMPImportL."Record Type" := COPYSTR(TextLineV,1,3);

      // "Mandant" (Pos. 4) from file
      WhseLFBMPImportL."Client Identifier" := COPYSTR(TextLineV,4,4);

      // "Niederlassungsnummer" (Pos. 8) from file
      WhseLFBMPImportL."Branch Code" := COPYSTR(TextLineV,8,6);

      // "Wareneingangsnummer" (Pos. 14) from file
      WhseLFBMPImportL."Refernce No." := COPYSTR(TextLineV,14,30);

      // "Reservierte Menge" (Pos. 49) from file
      EVALUATE(WhseLFBMPImportL."Reserved Quantity",COPYSTR(TextLineV,49,5));

      // "Menge" (Pos. 44) from file
      EVALUATE(WhseLFBMPImportL.Quantity,COPYSTR(TextLineV,44,5));

      // "Bestandsart" (Pos. 54) from file
      WhseLFBMPImportL."Inventory Type" := COPYSTR(TextLineV,54,1);

      // "davon Menge beschÑdigt" (Pos. 55) from file
      EVALUATE(WhseLFBMPImportL."Qty. to Review",COPYSTR(TextLineV,55,5));

      // "Artikeltypnummer" (Pos. 14) from file
      WhseLFBMPImportL."Item No." := COPYSTR(TextLineV,14,30);

      // "Datum/Uhrzeit" (Pos. 60) from file we want date only
      EVALUATE(WhseLFBMPImportL."Entry Date",COPYSTR(TextLineV,60,10));

      // Final MODIFY
      WhseLFBMPImportL.INSERT;
    END;

    PROCEDURE ProcessBMPPSELine@1000000015(TextLineV@1000000000 : Text[1024];ClientIdentifierV@1000000002 : Code[10];BranchCodeV@1000000003 : Code[10];ReceiptNoV@1000000004 : Code[20];ReceiptDateV@1000000005 : DateTime;ParentEntryNoV@1000000006 : Integer;FileNameV@1000000007 : Text[250]);
    VAR
      WhseLFBMPImportL@1000000001 : Record 50310;
    BEGIN
      // Entry No. Integer (PK)
      WhseLFBMPImportL.INIT;

      TextLineV := CONVERTSTR(TextLineV,'?','·');
      IF STRLEN(TextLineV) = 67 THEN
        TextLineV := INSSTR(TextLineV,'  ',STRLEN(TextLineV) - 3);

      WhseLFBMPImportL."Entry No." := WhseLFGeneralMgt.GetNextEntryNo(DATABASE::"Whse. LF BMP Import");

      // Setting Import Fields
      WhseLFBMPImportL."Import Timestamp" := CURRENTDATETIME;
      WhseLFBMPImportL."File Name" := FileNameV;
      WhseLFBMPImportL."Import Status" := WhseLFBMPImportL."Import Status"::Unprocessed;
      WhseLFBMPImportL."Process Timestamp" := 0DT;

      // "Satzart" (Pos. 1) from file
      WhseLFBMPImportL."Record Type" := COPYSTR(TextLineV,1,3);

      // "Artikeltypnummer" (Pos. 4) from file
      WhseLFBMPImportL."Item No." := COPYSTR(TextLineV,4,20);

      // "Referenz" (Pos. 34) from file
      WhseLFBMPImportL.Reference := COPYSTR(TextLineV,34,1);

      // "PackstÅckbezeichnung" (Pos. 35) from file
      WhseLFBMPImportL."Package Description" := COPYSTR(TextLineV,35,32);

      // "Menge" (Pos. 67) from file
      EVALUATE(WhseLFBMPImportL.Quantity,COPYSTR(TextLineV,67,5));

      // "Bestandsart" (Pos. 72) from file
      WhseLFBMPImportL."Inventory Type" := COPYSTR(TextLineV,72,1);

      // Add data from BMP line
      WhseLFBMPImportL."Client Identifier" := ClientIdentifierV;
      WhseLFBMPImportL."Branch Code" := BranchCodeV;
      WhseLFBMPImportL."Refernce No." := ReceiptNoV;
      WhseLFBMPImportL."Entry Date" := ReceiptDateV;
      WhseLFBMPImportL."Parent Entry No." := ParentEntryNoV;

      // Final MODIFY
      WhseLFBMPImportL.INSERT;
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________
      H1408     05.08.14   DMA       Copy RHD Interface, rename and implement as Whs LF Interface
      H1412     11.08.14   EHN       For WEA, change "Niederlassungsnummer", position 9, value "001"
      H1882     05.01.14   EHN       BUG: Importing PSE records from WMP fails
      H2146     18.02.15   EHN       Dynamic location for all home24 operated warehouses in WEA
    }
    END.
  }
}

