OBJECT Codeunit 50123 SII Fill Log
{
  OBJECT-PROPERTIES
  {
    Date=04.03.15;
    Time=18:43:34;
    Modified=Yes;
    Version List=SII,HME2173,GOB,T0022;
  }
  PROPERTIES
  {
    OnRun=VAR
            SIISetup@1000000004 : Record 50140;
            STime@1000000000 : Time;
            ETime@1000000001 : Time;
            TimeDuration@1000000002 : Time;
            LocText001@1000000003 : TextConst 'ENU=No Global Runtype selected.';
          BEGIN
            CASE GlobalRunType OF
              GlobalRunType::FillLog :
                BEGIN
                  SIISetup.GET;
                  IF SIISetup.Mode = SIISetup.Mode::Inactive THEN BEGIN
                    EXIT;
                  END;
                  CLEAR(CheckArchive_glob);
                  IF CheckIfProcessMessage(SIIMessageOnRun) THEN BEGIN
                    InitCreateLog(SIIMessageOnRun,FALSE);
                    IF SIIMessageOnRun."Check Archive while Process" THEN BEGIN
                      CheckArchive_glob := TRUE;
                      InitCreateLog(SIIMessageOnRun,TRUE);
                    END;
                  END;
                END;
              ELSE
                ERROR(LocText001);
            END;
          END;

  }
  CODE
  {
    VAR
      SIISetup_glob@1000000013 : Record 50140;
      TempSIIActiveChannels_glob@1000000004 : TEMPORARY Record 50144;
      SIIActiveAction_glob@1000000007 : Record 50143;
      SIIGeneralMgmt_glob@1000000006 : Codeunit 50120;
      MsgType_glob@1000000005 : Integer;
      DHLHistoryTrackingID_glob@1000000011 : Text[40];
      DHLHistoryShippingAgent_glob@1000000010 : Code[20];
      DHLHistoryTimeStamp_glob@1000000009 : DateTime;
      LastSIILogEntryNo_glob@1000000008 : Integer;
      LastSIILogManualEntryNo_glob@1000000039 : Integer;
      CheckArchive_glob@1000000000 : Boolean;
      SIIMessageOnRun@1000000001 : Record 50141;
      GlobalRunType@1000000002 : ' ,FillLog,FillManualTriggeredLog';
      TEMPSIIDHLParcelStatus_glob@1000000003 : TEMPORARY Record 50152;
      CreatedSIILogEntryNo_glob@1000000012 : Integer;
      IsExternalTest_glob@1000000014 : Boolean;
      RecRefTableNo_glob@1000000015 : Integer;
      CorrectionEntry_glob@1000000016 : Boolean;
      InsertAsError_glob@1000000017 : Boolean;
      ErrorSource_glob@1000000018 : Code[30];
      ErrorText_glob@1000000019 : Text[1024];
      CreateExtendedMailEntry_glob@1000000020 : Boolean;
      RecRefOrderLine_glob@1000000021 : RecordRef;
      IsTriggered_glob@1000000022 : Boolean;
      TriggerText_glob@1000000023 : Text[50];
      Attached_TableNo_glob@1000000031 : Integer;
      Attached_Type_glob@1000000030 : Integer;
      Attached_No_glob@1000000029 : Code[20];
      Attached_LineNo_glob@1000000028 : Integer;
      Process_TableNo_glob@1000000027 : Integer;
      Process_Type_glob@1000000026 : Integer;
      Process_No_glob@1000000025 : Code[20];
      Process_LineNo_glob@1000000024 : Integer;
      enu@1000000032 : TextConst;
      Tr_ReturnRecRef_glob@1000000036 : RecordRef;
      MultipleLinesTriggered_glob@1000000037 : Boolean;
      ManuallyTriggered_glob@1000000038 : Boolean;
      "---InternalDebugging---"@1000000033 : Integer;
      yDebugStringArray@1000000034 : ARRAY [50] OF Text[1024];
      FPCGeneralSetup@1000000035 : Record 50055;
      CaptureAmount_glob@1000000097 : Decimal;
      CaptureEntryNo_glob@1000000098 : Integer;

    PROCEDURE InitOnRunTrigger@1000000033(p_SIIMessage@1000000000 : Record 50141);
    BEGIN
      SIIMessageOnRun := p_SIIMessage;
      GlobalRunType := GlobalRunType::FillLog;
    END;

    PROCEDURE InitCreateLog@1000000026(VAR p_SIIMessage@1000000001 : Record 50141;p_CheckArchive@1000000005 : Boolean);
    VAR
      RecRefOrderHeader@1000000006 : RecordRef;
      SFilter@1000000003 : Time;
      EFilter@1000000002 : Time;
      DurationFilter@1000000004 : Time;
      STimeJobQueue@1000000000 : Time;
    BEGIN
      SIISetup_glob.GET;
      STimeJobQueue := TIME;

      GetMsgTypeGlob(p_SIIMessage);

      CLEAR(RecRefOrderHeader);

      //S/P0923
      //IF IsExternalTest_glob THEN
      IF IsExternalTest_glob OR CorrectionEntry_glob THEN
      //E/P0923
        RecRefOrderHeader.OPEN(RecRefTableNo_glob)
      ELSE
        CASE p_CheckArchive OF
          FALSE: RecRefOrderHeader.OPEN(36);     // Sales Header
          TRUE: RecRefOrderHeader.OPEN(5107);   // Sales Header Archive
        END;

      SetKeyForMessage(RecRefOrderHeader,p_SIIMessage); // Test Performance?

      FilterSalesHeaderWithMessage(RecRefOrderHeader,p_SIIMessage);
      AdditionalFilter(RecRefOrderHeader,p_SIIMessage);

      //H2173  MIK  19.02.15 +++++++++++++++++++++
      ProcessLog(RecRefOrderHeader,p_SIIMessage);
      //H2173  MIK  19.02.15 ---------------------

      RecRefOrderHeader.CLOSE;
    END;

    PROCEDURE "-----Seperator02"@1000000006();
    BEGIN
    END;

    PROCEDURE SetKeyForMessage@1000000017(VAR p_RecRefOrderHeader_Var@1000000001 : RecordRef;p_SIIMessage@1000000000 : Record 50141);
    VAR
      SIIGeneralManagement@1000000002 : Codeunit 50120;
    BEGIN
      CLEAR(SIIGeneralManagement);
      SIIGeneralManagement.SetSorting(p_RecRefOrderHeader_Var,p_SIIMessage);
    END;

    PROCEDURE FilterSalesHeaderWithMessage@1000000002(VAR p_RecRefOrderHeader_Var@1000000002 : RecordRef;p_SIIMessage@1000000001 : Record 50141);
    VAR
      FieldRef@1000000003 : FieldRef;
      SalesHeader@1000000000 : Record 36;
    BEGIN
      // General Filter Conditions on Sales Header
      //S/P1010
      //H0822  22.01.14  MBY  +++++++++++++++++++++++++
      {
      //H0822  22.01.14  MBY  -------------------------
      IF NOT IsTriggered_glob THEN BEGIN
      //H0822  22.01.14  MBY  +++++++++++++++++++++++++
      }
      IF NOT (IsTriggered_glob OR ManuallyTriggered_glob) THEN BEGIN
      //H0822  22.01.14  MBY  -------------------------
        //S/P1058
        IF (p_SIIMessage."Message Code NAV" = SIISetup_glob."Return Item Not Received NAV") AND
           (p_SIIMessage."Message Code Shop" = SIISetup_glob."Return Item Not Received Shop")
        THEN BEGIN
          FieldRef := p_RecRefOrderHeader_Var.FIELD(1);                // "Document Type"::"Return Order"
          FieldRef .SETRANGE(5);

        //T0003 24.07.14 tec-cs +++++++++++++++++++++++++++++
        // Filter on "Return Order" for "Return Label Mails"
        END ELSE IF (p_SIIMessage."Message Code NAV" = SIISetup_glob."Return Order Label NAV") AND
           (p_SIIMessage."Message Code Shop" = SIISetup_glob."Return Order Requested Shop")
        THEN BEGIN
          FieldRef := p_RecRefOrderHeader_Var.FIELD(SalesHeader.FIELDNO("Document Type"));
          FieldRef .SETRANGE(SalesHeader."Document Type"::"Return Order");

        // Filter on "Return Order" for "Return Order Refund"
        END ELSE IF (p_SIIMessage."Message Code NAV" = SIISetup_glob."Return Order Refund NAV") AND
           (p_SIIMessage."Message Code Shop" = SIISetup_glob."Return Order Refund Shop")
        THEN BEGIN
          FieldRef := p_RecRefOrderHeader_Var.FIELD(SalesHeader.FIELDNO("Document Type"));
          FieldRef .SETRANGE(SalesHeader."Document Type"::"Return Order");
        END ELSE BEGIN
        //T0003 24.07.14 tec-cs -----------------------------

        //E/P1058
      //E/P1010
          FieldRef := p_RecRefOrderHeader_Var.FIELD(1);                // "Document Type"::Order
          FieldRef .SETRANGE(1);
        //S/P1058
        END;
        //E/P1058
      //S/P1010
      END;
      //E/P1010

      FieldRef := p_RecRefOrderHeader_Var.FIELD(50041);            // "Website No."
      FieldRef.SETRANGE(p_SIIMessage."Website No.");

      //H1205,H0822  12.06.14  MSL  +++++++++++++++++++++++++
      IF NOT (IsTriggered_glob OR ManuallyTriggered_glob) THEN BEGIN
      //H1205,H0822  12.06.14  MSL  -------------------------
        //S/P0923
        FieldRef := p_RecRefOrderHeader_Var.FIELD(90000);            // "SII Status"
        FieldRef.SETFILTER('<>%1',9);                                // ,,,,,,,,,Completed
        //E/P0923
      //H0822  22.01.14  MBY  +++++++++++++++++++++++++
      END;
      //H0822  22.01.14  MBY  -------------------------

      IF p_SIIMessage."Order No. Filter" <> '' THEN BEGIN
        FieldRef := p_RecRefOrderHeader_Var.FIELD(3);              // "No."
        FieldRef.SETFILTER(p_SIIMessage."Order No. Filter");
      END;

      IF p_SIIMessage."Order Date Filter" <> '' THEN BEGIN
        FieldRef := p_RecRefOrderHeader_Var.FIELD(19);             // "Order Date"
        FieldRef.SETFILTER(p_SIIMessage."Order Date Filter");
      END;

      IF p_SIIMessage."Payment Method Filter" <> '' THEN BEGIN
        FieldRef := p_RecRefOrderHeader_Var.FIELD(104);            // "Payment Method Code"
        FieldRef.SETFILTER(p_SIIMessage."Payment Method Filter");
      END;

      IF p_SIIMessage."Language Code Filter" <> '' THEN BEGIN
        FieldRef := p_RecRefOrderHeader_Var.FIELD(41);             // "Language Code"
        FieldRef.SETFILTER(p_SIIMessage."Language Code Filter");
      END;

      // Further Filters
      CASE MsgType_glob OF
        1,2,3,4:
            // 1 = "Shipment Date Msg."
            // 2 = "Payment Update Confirm. Msg."
            // 3 = "Shipment Confirmation Msg."
            // 4 = "Shipment Delivered Msg."
          BEGIN
            FieldRef := p_RecRefOrderHeader_Var.FIELD(60000);    // Kommissionierung = TRUE
            FieldRef.SETRANGE(TRUE);

            FieldRef := p_RecRefOrderHeader_Var.FIELD(120);      // Status::Releases
            FieldRef.SETRANGE(1);
          END;

        5:  // 5 = "Cancellation Msg."
          BEGIN
            //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
            {
            //H0367  30.05.13  ABR  -----------------------------------------
            FieldRef := p_RecRefOrderHeader_Var.FIELD(120);      // Status::Releases|Status::"Pending Prepayment"
            FieldRef.SETFILTER('1|3');
            //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
            }
            //H0367  30.05.13  ABR  -----------------------------------------
          END;

        6:  // "Return Order Created Msg."
          //S/P1010
          BEGIN
            FieldRef := p_RecRefOrderHeader_Var.FIELD(1);                // "Document Type"
            FieldRef .SETRANGE(Process_Type_glob);
          END;
          //E/P1010

        7:  // "Return Order Received Msg."
          //S/P1010
          BEGIN
            FieldRef := p_RecRefOrderHeader_Var.FIELD(1);                // "Document Type"
            FieldRef .SETRANGE(Process_Type_glob);
          END;
          //E/P1010

        8:  // "Return Order Refund Msg."
          //S/P1010
          BEGIN
            FieldRef := p_RecRefOrderHeader_Var.FIELD(1);                // "Document Type"
            FieldRef .SETRANGE(Process_Type_glob);
          END;
          //E/P1010

        9:  // "Change Order Requested Msg."
          //S/P1010
          BEGIN
            FieldRef := p_RecRefOrderHeader_Var.FIELD(1);                // "Document Type"
            FieldRef .SETRANGE(Process_Type_glob);
          END;
          //E/P1010

        10: // "Change Return Item Received Msg."
          //S/P1010
          BEGIN
            FieldRef := p_RecRefOrderHeader_Var.FIELD(1);                // "Document Type"
            FieldRef .SETRANGE(Process_Type_glob);
          END;
          //E/P1010

        11: // "Change Order Created Msg."
          //S/P1010
          BEGIN
            FieldRef := p_RecRefOrderHeader_Var.FIELD(1);                // "Document Type"
            FieldRef .SETRANGE(Process_Type_glob);
          END;
          //E/P1010

        //S/P1010
        {**************
        12: ; // "Change Shipment Delayed Msg."
        13: ; // "Change Shipment Confirm. Msg."
        14: ; // "Change Shipment Delivered Msg."
        **************}
        //E/P1010

        15: // "Spare Part Request Msg."
          //S/P1010
          BEGIN
            FieldRef := p_RecRefOrderHeader_Var.FIELD(1);                // "Document Type"
            FieldRef .SETRANGE(Process_Type_glob);
          END;
          //E/P1010

        //S/P1010
        {**************
        16: ; // "Cancellation Request Msg."
        17: ; // "Cancellation Successful Msg."
        18: ; // "Cancellation Outpayment Msg."
        **************}
        //E/P1010

        //S/P1058
        19: // "Return Item Not Received"
          BEGIN
          END;
        //E/P1058
      END;

      IF (MsgType_glob = 3) AND NOT CheckArchive_glob THEN BEGIN
        //S/P0923
        //FillSIIDHLParcelStatusTemp(TEMPSIIDHLParcelStatus_glob);
        //S/P0979
        IF NOT CorrectionEntry_glob THEN
        //E/P0979
          FillSIIDHLParcelStatusTemp(TEMPSIIDHLParcelStatus_glob,p_SIIMessage);
        //E/P0923
      END;
    END;

    PROCEDURE AdditionalFilter@1000000009(VAR p_RecRefOrderHeader_Var@1000000002 : RecordRef;p_SIIMessage@1000000000 : Record 50141);
    VAR
      FieldRef@1000000003 : FieldRef;
    BEGIN
      // Add. Filter?
      WITH p_SIIMessage DO BEGIN
        // Add. Field Filter 1?
        IF ("Add. Filter Field 1" <> 0) AND ("Add. Filter Field 1 Value" <> '') THEN BEGIN
          FieldRef := p_RecRefOrderHeader_Var.FIELD("Add. Filter Field 1");
          FieldRef.SETFILTER("Add. Filter Field 1 Value");
        END;
        // Add. Field Filter 2?
        IF ("Add. Filter Field 2" <> 0) AND ("Add. Filter Field 2 Value" <> '') THEN BEGIN
          FieldRef := p_RecRefOrderHeader_Var.FIELD("Add. Filter Field 2");
          FieldRef.SETFILTER("Add. Filter Field 2 Value");
        END;
        // Add. Field Filter 3?
        IF ("Add. Filter Field 3" <> 0) AND ("Add. Filter Field 3 Value" <> '') THEN BEGIN
          FieldRef := p_RecRefOrderHeader_Var.FIELD("Add. Filter Field 3");
          FieldRef.SETFILTER("Add. Filter Field 3 Value");
        END;
      END;
    END;

    PROCEDURE ProcessLog@1000000004(VAR p_RecRefOrderHeader_Var@1000000001 : RecordRef;p_SIIMessage@1000000000 : Record 50141);
    BEGIN
      //H2173  MIK  19.02.15 +++++++++++++++++++++
      //S/P1010
      //E/P1010

      //S/P1010
      //H0651  06.12.13  MBY  +++++++++++++++++++++++++
      //H0651  06.12.13  MBY  -------------------------
      //E/1010

      //S/P1010
      //E/P1010

      // Process Log
      CASE p_SIIMessage."Belongs to" OF
        p_SIIMessage."Belongs to"::Header:  // Header
          BEGIN
            Create_Log_Entries(p_RecRefOrderHeader_Var,p_SIIMessage);
          END;
        p_SIIMessage."Belongs to"::Lines:   // Lines
          BEGIN
            Create_Log_LineLog_Entries(
              p_RecRefOrderHeader_Var,p_SIIMessage);
          END;
      END;
      //H2173  MIK  19.02.15 ---------------------
    END;

    PROCEDURE FinalizeMonitoring@1000000011(p_SIIMessage@1000000000 : Record 50141;p_MonitoringEntryNo@1000000005 : Integer;p_TableNoSource@1000000004 : Integer;p_Counter@1000000001 : Integer;p_Duration@1000000002 : Duration;p_NoOfCreatedLogEntries@1000000007 : Integer);
    VAR
      SIIMonitoringServices@1000000003 : Codeunit 50126;
      SIIMonitoring@1000000006 : Record 50151;
    BEGIN
      // Update Monitoring with new unprocessed Entries
      IF SIISetup_glob."Insert No Empty Lines" AND (p_Counter = 0) THEN BEGIN
        IF SIIMonitoring.GET(p_MonitoringEntryNo) THEN
          SIIMonitoring.DELETE;
        EXIT;
      END;

      CASE p_SIIMessage."Belongs to" OF
        p_SIIMessage."Belongs to"::Header:  // Header
          SIIMonitoringServices.FinalizeMonitorAndArchiveByJQ(
            p_SIIMessage,p_MonitoringEntryNo,50146,p_TableNoSource,
            p_Counter,0,0,0,0,p_Duration,p_NoOfCreatedLogEntries);

        p_SIIMessage."Belongs to"::Lines:   // Lines
          SIIMonitoringServices.FinalizeMonitorAndArchiveByJQ(
            p_SIIMessage,p_MonitoringEntryNo,50154,p_TableNoSource,
            p_NoOfCreatedLogEntries,p_Counter,0,0,0,p_Duration,p_NoOfCreatedLogEntries);
      END;
    END;

    PROCEDURE FillSIIDHLParcelStatusTemp@1000000037(VAR p_SIIDHLParcelStatusTemp_Var@1000000008 : Record 50152;p_SIIMessage@1000000010 : Record 50141);
    VAR
      DHLParcelsStatusHistory@1000000001 : Record 50021;
      DHLParcelsStatusHistory2@1000000000 : Record 50021;
      ShippingAgent@1000000002 : Record 291;
      ShippignAgentFilter@1000000003 : Text[250];
      SIISetup@1000000004 : Record 50140;
      STIME@1000000005 : Time;
      ETIME@1000000006 : Time;
      i@1000000007 : Integer;
      LastEntryNoL@1000000009 : Integer;
      ParcelStatusHistory@1000000011 : Record 80013;
      ParcelStatusHistory2@1000000012 : Record 80013;
      LastEntryNoNewTablesL@1000000013 : Integer;
      ParcelStatusHistoryArchive@1000000015 : Record 50187;
      ParcelStatusHistoryArchive2@1000000014 : Record 50187;
    BEGIN
      //S/P1133
      FPCGeneralSetup.GET;
      //E/P1133

      p_SIIDHLParcelStatusTemp_Var.DELETEALL;
      SIISetup.GET;

      ShippingAgent.SETRANGE("Send Shipping Mail",TRUE);

      //S/P1133
      CASE FPCGeneralSetup."Active Parcel Status History" OF
        FPCGeneralSetup."Active Parcel Status History"::"Use Only Old DHL Parcel Status History",
        FPCGeneralSetup."Active Parcel Status History"::"Fill Both But Show And Use Old":
          BEGIN
      //E/P1133
            DHLParcelsStatusHistory.RESET;
            //S/P0923
            //DHLParcelsStatusHistory.SETFILTER("Entry No.",'>%1',SIISetup."Last Entry No. DHL Parcels");
            DHLParcelsStatusHistory.SETFILTER("Entry No.",'>%1',p_SIIMessage."Last DHL Parcel Entry No.");
            //E/P0923
            DHLParcelsStatusHistory.SETCURRENTKEY(
              "DHL Shipment Code","Piece-Code (Identifier)","Document Type","Document No.","Document Line No.");
            DHLParcelsStatusHistory.SETFILTER("DHL Shipment Code",'<>%1','');
            DHLParcelsStatusHistory.SETFILTER("Piece-Code (Identifier)",'%1','');
            //S/P01013
            IF p_SIIMessage."Days Go Back DHL Parc. Stat." <> 0 THEN
              DHLParcelsStatusHistory.SETRANGE("Time Stamp",
                CREATEDATETIME(WORKDATE-p_SIIMessage."Days Go Back DHL Parc. Stat.",TIME),
                CREATEDATETIME(WORKDATE,235959T))
            ELSE
            //E/P01013
              DHLParcelsStatusHistory.SETRANGE("Time Stamp",CREATEDATETIME(WORKDATE-2,TIME),CREATEDATETIME(WORKDATE,235959T));
            IF DHLParcelsStatusHistory.FINDSET THEN BEGIN
              REPEAT
                i += 1;
                ShippingAgent.SETRANGE(Code);
                IF DHLParcelsStatusHistory."Shipping Agent" <> '' THEN
                  ShippingAgent.SETRANGE(Code,DHLParcelsStatusHistory."Shipping Agent");
                IF NOT ShippingAgent.ISEMPTY THEN BEGIN
                  DHLParcelsStatusHistory2.SETCURRENTKEY("Document No.");
                  DHLParcelsStatusHistory2.RESET;
                  DHLParcelsStatusHistory2.SETRANGE("Document No.",DHLParcelsStatusHistory."Document No.");
                  DHLParcelsStatusHistory2.SETRANGE("Document Type",DHLParcelsStatusHistory."Document Type"::Order);
                  DHLParcelsStatusHistory2.SETRANGE("Document Line No.",DHLParcelsStatusHistory."Document Line No.");
                  DHLParcelsStatusHistory2.SETFILTER("DHL Shipment Code",'<>%1','');
                  DHLParcelsStatusHistory2.SETFILTER("Piece-Code (Identifier)",'%1','');
                  IF DHLParcelsStatusHistory2.FINDFIRST THEN BEGIN
                    IF DHLParcelsStatusHistory2."Entry No." = DHLParcelsStatusHistory."Entry No." THEN BEGIN
                      p_SIIDHLParcelStatusTemp_Var.INIT;
                      p_SIIDHLParcelStatusTemp_Var."Document Type" := DHLParcelsStatusHistory."Document Type";
                      p_SIIDHLParcelStatusTemp_Var."Document No." := DHLParcelsStatusHistory."Document No.";
                      p_SIIDHLParcelStatusTemp_Var."Line No." := DHLParcelsStatusHistory."Document Line No.";
                      IF p_SIIDHLParcelStatusTemp_Var.INSERT THEN BEGIN
                        CASE DHLParcelsStatusHistory."Shipping Agent" OF
                          //S/P0933
                          //'DHL','DBG','','DGB': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'DHL';
                          'DHL','DBG','DGB': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'DHL';
                          //E/P0933
                          'UPS': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'UPS';
                        //H0519 26.08.13 ARI +++++++++++++++++++++++++++++++++++++++++++++++++++++
                        ELSE
                          p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := DHLParcelsStatusHistory."Shipping Agent";
                        //H0519 26.08.13 ARI -----------------------------------------------------
                        END;
                        p_SIIDHLParcelStatusTemp_Var."Tracking No." := DHLParcelsStatusHistory."DHL Shipment Code";
                        //S/P0979
                        p_SIIDHLParcelStatusTemp_Var."Delivery Date" := DT2DATE(DHLParcelsStatusHistory."Time Stamp");
                        //E/P0979
                        p_SIIDHLParcelStatusTemp_Var.MODIFY;
                      END;
                    END;
                    //S/P0979
                    IF DHLParcelsStatusHistory2."Entry No." < DHLParcelsStatusHistory."Entry No." THEN BEGIN
                      p_SIIDHLParcelStatusTemp_Var.INIT;
                      p_SIIDHLParcelStatusTemp_Var."Document Type" := DHLParcelsStatusHistory."Document Type";
                      p_SIIDHLParcelStatusTemp_Var."Document No." := DHLParcelsStatusHistory."Document No.";
                      p_SIIDHLParcelStatusTemp_Var."Line No." := DHLParcelsStatusHistory."Document Line No.";
                      IF p_SIIDHLParcelStatusTemp_Var.INSERT THEN BEGIN
                        CASE DHLParcelsStatusHistory."Shipping Agent" OF
                          'DHL','DBG','DGB': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'DHL';
                          'UPS': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'UPS';
                        //H0519 26.08.13 ARI +++++++++++++++++++++++++++++++++++++++++++++++++++++
                        ELSE
                          p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := DHLParcelsStatusHistory."Shipping Agent";
                        //H0519 26.08.13 ARI -----------------------------------------------------
                        END;
                        p_SIIDHLParcelStatusTemp_Var."Tracking No." := DHLParcelsStatusHistory."DHL Shipment Code";
                        p_SIIDHLParcelStatusTemp_Var."Delivery Date" := DT2DATE(DHLParcelsStatusHistory2."Time Stamp");
                        p_SIIDHLParcelStatusTemp_Var.MODIFY;
                      END;
                    END;
                    //E/P0979
                  END;
                END;
                IF LastEntryNoL < DHLParcelsStatusHistory."Entry No." THEN
                  LastEntryNoL := DHLParcelsStatusHistory."Entry No.";
              UNTIL DHLParcelsStatusHistory.NEXT = 0;
              //S/P0923
              //SIISetup."Last Entry No. DHL Parcels" := LastEntryNoL;
              //SIISetup.MODIFY;
              p_SIIMessage."Last DHL Parcel Entry No." := LastEntryNoL;
              // S/P1232
              //p_SIIMessage.MODIFY;
              // E/P1232
              //E/P0923
              // S/P1232
              CLEAR(LastEntryNoNewTablesL);
              DHLParcelsStatusHistory.RESET;
              IF DHLParcelsStatusHistory.GET(LastEntryNoL) THEN BEGIN
                ParcelStatusHistory.RESET;
                ParcelStatusHistory.SETCURRENTKEY("Tracking Code","Piece Code");
                ParcelStatusHistory.SETRANGE("Tracking Code",DHLParcelsStatusHistory."DHL Shipment Code");
                ParcelStatusHistory.SETFILTER("Piece Code",'%1','');
                IF ParcelStatusHistory.FINDLAST THEN
                  LastEntryNoNewTablesL := ParcelStatusHistory."Entry No.";
                ParcelStatusHistoryArchive.RESET;
                ParcelStatusHistoryArchive.SETCURRENTKEY("Tracking Code","Piece Code");
                ParcelStatusHistoryArchive.SETRANGE("Tracking Code",DHLParcelsStatusHistory."DHL Shipment Code");
                ParcelStatusHistoryArchive.SETFILTER("Piece Code",'%1','');
                IF ParcelStatusHistoryArchive.FINDLAST THEN BEGIN
                  IF ParcelStatusHistoryArchive."Entry No." > LastEntryNoNewTablesL THEN
                    LastEntryNoNewTablesL := ParcelStatusHistoryArchive."Entry No."
                END;
              END;
              p_SIIMessage."Last Parcel Entry No." := LastEntryNoNewTablesL;
              p_SIIMessage.MODIFY;
              // E/P1232
            END;
      //S/P1133
          END;
        FPCGeneralSetup."Active Parcel Status History"::"Fill Both But Show And Use New",
        FPCGeneralSetup."Active Parcel Status History"::"Use Only New Parcel Status History":
          BEGIN
            // S/P1232
            LastEntryNoNewTablesL := p_SIIMessage."Last Parcel Entry No.";
            LastEntryNoL := p_SIIMessage."Last DHL Parcel Entry No.";
            // E/P1232
            ParcelStatusHistory.RESET;
            // S/P1232
            //ParcelStatusHistory.SETFILTER("Entry No.",'>%1',p_SIIMessage."Last DHL Parcel Entry No.");
            ParcelStatusHistory.SETFILTER("Entry No.",'>%1',p_SIIMessage."Last Parcel Entry No.");
            // E/P1232
            ParcelStatusHistory.SETCURRENTKEY("Tracking Code","Piece Code");
            ParcelStatusHistory.SETFILTER("Tracking Code",'<>%1','');
            ParcelStatusHistory.SETFILTER("Piece Code",'%1','');
            IF p_SIIMessage."Days Go Back DHL Parc. Stat." <> 0 THEN
              ParcelStatusHistory.SETRANGE(
                "Timestamp Insert",
                CREATEDATETIME(WORKDATE-p_SIIMessage."Days Go Back DHL Parc. Stat.",TIME),
                CREATEDATETIME(WORKDATE,235959T))
            ELSE
              ParcelStatusHistory.SETRANGE("Timestamp Insert",CREATEDATETIME(WORKDATE-2,TIME),CREATEDATETIME(WORKDATE,235959T));
            IF ParcelStatusHistory.FINDSET THEN BEGIN
              REPEAT
                i += 1;
                ShippingAgent.SETRANGE(Code);
                IF ParcelStatusHistory."Shipping Agent Code" <> '' THEN
                  ShippingAgent.SETRANGE(Code,ParcelStatusHistory."Shipping Agent Code");
                IF NOT ShippingAgent.ISEMPTY THEN BEGIN
                  ParcelStatusHistory2.SETCURRENTKEY("Document No.","Document Line No.","Document Type");
                  ParcelStatusHistory2.RESET;
                  ParcelStatusHistory2.SETRANGE("Document No.",ParcelStatusHistory."Document No.");
                  ParcelStatusHistory2.SETRANGE("Document Line No.",ParcelStatusHistory."Document Line No.");
                  ParcelStatusHistory2.SETRANGE("Document Type",ParcelStatusHistory."Document Type");
                  ParcelStatusHistory2.SETFILTER("Tracking Code",'<>%1','');
                  ParcelStatusHistory2.SETFILTER("Piece Code",'%1','');
                  IF ParcelStatusHistory2.FINDFIRST THEN BEGIN
                    IF ParcelStatusHistory2."Entry No." = ParcelStatusHistory."Entry No." THEN BEGIN
                      p_SIIDHLParcelStatusTemp_Var.INIT;
                      p_SIIDHLParcelStatusTemp_Var."Document Type" := ParcelStatusHistory."Document Type";
                      p_SIIDHLParcelStatusTemp_Var."Document No." := ParcelStatusHistory."Document No.";
                      p_SIIDHLParcelStatusTemp_Var."Line No." := ParcelStatusHistory."Document Line No.";
                      IF p_SIIDHLParcelStatusTemp_Var.INSERT THEN BEGIN
                        CASE ParcelStatusHistory."Shipping Agent Code" OF
                          'DHL','DBG','DGB': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'DHL';
                          'UPS': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'UPS';
                        ELSE
                          p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := ParcelStatusHistory."Shipping Agent Code";
                        END;
                        p_SIIDHLParcelStatusTemp_Var."Tracking No." := ParcelStatusHistory."Tracking Code";
                        p_SIIDHLParcelStatusTemp_Var."Delivery Date" := DT2DATE(ParcelStatusHistory."Timestamp Insert");
                        p_SIIDHLParcelStatusTemp_Var.MODIFY;
                      END;
                    END;
                    IF ParcelStatusHistory2."Entry No." < ParcelStatusHistory."Entry No." THEN BEGIN
                      p_SIIDHLParcelStatusTemp_Var.INIT;
                      p_SIIDHLParcelStatusTemp_Var."Document Type" := ParcelStatusHistory."Document Type";
                      p_SIIDHLParcelStatusTemp_Var."Document No." := ParcelStatusHistory."Document No.";
                      p_SIIDHLParcelStatusTemp_Var."Line No." := ParcelStatusHistory."Document Line No.";
                      IF p_SIIDHLParcelStatusTemp_Var.INSERT THEN BEGIN
                        CASE ParcelStatusHistory."Shipping Agent Code" OF
                          'DHL','DBG','DGB': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'DHL';
                          'UPS': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'UPS';
                        ELSE
                          p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := ParcelStatusHistory."Shipping Agent Code";
                        END;
                        p_SIIDHLParcelStatusTemp_Var."Tracking No." := ParcelStatusHistory."Tracking Code";
                        p_SIIDHLParcelStatusTemp_Var."Delivery Date" := DT2DATE(ParcelStatusHistory2."Timestamp Insert");
                        p_SIIDHLParcelStatusTemp_Var.MODIFY;
                      END;
                    END;
                  END;
                END;
                // S/P1232
                //IF LastEntryNoL < ParcelStatusHistory."Entry No." THEN
                //  LastEntryNoL := ParcelStatusHistory."Entry No.";
                IF LastEntryNoNewTablesL < ParcelStatusHistory."Entry No." THEN
                  LastEntryNoNewTablesL := ParcelStatusHistory."Entry No.";
                // E/P1232
              UNTIL ParcelStatusHistory.NEXT = 0;
              // S/P1232
              //p_SIIMessage."Last DHL Parcel Entry No." := LastEntryNoL;
              //p_SIIMessage.MODIFY;
              // E/P1232
            END;
            // S/P1232
            ParcelStatusHistoryArchive.RESET;
            ParcelStatusHistoryArchive.SETFILTER("Entry No.",'>%1',p_SIIMessage."Last Parcel Entry No.");
            ParcelStatusHistoryArchive.SETCURRENTKEY("Tracking Code","Piece Code");
            ParcelStatusHistoryArchive.SETFILTER("Tracking Code",'<>%1','');
            ParcelStatusHistoryArchive.SETFILTER("Piece Code",'%1','');
            IF p_SIIMessage."Days Go Back DHL Parc. Stat." <> 0 THEN
              ParcelStatusHistoryArchive.SETRANGE(
                "Timestamp Insert",
                CREATEDATETIME(WORKDATE-p_SIIMessage."Days Go Back DHL Parc. Stat.",TIME),
                CREATEDATETIME(WORKDATE,235959T))
            ELSE
              ParcelStatusHistoryArchive.SETRANGE("Timestamp Insert",CREATEDATETIME(WORKDATE-2,TIME),CREATEDATETIME(WORKDATE,235959T));
            IF ParcelStatusHistoryArchive.FINDSET THEN BEGIN
              REPEAT
                i += 1;
                ShippingAgent.SETRANGE(Code);
                IF ParcelStatusHistoryArchive."Shipping Agent Code" <> '' THEN
                  ShippingAgent.SETRANGE(Code,ParcelStatusHistoryArchive."Shipping Agent Code");
                IF NOT ShippingAgent.ISEMPTY THEN BEGIN
                  ParcelStatusHistoryArchive2.SETCURRENTKEY("Document No.","Document Line No.","Document Type");
                  ParcelStatusHistoryArchive2.RESET;
                  ParcelStatusHistoryArchive2.SETRANGE("Document No.",ParcelStatusHistoryArchive."Document No.");
                  ParcelStatusHistoryArchive2.SETRANGE("Document Line No.",ParcelStatusHistoryArchive."Document Line No.");
                  ParcelStatusHistoryArchive2.SETRANGE("Document Type",ParcelStatusHistoryArchive."Document Type");
                  ParcelStatusHistoryArchive2.SETFILTER("Tracking Code",'<>%1','');
                  ParcelStatusHistoryArchive2.SETFILTER("Piece Code",'%1','');
                  IF ParcelStatusHistoryArchive2.FINDFIRST THEN BEGIN
                    IF ParcelStatusHistoryArchive2."Entry No." = ParcelStatusHistoryArchive."Entry No." THEN BEGIN
                      p_SIIDHLParcelStatusTemp_Var.INIT;
                      p_SIIDHLParcelStatusTemp_Var."Document Type" := ParcelStatusHistoryArchive."Document Type";
                      p_SIIDHLParcelStatusTemp_Var."Document No." := ParcelStatusHistoryArchive."Document No.";
                      p_SIIDHLParcelStatusTemp_Var."Line No." := ParcelStatusHistoryArchive."Document Line No.";
                      IF p_SIIDHLParcelStatusTemp_Var.INSERT THEN BEGIN
                        CASE ParcelStatusHistoryArchive."Shipping Agent Code" OF
                          'DHL','DBG','DGB': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'DHL';
                          'UPS': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'UPS';
                        ELSE
                          p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := ParcelStatusHistoryArchive."Shipping Agent Code";
                        END;
                        p_SIIDHLParcelStatusTemp_Var."Tracking No." := ParcelStatusHistoryArchive."Tracking Code";
                        p_SIIDHLParcelStatusTemp_Var."Delivery Date" := DT2DATE(ParcelStatusHistoryArchive."Timestamp Insert");
                        p_SIIDHLParcelStatusTemp_Var.MODIFY;
                      END;
                    END;
                    IF ParcelStatusHistoryArchive2."Entry No." < ParcelStatusHistoryArchive."Entry No." THEN BEGIN
                      p_SIIDHLParcelStatusTemp_Var.INIT;
                      p_SIIDHLParcelStatusTemp_Var."Document Type" := ParcelStatusHistoryArchive."Document Type";
                      p_SIIDHLParcelStatusTemp_Var."Document No." := ParcelStatusHistoryArchive."Document No.";
                      p_SIIDHLParcelStatusTemp_Var."Line No." := ParcelStatusHistoryArchive."Document Line No.";
                      IF p_SIIDHLParcelStatusTemp_Var.INSERT THEN BEGIN
                        CASE ParcelStatusHistoryArchive."Shipping Agent Code" OF
                          'DHL','DBG','DGB': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'DHL';
                          'UPS': p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := 'UPS';
                        ELSE
                          p_SIIDHLParcelStatusTemp_Var."Shipping Agent" := ParcelStatusHistoryArchive."Shipping Agent Code";
                        END;
                        p_SIIDHLParcelStatusTemp_Var."Tracking No." := ParcelStatusHistoryArchive."Tracking Code";
                        p_SIIDHLParcelStatusTemp_Var."Delivery Date" := DT2DATE(ParcelStatusHistoryArchive2."Timestamp Insert");
                        p_SIIDHLParcelStatusTemp_Var.MODIFY;
                      END;
                    END;
                  END;
                END;
                IF LastEntryNoNewTablesL < ParcelStatusHistoryArchive."Entry No." THEN
                  LastEntryNoNewTablesL := ParcelStatusHistoryArchive."Entry No.";
              UNTIL ParcelStatusHistoryArchive.NEXT = 0;
            END;
            IF p_SIIMessage."Last Parcel Entry No." < LastEntryNoNewTablesL THEN BEGIN
              p_SIIMessage."Last Parcel Entry No." := LastEntryNoNewTablesL;
              p_SIIMessage.MODIFY;
            END;

            ParcelStatusHistory.RESET;
            ParcelStatusHistoryArchive.RESET;
            IF ParcelStatusHistory.GET(LastEntryNoNewTablesL) THEN BEGIN
              DHLParcelsStatusHistory.RESET;
              DHLParcelsStatusHistory.SETCURRENTKEY(
                "DHL Shipment Code","Piece-Code (Identifier)","Document Type","Document No.","Document Line No.");
              DHLParcelsStatusHistory.SETRANGE("DHL Shipment Code",ParcelStatusHistory."Tracking Code");
              DHLParcelsStatusHistory.SETFILTER("Piece-Code (Identifier)",'%1','');
              IF DHLParcelsStatusHistory.FINDLAST THEN BEGIN
                IF DHLParcelsStatusHistory."Entry No." > LastEntryNoL THEN
                  LastEntryNoL := DHLParcelsStatusHistory."Entry No."
              END;
            END ELSE BEGIN
              IF ParcelStatusHistoryArchive.GET(LastEntryNoNewTablesL) THEN BEGIN
                DHLParcelsStatusHistory.RESET;
                DHLParcelsStatusHistory.SETCURRENTKEY(
                  "DHL Shipment Code","Piece-Code (Identifier)","Document Type","Document No.","Document Line No.");
                DHLParcelsStatusHistory.SETRANGE("DHL Shipment Code",ParcelStatusHistoryArchive."Tracking Code");
                DHLParcelsStatusHistory.SETFILTER("Piece-Code (Identifier)",'%1','');
                IF DHLParcelsStatusHistory.FINDLAST THEN BEGIN
                  IF DHLParcelsStatusHistory."Entry No." > LastEntryNoL THEN
                    LastEntryNoL := DHLParcelsStatusHistory."Entry No."
                END;
              END;
            END;
            IF LastEntryNoL > p_SIIMessage."Last DHL Parcel Entry No." THEN BEGIN
              p_SIIMessage."Last DHL Parcel Entry No." := LastEntryNoL;
              p_SIIMessage.MODIFY;
            END;
            // E/P1232
          END;
      END;
      //E/P1133

      p_SIIDHLParcelStatusTemp_Var.RESET;
    END;

    PROCEDURE "-----Seperator03"@1000000014();
    BEGIN
    END;

    PROCEDURE CheckIfProcessMessage@1000000029(p_SIIMessage@1000000000 : Record 50141) : Boolean;
    BEGIN
      // Check valid Date of Message
      IF ((p_SIIMessage."Starting Date" > WORKDATE) AND (p_SIIMessage."Starting Date" <> 0D)) OR
         ((p_SIIMessage."Ending Date" < WORKDATE) AND (p_SIIMessage."Ending Date" <> 0D))
      THEN BEGIN
        EXIT(FALSE);
      END;

      // Check Active Actions For Header
      IF NOT ActiveActions(p_SIIMessage) THEN BEGIN
        EXIT(FALSE);
      END;

      // Check Active Channels For Lines
      IF p_SIIMessage."Belongs to" = p_SIIMessage."Belongs to"::Lines THEN
        IF NOT ActiveChannels(p_SIIMessage) THEN
          EXIT(FALSE);

      // Continue Process
      EXIT(TRUE);
    END;

    PROCEDURE ActiveActions@1000000021(p_SIIMessage@1000000000 : Record 50141) : Boolean;
    BEGIN
      CLEAR(SIIActiveAction_glob);
      WITH SIIActiveAction_glob DO BEGIN
        // Get Active Actions For Message
        SETRANGE("Website No.",p_SIIMessage."Website No.");
        SETRANGE("Message Code NAV",p_SIIMessage."Message Code NAV");
        SETRANGE(Active,TRUE);
        IF ISEMPTY THEN
          EXIT(FALSE)
        ELSE BEGIN
          FINDSET;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ActiveChannels@1000000019(p_SIIMessage@1000000000 : Record 50141) : Boolean;
    VAR
      SIIActiveChannel@1000000001 : Record 50144;
    BEGIN
      CLEAR(SIIActiveChannel);
      //S/P0923
      TempSIIActiveChannels_glob.DELETEALL;
      //E/P0923
      WITH SIIActiveChannel DO BEGIN
        // Get Active Channels For Message
        SETRANGE("Website No.",p_SIIMessage."Website No.");
        SETRANGE("Message Code NAV",p_SIIMessage."Message Code NAV");
        SETRANGE(Active,TRUE);
        IF ISEMPTY THEN
          EXIT(FALSE)
        ELSE BEGIN
          FINDSET;
          //S/P0923
          REPEAT
            TempSIIActiveChannels_glob.TRANSFERFIELDS(SIIActiveChannel);
            TempSIIActiveChannels_glob.INSERT;
          UNTIL NEXT = 0;
          //E/P0923
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetMsgTypeGlob@1000000040(p_SIIMessage@1000000000 : Record 50141);
    BEGIN
      MsgType_glob := SIIGeneralMgmt_glob.GetMsgType(p_SIIMessage);
    END;

    PROCEDURE "-----Seperator04"@1000000022();
    BEGIN
    END;

    PROCEDURE ProceedSalesHeader@1000000030(p_RecRefOrderHeader@1000000001 : RecordRef) : Boolean;
    VAR
      Value_Date_1@1000000003 : Date;
      Proceed@1000000002 : Boolean;
    BEGIN
      CLEAR(Proceed);

      CASE MsgType_glob OF
        1: ; // "Shipment Date Msg." -> No Header Conditions

        2:  // "Payment Update Confirm. Msg." -> No Lines for Payment Update
          BEGIN
            EVALUATE(Value_Date_1,FORMAT(p_RecRefOrderHeader.FIELD(75328)));
            IF Value_Date_1 <> 0D THEN                                                     // "Payment received at"
              Proceed := TRUE;
          END;

        3: ; // "Shipment Confirmation Msg." -> No Header Conditions
        4: ; // "Shipment Delivered Msg." -> No Header Conditions
        5: ; // "Cancellation Msg." -> No Header Conditions

        //S/P1010
        6: ; // "Return Order Requested Msg." -> No Header Conditions
        7: ; // "Return Item Received Msg." -> No Header Conditions
        8: ; // "Return Order Refund Msg." -> No Header Conditions
        9: ; // "Change Ret. Requested Msg." -> No Header Conditions
        10: ; // "Change Return Item Received Msg." -> No Header Conditions
        11: ; // "Change Order Created Msg." -> No Header Conditions

        {*******************
        12: ; // "Change Shipment Delayed Msg."
        13: ; // "Change Shipment Confirm. Msg."
        14: ; // "Change Shipment Delivered Msg."
        *******************}

        15: ; // "Spare Part Request Msg." -> No Header Conditions

        {*******************
        16: ; // "Cancellation Request Msg."
        17: ; // "Cancellation Successful Msg."
        18: ; // "Cancellation Outpayment Msg."
        *******************}
        //E/P1010

        //S/P1058
        19: ; // "Return Item Not Received" -> No Header Conditions
        //E/P1058
        //T0003 10.06.14 tec-sf +++++++++++++++++++++++++++++
        21: Proceed := TRUE;
        //T0003 10.06.14 tec-sf -----------------------------
        //H1515 17.10.14 MBY ++++++++++++++++++++++++++
        24: Proceed := TRUE;
        //H1515 17.10.14 MBY --------------------------
      END;

      IF Proceed THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE ProceedSalesLine@1000000020(p_RecRefOrderLine@1000000001 : RecordRef;VAR p_CreateExtendedMailEntry_Var@1000000014 : Boolean) : Boolean;
    VAR
      Value_Int_1@1000000000 : Integer;
      Value_Int_2@1000000006 : Integer;
      Value_Int_3@1000000009 : Integer;
      Value_DateTime_1@1000000003 : DateTime;
      Value_DateTime_2@1000000015 : DateTime;
      Value_Date_1@1000000004 : Date;
      Value_Date_2@1000000005 : Date;
      Value_Code10_1@1000000007 : Code[10];
      Value_Text30_1@1000000010 : Text[30];
      Proceed@1000000002 : Boolean;
      CWDifference@1000000008 : Integer;
      FieldRef@1000000011 : FieldRef;
      SIIGeneralManagement@1000000012 : Codeunit 50120;
      LastSentMsg@1000000013 : DateTime;
    BEGIN
      CLEAR(Proceed);
      CLEAR(Value_Int_1);
      CLEAR(Value_DateTime_1);
      CLEAR(Value_Date_1);
      CLEAR(Value_Date_2);
      //S/P0936
      CLEAR(Value_Int_2);
      CLEAR(Value_Int_3);
      CLEAR(Value_Code10_1);
      CLEAR(Value_Text30_1);
      //E/P0936

      //  H2151  17.02.15  MBY  ++++++++++++++++++
      {
      // >> H1472
      Proceed := TRUE;
      // << H1472
      }
      //  H2151  17.02.15  MBY  ------------------

      TempSIIActiveChannels_glob.SETRANGE("Purchasing Code",FORMAT(p_RecRefOrderLine.FIELD(5711)));   // "Purchasing Code"
      IF NOT TempSIIActiveChannels_glob.ISEMPTY THEN BEGIN
        TempSIIActiveChannels_glob.FINDSET;
        CASE MsgType_glob OF
          1:  // "Shipment Date Msg."
              // EDDM > MODM
              // EDDM = MODM, but both < WORKDATE
            BEGIN
              EVALUATE(Value_Int_1,FORMAT(p_RecRefOrderLine.FIELD(15)));          // Quantity
              EVALUATE(Value_DateTime_1,FORMAT(p_RecRefOrderLine.FIELD(75338)));  // "Actual Delivery Date"
              EVALUATE(Value_Date_1,FORMAT(p_RecRefOrderLine.FIELD(50074)));      // "EDD Master"
              EVALUATE(Value_Date_2,FORMAT(p_RecRefOrderLine.FIELD(50070)));      // "Max. Order Date - Master"
              //S/P0936
              FieldRef := p_RecRefOrderLine.FIELD(75318);
              //S/P1161
              //EVALUATE(Value_Int_2,FORMAT(FieldRef.VALUE,0,9)); // "Return Type"
              IF NOT EVALUATE(Value_Int_2,FORMAT(FieldRef.VALUE,0,9)) THEN  // "Return Type"
                Value_Int_2 :=
                  SIIGeneralMgmt_glob.GetIntFromOptionString(FieldRef);
              //E/P1161
              EVALUATE(Value_Code10_1,FORMAT(p_RecRefOrderLine.FIELD(6608)));     // "Return Reason Code"
              //IF (Value_Int_1 <> 0) AND (Value_DateTime_1 = 0DT) THEN BEGIN
              //S/P0995
              //IF (Value_Int_1 <> 0) AND (Value_DateTime_1 = 0DT) AND (Value_Int_2 = 0) AND (Value_Code10_1 = '') THEN BEGIN
              IF (Value_Int_1 <> 0) AND
                 ((Value_DateTime_1 = 0DT) OR (Value_DateTime_1 < CREATEDATETIME(WORKDATE,235959T))) AND
                 (Value_Int_2 = 0) AND
                 (Value_Code10_1 = '')
              THEN BEGIN
              //E/P0995
              //E/P0936
              //S/P0923
              //IF (Value_Date_1 > Value_Date_2) OR ((Value_Date_1 = Value_Date_2) AND (Value_Date_2 < WORKDATE)) THEN
              //E/P0923
                Proceed := TRUE;
              END;
              //S/P0923
              //S/P0936
              //S/P0995
              //IF (Value_Date_1 = 0D) OR (Value_Date_2 = 0D) THEN
              IF (Value_Date_1 = 0D) AND (Value_Date_2 = 0D) THEN
              //E/P0995
                Proceed := FALSE;
              //E/P0936
              CASE TRUE OF
                // 1nd Check
                TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM":
                  BEGIN
                    EVALUATE(Value_Date_1,FORMAT(p_RecRefOrderLine.FIELD(50074)));      // "EDD Master"
                    IF Value_Date_1 <> 0D THEN BEGIN
                      TempSIIActiveChannels_glob.TESTFIELD("Shipm. Deliv. - EDDM DF");
                      IF CALCDATE(TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM DF",Value_Date_1) < WORKDATE THEN
                        Proceed := FALSE;
                    END;
                  END;
                // 2nd Check
                TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM_MODM":
                  BEGIN
                    EVALUATE(Value_Date_1,FORMAT(p_RecRefOrderLine.FIELD(50074)));      // "EDD Master"
                    EVALUATE(Value_Date_2,FORMAT(p_RecRefOrderLine.FIELD(50070)));      // "Max. Order Date - Master"
                    IF (Value_Date_1 <> 0D) AND (Value_Date_2 <> 0D) THEN BEGIN
                      TempSIIActiveChannels_glob.TESTFIELD("Shipm. Deliv. - EDDM_MODM DF");
                      IF (CALCDATE(TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM_MODM DF",Value_Date_1) < WORKDATE)
                         AND (CALCDATE(TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM_MODM DF",Value_Date_2) < WORKDATE)
                      THEN
                        Proceed := FALSE;
                    END;
                  END;
              END;
              //E/P0923
              //A/P0936
              IF Proceed THEN BEGIN
                EVALUATE(Value_Int_1,FORMAT(p_RecRefOrderLine.FIELD(15)));          // Quantity
                EVALUATE(Value_DateTime_1,FORMAT(p_RecRefOrderLine.FIELD(75338)));  // "Actual Delivery Date"
                EVALUATE(Value_Date_1,FORMAT(p_RecRefOrderLine.FIELD(50074)));      // "EDD Master"
                EVALUATE(Value_Date_2,FORMAT(p_RecRefOrderLine.FIELD(50070)));      // "Max. Order Date - Master"
                FieldRef := p_RecRefOrderLine.FIELD(75318);
                //S/P1161
                //EVALUATE(Value_Int_2,FORMAT(FieldRef.VALUE));           // "Return Type"
                IF NOT EVALUATE(Value_Int_2,FORMAT(FieldRef.VALUE)) THEN  // "Return Type"
                  Value_Int_2 :=
                    SIIGeneralMgmt_glob.GetIntFromOptionString(FieldRef);
                //E/P1161
                EVALUATE(Value_Code10_1,FORMAT(p_RecRefOrderLine.FIELD(6608)));     // "Return Reason Code"
                FieldRef := p_RecRefOrderLine.FIELD(50018);
                //S/P1161
                //EVALUATE(Value_Int_3,FORMAT(FieldRef.VALUE));           // "Transp. Type"
                IF NOT EVALUATE(Value_Int_3,FORMAT(FieldRef.VALUE)) THEN  // "Transp. Type"
                  Value_Int_3 :=
                    SIIGeneralMgmt_glob.GetIntFromOptionString(FieldRef);
                //E/P1161
                EVALUATE(Value_Text30_1,FORMAT(p_RecRefOrderLine.FIELD(50076)));   // "CW Last Customer Info"
                //S/P1022
                EVALUATE(Value_DateTime_2,FORMAT(p_RecRefOrderLine.FIELD(75308)));  // First Scan
                //E/P1022
                IF (Value_Int_1 <> 0) AND (Value_DateTime_1 = 0DT) AND (Value_Int_2 = 0) AND (Value_Code10_1 = '') THEN BEGIN
                  p_CreateExtendedMailEntry_Var := TRUE;
                END;
                //S/P1025
                IF (Value_Date_1 <> 0D) AND (Value_Date_2 <> 0D) THEN BEGIN
                //E/P1025
                  // EDDM at least 1 CW bigger than Workdate
                  IF SIIGeneralMgmt_glob.GetCWDifference(WORKDATE,Value_Date_1) < 1 THEN
                    p_CreateExtendedMailEntry_Var := FALSE;
                  CWDifference := 0;
                  CWDifference := SIIGeneralMgmt_glob.GetCWDifference(Value_Date_2,Value_Date_1);
                  // Difference between EDDM and MODM not bigger then
                  IF TempSIIActiveChannels_glob."Shp. D. Min. Dif. EDDM MODM CW" <> 0 THEN BEGIN
                    IF CWDifference < TempSIIActiveChannels_glob."Shp. D. Min. Dif. EDDM MODM CW" THEN
                      p_CreateExtendedMailEntry_Var := FALSE;
                  END;
                  //H0532,H1207 03.06.14  EHN  +++++++++++++++++++++++++++++++++++++++++
                  IF TempSIIActiveChannels_glob."Shp. D. Max. Dif. EDDM MODM CW" <> 0 THEN BEGIN
                    IF CWDifference > TempSIIActiveChannels_glob."Shp. D. Max. Dif. EDDM MODM CW" THEN
                      p_CreateExtendedMailEntry_Var := FALSE;
                  END;
                  //H0532,H1207 03.06.14  EHN  -----------------------------------------
                  //S/P1022
                  //75308
                  IF Value_DateTime_2 <> 0DT THEN
                    p_CreateExtendedMailEntry_Var := FALSE;
                  //E/P1022
                  IF p_CreateExtendedMailEntry_Var THEN BEGIN
                    // Last Customer Info Filled
                    IF Value_Text30_1 <> '' THEN BEGIN
                      // Max. Mail Counter Order
                      IF TempSIIActiveChannels_glob."Shipm. Delay max. Mails Order" <> 0 THEN
                        IF SIIGeneralManagement.CountSentMailsForSO(p_RecRefOrderLine) >=
                           TempSIIActiveChannels_glob."Shipm. Delay max. Mails Order"
                        THEN
                          p_CreateExtendedMailEntry_Var := FALSE;
                      IF p_CreateExtendedMailEntry_Var THEN
                        //Max Mail Counter Line
                        IF TempSIIActiveChannels_glob."Shipm. Delay max. Mails Line" <> 0 THEN
                          IF SIIGeneralManagement.CountSentMailsForSL(p_RecRefOrderLine) >=
                             TempSIIActiveChannels_glob."Shipm. Delay max. Mails Line"
                          THEN
                            p_CreateExtendedMailEntry_Var := FALSE;
                      IF p_CreateExtendedMailEntry_Var THEN BEGIN
                        IF TempSIIActiveChannels_glob."Shipm. Delay EDDM Last Send CW" <> 0 THEN BEGIN
                          LastSentMsg := 0DT;
                          LastSentMsg := SIIGeneralManagement.LastShipmentDelayMailSend(p_RecRefOrderLine);
                          IF LastSentMsg <> 0DT THEN BEGIN
                            CWDifference := 0;
                            CWDifference := SIIGeneralMgmt_glob.GetCWDifference(DT2DATE(LastSentMsg),Value_Date_1);
                            IF CWDifference < TempSIIActiveChannels_glob."Shipm. Delay EDDM Last Send CW" THEN
                              p_CreateExtendedMailEntry_Var := FALSE;
                          END;
                        END;
                      END;
                    END;
                  END;
                //S/P1025
                //END;
                END ELSE
                  p_CreateExtendedMailEntry_Var := FALSE;
                //E/P1025
              END;
              //E/P0936
            END;

          2: ; // "Payment Update Confirm. Msg." -> No Lines Conditions

          3:  // "Shipment Confirmation Msg."
            BEGIN
              EVALUATE(Value_Int_1,FORMAT(p_RecRefOrderLine.FIELD(15)));          // Quantity
              IF Value_Int_1 <> 0 THEN BEGIN
                CLEAR(DHLHistoryTrackingID_glob);
                CLEAR(DHLHistoryShippingAgent_glob);
                CLEAR(DHLHistoryTimeStamp_glob);
                //S/P0979
                //IF GetShipmentConfValues(p_RecRefOrderLine) THEN
                IF GetShipmentConfValues(p_RecRefOrderLine,p_CreateExtendedMailEntry_Var) THEN
                //E/P0979
                  Proceed := TRUE;
              END;
            END;
          4:  // "Shipment Delivered Msg."
            BEGIN
              EVALUATE(Value_Int_1,FORMAT(p_RecRefOrderLine.FIELD(15)));          // Quantity
              IF Value_Int_1 <> 0 THEN BEGIN
                //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                //H0367  30.05.13  ABR  -----------------------------------------
                //CASE TRUE OF
                  // 1st Check
                  //SIIActiveChannelsTemp_glob."Shipm. Deliv. - ADD filled":
                //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                IF TempSIIActiveChannels_glob."Shipm. Deliv. - ADD filled" AND NOT Proceed THEN BEGIN
                //H0367  30.05.13  ABR  -----------------------------------------
                  EVALUATE(Value_DateTime_1,FORMAT(p_RecRefOrderLine.FIELD(75338)));  // "Actual Delivery Date"
                  //S/P0995
                  IF (Value_DateTime_1 <> 0DT) AND (Value_DateTime_1 < CREATEDATETIME(WORKDATE,0T)) THEN
                  //IF Value_DateTime_1 <> 0DT THEN
                  //E/P0995
                    Proceed := TRUE;
                END;
                  // 2nd Check
                //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                //H0367  30.05.13  ABR  -----------------------------------------
                  //SIIActiveChannelsTemp_glob."Shipm. Deliv. - EDDM":
                //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                IF TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM" AND NOT Proceed THEN BEGIN
                //H0367  30.05.13  ABR  -----------------------------------------
                  EVALUATE(Value_Date_1,FORMAT(p_RecRefOrderLine.FIELD(50074)));      // "EDD Master"
                  //S/P0923
                  //IF Value_Date_1 <> 0D THEN
                  IF Value_Date_1 <> 0D THEN BEGIN
                    //IF CALCDATE('+7D',Value_Date_1) < WORKDATE THEN
                    TempSIIActiveChannels_glob.TESTFIELD("Shipm. Deliv. - EDDM DF");
                    IF CALCDATE(TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM DF",Value_Date_1) < WORKDATE THEN
                      Proceed := TRUE;
                  END;
                     //E/P0923
                END;
                  // 3rd Check
                //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                //H0367  30.05.13  ABR  -----------------------------------------
                  //SIIActiveChannelsTemp_glob."Shipm. Deliv. - EDDM_MODM":
                //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                IF TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM_MODM" AND NOT Proceed THEN BEGIN
                //H0367  30.05.13  ABR  -----------------------------------------
                  EVALUATE(Value_Date_1,FORMAT(p_RecRefOrderLine.FIELD(50074)));      // "EDD Master"
                  EVALUATE(Value_Date_2,FORMAT(p_RecRefOrderLine.FIELD(50070)));      // "Max. Order Date - Master
                  //S/P0923
                  //IF (Value_Date_1 <> 0D) AND (Value_Date_2 <> 0D) THEN
                  IF (Value_Date_1 <> 0D) AND (Value_Date_2 <> 0D) THEN BEGIN
                    TempSIIActiveChannels_glob.TESTFIELD("Shipm. Deliv. - EDDM_MODM DF");
                    //IF (CALCDATE('+6W',Value_Date_1) < WORKDATE) AND (CALCDATE('+6W',Value_Date_2) < WORKDATE) THEN
                    IF (CALCDATE(TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM_MODM DF",Value_Date_1) < WORKDATE)
                       AND (CALCDATE(TempSIIActiveChannels_glob."Shipm. Deliv. - EDDM_MODM DF",Value_Date_2) < WORKDATE)
                    THEN
                      Proceed := TRUE;
                  END;
                  //E/P0923
                END;
                //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                //H0367  30.05.13  ABR  -----------------------------------------
                //END;
                //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                //H0367  30.05.13  ABR  -----------------------------------------
              END;
            END;

          5:  // "Cancellation Msg."
            BEGIN
              EVALUATE(Value_Int_1,FORMAT(p_RecRefOrderLine.FIELD(15)));          // Quantity
              IF Value_Int_1 = 0 THEN
                Proceed := TRUE;
            END;

          //S/P1010
          6,  // "Return Order Requested Msg."
          7,  // "Return Item Received Msg."
          8,  // "Return Order Refund Msg
          9,  // "Change Ret. Requested Msg."
          10, // "Change Return Item Received Msg."
          11, // "Change Order Created Msg."

          {********************
          12: ; // "Change Shipment Delayed Msg."
          13: ; // "Change Shipment Confirm. Msg."
          14: ; // "Change Shipment Delivered Msg."
          ********************}

          15: // "Spare Part Request Msg."

          {********************
          16: ; // "Cancellation Request Msg."
          17: ; // "Cancellation Successful Msg."
          18: ; // "Cancellation Outpayment Msg."
          ********************}
            // Check already done in "Triggered_.....()"
            BEGIN
              Proceed := TRUE;  // Check already done in "Triggered_[...]CheckIfProceed()"
            END;
          11: Proceed := TRUE;
          //E/P1010

          //S/P1058
          19: // "Return Item Not Received"
            BEGIN
              IF (FORMAT(p_RecRefOrderLine.FIELD(75318)) IN ['Change','Return']) AND  // "Return Type"
                 (FORMAT(p_RecRefOrderLine.FIELD(75345)) <> '') AND                   // "Linked to Sales Order No."
                 (FORMAT(p_RecRefOrderLine.FIELD(75346)) <> '') AND                   // "Linked to Sales Order Line No."
                 (FORMAT(p_RecRefOrderLine.FIELD(15)) = '1') AND                      // "Quantity"
                 (FORMAT(p_RecRefOrderLine.FIELD(5809)) = '0')                        // "Return Qty. Received"
              THEN BEGIN
                EVALUATE(Value_Int_1,FORMAT(p_RecRefOrderLine.FIELD(75346)));
                IF GetLastMsgDateReturnNotReceiv(
                  Value_Date_1,
                  FORMAT(p_RecRefOrderLine.FIELD(75345)),
                  Value_Int_1)
                THEN BEGIN
                  Value_Date_2 := CALCDATE(SIISetup_glob."DF for Ret. Item Not Receiv.",WORKDATE);
                  IF Value_Date_1 < Value_Date_2 THEN
                    Proceed := TRUE;
                END;
              END;
            END;
          //E/P1058
          //H0651  27.11.13  MBY  +++++++++++++++++++++++++
          20:
            BEGIN
              Proceed := TRUE;
            END;
          //H0651  27.11.13  MBY  -------------------------
          //T0003 17.06.14 tec-sf +++++++++++++++++++++++++++++
          21,22 :
            BEGIN
              Proceed := TRUE;
            END;
          //T0003 17.06.14 tec-sf -----------------------------
          //T0009 02.07.14 tec-sf +++++++++++++++++++++++++++++
          23 :
            BEGIN
              Proceed := TRUE;
            END;
          //T0009 02.07.14 tec-sf -----------------------------
        END;
      END;

      TempSIIActiveChannels_glob.SETRANGE("Purchasing Code");

      IF Proceed THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE "-----Seperator05"@1000000003();
    BEGIN
    END;

    PROCEDURE Create_Log_Entries@1000000001(VAR p_RecRefOrderHeader_Var@1000000015 : RecordRef;p_SIIMessage@1000000000 : Record 50141);
    VAR
      RecRefOrderLine@1000000005 : RecordRef;
      SIILog@1000000002 : Record 50146;
      SIILogManualTrigger@1000000019 : Record 50155;
      SIILogActions_Temp@1000000004 : TEMPORARY Record 50153;
      SIILogActions@1000000014 : Record 50153;
      SIILogManualTriggerActions@1000000018 : Record 50160;
      SIIMonitoringServices@1000000006 : Codeunit 50126;
      SIILogEntryNo@1000000001 : Integer;
      SIILogNextEntryNoL@1000000003 : Integer;
      DateTimeForAction@1000000009 : DateTime;
      StatusDateTimeForAction@1000000012 : ' ,In Time,Earlier,Delayed';
      TrackingNo@1000000011 : Text[40];
      Carrier@1000000010 : Code[20];
      MessageText@1000000008 : Text[100];
      NewActionValuesFound@1000000013 : Boolean;
      SIISalesOrderLastMessage@1000000017 : Record 50157;
      FieldRefL@1000000020 : FieldRef;
    BEGIN
      //H1515  22.09.14  MBY  +++++++++++++++++++++++++
      IF IsTriggered_glob THEN BEGIN
        FieldRefL := p_RecRefOrderHeader_Var.FIELD(3);
        FieldRefL.SETRANGE(Attached_No_glob);
      END;
      //H1515  22.09.14  MBY  -------------------------

      IF p_RecRefOrderHeader_Var.FINDSET THEN BEGIN
        CLEAR(RecRefOrderLine);
        CLEAR(SIILog);
        //S/P1010
        CLEAR(SIILogManualTrigger);
        //E/P1010
        REPEAT
          //H2173  MIK  19.02.15 +++++++++++++++++++++
          SIILogNextEntryNoL := SIILog.GetNextEntryNo(TRUE);
          LastSIILogEntryNo_glob := SIILogNextEntryNoL - 1;
          IF IsTriggered_glob THEN BEGIN
            SIILogNextEntryNoL := SIILogManualTrigger.GetNextEntryNo(TRUE);
            LastSIILogManualEntryNo_glob := SIILogNextEntryNoL - 1;
          END;
          //H2173  MIK  19.02.15 ---------------------

          CLEAR(NewActionValuesFound);
          IF ProceedSalesHeader(p_RecRefOrderHeader_Var) THEN BEGIN
            // Get Values for Actions and Message
            GetActionValues(
              p_RecRefOrderHeader_Var,RecRefOrderLine,DateTimeForAction,
              StatusDateTimeForAction,TrackingNo,Carrier,MessageText);

            // Ceck if new Action Values exists
            SIILogActions_Temp.DELETEALL;
            //S/P0936
            CreateExtendedMailEntry_glob := FALSE;
            //E/P0936
            //H2173  MIK  19.02.15 +++++++++++++++++++++
            NewActionValuesFound :=
              FillLogActionsTemporary(SIILogActions_Temp,
                p_SIIMessage,
                SIILogNextEntryNoL,
                1,
                FORMAT(p_RecRefOrderHeader_Var.FIELD(3)),
                FORMAT(0),
                DateTimeForAction,
                StatusDateTimeForAction,
                TrackingNo,
                Carrier);
            //H2173  MIK  19.02.15 ---------------------
            IF NewActionValuesFound THEN BEGIN
              // Fill Log
              //S/P1010
              //H2173  MIK  19.02.15 +++++++++++++++++++++
              IF NewLogEntriesAllowed(SIILog,SIILogManualTrigger,p_RecRefOrderHeader_Var,p_SIIMessage) THEN BEGIN
                FillLogGeneralInformations(
                  SIILog,
                  SIILogManualTrigger,
                  p_SIIMessage,
                  p_RecRefOrderHeader_Var,
                  SIILogNextEntryNoL);
                //E/P1010
                //H2058  09.02.14  MIK ++++++++++++++
                //H2058  09.02.14  MIK --------------
                //H2173  MIK  19.02.15 ---------------------

                IF NOT IsTriggered_glob THEN BEGIN
                  CLEAR(SIILogActions);
                  SIILogActions_Temp.FINDSET;
                  REPEAT
                    SIILogActions.INIT;
                    SIILogActions.TRANSFERFIELDS(SIILogActions_Temp,TRUE);
                    SIILogActions.INSERT;
                  UNTIL SIILogActions_Temp.NEXT = 0;
                  GroupLogActions(SIILogActions."Log Entry No.");
                END ELSE BEGIN
                  CLEAR(SIILogManualTriggerActions);
                  SIILogActions_Temp.FINDSET;
                  REPEAT
                    SIILogManualTriggerActions.INIT;
                    SIILogManualTriggerActions.TRANSFERFIELDS(SIILogActions_Temp,TRUE);
                    SIILogManualTriggerActions.INSERT;
                  UNTIL SIILogActions_Temp.NEXT = 0;
                END;
                //E/P1010

                //H2173  MIK  19.02.15 +++++++++++++++++++++
                //S/P0923
                //S/P1010
                //E/P1010
                //E/P0923
                //H2173  MIK  19.02.15 ---------------------
              END;
              //E/P1010
            END;
            //H0907  06.03.14  MBY  +++++++++++++++++++++++++
            IF NOT IsTriggered_glob THEN
            //H0907  06.03.14  MBY  -------------------------
              COMMIT;
          END;
        UNTIL p_RecRefOrderHeader_Var.NEXT = 0;

        //H2173  MIK  19.02.15 +++++++++++++++++++++
        //S/P0979
        //S/P1010
        //E/P1010
        //E/P0979
        //H2173  MIK  19.02.15 ---------------------
      END;
    END;

    PROCEDURE Create_Log_LineLog_Entries@1000000028(VAR p_RecRefOrderHeader_Var@1000000000 : RecordRef;p_SIIMessage@1000000002 : Record 50141);
    VAR
      RecRefOrderLine@1000000001 : RecordRef;
      SIILogActions_Temp@1000000016 : TEMPORARY Record 50153;
      SIILogActions@1000000015 : Record 50153;
      SIILogManualTriggerActions@1000000026 : Record 50160;
      SIILog@1000000007 : Record 50146;
      SIILogManualTrigger@1000000024 : Record 50155;
      SIILineLog@1000000008 : Record 50154;
      SIILineLogManualTrigger@1000000025 : Record 50156;
      SIIMonitoringServices@1000000022 : Codeunit 50126;
      FieldRef@1000000018 : FieldRef;
      SIILogCreated@1000000004 : Boolean;
      DateTimeForAction@1000000009 : DateTime;
      StatusDateTimeForAction@1000000014 : ' ,In Time,Earlier,Delayed';
      TrackingNo@1000000012 : Text[40];
      Carrier@1000000013 : Code[20];
      MessageText@1000000011 : Text[100];
      NewActionValuesFound@1000000010 : Boolean;
      LineLogRefID@1000000017 : Integer;
      SIISalesOrderLastMessage@1000000023 : Record 50157;
      SIIUpdateFieldValues@1000000019 : Codeunit 50130;
      TempInteger@1000000020 : Integer;
      DocTypeProcess@1000000028 : Integer;
      DocLineNoProcess@1000000027 : Integer;
      DocLineNoAttached@1000000029 : Integer;
      SIILogNextEntryNoL@1000000003 : Integer;
      EDDML@1000000030 : Date;
    BEGIN
      CLEAR(SIILog);
      CLEAR(SIILineLog);
      //S/P1010
      CLEAR(SIILogManualTrigger);
      CLEAR(SIILineLogManualTrigger);
      //E/P1010

      IF NOT p_RecRefOrderHeader_Var.ISEMPTY THEN BEGIN
        p_RecRefOrderHeader_Var.FINDSET;
        //H2173  MIK  19.02.15 +++++++++++++++++++++
        //H2173  MIK  19.02.15 ---------------------
        REPEAT
          CLEAR(RecRefOrderLine);
          CLEAR(SIILogCreated);
          //H2173  MIK  19.02.15 +++++++++++++++++++++
          SIILogNextEntryNoL := SIILog.GetNextEntryNo(TRUE);
          LastSIILogEntryNo_glob := SIILogNextEntryNoL - 1;
          IF IsTriggered_glob THEN BEGIN
            SIILogNextEntryNoL := SIILogManualTrigger.GetNextEntryNo(TRUE);
            LastSIILogManualEntryNo_glob := SIILogNextEntryNoL - 1;
          END;
          //H2173  MIK  19.02.15 ---------------------

          //S/P0923
          //S/P0979
          //S/P1010
          //IF NOT CorrectionEntry_glob THEN BEGIN
          IF (CorrectionEntry_glob = FALSE) AND (IsTriggered_glob = FALSE) THEN BEGIN
          //E/P1010
            IF IsExternalTest_glob THEN
            //IF IsExternalTest_glob OR CorrectionEntry_glob THEN
            //E/P0979
            //E/P0923
              RecRefOrderLine.OPEN(RecRefTableNo_glob + 1)
            ELSE BEGIN
              CASE CheckArchive_glob OF
                FALSE: RecRefOrderLine.OPEN(37);      // Sales Line
                TRUE: RecRefOrderLine.OPEN(5108);     // Sales Line Archive
              END;
            END;

            FieldRef := RecRefOrderLine.FIELD(1);     // "Document Type"
            FieldRef.SETFILTER(FORMAT(p_RecRefOrderHeader_Var.FIELD(1)));
            FieldRef := RecRefOrderLine.FIELD(3);     // "Document No."
            FieldRef.SETFILTER(FORMAT(p_RecRefOrderHeader_Var.FIELD(3)));
            FieldRef := RecRefOrderLine.FIELD(5);     // Type = Item
            FieldRef.SETRANGE(2);
          //S/P0979
          //S/P1058
          //END ELSE
          END ELSE BEGIN
          //E/P1058
            //H0651  27.11.13  MBY  +++++++++++++++++++++++++
            IF NOT MultipleLinesTriggered_glob THEN BEGIN
            //H0651  27.11.13  MBY  -------------------------
              RecRefOrderLine := RecRefOrderLine_glob.DUPLICATE;
              RecRefOrderLine.SETVIEW(RecRefOrderLine_glob.GETVIEW);
            //H0651  27.11.13  MBY  +++++++++++++++++++++++++
            END ELSE BEGIN
              FillRecRefOrderLineTemp(RecRefOrderLine,RecRefOrderLine_glob);
            END;
            //H0651  27.11.13  MBY  -------------------------
          //S/P1058
          END;
          //E/P1058
          //E/P0979

          //H0651  27.11.13  MBY  +++++++++++++++++++++++++
          IF RecRefOrderLine.FINDSET THEN BEGIN
          //H0651  27.11.13  MBY  -------------------------
            REPEAT
              //S/P0936
              CreateExtendedMailEntry_glob := FALSE;
              IF ProceedSalesLine(RecRefOrderLine,CreateExtendedMailEntry_glob) THEN BEGIN
                //S/P1058
                IF MsgType_glob = 19 THEN BEGIN             // Return Item Nor Received
                  FieldRef := RecRefOrderLine.FIELD(1);     // "Document Type"
                  DocTypeProcess := FieldRef.VALUE;
                  FieldRef := RecRefOrderLine.FIELD(4);     // "Line No."
                  DocLineNoProcess := FieldRef.VALUE;
                  FieldRef := RecRefOrderLine.FIELD(75346); // "Linked to Sales Order Line No."
                  DocLineNoAttached := FieldRef.VALUE;
                  SetGeneralGlobals(
                    36,
                    1,
                    FORMAT(RecRefOrderLine.FIELD(75345)),   // "Linked to Sales Order No."
                    DocLineNoAttached,
                    RecRefOrderLine.NUMBER - 1,
                    DocTypeProcess,
                    FORMAT(RecRefOrderLine.FIELD(3)),       // "Document No."
                    DocLineNoProcess);
                END;
                //E/P1058

              //IF ProceedSalesLine(RecRefOrderLine) THEN BEGIN
              //E/P0936
                // Get Values for Actions and Message
                GetActionValues(
                  p_RecRefOrderHeader_Var,
                  RecRefOrderLine,
                  DateTimeForAction,
                  StatusDateTimeForAction,
                  TrackingNo,
                  Carrier,
                  MessageText);
                  //rste#1
                //S/P1010
                //IF NewLogEntriesAllowed(SIILog,p_RecRefOrderHeader_Var,p_SIIMessage) THEN BEGIN
                //  IF NewLogLineEntriesAllowed(SIILineLog,RecRefOrderLine,p_SIIMessage) THEN BEGIN
                IF NewLogEntriesAllowed(SIILog,SIILogManualTrigger,p_RecRefOrderHeader_Var,p_SIIMessage) THEN BEGIN
                  IF NewLogLineEntriesAllowed(SIILineLog,SIILineLogManualTrigger,RecRefOrderLine,p_SIIMessage) THEN BEGIN
                //E/P1010
                    // Ceck if new Action Values exists
                    //H2173  MIK  19.02.15 +++++++++++++++++++++
                    LineLogRefID := GetNextLineLogRefID(SIILogNextEntryNoL);
                    SIILogActions_Temp.DELETEALL;
                    NewActionValuesFound :=
                       FillLogActionsTemporary(
                         SIILogActions_Temp,
                         p_SIIMessage,
                         SIILogNextEntryNoL,
                         LineLogRefID,
                         FORMAT(RecRefOrderLine.FIELD(3)),   // "Document No."
                         FORMAT(RecRefOrderLine.FIELD(4)),   // "Line No.",
                         DateTimeForAction,
                         StatusDateTimeForAction,
                         TrackingNo,
                         Carrier);
                    //H2173  MIK  19.02.15 ---------------------
                    IF NewActionValuesFound THEN BEGIN
                      //S/P1010
                      //S/P1055
                      IF NOT IsTriggered_glob THEN
                        SIILogManualTrigger.SETRANGE("Entry No.",0);
                      //E/1055
                      //IF SIILog.ISEMPTY THEN BEGIN
                      IF SIILog.ISEMPTY AND SIILogManualTrigger.ISEMPTY THEN BEGIN
                      //E/P1010
                        //H2173  MIK  19.02.15 +++++++++++++++++++++
                        FillLogGeneralInformations(
                          SIILog,
                          SIILogManualTrigger,    // P1010
                          p_SIIMessage,
                          p_RecRefOrderHeader_Var,
                          SIILogNextEntryNoL);
                        //H2173  MIK  19.02.15 ---------------------
                        SIILogCreated := TRUE;
                      END ELSE BEGIN
                        //S/P1010
                        //SIILog.FINDSET;
                        IF NOT IsTriggered_glob THEN
                          SIILog.FINDSET
                        ELSE
                          SIILogManualTrigger.FINDSET;
                        //E/P1010
                      END;
                      //H2173  MIK  19.02.15 +++++++++++++++++++++
                      // Fill Line Log
                      //S/P1010
                      FillLineLog(
                        SIILineLog,
                        SIILineLogManualTrigger,
                        SIILogNextEntryNoL,
                        RecRefOrderLine,
                        LineLogRefID,
                        p_SIIMessage."Website No.",
                        p_SIIMessage."Message Code NAV",
                        p_SIIMessage."Message Code Shop");
                      //E/P1010
                      //H2173  MIK  19.02.15 ---------------------
                      // Temp Actions in normal Action
                      CLEAR(SIILogActions);
                      //S/P1010
                      CLEAR(SIILogManualTriggerActions);
                      //E/P1010
                      SIILogActions_Temp.FINDSET;
                      REPEAT
                        //S/P1010
                        IF NOT IsTriggered_glob THEN BEGIN
                        //E/P1010
                          SIILogActions.INIT;
                          SIILogActions.TRANSFERFIELDS(SIILogActions_Temp,TRUE);
                          SIILogActions."Reference ID" := SIILineLog."Reference ID";
                          SIILogActions.INSERT;
                        END ELSE BEGIN
                          SIILogManualTriggerActions.INIT;
                          SIILogManualTriggerActions.TRANSFERFIELDS(SIILogActions_Temp,TRUE);
                          SIILogManualTriggerActions."Reference ID" := SIILineLogManualTrigger."Reference ID";
                          SIILogManualTriggerActions.INSERT;
                        END;
                        //E/P1010
                        //S/P0982
                        //S/P1010
                        IF NOT IsTriggered_glob THEN BEGIN
                        //E/P1010
                          IF CreateExtendedMailEntry_glob AND (SIILogActions."Action For" = SIILogActions."Action For"::EMail) AND
                             (MsgType_glob = 1)
                          THEN BEGIN
                            //H0532  27.08.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                            {
                            //H0532  27.08.13  ABR  -----------------------------------------
                            CLEAR(SIIUpdateFieldValues);
                            SIIUpdateFieldValues.InsertUpdateRec(RecRefOrderLine,
                              50076,
                              FORMAT(DATE2DWY(WORKDATE,2)),
                              FALSE,
                              FALSE);
                            //H0532  27.08.13  ABR  +++++++++++++++++++++++++++++++++++++++++
                            }
                            CLEAR(SIIUpdateFieldValues);
                            CLEAR(EDDML);
                            EVALUATE(EDDML,FORMAT(RecRefOrderLine.FIELD(50074)));
                            SIIUpdateFieldValues.InsertUpdateRec(RecRefOrderLine,
                              50076,                                                             //Fill CW Last Customer Info
                              FORMAT(DATE2DWY(EDDML,2)) +'-'+ FORMAT(DATE2DMY(EDDML,3)),
                              FALSE,
                              FALSE);

                            SIIUpdateFieldValues.InsertUpdateRec(RecRefOrderLine,
                              50078,                                                             //Fill CW Last Customer Info
                              FORMAT(WORKDATE),
                              FALSE,
                              FALSE);

                            //H0532  27.08.13  ABR  -----------------------------------------
                            TempInteger := 0;
                            EVALUATE(TempInteger,FORMAT(RecRefOrderLine.FIELD(50079)));
                            SIIUpdateFieldValues.InsertUpdateRec(RecRefOrderLine,
                              50079,
                              FORMAT(TempInteger + 1),
                              FALSE,
                              FALSE);
                          END;
                        //S/P1010
                        END;
                        //E/P1010
                        //E/P0982
                      UNTIL SIILogActions_Temp.NEXT = 0;
                      //S/P0986
                      //GroupLogActions(SIILogActions."Log Entry No.");
                      //E/P0986
                      //H2173  MIK  19.02.15 +++++++++++++++++++++
                      //S/P0923
                      //S/P1010
                      //E/P1010
                      //E/P0923
                      //H2173  MIK  19.02.15 ---------------------
                    END;
                  END;
                END;
                //H2173  MIK  19.02.15 +++++++++++++++++++++
                //T0002 28.05.14 tec-sf +++++++++++++++++++++++++++++
                //H0907  06.03.14  MBY  +++++++++++++++++++++++++
                //H0907  06.03.14  MBY  -------------------------
                //T0002 28.05.14 tec-sf -----------------------------
                //H2173  MIK  19.02.15 ---------------------
              END;
            UNTIL RecRefOrderLine.NEXT = 0;
            //S/P0986
            //S/P1010
            IF NOT IsTriggered_glob THEN
            //E/P1010
              IF SIILogActions."Log Entry No." <> 0 THEN
                GroupLogActions(SIILogActions."Log Entry No.");
            //E/P0986
          END;
          //H2173  MIK  19.02.15 +++++++++++++++++++++
          //H2058  09.02.14  MIK ++++++++++++++
          //H2058  09.02.14  MIK --------------
          IF NOT IsTriggered_glob THEN
            COMMIT;
          //H2173  MIK  19.02.15 ---------------------
        UNTIL p_RecRefOrderHeader_Var.NEXT = 0;

        //H2173  MIK  19.02.15 +++++++++++++++++++++
        //S/P0979
        //S/P1010
        //E/P1010
        //E/P0979
        //H2173  MIK  19.02.15 ---------------------

      END;
    END;

    PROCEDURE FillRecRefOrderLineTemp@1000000067(VAR p_RecRefOrderLine_Temp_Var@1000000001 : RecordRef;p_RecRefOrderLine@1000000006 : RecordRef);
    VAR
      SalesLine@1000000000 : Record 37;
      SalesLineArchive@1000000002 : Record 5108;
      SalesLine_Temp@1000000004 : TEMPORARY Record 37;
      SalesLineArchive_Temp@1000000003 : TEMPORARY Record 5108;
      SalesInvoiceLine@1000000005 : Record 113;
      DocNoOccurrence@1000000007 : Integer;
      VersionNo@1000000008 : Integer;
      SalesCrMemoLine@1000000009 : Record 115;
    BEGIN
      //H0651  27.11.13  MBY  +++++++++++++++++++++++++
      CASE Process_TableNo_glob OF
        112 :
          BEGIN
            SalesInvoiceLine.SETRANGE("Document No.",Process_No_glob);
            SalesInvoiceLine.SETFILTER(Quantity,'<>%1',0);
            CASE Attached_TableNo_glob OF
              36 :
                BEGIN
                  IF SalesInvoiceLine.FINDSET THEN BEGIN
                    REPEAT
                      IF SalesLine.GET(1,SalesInvoiceLine."Order No.",SalesInvoiceLine."Order Line No.") THEN BEGIN
                        SalesLine_Temp.INIT;
                        SalesLine_Temp.TRANSFERFIELDS(SalesLine);
                        SalesLine_Temp.INSERT;
                      END;
                    UNTIL SalesInvoiceLine.NEXT = 0;
                    p_RecRefOrderLine_Temp_Var.GETTABLE(SalesLine_Temp);
                  END;
                END;
              5107 :
                BEGIN
                  IF p_RecRefOrderLine.FINDFIRST THEN BEGIN
                    EVALUATE(DocNoOccurrence,FORMAT(p_RecRefOrderLine.FIELD(5048)));
                    EVALUATE(VersionNo,FORMAT(p_RecRefOrderLine.FIELD(5047)));
                    IF SalesInvoiceLine.FINDSET THEN BEGIN
                      REPEAT
                        IF SalesLineArchive.GET(
                          1,
                          SalesInvoiceLine."Order No.",
                          DocNoOccurrence,
                          VersionNo,
                          SalesInvoiceLine."Order Line No.")
                        THEN BEGIN
                          SalesLineArchive_Temp.INIT;
                          SalesLineArchive_Temp.TRANSFERFIELDS(SalesLineArchive);
                          SalesLineArchive_Temp.INSERT;
                        END;
                      UNTIL SalesInvoiceLine.NEXT = 0;
                      p_RecRefOrderLine_Temp_Var.GETTABLE(SalesLineArchive_Temp);
                    END;
                  END;
                END;
            END;
          END;
        //T0003 18.06.14 tec-sf +++++++++++++++++++++++++++++
        36 :
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type", Process_Type_glob);
            SalesLine.SETRANGE("Document No.", Process_No_glob);
            SalesLine.SETRANGE(Type, SalesLine.Type::Item);
            IF SalesLine.FINDSET THEN BEGIN
              REPEAT
                SalesLine_Temp.INIT;
                SalesLine_Temp.TRANSFERFIELDS(SalesLine);
                SalesLine_Temp.INSERT;
              UNTIL SalesLine.NEXT = 0;
              p_RecRefOrderLine_Temp_Var.GETTABLE(SalesLine_Temp);
            END;
          END;
        //T0003 18.06.14 tec-sf -----------------------------
        //T0009 02.07.14 tec-sf +++++++++++++++++++++++++++++
        114 :
          BEGIN
            SalesCrMemoLine.SETRANGE("Document No.",Process_No_glob);
            SalesCrMemoLine.SETFILTER(Quantity,'<>%1',0);
            CASE Attached_TableNo_glob OF
              36 :
                BEGIN
                  IF SalesCrMemoLine.FINDSET THEN BEGIN
                    REPEAT
                      //T0009 12.08.14 tec-sf +++++++++++++++++++++++++++++
                      //IF SalesLine.GET(1,SalesCrMemoLine."Order No.",SalesCrMemoLine."Order Line No.") THEN BEGIN
                      IF SalesLine.GET(1,SalesCrMemoLine."Linked to Sales Order No.",SalesCrMemoLine."Linked to Sales Order Line No.")
                      THEN BEGIN
                      //T0009 12.08.14 tec-sf -----------------------------
                        SalesLine_Temp.INIT;
                        SalesLine_Temp.TRANSFERFIELDS(SalesLine);
                        SalesLine_Temp.INSERT;
                      END;
                    UNTIL SalesCrMemoLine.NEXT = 0;
                    p_RecRefOrderLine_Temp_Var.GETTABLE(SalesLine_Temp);
                  END;
                END;
              5107 :
                BEGIN
                  IF p_RecRefOrderLine.FINDFIRST THEN BEGIN
                    EVALUATE(DocNoOccurrence,FORMAT(p_RecRefOrderLine.FIELD(5048)));
                    EVALUATE(VersionNo,FORMAT(p_RecRefOrderLine.FIELD(5047)));
                    IF SalesCrMemoLine.FINDSET THEN BEGIN
                      REPEAT
                        IF SalesLineArchive.GET(
                          1,
                          //SalesCrMemoLine."Order No.",
                          SalesCrMemoLine."Linked to Sales Order No.",
                          DocNoOccurrence,
                          VersionNo,
                          //SalesCrMemoLine."Order Line No.")
                          SalesCrMemoLine."Linked to Sales Order Line No.")
                        THEN BEGIN
                          SalesLineArchive_Temp.INIT;
                          SalesLineArchive_Temp.TRANSFERFIELDS(SalesLineArchive);
                          IF SalesLineArchive_Temp.INSERT THEN
                            ;
                        END;
                      UNTIL SalesCrMemoLine.NEXT = 0;
                      p_RecRefOrderLine_Temp_Var.GETTABLE(SalesLineArchive_Temp);
                    END;
                  END;
                END;
            END;
          END;
        //T0009 02.07.14 tec-sf -----------------------------
      END;
      //H0651  27.11.13  MBY  -------------------------
    END;

    PROCEDURE "-----Seperator06"@1000000036();
    BEGIN
    END;

    PROCEDURE NewLogEntriesAllowed@1000000018(VAR p_SIILog_Var@1000000000 : Record 50146;VAR p_SIILogManualTrigger_Var@1000000007 : Record 50155;p_RecRefOrderHeader@1000000001 : RecordRef;p_SIIMessage@1000000002 : Record 50141) : Boolean;
    VAR
      SIILogArchive@1000000003 : Record 50147;
      EntriesExist@1000000004 : Boolean;
      FieldRef@1000000005 : FieldRef;
      Value_Int_1@1000000006 : Integer;
    BEGIN
      //S/P0926
      {
      //Start Auskommentiert
      CASE p_SIIMessage.Mode OF
        p_SIIMessage.Mode::Inactive:
          EXIT(FALSE);
        p_SIIMessage.Mode::"Test Offline",p_SIIMessage.Mode::"Test Online":
          BEGIN
            p_SIILog_Var.SETFILTER("Entry No.",'>%1',LastSIILogEntryNo_glob);
            EXIT(TRUE);
          END;
      END;
      //Ende Auskommentiert
      }
      IF p_SIIMessage.Mode = p_SIIMessage.Mode::Inactive THEN
        EXIT(FALSE);

      IF IsExternalTest_glob THEN BEGIN
        p_SIILog_Var.SETFILTER("Entry No.",'>%1',LastSIILogEntryNo_glob);
        EXIT(TRUE);
      END;
      //E/P0926

      //S/P0923
      IF CorrectionEntry_glob THEN BEGIN
        p_SIILog_Var.SETFILTER("Entry No.",'>%1',LastSIILogEntryNo_glob);
        EXIT(TRUE);
      END;
      //E/P0923

      //H0651  06.12.13  MBY  +++++++++++++++++++++++++
      IF IsTriggered_glob AND ManuallyTriggered_glob THEN BEGIN
        p_SIILog_Var.SETFILTER("Entry No.",'>%1',LastSIILogEntryNo_glob);
        p_SIILogManualTrigger_Var.SETFILTER("Entry No.",'>%1',LastSIILogManualEntryNo_glob);
        EXIT(TRUE);
      END;
      //H0651  06.12.13  MBY  -------------------------

      CLEAR(EntriesExist);
      CLEAR(SIILogArchive);
      CLEAR(Value_Int_1);

      FieldRef := p_RecRefOrderHeader.FIELD(1);                 // "Document Type"
      //S/P1161
      //EVALUATE(Value_Int_1,FORMAT(FieldRef.VALUE));
      IF NOT EVALUATE(Value_Int_1,FORMAT(FieldRef.VALUE)) THEN
        Value_Int_1 :=
          SIIGeneralMgmt_glob.GetIntFromOptionString(FieldRef);
      //E/P1161

      //S/P1087
      {**************
      SIILogArchive.SETCURRENTKEY(
        AppDomain,"Message Code NAV","Message Code Shop","Attached to Table","Attached to Document Type","Attached to Document No.");
      SIILogArchive.SETFILTER(AppDomain,FORMAT(p_RecRefOrderHeader.FIELD(50041)));                // "Website No."
      SIILogArchive.SETRANGE("Message Code Shop",p_SIIMessage."Message Code Shop");
      SIILogArchive.SETRANGE("Attached to Table",p_RecRefOrderHeader.NUMBER);                     // Table ID
      SIILogArchive.SETRANGE("Attached to Document Type",Value_Int_1);
      SIILogArchive.SETRANGE("Attached to Document No.",FORMAT(p_RecRefOrderHeader.FIELD(3)));    // "No."
      **************}
      SIILogArchive.SETCURRENTKEY(
        "Attached to Document No.","Attached to Document Type","Attached to Table","Message Code Shop",AppDomain);
      SIILogArchive.SETRANGE("Attached to Document No.",FORMAT(p_RecRefOrderHeader.FIELD(3)));    // "No."
      SIILogArchive.SETRANGE("Attached to Document Type",Value_Int_1);
      SIILogArchive.SETRANGE("Attached to Table",p_RecRefOrderHeader.NUMBER);                     // Table ID
      SIILogArchive.SETRANGE("Message Code Shop",p_SIIMessage."Message Code Shop");
      SIILogArchive.SETFILTER(AppDomain,FORMAT(p_RecRefOrderHeader.FIELD(50041)));                // "Website No."
      //E/P0187
      IF NOT SIILogArchive.ISEMPTY THEN
        EntriesExist := TRUE;

      //S/P1087
      {**************
      p_SIILog_Var.SETCURRENTKEY(
        AppDomain,"Message Code NAV","Message Code Shop","Attached to Table","Attached to Document Type","Attached to Document No.");
      p_SIILog_Var.SETFILTER(AppDomain,FORMAT(p_RecRefOrderHeader.FIELD(50041)));                 // "Website No."
      p_SIILog_Var.SETRANGE("Message Code Shop",p_SIIMessage."Message Code Shop");
      p_SIILog_Var.SETRANGE("Attached to Table",p_RecRefOrderHeader.NUMBER);                      // Table ID
      p_SIILog_Var.SETRANGE("Attached to Document Type",Value_Int_1);
      p_SIILog_Var.SETFILTER("Attached to Document No.",FORMAT(p_RecRefOrderHeader.FIELD(3)));    // "No."
      **************}
      p_SIILog_Var.SETCURRENTKEY(
        "Attached to Document No.","Attached to Document Type","Attached to Table","Message Code Shop",AppDomain);
      p_SIILog_Var.SETFILTER("Attached to Document No.",FORMAT(p_RecRefOrderHeader.FIELD(3)));    // "No."
      p_SIILog_Var.SETRANGE("Attached to Document Type",Value_Int_1);
      p_SIILog_Var.SETRANGE("Attached to Table",p_RecRefOrderHeader.NUMBER);                      // Table ID
      p_SIILog_Var.SETRANGE("Message Code Shop",p_SIIMessage."Message Code Shop");
      p_SIILog_Var.SETFILTER(AppDomain,FORMAT(p_RecRefOrderHeader.FIELD(50041)));                 // "Website No."
      //E/P1087
      IF NOT p_SIILog_Var.ISEMPTY THEN
        EntriesExist := TRUE;

      IF EntriesExist THEN
        IF NOT NewLogRecAllowed(p_SIIMessage,p_SIILog_Var,SIILogArchive) THEN
          EXIT(FALSE);

      p_SIILog_Var.SETFILTER("Entry No.",'>%1',LastSIILogEntryNo_glob);
      //S/P1010
      IF IsTriggered_glob THEN
        //H0651  06.12.13  MBY  +++++++++++++++++++++++++
        {
        p_SIILogManualTrigger_Var.SETFILTER("Entry No.",'>%1',LastSIILogEntryNo_glob);
        }
        p_SIILogManualTrigger_Var.SETFILTER("Entry No.",'>%1',LastSIILogManualEntryNo_glob);
        //H0651  06.12.13  MBY  -------------------------
      //E/P1010
      EXIT(TRUE);
    END;

    PROCEDURE NewLogRecAllowed@1000000035(p_SIIMessage@1000000011 : Record 50141;VAR p_SIILog_Var@1000000000 : Record 50146;p_SIILogArchive@1000000004 : Record 50147) : Boolean;
    VAR
      LogCount@1000000002 : Integer;
      LogArchiveCount@1000000005 : Integer;
      SIILogArchive@1000000003 : Record 50147;
    BEGIN
      IF p_SIIMessage."Max. Run Count Order" = 0 THEN
        EXIT(TRUE);

      CLEAR(LogArchiveCount);
      CLEAR(LogCount);

      IF NOT p_SIILogArchive.ISEMPTY THEN
        LogArchiveCount := SIILogArchive.COUNT;

      LogCount := p_SIILog_Var.COUNT + LogArchiveCount;

      IF LogCount < p_SIIMessage."Max. Run Count Order" THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE NewLogLineEntriesAllowed@1000000010(VAR p_SIILineLog_Var@1000000000 : Record 50154;VAR p_SIILineLogManualTrigger_Var@1000000005 : Record 50156;p_RecRefOrderLine@1000000001 : RecordRef;p_SIIMessage@1000000002 : Record 50141) : Boolean;
    VAR
      SIILineLogArchive@1000000003 : Record 50150;
      EntriesExist@1000000004 : Boolean;
    BEGIN
      //S/P0926
      {
      Start auskommentiert
      CASE p_SIIMessage.Mode OF
        p_SIIMessage.Mode::Inactive: EXIT(FALSE);
        p_SIIMessage.Mode::"Test Offline": EXIT(TRUE);
        p_SIIMessage.Mode::"Test Online": EXIT(TRUE);
      END;
      Ende Auskommentiert
      }
      IF p_SIIMessage.Mode = p_SIIMessage.Mode::Inactive THEN
        EXIT(FALSE);

      IF IsExternalTest_glob THEN
        EXIT(TRUE);
      //E/P0926

      //S/P0923
      IF CorrectionEntry_glob THEN BEGIN
        EXIT(TRUE);
      END;
      //E/P0923

      CLEAR(SIILineLogArchive);
      CLEAR(EntriesExist);

      //S/P1071
      //SIILineLogArchive.SETCURRENTKEY(
        //AppDomain,"Message Code NAV","Message Code Shop","Document No.","Document Line No.");
      SIILineLogArchive.SETCURRENTKEY("Document No.","Document Line No.","Message Code Shop");
      //E/P1071
      //S/P1087
      {**************
      SIILineLogArchive.SETRANGE(AppDomain,p_SIIMessage."Website No.");                     // WebSite No.
      SIILineLogArchive.SETRANGE("Message Code Shop",p_SIIMessage."Message Code Shop");     // Message Code Shop
      SIILineLogArchive.SETFILTER("Document No.",FORMAT(p_RecRefOrderLine.FIELD(3)));       // "Document No."
      SIILineLogArchive.SETFILTER("Document Line No.",FORMAT(p_RecRefOrderLine.FIELD(4)));  // "Line No."
      **************}
      SIILineLogArchive.SETFILTER("Document No.",FORMAT(p_RecRefOrderLine.FIELD(3)));       // "Document No."
      SIILineLogArchive.SETFILTER("Document Line No.",FORMAT(p_RecRefOrderLine.FIELD(4)));  // "Line No."
      SIILineLogArchive.SETRANGE("Message Code Shop",p_SIIMessage."Message Code Shop");     // Message Code Shop
      SIILineLogArchive.SETRANGE(AppDomain,p_SIIMessage."Website No.");                     // WebSite No.
      //E/P1087
      IF NOT SIILineLogArchive.ISEMPTY THEN
        EntriesExist := TRUE;


      //S/P1071
      //p_SIILineLog_Var.SETCURRENTKEY(
        //AppDomain,"Message Code NAV","Message Code Shop","Document No.","Document Line No.");
      p_SIILineLog_Var.SETCURRENTKEY("Document No.","Document Line No.","Message Code Shop");
      //E/P1071
      //S/P1087
      {**************
      p_SIILineLog_Var.SETRANGE(AppDomain,p_SIIMessage."Website No.");                      // WebSite No.
      p_SIILineLog_Var.SETRANGE("Message Code Shop",p_SIIMessage."Message Code Shop");      // Message Code Shop
      p_SIILineLog_Var.SETFILTER("Document No.",FORMAT(p_RecRefOrderLine.FIELD(3)));        // "Document No."
      p_SIILineLog_Var.SETFILTER("Document Line No.",FORMAT(p_RecRefOrderLine.FIELD(4)));   // "Line No."
      **************}
      p_SIILineLog_Var.SETFILTER("Document No.",FORMAT(p_RecRefOrderLine.FIELD(3)));        // "Document No."
      p_SIILineLog_Var.SETFILTER("Document Line No.",FORMAT(p_RecRefOrderLine.FIELD(4)));   // "Line No."
      p_SIILineLog_Var.SETRANGE("Message Code Shop",p_SIIMessage."Message Code Shop");      // Message Code Shop
      p_SIILineLog_Var.SETRANGE(AppDomain,p_SIIMessage."Website No.");                      // WebSite No.
      //E/P1087
      IF NOT p_SIILineLog_Var.ISEMPTY THEN
        EntriesExist := TRUE;

      IF EntriesExist THEN
        IF NOT NewLogLineRecAllowed(p_SIILineLog_Var,SIILineLogArchive,p_SIIMessage) THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE NewLogLineRecAllowed@1000000008(VAR p_SIILineLog_Var@1000000000 : Record 50154;p_SIILineLogArchive@1000000004 : Record 50150;p_SIIMessage@1000000001 : Record 50141) : Boolean;
    VAR
      LineLogCount@1000000002 : Integer;
      LineLogArchiveCount@1000000003 : Integer;
    BEGIN
      IF p_SIIMessage."Max. Run Count Order Line" = 0 THEN
        EXIT(TRUE);

      CLEAR(LineLogCount);
      CLEAR(LineLogArchiveCount);

      IF NOT p_SIILineLogArchive.ISEMPTY THEN
        LineLogArchiveCount := p_SIILineLogArchive.COUNT;

      LineLogCount := p_SIILineLog_Var.COUNT + LineLogArchiveCount;

      IF LineLogCount < p_SIIMessage."Max. Run Count Order Line" THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE "-----Seperator07"@1000000013();
    BEGIN
    END;

    PROCEDURE FillLogGeneralInformations@1000000005(VAR p_SIILog_Var@1000000000 : Record 50146;VAR p_SIILogManualTrigger_Var@1000000009 : Record 50155;p_SIIMessage@1000000001 : Record 50141;p_RecRefOrderHeader@1000000006 : RecordRef;p_EntryNo@1000000005 : Integer);
    VAR
      SIISetup@1000000002 : Record 50140;
      MessageModeInteger@1000000003 : Integer;
      Value_Int_1@1000000004 : Integer;
      FieldRef@1000000007 : FieldRef;
      EMail@1000000008 : Text[80];
    BEGIN
      SIISetup.GET;

      CLEAR(CreatedSIILogEntryNo_glob);

      MessageModeInteger := SIISetup.Mode;
      IF p_SIIMessage.Mode < MessageModeInteger THEN
        MessageModeInteger := p_SIIMessage.Mode;

      EMail := FORMAT(p_RecRefOrderHeader.FIELD(75301));

      IF MessageModeInteger <> SIISetup.Mode::Active THEN BEGIN
        p_SIIMessage.TESTFIELD("Test E-Mail Address");
        EMail := p_SIIMessage."Test E-Mail Address";
      END;

      FieldRef := p_RecRefOrderHeader.FIELD(1);                                 // "Document Type"
      //S/P1161
      //EVALUATE(Value_Int_1,FORMAT(FieldRef.VALUE));
      IF NOT EVALUATE(Value_Int_1,FORMAT(FieldRef.VALUE)) THEN
        Value_Int_1 :=
          SIIGeneralMgmt_glob.GetIntFromOptionString(FieldRef);
      //E/P1161

      //S/P1010
      IF NOT IsTriggered_glob THEN BEGIN
      //E/P1010
        WITH p_SIILog_Var DO BEGIN
          INIT;
          "Entry No." := p_EntryNo;
          INSERT;
          CreatedSIILogEntryNo_glob := "Entry No.";
          "Created At" := CURRENTDATETIME;
          //S/P0933
          IF InsertAsError_glob THEN BEGIN
            Status := Status::Error;
            "Error Source Code" := ErrorSource_glob;
            "Error Text 1" := COPYSTR(ErrorText_glob,1,250);
            "Error Text 2" := COPYSTR(ErrorText_glob,251,500);
            "Error Text 3" := COPYSTR(ErrorText_glob,501,750);
            "Error Text 4" := COPYSTR(ErrorText_glob,751,1000);
          END ELSE
          //E/P0933
          Status := Status::Unprocessed;
          //S/P1058
          IF MsgType_glob <> 19 THEN BEGIN
          //E/P1058
            "Attached to Table" := p_RecRefOrderHeader.NUMBER;                      // Table ID
            "Attached to Document Type" := Value_Int_1;
            "Attached to Document No." := FORMAT(p_RecRefOrderHeader.FIELD(3));     // "No."
            //S/P1010
            "Process Table No." := p_RecRefOrderHeader.NUMBER;
            "Process Document Type" := Value_Int_1;
            "Process Document No." := FORMAT(p_RecRefOrderHeader.FIELD(3));
            //E/P1010
          //S/P1058
          END ELSE BEGIN
            "Attached to Table" := Attached_TableNo_glob;
            "Attached to Document Type" := Attached_Type_glob;
            "Attached to Document No." := Attached_No_glob;
            "Process Table No." := Process_TableNo_glob;
            "Process Document Type" := Process_Type_glob;
            "Process Document No." := Process_No_glob;
          END;
          //E/P1058
          "Message Code NAV" := p_SIIMessage."Message Code NAV";
          MessageMode := MessageModeInteger;
          MessageStructureVersion := p_SIIMessage."Actual Structure Version";
          AppDomain := p_SIIMessage."Website No.";
          MessageCreationDate := CURRENTDATETIME;
          "Message Code Shop" := p_SIIMessage."Message Code Shop";
          "Order Reference ID" := 1;
          "E-Mail" := EMail;
          //S/P0979
          "Correction Entry" := CorrectionEntry_glob;
          //E/P0979
          //S/P1012
          Priority := p_SIIMessage.Priority;
          //E/P1012
          MODIFY;
        END;
      //S/P1010
      END ELSE BEGIN
        WITH p_SIILogManualTrigger_Var DO BEGIN
          INIT;
          "Entry No." := p_EntryNo;
          INSERT;
          CreatedSIILogEntryNo_glob := "Entry No.";
          "Created At" := CURRENTDATETIME;
          IF InsertAsError_glob THEN BEGIN
            Status := Status::Error;
            "Error Source Code" := ErrorSource_glob;
            "Error Text 1" := COPYSTR(ErrorText_glob,1,250);
            "Error Text 2" := COPYSTR(ErrorText_glob,251,500);
            "Error Text 3" := COPYSTR(ErrorText_glob,501,750);
            "Error Text 4" := COPYSTR(ErrorText_glob,751,1000);
          END ELSE
          Status := Status::Unprocessed;
          "Attached to Table" := Attached_TableNo_glob;
          "Attached to Document Type" := Attached_Type_glob;
          "Attached to Document No." := Attached_No_glob;
          "Process Table No." := Process_TableNo_glob;
          "Process Document Type" := Process_Type_glob;
          "Process Document No." := Process_No_glob;
          "Message Code NAV" := p_SIIMessage."Message Code NAV";
          MessageMode := MessageModeInteger;
          MessageStructureVersion := p_SIIMessage."Actual Structure Version";
          AppDomain := p_SIIMessage."Website No.";
          MessageCreationDate := CURRENTDATETIME;
          "Message Code Shop" := p_SIIMessage."Message Code Shop";
          "Order Reference ID" := 1;
          "E-Mail" := EMail;
          "Correction Entry" := CorrectionEntry_glob;
          Priority := p_SIIMessage.Priority;
          "Filled by Trigger" := TriggerText_glob;
          //H1515  17.10.14  MBY  ++++++++++++++++++++++
          "Payment Reference ID" := CaptureEntryNo_glob;
          //H1515  17.10.14  MBY  ----------------------
          MODIFY;
        END;
      END;
      //E/P1010
    END;

    PROCEDURE GetNextLineLogRefID@1000000007(p_SIILogEntryNo@1000000001 : Integer) : Integer;
    VAR
      SIILineLog@1000000000 : Record 50154;
      SIILineLogManualTrigger@1000000002 : Record 50156;
    BEGIN
      //S/P1010
      //S/P1055
      //IF IsTriggered_glob THEN BEGIN
      IF NOT IsTriggered_glob THEN BEGIN
      //E/P1055
      //E/P1010
        WITH SIILineLog DO BEGIN
          RESET;
          SETRANGE("Entry No.",p_SIILogEntryNo);
          IF FINDLAST THEN
            EXIT("Reference ID" + 1)
          ELSE
            EXIT(2);
        END;
      //S/P1010
      END ELSE BEGIN
        WITH SIILineLogManualTrigger DO BEGIN
          RESET;
          SETRANGE("Entry No.",p_SIILogEntryNo);
          IF FINDLAST THEN
            EXIT("Reference ID" + 1)
          ELSE
            EXIT(2);
        END;
      END;
      //E/P1010
    END;

    PROCEDURE FillLineLog@1000000015(VAR p_SIILineLog_Var@1000000005 : Record 50154;VAR p_SIILineLogManualTrigger_Var@1000000012 : Record 50156;p_LogEntryNo@1000000000 : Integer;p_RecRefOrderLine@1000000001 : RecordRef;p_RefID@1000000006 : Integer;p_AppDomain@1000000009 : Integer;p_MessageCodeNav@1000000010 : Code[50];p_MessageCodeShop@1000000011 : Text[50]);
    VAR
      SIILineLog2@1000000002 : Record 50154;
      SIILineLogLineNo@1000000003 : Integer;
      SIILineLogRefID@1000000004 : Integer;
      DocLIneNo@1000000007 : Integer;
      ItemID@1000000008 : Integer;
      salesLine@1000000013 : Record 37;
      salesLineArchive@1000000014 : Record 5108;
    BEGIN
      EVALUATE(DocLIneNo,FORMAT(p_RecRefOrderLine.FIELD(4)));
      EVALUATE(ItemID,FORMAT(p_RecRefOrderLine.FIELD(50013)));

      //S/P1010
      IF NOT IsTriggered_glob THEN BEGIN
      //E/P1010
        WITH p_SIILineLog_Var DO BEGIN
          INIT;
          "Entry No." := p_LogEntryNo;
          "Reference ID" := p_RefID;
          //S/P1058
          IF MsgType_glob <> 19 THEN BEGIN
          //E/P1058
            "Document No." := FORMAT(p_RecRefOrderLine.FIELD(3));         // "Document No."
            "Document Line No." := DocLIneNo;                             // "Line No."
            "Item ID" := ItemID;                                          // ID
            "Process Document No." := FORMAT(p_RecRefOrderLine.FIELD(3)); // "Document No."
            "Process Document Line No." := DocLIneNo;                     // "Line No."
          //S/P1058
          END ELSE BEGIN
            "Document No." := Attached_No_glob;
            "Document Line No." := Attached_LineNo_glob;
            "Item ID" := Triggered_GetItemID(Attached_No_glob,Attached_LineNo_glob);
            "Process Document No." := Process_No_glob;
            "Process Document Line No." := Process_LineNo_glob;
          END;
          //E/P1058
          "Item No." := FORMAT(p_RecRefOrderLine.FIELD(6));     // "No."
          AppDomain := p_AppDomain;                             // AppDomain
          "Message Code NAV" := p_MessageCodeNav;               // Message Code NAV
          "Message Code Shop" := p_MessageCodeShop;             // Message Code Shop
          INSERT;
        END;
      //S/P1010
      END ELSE BEGIN
        WITH p_SIILineLogManualTrigger_Var DO BEGIN
          INIT;
          "Entry No." := p_LogEntryNo;
          "Reference ID" := p_RefID;
          "Document No." := Attached_No_glob;
          "Document Line No." := Attached_LineNo_glob;
          //S/P1055
          "Item No." := FORMAT(p_RecRefOrderLine.FIELD(6));                                     // "No."
          //E/P1055
          AppDomain := p_AppDomain;                             // AppDomain
          "Message Code NAV" := p_MessageCodeNav;               // Message Code NAV
          "Message Code Shop" := p_MessageCodeShop;             // Message Code Shop
          //S/P1055
          //"Item ID" := ItemID;
          "Item ID" := Triggered_GetItemID(Attached_No_glob,Attached_LineNo_glob);
          //E/P1055
          "Process Document No." := Process_No_glob;
          "Process Document Line No." := Process_LineNo_glob;
          //H0651  27.11.13  MBY  +++++++++++++++++++++++++
          IF MultipleLinesTriggered_glob THEN BEGIN
            //T0003-01 27.08.14 tec-cs +++++++++++++++++++++++++++++
            // CS: I think, the previous woraround is not neccessary because the parameter p_RecRefOrderLine is
            //     filled correctly for multiple lines
            {
            "Document Line No." := DocLIneNo;
            "Item ID" := ItemID;
            "Process Document Line No." := DocLIneNo; //maybe not always, idea needed..
            }

            IF p_RecRefOrderLine.NUMBER = 37 THEN BEGIN
              p_RecRefOrderLine.SETTABLE(salesLine);
            END ELSE BEGIN
              p_RecRefOrderLine.SETTABLE(salesLineArchive);
              salesLine.TRANSFERFIELDS(salesLineArchive);
            END;

            "Process Document No." := salesLine."Document No.";
            "Process Document Line No." := salesLine."Line No.";
            "Document No." := salesLine."Linked to Sales Order No.";
            "Document Line No." := salesLine."Linked to Sales Order Line No.";

            //H1620,T0018 08.10.14 MBY +++++++++++++++++++++++++++++
            IF "Document No." = '' THEN BEGIN
              "Document No." := "Process Document No.";
              "Document Line No." := "Process Document Line No.";
            END;

            ItemID := Triggered_GetItemID("Document No.", "Document Line No.");
            IF ItemID = 0 THEN BEGIN
              ItemID := salesLine.ID;
            END;
            "Item ID" := ItemID;
            //H1620,T0018 08.10.14 MBY -----------------------------
            //T0003-01 27.08.14 tec-cs -----------------------------
          END;
          //H0651  27.11.13  MBY  -------------------------
          INSERT;
        END;
      END;
      //E/P1010
    END;

    PROCEDURE FillLogActionsTemporary@1000000034(VAR p_SIILogActions_Temp_Var@1000000009 : TEMPORARY Record 50153;p_SIIMessage@1000000014 : Record 50141;p_SIILogEntryNo@1000000000 : Integer;p_ReferenceID@1000000001 : Integer;p_DocNo@1000000002 : Code[20];p_DocLineNo@1000000003 : Text[30];p_DateTime@1000000004 : DateTime;p_StatusDateTime@1000000008 : ' ,In Time,Earlier,Delayed';p_Text_80_1@1000000006 : Text[80];p_Code_10_1@1000000007 : Code[10]) : Boolean;
    VAR
      SIILogActions@1000000005 : Record 50153;
      SIILogActionsArchive@1000000010 : Record 50136;
      SIIAction@1000000012 : Record 50142;
      LineNo@1000000011 : Integer;
      Proceed@1000000016 : Boolean;
      Proceed_1@1000000013 : Boolean;
      Proceed_2@1000000015 : Boolean;
      IsTestMode@1000000017 : Boolean;
      SIILog@1000000018 : Record 50146;
      SIILogArchive@1000000019 : Record 50147;
      SIIActiveAction@1000000022 : Record 50143;
    BEGIN
      //S/P0926
      //IsTestMode := (p_SIIMessage.Mode IN [p_SIIMessage.Mode::"Test Offline",p_SIIMessage.Mode::"Test Online"]);
      //H0651  06.12.13  MBY  +++++++++++++++++++++++++
      {
      IsTestMode := IsExternalTest_glob;
      }
      IsTestMode := IsExternalTest_glob OR ManuallyTriggered_glob;
      //H0651  06.12.13  MBY  -------------------------
      //E/P0926

      IF NOT IsTestMode THEN BEGIN
        //S/P0984
        //EVALUATE(LineNo,p_DocLineNo);
        //E/P0984
        // SII Log Actions
        //H0431  28.06.13  ABR  +++++++++++++++++++++++++++++++++++++
        IF p_DocLineNo <> '' THEN
          EVALUATE(LineNo,p_DocLineNo);
        //H0431  28.06.13  ABR  -------------------------------------
        CLEAR(SIILogActions);
        SIILogActions.SETCURRENTKEY("Document No.","Document Line No.","Message Code NAV","Message Code Shop");
        SIILogActions.SETRANGE("Document No.",p_DocNo);
        SIILogActions.SETRANGE("Document Line No.",LineNo);

        // SII Log Action Archive
        CLEAR(SIILogActionsArchive);
        SIILogActionsArchive.SETCURRENTKEY("Document No.","Document Line No.","Message Code NAV","Message Code Shop");
        SIILogActionsArchive.SETRANGE("Document No.",p_DocNo);
        SIILogActionsArchive.SETRANGE("Document Line No.",LineNo);
      END ELSE
        Proceed := IsTestMode;
      //S/P0936
      //S/P0984
      IF p_DocLineNo <> '' THEN
        EVALUATE(LineNo,p_DocLineNo);
      //E/P0984
      //S/P1074
      //IF CreateExtendedMailEntry_glob THEN
        //SIIActiveAction_glob.SETRANGE("Is Extended Mail Action")
      //ELSE
        SIIActiveAction_glob.SETRANGE("Is Extended Mail Action",FALSE);
      //E/P1074
      //E/P0936
      IF SIIActiveAction_glob.FINDSET THEN BEGIN
        REPEAT
          IF NOT IsTestMode THEN BEGIN
            IF SIIAction.GET(SIIActiveAction_glob."Action Code NAV",SIIActiveAction_glob."Action Code Shop") THEN BEGIN
              Proceed := TRUE;
              //S/P0979
              IF CorrectionEntry_glob AND (SIIAction."Action For" = SIIAction."Action For"::EMail) THEN
                Proceed := FALSE;
              //E/P0979
              SIILogActions.SETRANGE("Action Code Shop",SIIActiveAction_glob."Action Code Shop");
              IF NOT SIILogActions.ISEMPTY THEN BEGIN
                SIILogActions.FINDLAST;
                Proceed_1 := TRUE;
              END;
              SIILogActionsArchive.SETRANGE("Action Code Shop",SIIActiveAction_glob."Action Code Shop");
              IF NOT SIILogActionsArchive.ISEMPTY THEN BEGIN
                SIILogActionsArchive.FINDLAST;
                Proceed_2 := TRUE;
              END;
              IF Proceed_1 THEN BEGIN
                IF (SIIActiveAction_glob."Message Code NAV" = SIILogActions."Message Code NAV") AND
                   (SIIActiveAction_glob."Message Code Shop" = SIILogActions."Message Code Shop")
                THEN BEGIN
                  IF SIIAction."Action For" = SIIAction."Action For"::Update THEN BEGIN
                    IF (p_DateTime = SIILogActions."Action DateTime") AND
                       (p_Text_80_1 = SIILogActions."Text 80_1") AND
                       (p_Code_10_1 = SIILogActions."Code 10_1")
                    THEN
                      Proceed := FALSE;
                  END ELSE
                    Proceed := FALSE;
                END;
              END;
              IF Proceed_2 AND Proceed THEN BEGIN
                IF (SIIActiveAction_glob."Message Code NAV" = SIILogActionsArchive."Message Code NAV") AND
                   (SIIActiveAction_glob."Message Code Shop" = SIILogActionsArchive."Message Code Shop")
                THEN BEGIN
                  IF SIIAction."Action For" = SIIAction."Action For"::Update THEN BEGIN
                    IF (p_DateTime = SIILogActionsArchive."Action DateTime") AND
                       (p_Text_80_1 = SIILogActionsArchive."Text 80_1") AND
                       (p_Code_10_1 = SIILogActionsArchive."Code 10_1")
                    THEN
                      Proceed := FALSE;
                  END ELSE
                    Proceed := FALSE;
                END;
              END;
            END;
            //S/P1012
            IF Proceed_1 THEN BEGIN
              IF SIILog.GET(SIILogActions."Log Entry No.") THEN BEGIN
                IF (SIILog.Priority <> 0) AND (p_SIIMessage.Priority <> 0) AND (SIILog.Priority > p_SIIMessage.Priority) THEN
                  Proceed := FALSE;
              END;
            END;
            IF Proceed_2 THEN BEGIN
              IF SIILogArchive.GET(SIILogActionsArchive."Log Entry No.") THEN BEGIN
                IF (SIILogArchive.Priority <> 0) AND (p_SIIMessage.Priority <> 0) AND (SIILogArchive.Priority > p_SIIMessage.Priority)
                THEN
                  Proceed := FALSE;
              END;
            END;
            //E/P1012
          END;
          IF Proceed THEN BEGIN
            //S/P1019
            IF IsTestMode THEN
              IF SIIAction.GET(SIIActiveAction_glob."Action Code NAV",SIIActiveAction_glob."Action Code Shop") THEN;
            //E/P1019
            p_SIILogActions_Temp_Var.INIT;
            p_SIILogActions_Temp_Var."Log Entry No." := p_SIILogEntryNo;
            p_SIILogActions_Temp_Var."Reference ID" := p_ReferenceID;
            p_SIILogActions_Temp_Var."Action Code" := SIIActiveAction_glob."Action Code NAV";
            //S/P1010
            //p_SIILogActions_Temp_Var."Document No." := p_DocNo;
            //p_SIILogActions_Temp_Var."Document Line No." := LineNo;
            //E/P1010
            p_SIILogActions_Temp_Var."Action Code Shop" := SIIActiveAction_glob."Action Code Shop";
            p_SIILogActions_Temp_Var."Message Code NAV" := p_SIIMessage."Message Code NAV";
            p_SIILogActions_Temp_Var."Message Code Shop" := p_SIIMessage."Message Code Shop";
            p_SIILogActions_Temp_Var."Action For" := SIIAction."Action For";
            IF SIIAction."Action For" = SIIAction."Action For"::Update THEN BEGIN
              p_SIILogActions_Temp_Var."Action DateTime" := p_DateTime;
              p_SIILogActions_Temp_Var."Status of DateTime" := p_StatusDateTime;
              p_SIILogActions_Temp_Var."Text 80_1" := p_Text_80_1;
              p_SIILogActions_Temp_Var."Code 10_1" := p_Code_10_1;
            END;
            //S/P1010
            IF NOT IsTriggered_glob THEN BEGIN
              p_SIILogActions_Temp_Var."Document No." := p_DocNo;
              p_SIILogActions_Temp_Var."Document Line No." := LineNo;
              p_SIILogActions_Temp_Var."Process Document No." := p_DocNo;
              p_SIILogActions_Temp_Var."Process Document Line No." := LineNo;
            END ELSE BEGIN
              p_SIILogActions_Temp_Var."Document No." := Attached_No_glob;
              p_SIILogActions_Temp_Var."Document Line No." := Attached_LineNo_glob;
              p_SIILogActions_Temp_Var."Process Document No." := Process_No_glob;
              p_SIILogActions_Temp_Var."Process Document Line No." := Process_LineNo_glob;
              //H0651  27.11.13  MBY  +++++++++++++++++++++++++
              IF MultipleLinesTriggered_glob THEN BEGIN
                p_SIILogActions_Temp_Var."Document Line No." := LineNo;
                p_SIILogActions_Temp_Var."Process Document Line No." := LineNo;
              END;
              //H0651  27.11.13  MBY  -------------------------
            END;
            //E/P1010
            p_SIILogActions_Temp_Var.INSERT;
            //S/P1074
            IF CreateExtendedMailEntry_glob THEN BEGIN
              SIIActiveAction.RESET;
              SIIActiveAction.SETRANGE("Website No.",SIIActiveAction_glob."Website No.");
              SIIActiveAction.SETRANGE("Message Code NAV",SIIActiveAction_glob."Message Code NAV");
              SIIActiveAction.SETRANGE("Message Code Shop",SIIActiveAction_glob."Message Code Shop");
              SIIActiveAction.SETRANGE(Active,TRUE);
              SIIActiveAction.SETRANGE("Is Extended Mail Action",TRUE);
              IF SIIActiveAction.FINDSET THEN BEGIN
                p_SIILogActions_Temp_Var.INIT;
                p_SIILogActions_Temp_Var."Log Entry No." := p_SIILogEntryNo;
                p_SIILogActions_Temp_Var."Reference ID" := p_ReferenceID;
                p_SIILogActions_Temp_Var."Action Code" := SIIActiveAction."Action Code NAV";
                p_SIILogActions_Temp_Var."Action Code Shop" := SIIActiveAction."Action Code Shop";
                p_SIILogActions_Temp_Var."Message Code NAV" := SIIActiveAction."Message Code NAV";
                p_SIILogActions_Temp_Var."Message Code Shop" := SIIActiveAction."Message Code Shop";
                p_SIILogActions_Temp_Var."Action For" := p_SIILogActions_Temp_Var."Action For"::EMail;
                p_SIILogActions_Temp_Var."Document No." := p_DocNo;
                p_SIILogActions_Temp_Var."Document Line No." := LineNo;
                p_SIILogActions_Temp_Var.INSERT;
              END;
            END;
            //E/P1074
          END;
        UNTIL SIIActiveAction_glob.NEXT = 0;
      END;

      IF NOT p_SIILogActions_Temp_Var.ISEMPTY THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE FillLogActionsTemporary_Alt@1000000016(VAR p_SIILogActions_Temp_Var@1000000009 : TEMPORARY Record 50153;p_SIILogEntryNo@1000000000 : Integer;p_ReferenceID@1000000001 : Integer;p_DocNo@1000000002 : Code[20];p_DocLineNo@1000000003 : Text[30];p_DateTime@1000000004 : DateTime;p_StatusDateTime@1000000008 : ' ,In Time,Earlier,Delayed';p_TrackingNo@1000000006 : Text[40];p_Carrier@1000000007 : Code[20]) : Boolean;
    VAR
      SIILogActions@1000000005 : Record 50153;
      SIILogActionsArchive@1000000010 : Record 50136;
      SIIAction@1000000012 : Record 50142;
      LineNo@1000000011 : Integer;
    BEGIN
      EVALUATE(LineNo, p_DocLineNo);

      IF SIIActiveAction_glob.FINDSET THEN BEGIN
        // SII Log Actions
        SIILogActions.RESET;
        SIILogActions.SETCURRENTKEY(
          "Document No.","Document Line No.","Action DateTime",
          "Status of DateTime","Text 80_1","Code 10_1","Action Code");
        SIILogActions.SETRANGE("Document No.",p_DocNo);
        SIILogActions.SETRANGE("Document Line No.",LineNo);
        IF SIIAction."Action For" = SIIAction."Action For"::Update THEN BEGIN
          SIILogActions.SETRANGE("Action DateTime",p_DateTime);
          SIILogActions.SETRANGE("Status of DateTime",p_StatusDateTime);
          SIILogActions.SETRANGE("Text 80_1",p_TrackingNo);
          SIILogActions.SETRANGE("Code 10_1",p_Carrier);
        END;
        // SII Log Action Archive
        SIILogActionsArchive.RESET;
        SIILogActionsArchive.SETCURRENTKEY(
          "Document No.","Document Line No.","Action DateTime",
          "Status of DateTime","Text 80_1","Code 10_1","Action Code");
        SIILogActionsArchive.SETRANGE("Document No.",p_DocNo);
        SIILogActionsArchive.SETRANGE("Document Line No.",LineNo);
        IF SIIAction."Action For" = SIIAction."Action For"::Update THEN BEGIN
          SIILogActionsArchive.SETRANGE("Action DateTime",p_DateTime);
          SIILogActionsArchive.SETRANGE("Status of DateTime",p_StatusDateTime);
          SIILogActionsArchive.SETRANGE("Text 80_1",p_TrackingNo);
          SIILogActionsArchive.SETRANGE("Code 10_1",p_Carrier);
        END;

        REPEAT
          // SETRANGE Action Code
          SIILogActions.SETRANGE("Action Code",SIIActiveAction_glob."Action Code NAV");
          SIILogActionsArchive.SETRANGE("Action Code",SIIActiveAction_glob."Action Code NAV");
          IF SIILogActions.ISEMPTY AND SIILogActionsArchive.ISEMPTY THEN BEGIN
            // Fill Temp Tbl
            p_SIILogActions_Temp_Var.INIT;
            p_SIILogActions_Temp_Var."Log Entry No." := p_SIILogEntryNo;
            p_SIILogActions_Temp_Var."Reference ID" := p_ReferenceID;
            p_SIILogActions_Temp_Var."Action Code" := SIIActiveAction_glob."Action Code NAV";
            p_SIILogActions_Temp_Var."Document No." := p_DocNo;
            p_SIILogActions_Temp_Var."Document Line No." := LineNo;
            p_SIILogActions_Temp_Var."Action Code Shop" := SIIActiveAction_glob."Action Code Shop";
            CLEAR(SIIAction);
            IF SIIAction.GET(SIIActiveAction_glob."Action Code NAV",SIIActiveAction_glob."Action Code Shop") THEN;
            p_SIILogActions_Temp_Var."Action For" := SIIAction."Action For";
            IF SIIAction."Action For" = SIIAction."Action For"::Update THEN BEGIN
              p_SIILogActions_Temp_Var."Action DateTime" := p_DateTime;
              p_SIILogActions_Temp_Var."Status of DateTime" := p_StatusDateTime;
              p_SIILogActions_Temp_Var."Text 80_1" := p_TrackingNo;
              p_SIILogActions_Temp_Var."Code 10_1" := p_Carrier;
            END;
            p_SIILogActions_Temp_Var.INSERT;
          END;
        UNTIL SIIActiveAction_glob.NEXT = 0;
        IF NOT p_SIILogActions_Temp_Var.ISEMPTY THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GroupLogActions@1000000012(p_EntryNo@1000000000 : Integer);
    VAR
      SIILogActions@1000000001 : Record 50153;
      SIILogActions2@1000000009 : Record 50153;
      TEMPSIIAction@1000000002 : TEMPORARY Record 50142;
      SIIAction@1000000003 : Record 50142;
      FieldRec@1000000004 : Record 2000000041;
      RecRef@1000000005 : RecordRef;
      FieldRef@1000000006 : FieldRef;
      FieldRef2@1000000007 : FieldRef;
      RecRef2@1000000008 : RecordRef;
      NextGroupID@1000000010 : Integer;
    BEGIN
      TEMPSIIAction.RESET;
      TEMPSIIAction.DELETEALL;

      CLEAR(RecRef);
      CLEAR(RecRef2);
      CLEAR(FieldRef);
      CLEAR(FieldRef2);
      NextGroupID := 0;

      SIILogActions.RESET;
      SIILogActions.SETRANGE("Log Entry No.",p_EntryNo);
      IF SIILogActions.FINDSET THEN BEGIN
        REPEAT
          SIIAction.RESET;
          IF SIIAction.GET(SIILogActions."Action Code",SIILogActions."Action Code Shop") THEN BEGIN
            TEMPSIIAction.TRANSFERFIELDS(SIIAction);
            IF TEMPSIIAction.INSERT THEN;
          END;
        UNTIL SIILogActions.NEXT = 0;
      END;

      TEMPSIIAction.RESET;
      TEMPSIIAction.SETRANGE("Action For",TEMPSIIAction."Action For"::Update);
      IF TEMPSIIAction.FINDSET THEN BEGIN
        REPEAT
          SIILogActions.RESET;
          SIILogActions.SETCURRENTKEY("Reference Group ID");
          SIILogActions.SETRANGE("Log Entry No.",p_EntryNo);
          SIILogActions.SETRANGE("Action Code",TEMPSIIAction.Code);
          SIILogActions.SETRANGE("Reference Group ID",0);
          SIILogActions2.RESET;
          SIILogActions2.SETCURRENTKEY("Reference Group ID");
          SIILogActions2.SETRANGE("Log Entry No.",p_EntryNo);
          SIILogActions2.SETRANGE("Action Code",TEMPSIIAction.Code);
          SIILogActions2.SETRANGE("Reference Group ID",0);
          IF SIILogActions.FINDSET AND SIILogActions2.FINDSET THEN BEGIN
            REPEAT
              RecRef.GETTABLE(SIILogActions);
              RecRef2.GETTABLE(SIILogActions2);
              FieldRec.RESET;
              FieldRec.SETRANGE(TableNo,50153);
              FieldRec.SETRANGE(Class,FieldRec.Class::Normal);
              FieldRec.SETFILTER("No.",'<>1&<>10&<>31&<>14');
              IF FieldRec.FINDSET THEN BEGIN
                REPEAT
                  FieldRef := RecRef.FIELD(FieldRec."No.");
                  FieldRef2 := RecRef2.FIELD(FieldRec."No.");
                  FieldRef2.SETRANGE(FieldRef.VALUE);
                UNTIL FieldRec.NEXT = 0;
                SIILogActions2.SETVIEW(RecRef2.GETVIEW);
                //S/P0992
                SIILogActions2.SETCURRENTKEY("Log Entry No.","Reference ID","Action Code");
                //E/P0992
                IF SIILogActions2.FINDSET(TRUE) THEN BEGIN
                  NextGroupID += 1;
                  REPEAT
                    SIILogActions2."Reference Group ID" := NextGroupID;
                    SIILogActions2.MODIFY;
                  UNTIL SIILogActions2.NEXT = 0;
                END;
              END;
            UNTIL SIILogActions.NEXT = 0;
          END;
        //S/P1020
        //UNTIL SIILogActions.NEXT = 0;
        UNTIL TEMPSIIAction.NEXT = 0;
        //E/P1020
      END;

      TEMPSIIAction.RESET;
      TEMPSIIAction.SETRANGE("Action For",TEMPSIIAction."Action For"::EMail);
      IF TEMPSIIAction.FINDSET THEN BEGIN
        REPEAT
          SIILogActions.RESET;
          //S/P1007
          //SIILogActions.SETCURRENTKEY("Reference Group ID");
          SIILogActions.SETCURRENTKEY("Log Entry No.","Reference ID","Action Code");
          //E/P1007
          SIILogActions.SETRANGE("Log Entry No.",p_EntryNo);
          SIILogActions.SETRANGE("Action Code",TEMPSIIAction.Code);
          SIILogActions.SETRANGE("Reference Group ID",0);
          IF SIILogActions.FINDSET THEN BEGIN
            NextGroupID += 1;
            REPEAT
              SIILogActions."Reference Group ID" := NextGroupID;
              SIILogActions.MODIFY;
            UNTIL SIILogActions.NEXT = 0;
          END;
        UNTIL TEMPSIIAction.NEXT = 0;
      END;
    END;

    PROCEDURE "-----Seperator08"@1000000024();
    BEGIN
    END;

    PROCEDURE GetActionValues@1000000025(p_RecRefOrderHeader@1000000004 : RecordRef;p_RecRefOrderLine@1000000000 : RecordRef;VAR p_DateTime_Var@1000000002 : DateTime;VAR p_StatusDateTimeForAction@1000000001 : ' ,In Time,Earlier,Delayed';VAR p_TrackingNo_Var@1000000006 : Text[40];VAR p_Carrier_Var@1000000005 : Code[20];VAR p_MessageText_Var@1000000003 : Text[100]);
    VAR
      Value_Date_1@1000000008 : Date;
      Value_Date_2@1000000007 : Date;
      Value_DateTime_1@1000000009 : DateTime;
      ArchiveText@1000000010 : Text[20];
      LocText001@1000000011 : TextConst 'ENU=No Shipping Agent.';
      "***HME************************"@1000000012 : Integer;
      GeneralLedgerSetupL@1000000013 : Record 98;
    BEGIN
      CLEAR(Value_Date_1);
      CLEAR(Value_Date_2);
      CLEAR(ArchiveText);
      //S/P0933
      InsertAsError_glob := FALSE;
      ErrorSource_glob := '';
      ErrorText_glob := '';
      //E/P0933

      //S/P0923
      //IF CheckArchive_glob OR (IsExternalTest_glob AND (RecRefTableNo_glob IN [5107,5108])) THEN
      IF CheckArchive_glob OR ((IsExternalTest_glob OR CorrectionEntry_glob) AND (RecRefTableNo_glob IN [5107,5108])) THEN
      //E/P0923
        ArchiveText := ' (Archive)';

      CASE MsgType_glob OF
        1:  // "Shipment Date Msg."
          BEGIN
            EVALUATE(Value_Date_1,FORMAT(p_RecRefOrderLine.FIELD(50074)));      // "EDD Master"
            EVALUATE(Value_Date_2,FORMAT(p_RecRefOrderLine.FIELD(50070)));      // "Max. Order Date - Master"
            //S/P0995
            IF Value_Date_1 = 0D THEN
              Value_Date_1 := Value_Date_2;
            //E/P0995
            p_DateTime_Var := CREATEDATETIME(Value_Date_1,0T);
            p_MessageText_Var := 'Counter Shipment Date' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
            CASE TRUE OF
              //S/P0923
              //Value_Date_1 < Value_Date_2: p_StatusDateTimeForAction := p_StatusDateTimeForAction::Earlier;
              (Value_Date_1 < Value_Date_2)
              AND (Value_Date_2 - Value_Date_1 >= 7): p_StatusDateTimeForAction := p_StatusDateTimeForAction::Earlier;
              (Value_Date_1 < Value_Date_2)
              AND (Value_Date_2 - Value_Date_1 <= 7): p_StatusDateTimeForAction := p_StatusDateTimeForAction::"In Time";
              //E/P0923
              Value_Date_1 > Value_Date_2: p_StatusDateTimeForAction := p_StatusDateTimeForAction::Delayed;
              Value_Date_1 = Value_Date_2: p_StatusDateTimeForAction := p_StatusDateTimeForAction::"In Time";
            END;
            //S/P1073
            IF p_StatusDateTimeForAction IN [p_StatusDateTimeForAction::"In Time",p_StatusDateTimeForAction::Earlier] THEN BEGIN
              CreateExtendedMailEntry_glob := FALSE;
            END;
            //E/P1073
          END;

        2:  // "Payment Update Confirm. Msg."
          BEGIN
            EVALUATE(Value_Date_1,FORMAT(p_RecRefOrderHeader.FIELD(75328)));     // "Payment received at"
            p_DateTime_Var := CREATEDATETIME(Value_Date_1,0T);
            p_MessageText_Var := 'Counter Paym. Conf. Update' + ArchiveText + ':\SII Log: %1';
            p_StatusDateTimeForAction := p_StatusDateTimeForAction::" ";
          END;

        3:  // "Shipment Confirmation Msg."
          BEGIN
            p_DateTime_Var := DHLHistoryTimeStamp_glob;
            p_TrackingNo_Var := DHLHistoryTrackingID_glob;
            p_Carrier_Var := DHLHistoryShippingAgent_glob;
            p_MessageText_Var := 'Counter Shipm. Confirmation' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
            //S/P0933
            IF p_Carrier_Var = '' THEN BEGIN
              InsertAsError_glob := TRUE;
              ErrorSource_glob := 'NOSHIPPINGAGENT';
              ErrorText_glob := LocText001;
            END;
            //E/P0933
          END;

        4:  // "Shipment Delivered Msg."
          BEGIN
            EVALUATE(Value_DateTime_1,FORMAT(p_RecRefOrderLine.FIELD(75338)));       // "Actual Delivery Date"
            //H0367  30.05.13  ABR  +++++++++++++++++++++++++++++++++++++++++
            //S/P0954
            //IF Value_DateTime_1 = CREATEDATETIME(0D,0T) THEN
              //Value_DateTime_1 := CURRENTDATETIME;
            IF Value_DateTime_1 = 0DT THEN
              Value_DateTime_1 := CREATEDATETIME(WORKDATE,0T);
            //E/P0954
            //H0367  30.05.13  ABR  -----------------------------------------
            p_DateTime_Var := Value_DateTime_1;
            p_MessageText_Var := 'Counter Shipment Delivered' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          END;

        5:  // "Cancellation Msg."
          BEGIN
            p_MessageText_Var := 'Counter Cancellation' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          END;

        6:   // "Return Order Created Msg."
          //S/P1055
          p_MessageText_Var := 'Counter Return Order Created' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          //E/P1055

        7:   // "Return Order Received Msg."
          //S/P1055
          p_MessageText_Var := 'Counter Return Order Received' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          //E/P1055

        8:   // "Return Order Refund"
          //S/P1055
          p_MessageText_Var := 'Counter  Return Order Refund' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          //E/P1055

        9:   // "Change Order Requested"
          //S/P1055
          p_MessageText_Var := 'Counter Change Order Requested' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          //E/P1055

        10:   // "Change Return Item Received"
          //S/P1055
          p_MessageText_Var := 'Counter Cahnge Return Item Received' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          //E/P1055

        11:   // "Change Follow-Up Order Created "
          //S/P1055
          p_MessageText_Var := 'Counter Order Created' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          //E/P1055

        //S/P1055
        {***************
        12: ; // "Change Shipment Delayed Msg."

        13: ; // "Change Shipment Confirm. Msg."

        14: ; // "Change Shipment Delivered Msg."
        ***************}
        //E/P1055

        15:  // "Spare Part Request Msg."
          //S/P1055
          p_MessageText_Var := 'Counter Spare Part Requested' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          //E/P1055

        //S/P1055
        {***************
        //S/P1010
        //16: ; // "Cancellation Request Msg."
        16:   // "Cancellation Request Msg."
          BEGIN
            p_DateTime_Var := CREATEDATETIME(WORKDATE,0T);
            p_MessageText_Var := 'Counter Cancellation Request' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
          END;
        //E/P1010

        17: ; // "Cancellation Successful Msg."

        18: ; // "Cancellation Outpayment Msg."
        ***************}
        //E/P1055

        //S/P1058
        19:  // "Return Item Not Received"
          p_MessageText_Var := 'Counter Ret. Item Not Received' + ArchiveText + ':\SII Log: %1\SII Line Log: %2';
        //E/P1058

        //H1515  22.09.14  MBY  +++++++++++++++++++++++++
        24:  // "Credit Card Capture"
          BEGIN
            p_TrackingNo_Var := DELCHR(FORMAT(CaptureAmount_glob * 100),'=','.');
            EVALUATE(p_Carrier_Var,FORMAT(p_RecRefOrderHeader.FIELD(32)));
            IF (p_Carrier_Var = '') AND GeneralLedgerSetupL.GET THEN
              p_Carrier_Var := GeneralLedgerSetupL."LCY Code";
          END;
        //H1515  22.09.14  MBY  -------------------------

      END;

      //S/P0954
      IF p_DateTime_Var <> 0DT THEN BEGIN
        p_DateTime_Var := ROUNDDATETIME(p_DateTime_Var,60000);
      END;
      //E/P0954
    END;

    PROCEDURE GetShipmentConfValues@1000000000(p_RecRefOrderLine@1000000002 : RecordRef;VAR p_SendMail_Var@1000000005 : Boolean) : Boolean;
    VAR
      ShippingAgent@1000000006 : Record 291;
      TempOrderNo@1000000000 : Code[20];
      TempLineNo@1000000001 : Integer;
      FieldRef@1000000004 : FieldRef;
    BEGIN
      TempOrderNo := '';
      TempLineNo := 0;
      FieldRef := p_RecRefOrderLine.FIELD(3);
      EVALUATE(TempOrderNo,FORMAT(FieldRef.VALUE));
      FieldRef := p_RecRefOrderLine.FIELD(4);
      EVALUATE(TempLineNo,FORMAT(FieldRef.VALUE));
      IF TEMPSIIDHLParcelStatus_glob.GET(TEMPSIIDHLParcelStatus_glob."Document Type"::Order,TempOrderNo,TempLineNo) THEN BEGIN
        DHLHistoryTrackingID_glob := TEMPSIIDHLParcelStatus_glob."Tracking No.";
        DHLHistoryTimeStamp_glob := CREATEDATETIME(TEMPSIIDHLParcelStatus_glob."Delivery Date",0T);
        DHLHistoryShippingAgent_glob := TEMPSIIDHLParcelStatus_glob."Shipping Agent";
        //S/P0979
        //S/P1013
        //IF WORKDATE - TEMPSIIDHLParcelStatus_glob."Delivery Date" <= 2 THEN
        IF TempSIIActiveChannels_glob."Shipm. Deliv. Days DHL Parc." <> 0 THEN
          IF WORKDATE - TEMPSIIDHLParcelStatus_glob."Delivery Date" <= TempSIIActiveChannels_glob."Shipm. Deliv. Days DHL Parc." THEN
            p_SendMail_Var := TRUE;
        //E/1013
        //E/P0979
        //S/P1227
        IF ShippingAgent.GET(DHLHistoryShippingAgent_glob) AND ShippingAgent."Block Delivery Conf. E-Mail" THEN
          p_SendMail_Var := FALSE;
        //E/P1227
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE "-----Seperator09"@1000000023();
    BEGIN
    END;

    PROCEDURE TransferPufferEntriesToLog_Old@1000000027();
    VAR
      SIILog@1000000002 : Record 50146;
      SIILineLog@1000000003 : Record 50154;
      SIILogPuffer@1000000000 : Record 50155;
      SIILineLogPuffer@1000000001 : Record 50156;
      NewEntryNo@1000000004 : Integer;
    BEGIN
      //S/P1010
      {************************
      //SII Log
      IF NOT SIILogPuffer.ISEMPTY THEN BEGIN
        NewEntryNo := SIILog.GetNextEntryNo(TRUE);
        REPEAT
          // Transfer Log
          SIILog.INIT;
          SIILog."Entry No." := NewEntryNo;
          SIILog.TRANSFERFIELDS(SIILogPuffer,FALSE);
          SIILog.INSERT;
          // SII Lines
          SIILineLogPuffer.SETRANGE("Entry No.",SIILogPuffer."Entry No.");
          IF NOT SIILineLogPuffer.ISEMPTY THEN BEGIN
            SIILineLog.INIT;
            SIILineLog."Entry No." := NewEntryNo;
            SIILineLog."Reference ID" := SIILineLogPuffer."Reference ID";
            SIILineLog.TRANSFERFIELDS(SIILineLogPuffer,FALSE);
            SIILineLog.INSERT;
          END;
          NewEntryNo := NewEntryNo + 1;
        UNTIL SIILogPuffer.NEXT = 0;
        // Delete Puffer Entries
        SIILogPuffer.RESET;
        SIILineLogPuffer.RESET;
        SIILogPuffer.DELETEALL;
        SIILineLogPuffer.DELETEALL;
      END;

      CLEAR(SIILog);
      CLEAR(SIILineLog);
      ************************}
      //E/P1010
    END;

    PROCEDURE "-----Seperator10"@1000000031();
    BEGIN
    END;

    PROCEDURE CheckUpdateMonitor@1000000032(p_MessageUpdateIntervall@1000000001 : Integer;p_EntryCounter@1000000000 : Integer) : Boolean;
    BEGIN
      IF p_EntryCounter = 1 THEN
        EXIT(TRUE);

      IF p_MessageUpdateIntervall <> 0 THEN
        IF p_EntryCounter MOD p_MessageUpdateIntervall = 0 THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetGlobalSIILogEntryNo@1000000038() : Integer;
    BEGIN
      EXIT(CreatedSIILogEntryNo_glob);
    END;

    PROCEDURE GetLastMsgDateReturnNotReceiv@1000000065(VAR p_Date_Var@1000000003 : Date;p_DocNo@1000000000 : Code[20];p_DocLineNo@1000000001 : Integer) : Boolean;
    VAR
      SIISalesOrderLastMessage@1000000005 : Record 50157;
      SIILogArchive@1000000002 : Record 50147;
    BEGIN
      //S/P1058
      CLEAR(SIISalesOrderLastMessage);
      SIISalesOrderLastMessage.SETRANGE("Document Type",SIISalesOrderLastMessage."Document Type"::Order);
      SIISalesOrderLastMessage.SETRANGE("Document No.",p_DocNo);
      SIISalesOrderLastMessage.SETRANGE("Line No.",p_DocLineNo);
      IF SIISalesOrderLastMessage.FINDFIRST THEN BEGIN
        IF ((SIISalesOrderLastMessage."Message Code NAV" = SIISetup_glob."Return Order Requested NAV") AND
           (SIISalesOrderLastMessage."Message Code Shop" = SIISetup_glob."Return Order Requested Shop"))
           OR
           ((SIISalesOrderLastMessage."Message Code NAV" = SIISetup_glob."Change Return Requested NAV") AND
           (SIISalesOrderLastMessage."Message Code Shop" = SIISetup_glob."Change Return Requested Shop"))
        THEN BEGIN
          IF SIILogArchive.GET(SIISalesOrderLastMessage."Log Entry No.") THEN BEGIN
            p_Date_Var:= DT2DATE(SIILogArchive."Created At");
            EXIT(TRUE);
          END;
        END;
      END;

      EXIT(FALSE);
      //E/P1058
    END;

    PROCEDURE SetTestingParameters@1000000039(p_IsExternalTest@1000000000 : Boolean;p_RecRefTableNo@1000000001 : Integer);
    BEGIN
      IsExternalTest_glob := p_IsExternalTest;
      RecRefTableNo_glob := p_RecRefTableNo;
    END;

    PROCEDURE SetTriggeredParameters@1000000056(p_IsTriggered@1000000000 : Boolean;p_RecRefOrderLine@1000000002 : RecordRef;p_TriggerText@1000000001 : Text[50];p_Attached_TableNo@1000000004 : Integer;p_Attached_Type@1000000003 : Integer;p_Attached_No@1000000005 : Code[20];p_Attached_LineNo@1000000006 : Integer;p_Process_TableNo@1000000010 : Integer;p_Process_Type@1000000009 : Integer;p_Process_No@1000000008 : Code[20];p_Process_LineNo@1000000007 : Integer;p_MultipleLinesTriggered@1000000011 : Boolean;p_ManuallyTriggered@1000000012 : Boolean);
    BEGIN
      //S/P1010
      IsTriggered_glob := p_IsTriggered;
      RecRefOrderLine_glob := p_RecRefOrderLine;
      TriggerText_glob := p_TriggerText;

      Attached_TableNo_glob := p_Attached_TableNo;
      Attached_Type_glob := p_Attached_Type;
      Attached_No_glob := p_Attached_No;
      Attached_LineNo_glob := p_Attached_LineNo;

      Process_TableNo_glob := p_Process_TableNo;
      Process_Type_glob := p_Process_Type;
      Process_No_glob := p_Process_No;
      Process_LineNo_glob := p_Process_LineNo;
      //H0651  27.11.13  MBY  +++++++++++++++++++++++++
      MultipleLinesTriggered_glob := p_MultipleLinesTriggered;
      ManuallyTriggered_glob := p_ManuallyTriggered;
      //H0651  27.11.13  MBY  -------------------------
      //E/P1010
    END;

    PROCEDURE SetGeneralGlobals@1000000079(p_Attached_TableNo@1000000007 : Integer;p_Attached_Type@1000000006 : Integer;p_Attached_No@1000000005 : Code[20];p_Attached_LineNo@1000000004 : Integer;p_Process_TableNo@1000000003 : Integer;p_Process_Type@1000000002 : Integer;p_Process_No@1000000001 : Code[20];p_Process_LineNo@1000000000 : Integer);
    BEGIN
      //S/P1058
      Attached_TableNo_glob := p_Attached_TableNo;
      Attached_Type_glob := p_Attached_Type;
      Attached_No_glob := p_Attached_No;
      Attached_LineNo_glob := p_Attached_LineNo;

      Process_TableNo_glob := p_Process_TableNo;
      Process_Type_glob := p_Process_Type;
      Process_No_glob := p_Process_No;
      Process_LineNo_glob := p_Process_LineNo;
      //E/P1058
    END;

    PROCEDURE SetCorrectionEntry@1000000042(p_SetCorrectionEntry@1000000000 : Boolean;p_RecRefTableNo@1000000001 : Integer;p_RecRefOrderLine@1000000002 : RecordRef);
    BEGIN
      CorrectionEntry_glob := p_SetCorrectionEntry;
      RecRefTableNo_glob := p_RecRefTableNo;
      //S/P0979
      RecRefOrderLine_glob := p_RecRefOrderLine;
      //E/P0979
    END;

    PROCEDURE SETDHLParcelStatusTemp@1000000046(SIIDHLParcelStatusTemp@1000000000 : TEMPORARY Record 50152);
    BEGIN
      TEMPSIIDHLParcelStatus_glob := SIIDHLParcelStatusTemp;
    END;

    PROCEDURE UpdateLogAsError@1000000045(VAR p_SIILog_Var@1000000000 : Record 50146);
    BEGIN
    END;

    PROCEDURE "-----Seperator11"@1000000041();
    BEGIN
      //S/P1010
      //E/P1010
    END;

    PROCEDURE Triggered_Cancel@1000000043(p_SalesLine@1000000001 : Record 37);
    VAR
      SalesLineArchive@1000000006 : Record 5108;
      SIIMessage@1000000002 : Record 50141;
      SIIFillLog@1000000003 : Codeunit 50123;
      SalesHeader@1000000004 : Record 36;
      RecRefSalesLine@1000000005 : RecordRef;
      TriggerText@1000000000 : Text[50];
      OriginTableNo@1000000007 : Integer;
    BEGIN
      //S/P1010
      CLEAR(SIIFillLog);
      CLEAR(SalesLineArchive);
      SIISetup_glob.GET;

      IF SIISetup_glob."Tr. Cancel Active" THEN BEGIN
        IF Triggered_CancelCheckIfProceed(p_SalesLine,TriggerText) THEN BEGIN
          IF (SIISetup_glob."Cancellation NAV" <> '') AND (SIISetup_glob."Cancellation Shop" <> '') THEN BEGIN
            IF SalesHeader.GET(p_SalesLine."Document Type",p_SalesLine."Document No.") THEN BEGIN
              IF Triggered_GetMessage(SIIMessage,SalesHeader."Website No.",1) THEN BEGIN
                IF SIIMessage.FINDSET THEN BEGIN
                  SIIFillLog.GetMsgTypeGlob(SIIMessage);
                  REPEAT
                    IF ActiveActions(SIIMessage) THEN BEGIN
                      Triggered_ClearFilterFieldsMsg(
                        SIIMessage,
                        p_SalesLine."Document No.",
                        FALSE);
                      Triggered_GetFilteredRecRef(
                        RecRefSalesLine,
                        FALSE,
                        p_SalesLine,
                        SalesLineArchive);
                      IF NOT RecRefSalesLine.ISEMPTY THEN BEGIN
                        IF (p_SalesLine."Linked to Sales Order No." <> '') AND (p_SalesLine."Linked to Sales Order Line No." <> 0)
                        THEN BEGIN
                          OriginTableNo :=
                            Triggered_GetOriginTableNo(p_SalesLine."Linked to Sales Order No.");
                          SIIFillLog.SetTriggeredParameters(
                            TRUE,
                            RecRefSalesLine,
                            TriggerText,
                            OriginTableNo,
                            1,
                            p_SalesLine."Linked to Sales Order No.",
                            p_SalesLine."Linked to Sales Order Line No.",
                            36,
                            p_SalesLine."Document Type",
                            p_SalesLine."Document No.",
                            p_SalesLine."Line No.",
                            //H0651  27.11.13  MBY  +++++++++++++++++++++++++
                            FALSE,
                            ManuallyTriggered_glob);
                            //H0651  27.11.13  MBY  -------------------------
                        END ELSE BEGIN
                          SIIFillLog.SetTriggeredParameters(
                            TRUE,
                            RecRefSalesLine,
                            TriggerText,
                            36,
                            p_SalesLine."Document Type",
                            p_SalesLine."Document No.",
                            p_SalesLine."Line No.",
                            36,
                            p_SalesLine."Document Type",
                            p_SalesLine."Document No.",
                            p_SalesLine."Line No.",
                            //H0651  27.11.13  MBY  +++++++++++++++++++++++++
                            FALSE,
                            ManuallyTriggered_glob);
                            //H0651  27.11.13  MBY  -------------------------
                        END;
                        SIIFillLog.InitOnRunTrigger(SIIMessage);
                        SIIFillLog.RUN;
                      END;
                    END;
                  UNTIL SIIMessage.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE Triggered_CancelCheckIfProceed@1000000051(p_SalesLine@1000000000 : Record 37;VAR p_TriggerText_Var@1000000001 : Text[50]) : Boolean;
    VAR
      ReturnReason@1000000002 : Record 6635;
    BEGIN
      //S/P1010
      // Goods are not yet delivered
      //S/P1055
      IF Triggered_IsFollowUpOrder(p_SalesLine."Document No.") THEN
        EXIT(FALSE);
      //E/P1055
      CLEAR(p_TriggerText_Var);

      IF ((p_SalesLine."Document Type" = p_SalesLine."Document Type"::Order) AND
         (p_SalesLine.Type = p_SalesLine.Type::Item) AND
         (p_SalesLine.Quantity = 0))
      THEN BEGIN
        p_TriggerText_Var := 'Trigger_T37_CancelOrderLine';
        EXIT(TRUE);
      END;

      IF ((p_SalesLine."Document Type" = p_SalesLine."Document Type"::Order) AND
         (p_SalesLine.Type = p_SalesLine.Type::Item) AND
         (p_SalesLine.Quantity = 0))  // In PPTX = 1 -> Not possible, beacause of cancel
      THEN BEGIN
        IF ReturnReason.GET(p_SalesLine."Return Reason Code") THEN BEGIN
          IF ReturnReason."Use in FTTC Cancel Trigger" THEN BEGIN
            p_TriggerText_Var := 'Trigger_T37_CancelOrderLine_R-AV_R-2GRAD';
            EXIT(TRUE);
          END;
        END;
      END;

      EXIT(FALSE);
      //E/P1010
    END;

    PROCEDURE Triggered_Return@1000000044(p_TypeOfTrigger@1000000001 : Integer;p_SalesLine@1000000000 : Record 37;p_SalesLineArchive@1000000007 : Record 5108);
    VAR
      SIIMessage@1000000006 : Record 50141;
      SIIFillLog@1000000005 : Codeunit 50123;
      SalesHeader@1000000004 : Record 36;
      SalesHeaderArchive@1000000008 : Record 5107;
      RecRefLine@1000000003 : RecordRef;
      RecRefHeader@1000000010 : RecordRef;
      FieldRef@1000000011 : FieldRef;
      TriggerText@1000000002 : Text[50];
      OriginTableNo@1000000009 : Integer;
      WebsiteNo@1000000012 : Integer;
      UseArchive@1000000013 : Boolean;
      IntLineNoLinked@1000000014 : Integer;
      IntDocType@1000000015 : Integer;
      IntLineNo@1000000016 : Integer;
      SalesHeaderFound@1000000017 : Boolean;
      SalesLinesFound@1000000018 : Boolean;
      SIIMessageFound@1000000019 : Boolean;
    BEGIN
      //S/P1010
      CLEAR(SIIFillLog);
      SIISetup_glob.GET;

      CASE p_TypeOfTrigger OF
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (1: Return Order in Process) removed.
        // Return confirmation email is created in codeunit 50169-SII Fill Log - Create. Function CreateReturnOrderInstruction
        //H1783 19.11.14 MIK -----------------------------
        2:  // Return Item received
          BEGIN
            IF SIISetup_glob."Tr. Return Item Receiv. Active" THEN BEGIN
              IF Triggered_ReturnCheckIfProceed(
                p_TypeOfTrigger,
                p_SalesLine,
                p_SalesLineArchive,
                TriggerText)
              THEN BEGIN
                IF (SIISetup_glob."Return Item Received NAV" <> '') AND (SIISetup_glob."Return Item Received Shop" <> '') THEN BEGIN
                  IF SalesHeader.GET(p_SalesLine."Document Type",p_SalesLine."Document No.") THEN BEGIN
                    IF Triggered_GetMessage(SIIMessage,SalesHeader."Website No.",3) THEN BEGIN
                      IF SIIMessage.FINDSET THEN BEGIN
                        SIIFillLog.GetMsgTypeGlob(SIIMessage);
                        REPEAT
                          IF ActiveActions(SIIMessage) THEN BEGIN
                            Triggered_ClearFilterFieldsMsg(
                              SIIMessage,
                              p_SalesLine."Document No.",
                              FALSE);
                            Triggered_GetFilteredRecRef(
                              RecRefLine,
                              FALSE,
                              p_SalesLine,
                              p_SalesLineArchive);
                            IF NOT RecRefLine.ISEMPTY THEN BEGIN
                              OriginTableNo :=
                                Triggered_GetOriginTableNo(p_SalesLine."Linked to Sales Order No.");
                              SIIFillLog.SetTriggeredParameters(
                                TRUE,
                                RecRefLine,
                                TriggerText,
                                OriginTableNo,
                                1,
                                p_SalesLine."Linked to Sales Order No.",
                                p_SalesLine."Linked to Sales Order Line No.",
                                36,
                                p_SalesLine."Document Type",
                                p_SalesLine."Document No.",
                                p_SalesLine."Line No.",
                                //H0651  27.11.13  MBY  +++++++++++++++++++++++++
                                FALSE,
                                ManuallyTriggered_glob);
                                //H0651  27.11.13  MBY  -------------------------
                              SIIFillLog.InitOnRunTrigger(SIIMessage);
                              SIIFillLog.RUN;
                            END;
                          END;
                        UNTIL SIIMessage.NEXT = 0;
                      END;
                    END;
                  END;
                END;
              END;
            END;
          END;
        3:  // Refund Confirmation
          BEGIN
            //S/P1087
            CLEAR(UseArchive);
            CLEAR(Tr_ReturnRecRef_glob);
            IF p_SalesLineArchive."Document No." <> '' THEN BEGIN
              UseArchive := TRUE;
              Tr_ReturnRecRef_glob.OPEN(5108);
              Tr_ReturnRecRef_glob.GETTABLE(p_SalesLineArchive);
            END ELSE BEGIN
              IF p_SalesLine."Document No." <> '' THEN
                Tr_ReturnRecRef_glob.OPEN(37);
                Tr_ReturnRecRef_glob.GETTABLE(p_SalesLine);
            END;
            CLEAR(RecRefHeader);
            CLEAR(FieldRef);
            RecRefHeader.OPEN(Tr_ReturnRecRef_glob.NUMBER - 1);
            FieldRef := RecRefHeader.FIELD(1);
            FieldRef.SETRANGE(5); // "Return Order"
            FieldRef := RecRefHeader.FIELD(3);
            FieldRef.SETRANGE(FORMAT(Tr_ReturnRecRef_glob.FIELD(3)));
            //E/P1087
            IF SIISetup_glob."Tr. Return Refund Conf. Active" THEN BEGIN
              IF Triggered_ReturnCheckIfProceed(
                p_TypeOfTrigger,
                p_SalesLine,
                p_SalesLineArchive,
                TriggerText)
              THEN BEGIN
                IF (SIISetup_glob."Return Order Refund NAV" <> '') AND (SIISetup_glob."Return Order Refund Shop" <> '') THEN BEGIN
                  //P1087
                  {***********
                  IF SalesHeaderArchive.GET(
                    p_SalesLineArchive."Document Type",
                    p_SalesLineArchive."Document No.",
                    p_SalesLineArchive."Doc. No. Occurrence",
                    p_SalesLineArchive."Version No.")
                  THEN BEGIN
                    IF Triggered_GetMessage(SIIMessage,SalesHeaderArchive."Website No.",4) THEN BEGIN
                  ***********}
                  IF RecRefHeader.FINDLAST THEN BEGIN
                    EVALUATE(WebsiteNo,FORMAT(RecRefHeader.FIELD(50041)));  // "Website No."
                    IF Triggered_GetMessage(SIIMessage,WebsiteNo,4) THEN BEGIN
                  //E/P1087
                      IF SIIMessage.FINDSET THEN BEGIN
                        SIIFillLog.GetMsgTypeGlob(SIIMessage);
                        REPEAT
                          //S/P1087
                          IF NOT Triggered_MsgAlreadyExistInTr(SIIMessage,Tr_ReturnRecRef_glob,RecRefHeader) THEN BEGIN
                          //E/P187
                            IF ActiveActions(SIIMessage) THEN BEGIN
                              //S/P1087
                              Triggered_ClearFilterFieldsMsg(
                                SIIMessage,
                                //S/P1087
                                //p_SalesLineArchive."Document No.",
                                //TRUE);
                                FORMAT(Tr_ReturnRecRef_glob.FIELD(3)),  // "Document No"
                                UseArchive);
                                //E/P1087
                              Triggered_GetFilteredRecRef(
                                RecRefLine,
                                //S/P187
                                //TRUE,
                                UseArchive,
                                //E/P1087
                                p_SalesLine,
                                p_SalesLineArchive);
                              IF NOT RecRefLine.ISEMPTY THEN BEGIN
                                OriginTableNo :=
                                //S/P1087
                                  //Triggered_GetOriginTableNo(p_SalesLine."Linked to Sales Order No.");
                                  Triggered_GetOriginTableNo(FORMAT(Tr_ReturnRecRef_glob.FIELD(75345)));
                                EVALUATE(IntLineNoLinked,FORMAT(Tr_ReturnRecRef_glob.FIELD(75346)));
      // "Linked to Sales Order Line No."
                                FieldRef := Tr_ReturnRecRef_glob.FIELD(1);
                                //S/P1161
                                //EVALUATE(IntDocType,FORMAT(FieldRef.VALUE));
                                IF NOT EVALUATE(IntDocType,FORMAT(FieldRef.VALUE)) THEN
                                  IntDocType :=
                                    SIIGeneralMgmt_glob.GetIntFromOptionString(FieldRef);
                                //E/P1161
                                EVALUATE(IntLineNo,FORMAT(Tr_ReturnRecRef_glob.FIELD(4)));
                                //E/P1087
                                SIIFillLog.SetTriggeredParameters(
                                  TRUE,
                                  RecRefLine,
                                  TriggerText,
                                  OriginTableNo,
                                  1,
                                  //P1087
                                  {***********
                                  p_SalesLineArchive."Linked to Sales Order No.",
                                  p_SalesLineArchive."Linked to Sales Order Line No.",
                                  5107,
                                  p_SalesLineArchive."Document Type",
                                  p_SalesLineArchive."Document No.",
                                  p_SalesLineArchive."Line No.");
                                  ***********}
                                  FORMAT(Tr_ReturnRecRef_glob.FIELD(75345)),  // "Linked to Sales Order No."
                                  IntLineNoLinked,
                                  Tr_ReturnRecRef_glob.NUMBER - 1,
                                  IntDocType,
                                  FORMAT(Tr_ReturnRecRef_glob.FIELD(3)),  // "Document No."
                                  IntLineNo,
                                  //H0651  27.11.13  MBY  +++++++++++++++++++++++++
                                  FALSE,
                                  ManuallyTriggered_glob);
                                  //H0651  27.11.13  MBY  -------------------------
                                  //E/P1087
                                SIIFillLog.InitOnRunTrigger(SIIMessage);
                                SIIFillLog.RUN;
                              END;
                            END;
                          //S/P1087
                          END;
                          //E/P1087
                        UNTIL SIIMessage.NEXT = 0;
                      END;
                    END;
                  END;
                END;
              END;
            END;
          END;
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (4: Return Label) removed.
        // Return Label is created in codeunit 50169-SII Fill Log - Create. Function CreateReturnOrderLabel
        //T0003 17.06.14 tec-sf +++++++++++++++++++++++++++++
        //T0003 17.06.14 tec-sf -----------------------------
        //H1783 19.11.14 MIK -----------------------------
      END;
      //E/P1010
    END;

    PROCEDURE Triggered_ReturnCheckIfProceed@1000000049(p_TypeOfTrigger@1000000001 : Integer;p_SalesLine@1000000000 : Record 37;p_SalesLineArchive@1000000004 : Record 5108;VAR p_TriggerText_Var@1000000002 : Text[50]) : Boolean;
    VAR
      ReturnReason@1000000003 : Record 6635;
    BEGIN
      //S/P1010
      // Goods are already delivered
      //S/P1055
      CASE p_TypeOfTrigger OF
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (1: Return Order in Process) removed.
        // Return confirmation email is created in codeunit 50169-SII Fill Log - Create. Function CreateReturnOrderInstruction
        2:
        //H1783 19.11.14 MIK -----------------------------
          BEGIN
            IF Triggered_IsFollowUpOrder(p_SalesLine."Document No.") THEN
              EXIT(FALSE);
          END;
        3:
          BEGIN
            //S/P1087
            //IF Triggered_IsFollowUpOrder(p_SalesLineArchive."Document No.") THEN
            IF Triggered_IsFollowUpOrder(FORMAT(Tr_ReturnRecRef_glob.FIELD(3))) THEN
            //E/P1087
              EXIT(FALSE);
          END;
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (4: Return Label) removed.
        // Return Label is created in codeunit 50169-SII Fill Log - Create. Function CreateReturnOrderLabel
        //T0003 17.06.14 tec-sf +++++++++++++++++++++++++++++
        //T0003 17.06.14 tec-sf -----------------------------
        //H1783 19.11.14 MIK -----------------------------
      END;
      //E/P1055
      CLEAR(p_TriggerText_Var);

      CASE p_TypeOfTrigger OF
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (1: Return Order in Process) removed.
        // Return confirmation email is created in codeunit 50169-SII Fill Log - Create. Function CreateReturnOrderInstruction
        //H1783 19.11.14 MIK -----------------------------
        2:  // Return Item received (no Change)
          BEGIN
            IF ((p_SalesLine."Document Type" = p_SalesLine."Document Type"::"Return Order") AND
               (p_SalesLine.Type = p_SalesLine.Type::Item) AND
               (p_SalesLine.Quantity <> 0) AND
               (p_SalesLine."Linked to Sales Order No." <> '') AND
               (p_SalesLine."Linked to Sales Order Line No." <> 0) AND
               (p_SalesLine."Return Type" = p_SalesLine."Return Type"::Return))
            THEN BEGIN
              IF ReturnReason.GET(p_SalesLine."Return Reason Code") THEN BEGIN
                IF ReturnReason."Use in FTTC Return Trigger" THEN BEGIN
                  p_TriggerText_Var := 'Trigger_CU80_ReturnItemReceived';
                  EXIT(TRUE);
                END;
              END;
            END;
          END;
        3:  // Refund Confirmation
          BEGIN
            //S/P1087
            //IF ((p_SalesLineArchive."Linked to Sales Order No." <> '') AND
            //   (p_SalesLineArchive."Linked to Sales Order Line No." <> 0))
            IF ((FORMAT(Tr_ReturnRecRef_glob.FIELD(75345)) <> '') AND
               (FORMAT(Tr_ReturnRecRef_glob.FIELD(75346)) <> '0'))
            //E/P1087
            THEN BEGIN
              p_TriggerText_Var := 'Trigger_T50078_RefundConfirmation';
              EXIT(TRUE)
            END;
          END;
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (4: Return Label) removed.
        // Return Label is created in codeunit 50169-SII Fill Log - Create. Function CreateReturnOrderLabel
        //T0003 17.06.14 tec-sf +++++++++++++++++++++++++++++
        //T0003 17.06.14 tec-sf -----------------------------
        //H1783 19.11.14 MIK -----------------------------
      END;

      EXIT(FALSE);
      //E/P1010
    END;

    PROCEDURE Triggered_Change@1000000047(p_TypeOfTrigger@1000000001 : Integer;p_SalesLine@1000000000 : Record 37);
    VAR
      SIIMessage@1000000006 : Record 50141;
      SIIFillLog@1000000005 : Codeunit 50123;
      SalesHeader@1000000004 : Record 36;
      SalesLineArchive@1000000007 : Record 5108;
      RecRefLine@1000000003 : RecordRef;
      TriggerText@1000000002 : Text[50];
      OriginTableNo@1000000008 : Integer;
    BEGIN
      //S/P1010
      CLEAR(SIIFillLog);
      CLEAR(SalesLineArchive);
      SIISetup_glob.GET;

      CASE p_TypeOfTrigger OF
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (1: Return Order in Process (Change)) removed.
        // Change instruction email is created in codeunit 50169-SII Fill Log - Create. Function CreateChangeOrderInstruction
        //H1783 19.11.14 MIK -----------------------------
        2:  // Return Item received (Change)
          BEGIN
            IF SIISetup_glob."Tr. Ch. Ret. Item. Rec. Active" THEN BEGIN
              IF Triggered_ChangeCheckIfProceed(
                p_TypeOfTrigger,
                p_SalesLine,
                TriggerText)
              THEN BEGIN
                IF (SIISetup_glob."Change Ret. Item Received NAV" <> '') AND
                   (SIISetup_glob."Change Ret. Item Received Shop" <> '')
                THEN BEGIN
                  IF SalesHeader.GET(p_SalesLine."Document Type",p_SalesLine."Document No.") THEN BEGIN
                    IF Triggered_GetMessage(SIIMessage,SalesHeader."Website No.",6) THEN BEGIN
                      IF SIIMessage.FINDSET THEN BEGIN
                        SIIFillLog.GetMsgTypeGlob(SIIMessage);
                        REPEAT
                          IF ActiveActions(SIIMessage) THEN BEGIN
                            Triggered_ClearFilterFieldsMsg(
                              SIIMessage,
                              p_SalesLine."Document No.",
                              FALSE);
                            Triggered_GetFilteredRecRef(
                              RecRefLine,
                              FALSE,
                              p_SalesLine,
                              SalesLineArchive);
                            IF NOT RecRefLine.ISEMPTY THEN BEGIN
                              OriginTableNo :=
                                Triggered_GetOriginTableNo(p_SalesLine."Linked to Sales Order No.");
                              SIIFillLog.SetTriggeredParameters(
                                TRUE,
                                RecRefLine,
                                TriggerText,
                                OriginTableNo,
                                1,
                                p_SalesLine."Linked to Sales Order No.",
                                p_SalesLine."Linked to Sales Order Line No.",
                                36,
                                p_SalesLine."Document Type",
                                p_SalesLine."Document No.",
                                p_SalesLine."Line No.",
                                //H0651  27.11.13  MBY  +++++++++++++++++++++++++
                                FALSE,
                                ManuallyTriggered_glob);
                                //H0651  27.11.13  MBY  -------------------------
                              SIIFillLog.InitOnRunTrigger(SIIMessage);
                              SIIFillLog.RUN;
                            END;
                          END;
                        UNTIL SIIMessage.NEXT = 0;
                      END;
                    END;
                  END;
                END;
              END;
            END;
          END;
        3:  // Change Pick
          BEGIN
            IF SIISetup_glob."Tr. Ch. Ret. Ord. Crea. Active" THEN BEGIN
              IF Triggered_ChangeCheckIfProceed(
                p_TypeOfTrigger,
                p_SalesLine,
                TriggerText)
              THEN BEGIN
                IF (SIISetup_glob."Change Order Created NAV" <> '') AND
                   (SIISetup_glob."Change Order Created Shop" <> '')
                THEN BEGIN
                  IF SalesHeader.GET(p_SalesLine."Document Type",p_SalesLine."Document No.") THEN BEGIN
                    IF Triggered_GetMessage(SIIMessage,SalesHeader."Website No.",7) THEN BEGIN
                      IF SIIMessage.FINDSET THEN BEGIN
                        SIIFillLog.GetMsgTypeGlob(SIIMessage);
                        REPEAT
                          IF ActiveActions(SIIMessage) THEN BEGIN
                            Triggered_ClearFilterFieldsMsg(
                              SIIMessage,
                              p_SalesLine."Document No.",
                              FALSE);
                            Triggered_GetFilteredRecRef(
                              RecRefLine,
                              FALSE,
                              p_SalesLine,
                              SalesLineArchive);
                            IF NOT RecRefLine.ISEMPTY THEN BEGIN
                              OriginTableNo :=
                                Triggered_GetOriginTableNo(p_SalesLine."Linked to Sales Order No.");
                              SIIFillLog.SetTriggeredParameters(
                                TRUE,
                                RecRefLine,
                                TriggerText,
                                OriginTableNo,
                                1,
                                p_SalesLine."Linked to Sales Order No.",
                                p_SalesLine."Linked to Sales Order Line No.",
                                36,
                                p_SalesLine."Document Type",
                                p_SalesLine."Document No.",
                                p_SalesLine."Line No.",
                                //H0651  27.11.13  MBY  +++++++++++++++++++++++++
                                FALSE,
                                ManuallyTriggered_glob);
                                //H0651  27.11.13  MBY  -------------------------
                              SIIFillLog.InitOnRunTrigger(SIIMessage);
                              SIIFillLog.RUN;
                            END;
                          END;
                        UNTIL SIIMessage.NEXT = 0;
                      END;
                    END;
                  END;
                END;
              END;
            END;
          END;
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (4: Change Label) removed.
        // Change Label is created in codeunit 50169-SII Fill Log - Create. Function CreateChangeOrderLabel
        //T0003 17.06.14 tec-sf +++++++++++++++++++++++++++++
        //T0003 17.06.14 tec-sf -----------------------------
        //H1783 19.11.14 MIK -----------------------------
      END;
      //E/P1010
    END;

    PROCEDURE Triggered_ChangeCheckIfProceed@1000000050(p_TypeOfTrigger@1000000001 : Integer;p_SalesLine@1000000000 : Record 37;VAR p_TriggerText_Var@1000000002 : Text[50]) : Boolean;
    VAR
      ReturnReason@1000000003 : Record 6635;
      SalesLine@1000000004 : Record 37;
    BEGIN
      //S/P1010
      //S/P1120
      IF p_TypeOfTrigger <> 3 THEN
        //S/P1055
        IF Triggered_IsFollowUpOrder(p_SalesLine."Document No.") THEN
          EXIT(FALSE);
        //E/P1055
      //E/P1120

      CLEAR(p_TriggerText_Var);

      CASE p_TypeOfTrigger OF
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (1: Return Order in Process (Change)) removed.
        // Change instruction email is created in codeunit 50169-SII Fill Log - Create. Function CreateChangeOrderInstruction
        //H1783 19.11.14 MIK -----------------------------
        2:  // Return Item received (Change)
          BEGIN
            IF ((p_SalesLine."Document Type" = p_SalesLine."Document Type"::"Return Order") AND
               (p_SalesLine.Type = p_SalesLine.Type::Item) AND
               (p_SalesLine.Quantity <> 0) AND
               (p_SalesLine."Linked to Sales Order No." <> '') AND
               (p_SalesLine."Linked to Sales Order Line No." <> 0) AND
               (p_SalesLine."Return Type" = p_SalesLine."Return Type"::Change))
            THEN BEGIN
              IF ReturnReason.GET(p_SalesLine."Return Reason Code") THEN BEGIN
                IF ReturnReason."Use in FTTC Change Trigger" THEN BEGIN
                  p_TriggerText_Var := 'Trigger_CU80_ChangeReturnItemReceived';
                  EXIT(TRUE);
                END;
              END;
            END;
          END;
        3:  // Change Pick
          BEGIN
            IF ((p_SalesLine."Document Type" = p_SalesLine."Document Type"::Order) AND
               (p_SalesLine.Type = p_SalesLine.Type::Item) AND
               (p_SalesLine.Quantity <> 0) AND
               (p_SalesLine."Linked to Sales Order No." <> '') AND
               (p_SalesLine."Linked to Sales Order Line No." <> 0))
            THEN BEGIN
              IF SalesLine.GET(
                SalesLine."Document Type"::"Return Order",
                p_SalesLine."Item Change Return No.",
                p_SalesLine."Item Change Return Line No.")
              THEN BEGIN
                IF ((SalesLine."Return Type" = SalesLine."Return Type"::Change) AND
                   (SalesLine."Return Reason Code" <> ''))
                THEN BEGIN
                  IF ReturnReason.GET(SalesLine."Return Reason Code") THEN BEGIN
                    IF ReturnReason."Use in FTTC Change Trigger" THEN BEGIN
                      p_TriggerText_Var := 'Trigger_CU50003_ChangePick';
                      EXIT(TRUE);
                    END;
                  END;
                END;
              END;
            END;
          END;
        //H1783 19.11.14 MIK +++++++++++++++++++++++++++++
        // Case (4: Change Label) removed.
        // Change Label is created in codeunit 50169-SII Fill Log - Create. Function CreateChangeOrderLabel
        //T0003 17.06.14 tec-sf +++++++++++++++++++++++++++++
        //T0003 17.06.14 tec-sf -----------------------------
        //H1783 19.11.14 MIK -----------------------------
      END;

      EXIT(FALSE);
      //E/P1010
    END;

    PROCEDURE Triggered_Sparepart@1000000064(p_SalesLine@1000000000 : Record 37);
    VAR
      SIIMessage@1000000006 : Record 50141;
      SIIFillLog@1000000005 : Codeunit 50123;
      SalesHeader@1000000004 : Record 36;
      SalesLineArchive@1000000001 : Record 5108;
      RecRefSalesLine@1000000003 : RecordRef;
      TriggerText@1000000002 : Text[50];
      OriginTableNo@1000000007 : Integer;
    BEGIN
      //S/P1010
      CLEAR(SIIFillLog);
      CLEAR(SalesLineArchive);
      SIISetup_glob.GET;

      IF SIISetup_glob."Tr. Sp. Requested Active" THEN BEGIN
        IF Triggered_SparepartCheckProcd(p_SalesLine,TriggerText) THEN BEGIN
          // T0019 tec-cs 08.10.14 +++++++++++++
          // SIISetup."Spare Part Request Shop" is now a flowfield
          // IF (SIISetup_glob."Spare Part Request NAV" <> '') AND (SIISetup_glob."Spare Part Request Shop" <> '') THEN BEGIN
          IF (SIISetup_glob."Spare Part Request NAV" <> '') THEN BEGIN
          // T0019 tec-cs 08.10.14 -------------
            IF SalesHeader.GET(p_SalesLine."Document Type",p_SalesLine."Document No.") THEN BEGIN
              IF Triggered_GetMessage(SIIMessage,SalesHeader."Website No.",8) THEN BEGIN
                IF SIIMessage.FINDSET THEN BEGIN
                  SIIFillLog.GetMsgTypeGlob(SIIMessage);
                  REPEAT
                    IF ActiveActions(SIIMessage) THEN BEGIN
                      Triggered_ClearFilterFieldsMsg(
                        SIIMessage,
                        p_SalesLine."Document No.",
                        FALSE);
                      Triggered_GetFilteredRecRef(
                        RecRefSalesLine,
                        FALSE,
                        p_SalesLine,
                        SalesLineArchive);
                      IF NOT RecRefSalesLine.ISEMPTY THEN BEGIN
                        OriginTableNo :=
                          Triggered_GetOriginTableNo(p_SalesLine."Linked to Sales Order No.");
                        SIIFillLog.SetTriggeredParameters(
                          TRUE,
                          RecRefSalesLine,
                          TriggerText,
                          OriginTableNo,
                          1,
                          p_SalesLine."Linked to Sales Order No.",
                          p_SalesLine."Linked to Sales Order Line No.",
                          36,
                          p_SalesLine."Document Type",
                          p_SalesLine."Document No.",
                          p_SalesLine."Line No.",
                          //H0651  27.11.13  MBY  +++++++++++++++++++++++++
                          FALSE,
                          ManuallyTriggered_glob);
                          //H0651  27.11.13  MBY  -------------------------
                        SIIFillLog.InitOnRunTrigger(SIIMessage);
                        SIIFillLog.RUN;
                      END;
                    END;
                  UNTIL SIIMessage.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
      END;
      //E/P1010
    END;

    PROCEDURE Triggered_SparepartCheckProcd@1000000063(p_SalesLine@1000000000 : Record 37;VAR p_TriggerText_Var@1000000002 : Text[50]) : Boolean;
    BEGIN
      //S/P1010
      //S/P1055
      IF Triggered_IsFollowUpOrder(p_SalesLine."Document No.") THEN
        EXIT(FALSE);
      //E/P1055
      CLEAR(p_TriggerText_Var);

      IF ((p_SalesLine."Document Type" = p_SalesLine."Document Type"::"Return Order") AND
         (p_SalesLine.Type = p_SalesLine.Type::Item) AND
         (p_SalesLine.Quantity <> 0) AND
         (p_SalesLine."Linked to Sales Order No." <> '') AND
         (p_SalesLine."Linked to Sales Order Line No." <> 0) AND
         (p_SalesLine."Return Type" = p_SalesLine."Return Type"::"Spare Part"))
      THEN BEGIN
        p_TriggerText_Var := 'Trigger_CU50030_Sparepart';
        EXIT(TRUE);
      END;

      // >> H1472
      IF ((p_SalesLine."Document Type" = p_SalesLine."Document Type"::Order) AND
         (p_SalesLine.Type = p_SalesLine.Type::Item) AND
         (p_SalesLine.Quantity <> 0) AND
         (p_SalesLine."Linked to Sales Order No." <> '') AND
         (p_SalesLine."Linked to Sales Order Line No." <> 0) AND
         (p_SalesLine."Return Type" = p_SalesLine."Return Type"::"Spare Part"))
      THEN BEGIN
        p_TriggerText_Var := 'Trigger_Sparepart_Order';
        EXIT(TRUE);
      END;
      // << H1472

      EXIT(FALSE);
      //E/P1010
    END;

    PROCEDURE Triggered_Invoice@1000000062(p_SalesInvoiceHeader@1000000000 : Record 112);
    VAR
      SIIMessage@1000000007 : Record 50141;
      SIIFillLog@1000000006 : Codeunit 50123;
      SalesInvoiceLine@1000000011 : Record 113;
      SalesHeader@1000000005 : Record 36;
      SalesLine@1000000008 : Record 37;
      SalesHeaderArchive@1000000010 : Record 5107;
      SalesLineArchive@1000000004 : Record 5108;
      RecRefSalesLine@1000000003 : RecordRef;
      RecRefOrderHeader@1000000014 : RecordRef;
      FieldRef@1000000015 : FieldRef;
      TriggerText@1000000002 : Text[50];
      OriginTableNo@1000000001 : Integer;
      UseArchive@1000000009 : Boolean;
      MultipleLinesTriggered@1000000013 : Boolean;
    BEGIN
      //H0651  27.11.13  MBY  +++++++++++++++++++++++++
      CLEAR(SIIFillLog);
      SIISetup_glob.GET;

      CLEAR(UseArchive);

      IF p_SalesInvoiceHeader."Order No." <> '' THEN BEGIN
        SalesInvoiceLine.SETRANGE("Document No.",p_SalesInvoiceHeader."No.");
        SalesInvoiceLine.SETFILTER(Quantity,'<>%1',0);
        IF SalesInvoiceLine.COUNT > 1 THEN
          MultipleLinesTriggered := TRUE;
        IF SalesInvoiceLine.FINDFIRST THEN BEGIN
          SalesLineArchive.SETRANGE("Document Type",SalesLineArchive."Document Type"::Order);
          SalesLineArchive.SETRANGE("Document No.",SalesInvoiceLine."Order No.");
          SalesLineArchive.SETRANGE("Line No.",SalesInvoiceLine."Order Line No.");
          IF SalesLineArchive.FINDLAST THEN
            UseArchive := TRUE
          ELSE
            IF SalesLine.GET(1,SalesInvoiceLine."Order No.",SalesInvoiceLine."Order Line No.") THEN;
        END;
      //H0907  06.03.14  MBY  +++++++++++++++++++++++++
      {
      //H0907  06.03.14  MBY  -------------------------
      END;
      //H0907  06.03.14  MBY  +++++++++++++++++++++++++
      }
      END ELSE
        EXIT;
      //H0907  06.03.14  MBY  -------------------------

      IF SIISetup_glob."Tr. Invoice Document Active" THEN BEGIN
        IF Triggered_InvoiceCheckIfProcd(p_SalesInvoiceHeader,TriggerText) THEN BEGIN
          IF (SIISetup_glob."Invoice Document NAV" <> '') AND (SIISetup_glob."Invoice Document Shop" <> '') THEN BEGIN
              IF Triggered_GetMessage(SIIMessage,p_SalesInvoiceHeader."Website No.",9) THEN BEGIN
                IF SIIMessage.FINDSET THEN BEGIN
                  SIIFillLog.GetMsgTypeGlob(SIIMessage);
                  REPEAT
                    OriginTableNo := Triggered_GetOriginTableNo(p_SalesInvoiceHeader."Order No.");
                    CLEAR(RecRefOrderHeader);
                    RecRefOrderHeader.OPEN(OriginTableNo);
                    RecRefOrderHeader.FILTERGROUP(3);
                    FieldRef := RecRefOrderHeader.FIELD(3);     // "Document No."
                    FieldRef.SETFILTER(p_SalesInvoiceHeader."Order No.");
                    RecRefOrderHeader.FILTERGROUP(0);
                    IF RecRefOrderHeader.FINDFIRST THEN BEGIN

                      IF ActiveActions(SIIMessage) THEN BEGIN
                        Triggered_ClearFilterFieldsMsg(
                          SIIMessage,
                          p_SalesInvoiceHeader."Order No.",
                          UseArchive);

                        Triggered_GetFilteredRecRef(
                          RecRefSalesLine,
                          UseArchive,
                          SalesLine,
                          SalesLineArchive);

                        IF NOT RecRefSalesLine.ISEMPTY THEN BEGIN
                          SIIFillLog.SetTriggeredParameters(
                            TRUE,
                            RecRefSalesLine,
                            TriggerText,
                            OriginTableNo,
                            1,
                            SalesInvoiceLine."Order No.",
                            SalesInvoiceLine."Order Line No.",
                            112,
                            0,
                            p_SalesInvoiceHeader."No.",
                            SalesInvoiceLine."Line No.",
                            MultipleLinesTriggered,
                            ManuallyTriggered_glob);

                          SIIFillLog.InitOnRunTrigger(SIIMessage);
                          SIIFillLog.RUN;

                        END;
                      END;
                    END;
                  UNTIL SIIMessage.NEXT = 0;
                END;
              END;
          END;
        END;
      END;

      //H0651  27.11.13  MBY  -------------------------
    END;

    PROCEDURE Triggered_InvoiceCheckIfProcd@1000000066(p_SalesInvoiceHeader@1000000001 : Record 112;VAR p_TriggerText_Var@1000000000 : Text[50]) : Boolean;
    BEGIN
      //H0651  27.11.13  MBY  +++++++++++++++++++++++++
      CLEAR(p_TriggerText_Var);

      IF TRUE THEN BEGIN //conditions?
        p_TriggerText_Var := 'Trigger_CU80_Invoice_Document';
        EXIT(TRUE);
      END;

      EXIT(FALSE);

      //H0651  27.11.13  MBY  -------------------------
    END;

    PROCEDURE Triggered_CreditMemo@1106900000(SalesCrMemoHeaderV@1106900000 : Record 114;ManuallyTriggeredV@1000000000 : Boolean);
    VAR
      SIIMessage@1106900014 : Record 50141;
      SIIFillLog@1106900013 : Codeunit 50123;
      SalesCrMemoLine@1106900012 : Record 115;
      SalesHeader@1106900011 : Record 36;
      SalesLine@1106900010 : Record 37;
      SalesHeaderArchive@1106900009 : Record 5107;
      SalesLineArchive@1106900008 : Record 5108;
      RecRefSalesLine@1106900007 : RecordRef;
      RecRefOrderHeader@1106900006 : RecordRef;
      FieldRef@1106900005 : FieldRef;
      TriggerText@1106900004 : Text[50];
      OriginTableNo@1106900003 : Integer;
      UseArchive@1106900002 : Boolean;
      MultipleLinesTriggered@1106900001 : Boolean;
      DocTypeL@1000000001 : Integer;
      DocNoL@1000000002 : Code[20];
      DocNoLineNoL@1000000003 : Integer;
    BEGIN
      //T0009 02.07.14 tec-sf +++++++++++++++++++++++++++++
      CLEAR(SIIFillLog);
      SIISetup_glob.GET;

      ManuallyTriggered_glob := ManuallyTriggeredV;

      CLEAR(UseArchive);

      IF SalesCrMemoHeaderV."External Document No." <> '' THEN BEGIN
        SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeaderV."No.");
        SalesCrMemoLine.SETFILTER(Quantity,'<>%1',0);
        IF SalesCrMemoLine.COUNT > 1 THEN
          MultipleLinesTriggered := TRUE;
        IF SalesCrMemoLine.FINDFIRST THEN BEGIN
          IF SalesCrMemoLine."Linked to Sales Order No." <> '' THEN BEGIN
            SalesLineArchive.SETFILTER("Document Type",'%1|%2', SalesLineArchive."Document Type"::Order,
                                                                SalesLineArchive."Document Type"::"Return Order");
            SalesLineArchive.SETRANGE("Document No.",SalesCrMemoLine."Linked to Sales Order No.");
            SalesLineArchive.SETRANGE("Line No.",SalesCrMemoLine."Linked to Sales Order Line No.");
          END ELSE BEGIN
            SalesLineArchive.SETFILTER("Document Type",'%1|%2', SalesLineArchive."Document Type"::Order,
                                                                SalesLineArchive."Document Type"::"Return Order");
            SalesLineArchive.SETRANGE("Document No.",SalesCrMemoLine."Order No.");
            SalesLineArchive.SETRANGE("Line No.",SalesCrMemoLine."Order Line No.");
          END;
          IF SalesLineArchive.FINDLAST THEN BEGIN
            UseArchive := TRUE;
            DocTypeL := SalesLineArchive."Document Type";
            DocNoL := SalesLineArchive."Document No.";
            DocNoLineNoL := SalesLineArchive."Line No.";
          END ELSE BEGIN
            IF SalesCrMemoLine."Linked to Sales Order No." <> '' THEN BEGIN
              SalesLine.SETFILTER("Document Type",'%1|%2', SalesLine."Document Type"::Order,
                                                                  SalesLine."Document Type"::"Return Order");
              SalesLine.SETRANGE("Document No.",SalesCrMemoLine."Linked to Sales Order No.");
              SalesLine.SETRANGE("Line No.",SalesCrMemoLine."Linked to Sales Order Line No.");
            END ELSE BEGIN
              SalesLine.SETFILTER("Document Type",'%1|%2', SalesLine."Document Type"::Order,
                                                                  SalesLine."Document Type"::"Return Order");
              SalesLine.SETRANGE("Document No.",SalesCrMemoLine."Order No.");
              SalesLine.SETRANGE("Line No.",SalesCrMemoLine."Order Line No.");
            END;
            IF SalesLine.FINDFIRST THEN
              ;
            DocTypeL := SalesLine."Document Type";
            DocNoL := SalesLine."Document No.";
            DocNoLineNoL := SalesLine."Line No.";
          END;
        END;
      END ELSE
        EXIT;

      IF SIISetup_glob."Tr. Cr. Memo Mail Active" THEN BEGIN
        IF Triggered_CreditMemoIfProceed(SalesCrMemoHeaderV,TriggerText) THEN BEGIN
          IF (SIISetup_glob."Credit Memo Mail NAV" <> '') AND (SIISetup_glob."Credit Memo Mail Shop" <> '') THEN BEGIN
              IF Triggered_GetMessage(SIIMessage,SalesCrMemoHeaderV."Website No.",12) THEN BEGIN
                IF SIIMessage.FINDSET THEN BEGIN
                  SIIFillLog.GetMsgTypeGlob(SIIMessage);
                  REPEAT
                    OriginTableNo := Triggered_GetOriginTableNo(SalesCrMemoHeaderV."External Document No.");
                    CLEAR(RecRefOrderHeader);
                    RecRefOrderHeader.OPEN(OriginTableNo);
                    RecRefOrderHeader.FILTERGROUP(3);
                    FieldRef := RecRefOrderHeader.FIELD(3);     // "Document No."
                    FieldRef.SETFILTER(SalesCrMemoHeaderV."External Document No.");
                    RecRefOrderHeader.FILTERGROUP(0);

                    IF RecRefOrderHeader.FINDFIRST THEN BEGIN

                        IF ActiveActions(SIIMessage) THEN BEGIN
                          Triggered_ClearFilterFieldsMsg(
                            SIIMessage,
                            SalesCrMemoHeaderV."External Document No.",
                            UseArchive);

                          // sets a filter on the current sales line/sales archive line
                          Triggered_GetFilteredRecRef(
                            RecRefSalesLine,
                            UseArchive,
                            SalesLine,
                            SalesLineArchive);

                          IF NOT RecRefSalesLine.ISEMPTY THEN BEGIN
                            SIIFillLog.SetTriggeredParameters(
                              TRUE,
                              RecRefSalesLine,
                              TriggerText,
                              OriginTableNo,
                              //1,
                              DocTypeL,
                              //SalesCrMemoLine."Order No.",
                              //SalesCrMemoLine."Order Line No.",
                              DocNoL,
                              DocNoLineNoL,
                              114,
                              0,
                              SalesCrMemoHeaderV."No.",
                              SalesCrMemoLine."Line No.",
                              MultipleLinesTriggered,
                              ManuallyTriggered_glob);

                            SIIFillLog.InitOnRunTrigger(SIIMessage);
                            SIIFillLog.RUN;
                          END;
                        END;
                    END;
                  UNTIL SIIMessage.NEXT = 0;
                END;
              END;
          END;
        END;
      END;
      //T0009 02.07.14 tec-sf -----------------------------
    END;

    PROCEDURE Triggered_CreditMemoIfProceed@1106900001(SalesCrMemoHeaderV@1106900000 : Record 114;VAR p_TriggerText_Var@1106900001 : Text[50]) : Boolean;
    BEGIN
      //T0009 02.07.14 tec-sf +++++++++++++++++++++++++++++
      CLEAR(p_TriggerText_Var);

      IF TRUE THEN BEGIN //conditions?
        p_TriggerText_Var := 'Trigger_CU80_Credit_Memo_Mail';
        EXIT(TRUE);
      END;

      EXIT(FALSE);
      //T0009 02.07.14 tec-sf -----------------------------
    END;

    PROCEDURE "-----Seperator12"@1000000053();
    BEGIN
      //S/P1010
      //E/P1010
    END;

    PROCEDURE Triggered_GetMessage@1000000054(VAR p_SIIMessage_Var@1000000001 : Record 50141;p_WebsiteNo@1000000000 : Integer;p_TriggerType@1000000002 : Integer) : Boolean;
    BEGIN
      //S/P1010
      CLEAR(p_SIIMessage_Var);

      p_SIIMessage_Var.SETCURRENTKEY("Website No.","Message Code NAV","Message Code Shop");
      p_SIIMessage_Var.SETRANGE("Website No.",p_WebsiteNo);

      CASE p_TriggerType OF
        1:  // Cancel
          BEGIN
            p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Cancellation NAV");
            p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Cancellation Shop");
          END;
        2:  // Return Order in Process (no Change)
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Return Order Requested NAV");
              p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Return Order Requested Shop");
          END;
        3:  // Return Item received (no Change)
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Return Item Received NAV");
              p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Return Item Received Shop");
          END;
        4:  // Return Refund Conf.
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Return Order Refund NAV");
              p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Return Order Refund Shop");
          END;
        5:  // Return Order in Process (Change)
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Change Return Requested NAV");
              p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Change Return Requested Shop");
          END;
        6:  // Return Item received (Change)
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Change Ret. Item Received NAV");
              p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Change Ret. Item Received Shop");
          END;
        7:  // Change Item picked
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Change Order Created NAV");
              p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Change Order Created Shop");
          END;
        8:  // Sparepart requested
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Spare Part Request NAV");
              // T0019 tec-cs 08.10.14 +++++++++++++
              // SIISetup."Spare Part Request Shop" is now a flowfield - and it is not neccessary for filtering here
              // even (in my opinion) in all the other cases it does not make sense to filter on the shop-text
              //p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Spare Part Request Shop");
              // T0019 tec-cs 08.10.14 -------------
          END;
        //H0651  27.11.13  MBY  +++++++++++++++++++++++++
        9: // Invoice Document
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Invoice Document NAV");
              p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Invoice Document Shop");
          END;
        //H0651  27.11.13  MBY  -------------------------
        //T0003 10.06.14 tec-sf +++++++++++++++++++++++++++++
        10: // Return Order Label
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Return Order Label NAV");
              //T0003 17.06.14 tec-sf +++++++++++++++++++++++++++++
              //p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Return Order Label Shop");
              p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Return Order Requested Shop");
              //T0003 17.06.14 tec-sf -----------------------------
          END;
        //T0003 10.06.14 tec-sf -----------------------------
        //T0003 17.06.14 tec-sf +++++++++++++++++++++++++++++
        11: // Return Order Label (Change)
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Change Return Req. Label NAV");
              p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Change Return Requested Shop");
          END;
        //T0003 17.06.14 tec-sf -----------------------------
        //T0009 02.07.14 tec-sf +++++++++++++++++++++++++++++
        12:
          BEGIN
            p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Credit Memo Mail NAV");
            p_SIIMessage_Var.SETRANGE("Message Code Shop",SIISetup_glob."Credit Memo Mail Shop");
          END;
        //T0009 02.07.14 tec-sf -----------------------------
        //H1515  17.10.14  MBY  +++++++++++++++++++++++++
        13: // Credit Card Capturing
          BEGIN
              p_SIIMessage_Var.SETRANGE("Message Code NAV",SIISetup_glob."Credit Card Capture NAV");
          END;
        //H1515  27.10.14  MBY  -------------------------
      ELSE
        EXIT(FALSE);
      END;
      p_SIIMessage_Var.SETFILTER(Mode,'<>%1',p_SIIMessage_Var.Mode::Inactive);

      EXIT(TRUE);
      //E/P1010
    END;

    PROCEDURE Triggered_ClearFilterFieldsMsg@1000000055(VAR p_SIIMessage_Var@1000000000 : Record 50141;p_DocNo@1000000001 : Code[20];p_CheckArchive@1000000002 : Boolean);
    BEGIN
      //S/P1010
      p_SIIMessage_Var."Order No. Filter" := p_DocNo;
      p_SIIMessage_Var."Order Date Filter" := '';
      p_SIIMessage_Var."Payment Method Filter" := '';
      p_SIIMessage_Var."Language Code Filter" := '';
      p_SIIMessage_Var."Check Archive while Process" := p_CheckArchive;
      //E/P1010
    END;

    PROCEDURE Triggered_GetFilteredRecRef@1000000057(VAR p_RecRef_Var@1000000000 : RecordRef;p_UseArchive@1000000004 : Boolean;p_SalesLine@1000000001 : Record 37;p_SalesLineArchive@1000000003 : Record 5108);
    VAR
      FieldRef@1000000002 : FieldRef;
    BEGIN
      //S/P1010
      CLEAR(p_RecRef_Var);
      IF NOT p_UseArchive THEN BEGIN
        p_RecRef_Var.GETTABLE(p_SalesLine);
        FieldRef := p_RecRef_Var.FIELD(1);             // "Document Type"
        FieldRef.SETRANGE(p_SalesLine."Document Type");
        FieldRef := p_RecRef_Var.FIELD(3);             // "Document No."
        FieldRef.SETRANGE(p_SalesLine."Document No.");
        FieldRef := p_RecRef_Var.FIELD(4);             // "Line No."
        FieldRef.SETRANGE(p_SalesLine."Line No.");
      END ELSE BEGIN
        p_RecRef_Var.GETTABLE(p_SalesLineArchive);
        FieldRef := p_RecRef_Var.FIELD(1);             // "Document Type"
        FieldRef.SETRANGE(p_SalesLineArchive."Document Type");
        FieldRef := p_RecRef_Var.FIELD(3);             // "Document No."
        FieldRef.SETRANGE(p_SalesLineArchive."Document No.");
        FieldRef := p_RecRef_Var.FIELD(5048);          // "Doc. No. Occurrence"
        FieldRef.SETRANGE(p_SalesLineArchive."Doc. No. Occurrence");
        FieldRef := p_RecRef_Var.FIELD(5047);             // "Version No."
        FieldRef.SETRANGE(p_SalesLineArchive."Version No.");
        FieldRef := p_RecRef_Var.FIELD(4);             // "Line No."
        FieldRef.SETRANGE(p_SalesLineArchive."Line No.");
      END;
      //E/P1010
    END;

    PROCEDURE Triggered_GetOriginTableNo@1000000048(p_DocNo@1000000001 : Code[20]) : Integer;
    VAR
      SalesHeader@1000000000 : Record 36;
    BEGIN
      //S/P1010
      CLEAR(SalesHeader);

      IF SalesHeader.GET(1,p_DocNo) THEN
        EXIT(36)
      ELSE
        EXIT(5107);
      //E/P1010
    END;

    PROCEDURE Triggered_GetItemID@1000000052(p_AttachedDocNo@1000000000 : Code[20];p_AttachedLineNo@1000000001 : Integer) : Integer;
    VAR
      SalesLine@1000000002 : Record 37;
      SalesLineArchive@1000000003 : Record 5108;
    BEGIN
      //S/P1055
      CLEAR(SalesLine);
      IF SalesLine.GET(1,p_AttachedDocNo,p_AttachedLineNo) THEN BEGIN
        EXIT(SalesLine.ID);
      END ELSE BEGIN
        CLEAR(SalesLineArchive);
        SalesLineArchive.SETCURRENTKEY(
          "Document Type","Document No.","Line No.","Doc. No. Occurrence","Version No.");
        SalesLineArchive.SETRANGE("Document Type",1);
        SalesLineArchive.SETRANGE("Document No.",p_AttachedDocNo);
        SalesLineArchive.SETRANGE("Line No.",p_AttachedLineNo);
        IF SalesLineArchive.FINDLAST THEN
          EXIT(SalesLineArchive.ID);
      END;
      EXIT(0);
      //E/P1055
    END;

    PROCEDURE Triggered_IsFollowUpOrder@1000000058(p_DocNo@1000000000 : Code[20]) : Boolean;
    VAR
      NewString@1000000001 : Code[2];
    BEGIN
      //S/P1055
      NewString := COPYSTR(p_DocNo,1,2);
      IF NewString = 'SO' THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
      //E/P1055
    END;

    PROCEDURE Triggered_MsgAlreadyExistInTr@1000000059(p_SIIMessage@1000000001 : Record 50141;p_RecRefLine@1000000000 : RecordRef;p_RecRefHeader@1000000005 : RecordRef) : Boolean;
    VAR
      SIILineLogManualTrigger@1000000002 : Record 50156;
      FieldRef@1000000003 : FieldRef;
      IntLineNo@1000000004 : Integer;
      IntWebsiteNo@1000000006 : Integer;
    BEGIN
      //S/P1087
      CLEAR(SIILineLogManualTrigger);

      FieldRef := p_RecRefLine.FIELD(4);
      EVALUATE(IntLineNo,FORMAT(FieldRef.VALUE)); // "Line No."

      FieldRef := p_RecRefHeader.FIELD(50041); // "Website No."
      EVALUATE(IntWebsiteNo,FORMAT(FieldRef.VALUE));

      WITH SIILineLogManualTrigger DO BEGIN
      SETCURRENTKEY(
        "Process Document No.","Process Document Line No.","Message Code NAV","Message Code Shop",AppDomain);
      SETRANGE("Process Document No.",FORMAT(p_RecRefLine.FIELD(3)));  // "Document No."
      SETRANGE("Process Document Line No.",IntLineNo);
      SETRANGE("Message Code NAV",p_SIIMessage."Message Code NAV");
      SETRANGE("Message Code Shop",p_SIIMessage."Message Code Shop");
      SETRANGE(AppDomain,IntWebsiteNo);
      IF FINDFIRST THEN
        EXIT(TRUE)
      END;

      EXIT(FALSE);
      //E/P1087
    END;

    PROCEDURE Triggered_SetManually@1000000068(p_ManuallyTriggered@1000000000 : Boolean);
    BEGIN
      //H0651  27.11.13  MBY  +++++++++++++++++++++++++
      ManuallyTriggered_glob := p_ManuallyTriggered;
      //H0651  27.11.13  MBY  -------------------------
    END;

    PROCEDURE "-----Seperator13"@1000000060();
    BEGIN
      //S/P1010
      //E/P1010
    END;

    PROCEDURE ShiftManualTrMsgToNormalLog@1000000061();
    VAR
      SIILog@1000000009 : Record 50146;
      SIILineLog@1000000008 : Record 50154;
      SIILogActions@1000000000 : Record 50153;
      SIILogManualTrigger@1000000007 : Record 50155;
      SIILineLogManualTrigger@1000000006 : Record 50156;
      SIILogManuallTriggerActions@1000000001 : Record 50160;
      NewEntryNo@1000000005 : Integer;
      SIIMonitoringServices@1000000002 : Codeunit 50126;
      StartNo@1000000003 : Integer;
      EndNo@1000000004 : Integer;
    BEGIN
      //S/P1010
      SIILogManualTrigger.RESET;
      IF SIILogManualTrigger.FINDSET(TRUE) THEN BEGIN
        NewEntryNo := SIILog.GetNextEntryNo(TRUE);
        StartNo := NewEntryNo;
        REPEAT
          // Transfer Log
          SIILog.INIT;
          SIILog."Entry No." := NewEntryNo;
          SIILog.TRANSFERFIELDS(SIILogManualTrigger,FALSE);
          SIILog.INSERT;
          // Transfer Line Log
          SIILineLogManualTrigger.RESET;
          SIILineLogManualTrigger.SETRANGE("Entry No.", SIILogManualTrigger."Entry No.");
          IF SIILineLogManualTrigger.FINDSET THEN BEGIN
            REPEAT
              SIILineLog.INIT;
              SIILineLog."Entry No." := NewEntryNo;
              SIILineLog."Reference ID" := SIILineLogManualTrigger."Reference ID";
              SIILineLog.TRANSFERFIELDS(SIILineLogManualTrigger,FALSE);
              SIILineLog.INSERT;
            UNTIL SIILineLogManualTrigger.NEXT = 0;
          END;
          // Transfer Log Actions
          SIILogManuallTriggerActions.RESET;
          SIILogManuallTriggerActions.SETRANGE("Log Entry No.",SIILogManualTrigger."Entry No.");
          IF SIILogManuallTriggerActions.FINDSET THEN BEGIN
            REPEAT
              SIILogActions.INIT;
              SIILogActions."Log Entry No." := NewEntryNo;
              //H0573 26.09.13 ARI ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
              SIILogActions."Reference ID" := SIILogManuallTriggerActions."Reference ID";
              SIILogActions."Action Code" := SIILogManuallTriggerActions."Action Code";
              //H0573 26.09.13 ARI ----------------------------------------------------------------
              SIILogActions.TRANSFERFIELDS(SIILogManuallTriggerActions,FALSE);
              SIILogActions.INSERT;
            UNTIL SIILogManuallTriggerActions.NEXT = 0;
          END;
          // Entry No
          GroupLogActions(NewEntryNo);
          SIILogManualTrigger.DELETE(TRUE);
          //H2058  09.02.14  MIK ++++++++++++++
          NewEntryNo := SIILog.GetNextEntryNo(TRUE);
          //H2058  09.02.14  MIK --------------
        UNTIL SIILogManualTrigger.NEXT = 0;
        EndNo := NewEntryNo;
        SIIMonitoringServices.CreateTriggeredMonitoringEntry(EndNo - StartNo,StartNo,EndNo - 1);
        IF GUIALLOWED THEN
          MESSAGE('Process finished.');
      END;
      //E/P1010
    END;

    PROCEDURE Triggered_CreditCardCapture@1000000072(OrderNoV@1000000001 : Code[20];CaptureAmountV@1000000005 : Decimal;CaptureIDNoV@1000000009 : Code[20];CaptureEntryNoV@1000000006 : Integer) : Integer;
    VAR
      SalesHeaderL@1000000008 : Record 36;
      SIIMessageL@1000000002 : Record 50141;
      SIIFillLogL@1000000003 : Codeunit 50123;
      TriggerTextL@1000000000 : Text[50];
      OriginTableNoL@1000000007 : Integer;
      RecRefL@1000000004 : RecordRef;
    BEGIN
      //H1515  22.09.14  MBY  +++++++++++++++++++++++++
      CLEAR(SIIFillLogL);
      SIISetup_glob.GET;
      IF SalesHeaderL.GET(1,OrderNoV) THEN BEGIN
        IF SIISetup_glob."Tr. Credit Card Capture Active" THEN BEGIN
          IF SIISetup_glob."Credit Card Capture NAV" <> '' THEN BEGIN
            IF Triggered_GetMessage(SIIMessageL,SalesHeaderL."Website No.",13) THEN BEGIN
              IF SIIMessageL.FINDFIRST THEN BEGIN
                SIIFillLogL.GetMsgTypeGlob(SIIMessageL);
                //IF IsSalesHeaderInMessageFilter(SalesHeaderL, SIIMessageL) OR ManuallyTriggered_glob THEN BEGIN
                  IF ActiveActions(SIIMessageL) THEN BEGIN
                    Triggered_ClearFilterFieldsMsg(
                      SIIMessageL,
                      SalesHeaderL."No.",
                      FALSE);

                    SIIFillLogL.SetTriggeredParameters(
                      TRUE,
                      RecRefL,
                      TriggerTextL,
                      36,
                      SalesHeaderL."Document Type",
                      SalesHeaderL."No.",
                      0,
                      36,
                      0,
                      CaptureIDNoV,
                      0,
                      FALSE,
                      ManuallyTriggered_glob);

                    SIIFillLogL.SetCreditCardCaptureValues(CaptureAmountV,CaptureEntryNoV);

                    SIIFillLogL.InitOnRunTrigger(SIIMessageL);
                    SIIFillLogL.RUN;
                  END;
                //END;
              END;
            END;
          END;
        END;
      END;
      //H1515  22.09.14  MBY  -------------------------
    END;

    PROCEDURE SetCreditCardCaptureValues@1000000074(CaptureAmountV@1000000000 : Decimal;CaptureEntryNoV@1000000001 : Integer);
    BEGIN
      //H1515  17.10.14  MBY  +++++++++++++++++++++++++
      CaptureAmount_glob := CaptureAmountV;
      CaptureEntryNo_glob := CaptureEntryNoV;
      //H1515  17.10.14  MBY  -------------------------
    END;

    PROCEDURE Triggered_CancelAborted@1000000069(SalesLineV@1000000001 : Record 37);
    VAR
      SIIMessageL@1000000000 : Record 50141;
      SalesHeaderL@1000000002 : Record 36;
      SIIFillLogL@1000000003 : Codeunit 50123;
      RecRefSalesLineL@1000000004 : RecordRef;
      FieldRefL@1000000006 : FieldRef;
      TriggerTextL@1000000005 : Text[50];
    BEGIN
      //T0022 13.11.14 DMA ++++++++++++++++++++++++++++++++++++++
      SIISetup_glob.GET;
      SIISetup_glob.CALCFIELDS(SIISetup_glob."Order Item Cancel Abort Shop");
      SIIMessageL.RESET;

      TriggerTextL := 'Trigger_T37_CancelationAborted';

      IF SIISetup_glob."Tr. Cancel Aborted Active" THEN BEGIN
        IF SalesHeaderL.GET(SalesLineV."Document Type",SalesLineV."Document No.") THEN BEGIN
          IF (SIISetup_glob."Order Item Cancel Abort NAV" <> '') AND
             (SIISetup_glob."Order Item Cancel Abort Shop" <> '') THEN BEGIN


            SIIMessageL.RESET;
            SIIMessageL.SETRANGE("Website No.", SalesHeaderL."Website No.");
            SIIMessageL.SETRANGE("Message Code NAV", SIISetup_glob."Order Item Cancel Abort NAV");
            SIIMessageL.SETRANGE("Message Code Shop", SIISetup_glob."Order Item Cancel Abort Shop");
            SIIMessageL.SETFILTER(Mode, '<>%1', SIIMessageL.Mode::Inactive);
            IF SIIMessageL.FINDSET THEN BEGIN
              SIIFillLogL.GetMsgTypeGlob(SIIMessageL);
              REPEAT
                IF ActiveActions(SIIMessageL) THEN BEGIN
                  Triggered_ClearFilterFieldsMsg(
                    SIIMessageL,
                    SalesHeaderL."No.",
                    FALSE);


                RecRefSalesLineL.GETTABLE(SalesLineV);
                FieldRefL := RecRefSalesLineL.FIELD(1);
                FieldRefL.SETRANGE(SalesLineV."Document Type"::Order);
                FieldRefL := RecRefSalesLineL.FIELD(3);
                FieldRefL.SETRANGE(SalesLineV."Document No.");
                FieldRefL := RecRefSalesLineL.FIELD(4);
                FieldRefL.SETRANGE(SalesLineV."Line No.");

                BEGIN
                  CLEAR(SIIFillLogL); // avoid error with predefined global vars in codeunit-instance

                  SIIFillLogL.SetTriggeredParameters(
                    TRUE,                         // = Is triggered
                    RecRefSalesLineL,             // = Sales Line record reference
                    TriggerTextL,                 // = Trigger text
                    36,                           // = Attached to table
                    SalesHeaderL."Document Type", // = Attached document type
                    SalesHeaderL."No.",           // = Attached document no.
                    SalesLineV."Line No.",        // = Attached line no.
                    36,                           // = process table no
                    SalesHeaderL."Document Type", // = process document type
                    SalesHeaderL."No.",           // = process document no.
                    SalesLineV."Line No.",        // = process line no.
                    FALSE,                        // = multiple lines
                    ManuallyTriggered_glob);      // = manually triggered

                  SIIFillLogL.InitOnRunTrigger(SIIMessageL);
                  SIIFillLogL.RUN;
                END;


                END;
              UNTIL SIIMessageL.NEXT = 0;
            END;
          END;
        END;
      END;
      //T0022 13.11.14 DMA --------------------------------------
    END;

    BEGIN
    {
      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |     Cooperation GOB & Home24 NAV Team      |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      P0879       26.03.13  gob-rste  Object Created
      P0923       21.05.13  gob-rste  Code cleaned, CorrectionEntry, Save Last Entry No SII Message
      P0926       21.05.13  gob-mlan  Fix Handling Msg. Test Mode
      P0923       23.05.13  gob-rste  Channel 8/13 Shipment Delayed Opposite Shipment Delivered
                  28.05.13  gob-mlan  Filter on SO (Archive) "SII Status"
      H0367       30.05.13  ABR       Send CURRENTDATETIME if no ADD available
      P0936       03.06.13  gob-rste  Shipment Delayed -> Shipment Date, New Msg. Shipmentment Delayed
      P0933       06.06.13  gob-rste  If Shipping Agent = '' Don't Create Entry, Create Entry With Error
      P0954       11.06.13  gob-rste  GetActionValues Round Datetime to Full Minutes, Delivery Finished 0T
      P0979       19.06.13  gob-rste  Create Correction Entries
      P0982       19.06.13  gob-rste  Fill Table for Update Field Values
      P0984       20.06.13  gob-rste  Fill Line No. in Testmode
      P0986       21.06.13  gob-rste  Fix Group Log Actions
      P0992       25.06.13  gob-rste  SETCURRENTKEY Group Log Actions
      P0995       26.06.13  gob-rste  DateCheck Changes Fill Log
      H0431       28.06.13  ABR       Get correct last message
      P1007       04.07.13  gob-rste  Group Mail Actions
      P1010       08.07.13  gob-mlan  Phase 2: Triggered Messages
      P1012       08.07.13  gob-rste  Fill Priority, Don't Proceed Messages with smaller Priority
      P1013       09.07.13  gob-rste  Extended DHL Tracking Mail Action
      P1019       09.07.13  gob-rste  Fill Action for in Testmode
      P1020       09.07.13  gob-rste  Group Multiple Update Actions
      P1022       09.07.13  gob-rste  Dont Send Mail if First Scan <> ''
      P1055       30.07.13  gob-mlan  Phase 2: Triggered Messages
      P1058       05.08.13  gob-mlan  Phase 2: JQ-Msg. "Return Item Not Received"
      P1071       13.08.13  gob-rste  New SETCURRENTKEYs for better Performance
      P1073       13.08.13  gob-rste  Only Create Mail Entry if Datetime Status = Delayed
      P1074       13.08.13  gob-rste  Create Extended Mail only if Update Action
      P1087       27.08.13  gob-mlan  - Optimization (Keys)
                                      - Adjustment Refund Msg.
      P1120       07.10.13  gob-mlan  Fix Handle Change.Pick FollowUp-Orders (SO)
      P1133       06.11.13  gob-mlan  Redesign of "DHL Parcel Status History"
      P1161       04.12.13  gob-mlan  Fix WebService-Problem FieldRef Option Values
      P1232       04.04.14  gob-mlan  Handle Last (DHL) Parcel Status History No.
      P1227       09.04.14  gob-rste  Block Shipment Confirmation E-Mail for slected Shipping Agents


      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |     Cooperation Tectura & Home24 NAV Team  |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      T0002       28.05.14  tec-sf    Optimized FIND-calls, Changed COMMITs
      T0003       10.06.14  tec-sf    Extended Triggered_GetMessage(...)
                                      New Function: Triggered_ReturnLabel
      T0003-01    27.08.14  tec-cs    disabled workaround for "mutliple lines" otherwise, "Item ID" has invalid value (0))
                                      I think, this workaround is not neccessary
      T0009       02.07.14  tec-sf    New Functions:
                                      Triggered_CreditMemo()
                                      Triggered_CreditMemoIfProceed()
      T0009       12.08.14  tec-sf    Fixed a wrong GET
      T0003       02.09.14  tec-sf    Changed "Triggered_Change" to multiple line-call
      T0003       04.09.14  tec-sf    Changed "Triggered_Return" to multiple line-call
      H1472       27.10.14  tec-cs    corrections/extensions

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date     Shortcut  Description
      _____________________________________________

      H0519       26.08.13 ARI       Allow additional Shipping Agents
      H0532       27.08.13 ABR       Update Sales Line with Shipping Delay Information
      H0573       26.09.13 ARI       Add PrimaryKey Fields before Transferfields(,false)

      H0651       06.12.13 MBY       New functions to send invoice document
      H0822       22.01.14 MBY       Don't filter manually triggered messages
      H0907       06.03.14 MBY       Don't COMMIT for triggered messages

      H1207       03.06.14 EHN       Wrong Check for Delivery Delay Mail - Delivery Delay Email only to be sent within (min,max) period
      H1205       12.06.14 MSL       Bug: Invoices not sent
      H1620       08.10.14 MBY       Bug: SII - ORDERITEMINVOICE fails for all multi-line Orders
      H1515       20.10.14 MBY       Credit Card Capturing SII part
      H1783       19.11.14 MIK       SII Redesign for the Return&Change messages (Label&Instruction)
      T0022       13.11.14 DMA       FTTC 3 - Phase 5 - Stornoprozess - Storno Tracking
      H2058       09.02.14 MIK       Bug: SII: Committed Entries are not being moved to SII Log Archived
      H2151       17.02.15 MBY       Hotfix: SII Filllog job generates wrong random entries
      H2173       19.02.15 MIK       Bug: Committed Entries are not being moved to SII Log Archived - Follow up H2058
    }
    END.
  }
}

