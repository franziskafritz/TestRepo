OBJECT Codeunit 50207 Library - Finance
{
  OBJECT-PROPERTIES
  {
    Date=02.09.13;
    Time=14:59:54;
    Version List=HME0513;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1102601000 : Codeunit 50200;
      LibraryUtility@1000 : Codeunit 50206;

    PROCEDURE CreateCurrency@8(VAR Currency@1000 : Record 4);
    BEGIN
      Currency.INIT;
      Currency.VALIDATE(Code,LibraryUtility.GenerateRandomCode(Currency.FIELDNO(Code),DATABASE::Currency));
      Currency.INSERT(TRUE);
    END;

    PROCEDURE CreateExchRate@16(VAR CurrencyExchangeRate@1002 : Record 330;CurrencyCode@1001 : Code[10];StartingDate@1000 : Date);
    BEGIN
      CurrencyExchangeRate.INIT;
      CurrencyExchangeRate.VALIDATE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.VALIDATE("Starting Date",StartingDate);
      CurrencyExchangeRate.INSERT(TRUE);
    END;

    PROCEDURE CreateRandomExchangeRate@25(CurrencyCode@1001 : Code[10]);
    VAR
      CurrencyExchangeRate@1000 : Record 330;
      GLEntry@1003 : Record 17;
    BEGIN
      GLEntry.FINDFIRST;
      CurrencyExchangeRate.INIT;
      CurrencyExchangeRate.VALIDATE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.VALIDATE("Starting Date",NORMALDATE(GLEntry."Posting Date"));
      CurrencyExchangeRate.INSERT(TRUE);

      // Using RANDOM Exchange Rate Amount and Adjustment Exchange Rate, between 100 and 400 (Standard Value).
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",100 * RANDOM(4));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");

      // Relational Exch. Rate Amount and Relational Adjmt Exch Rate Amt always greater than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",2 * CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    PROCEDURE CreateInvDiscForCustomer@17(VAR CustInvoiceDisc@1000 : Record 19;Code@1001 : Code[20];CurrencyCode@1003 : Code[10];MinimumAmount@1004 : Decimal);
    BEGIN
      CustInvoiceDisc.INIT;
      CustInvoiceDisc.VALIDATE(Code,Code);
      CustInvoiceDisc.VALIDATE("Currency Code",CurrencyCode);
      CustInvoiceDisc.VALIDATE("Minimum Amount",MinimumAmount);
      CustInvoiceDisc.INSERT(TRUE);
    END;

    PROCEDURE CreateInvDiscForVendor@9(VAR VendorInvoiceDisc@1000 : Record 24;Code@1001 : Code[20];CurrencyCode@1003 : Code[10];MinimumAmount@1004 : Decimal);
    BEGIN
      VendorInvoiceDisc.INIT;
      VendorInvoiceDisc.VALIDATE(Code,Code);
      VendorInvoiceDisc.VALIDATE("Currency Code",CurrencyCode);
      VendorInvoiceDisc.VALIDATE("Minimum Amount",MinimumAmount);
      VendorInvoiceDisc.INSERT(TRUE);
    END;

    PROCEDURE CreateLineDiscForCustomer@23(VAR SalesLineDiscount@1001 : Record 7004;Type@1000 : Option;Code@1002 : Code[20];SalesType@1003 : Option;SalesCode@1004 : Code[20];StartingDate@1005 : Date;CurrencyCode@1006 : Code[10];VariantCode@1007 : Code[10];UnitOfMeasureCode@1008 : Code[10];MinimumQuantity@1009 : Decimal);
    BEGIN
      SalesLineDiscount.INIT;
      SalesLineDiscount.VALIDATE(Type,Type);
      SalesLineDiscount.VALIDATE(Code,Code);
      SalesLineDiscount.VALIDATE("Sales Type",SalesType);
      SalesLineDiscount.VALIDATE("Sales Code",SalesCode);
      SalesLineDiscount.VALIDATE("Starting Date",StartingDate);
      SalesLineDiscount.VALIDATE("Currency Code",CurrencyCode);
      SalesLineDiscount.VALIDATE("Variant Code",VariantCode);
      SalesLineDiscount.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      SalesLineDiscount.VALIDATE("Minimum Quantity",MinimumQuantity);
      SalesLineDiscount.INSERT(TRUE);
    END;

    PROCEDURE CreateLineDiscForVendor@29(VAR PurchaseLineDiscount@1000 : Record 7014;ItemNo@1001 : Code[20];VendorNo@1002 : Code[20];StartingDate@1003 : Date;CurrencyCode@1004 : Code[10];VariantCode@1005 : Code[10];UnitofMeasureCode@1006 : Code[10];MinimumQuantity@1007 : Decimal);
    BEGIN
      PurchaseLineDiscount.INIT;
      PurchaseLineDiscount.VALIDATE("Item No.",ItemNo);
      PurchaseLineDiscount.VALIDATE("Vendor No.",VendorNo);
      PurchaseLineDiscount.VALIDATE("Starting Date",StartingDate);
      PurchaseLineDiscount.VALIDATE("Currency Code",CurrencyCode);
      PurchaseLineDiscount.VALIDATE("Variant Code",VariantCode);
      PurchaseLineDiscount.VALIDATE("Unit of Measure Code",UnitofMeasureCode);
      PurchaseLineDiscount.VALIDATE("Minimum Quantity",MinimumQuantity);
      PurchaseLineDiscount.INSERT(TRUE);
    END;

    PROCEDURE CreateVATPostingSetup@1102601001(VATBusinessPostingGroupCode@1102601000 : Code[10];VATProductPostingGroupCode@1102601001 : Code[10]);
    VAR
      VATPostingSetup@1102601002 : Record 325;
      GLAccount@1102601003 : Record 15;
    BEGIN
      IF VATPostingSetup.GET(VATBusinessPostingGroupCode,VATProductPostingGroupCode) THEN
        EXIT;

      VATPostingSetup.INIT;
      VATPostingSetup.VALIDATE("VAT Bus. Posting Group",VATBusinessPostingGroupCode);
      VATPostingSetup.VALIDATE("VAT Prod. Posting Group",VATProductPostingGroupCode);
      VATPostingSetup.INSERT(TRUE);

      WITH GLAccount DO BEGIN
        SETRANGE("Account Type","Account Type"::Posting);
        SETRANGE("Direct Posting",TRUE);
        SETRANGE(Blocked,FALSE);
        Assert.IsTrue(COUNT >= 6,'# G/L Accounts for VAT posting setup.');
        InitGLAccountDrawing(GLAccount);
        VATPostingSetup.VALIDATE("Sales VAT Account",DrawNextGLAccount(GLAccount));
        VATPostingSetup.VALIDATE("Sales VAT Unreal. Account",DrawNextGLAccount(GLAccount));
        VATPostingSetup.VALIDATE("Purchase VAT Account",DrawNextGLAccount(GLAccount));
        VATPostingSetup.VALIDATE("Purch. VAT Unreal. Account",DrawNextGLAccount(GLAccount));
        VATPostingSetup.VALIDATE("Reverse Chrg. VAT Acc.",DrawNextGLAccount(GLAccount));
        VATPostingSetup.VALIDATE("Reverse Chrg. VAT Unreal. Acc.",DrawNextGLAccount(GLAccount))
      END;
      VATPostingSetup.VALIDATE("VAT %",RANDOM(25));
      VATPostingSetup.VALIDATE("VAT Identifier",FORMAT(VATPostingSetup."VAT %"));
      VATPostingSetup.MODIFY(TRUE)
    END;

    PROCEDURE FindGeneralPostingSetup@1102601003(VAR GeneralPostingSetup@1102601000 : Record 252);
    BEGIN
      GeneralPostingSetup.SETFILTER("Gen. Bus. Posting Group",'<>%1','');
      GeneralPostingSetup.SETFILTER("Gen. Prod. Posting Group",'<>%1','');
      GeneralPostingSetup.NEXT(RANDOM(GeneralPostingSetup.COUNT))
    END;

    PROCEDURE FindVATPostingSetup@1102601002(VAR VATPostingSetup@1102601000 : Record 325);
    BEGIN
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>%1','');
      VATPostingSetup.SETFILTER("VAT Prod. Posting Group",'<>%1','');
      VATPostingSetup.NEXT(RANDOM(VATPostingSetup.COUNT))
    END;

    PROCEDURE InitializeVATPostingSetup@1102601000();
    VAR
      VATProductPostingGroup@1102601000 : Record 324;
      VATBusinessPostingGroup@1102601001 : Record 323;
      VATPostingSetup@1102601002 : Record 325;
    BEGIN
      VATPostingSetup.DELETEALL;

      VATBusinessPostingGroup.FINDSET;
      REPEAT
        VATProductPostingGroup.FINDSET;
        REPEAT
          CreateVATPostingSetup(VATBusinessPostingGroup.Code,VATProductPostingGroup.Code)
        UNTIL VATProductPostingGroup.NEXT = 0;
        CreateVATPostingSetup(VATBusinessPostingGroup.Code,'')
      UNTIL VATBusinessPostingGroup.NEXT = 0;

      VATProductPostingGroup.FINDSET;
      REPEAT
        CreateVATPostingSetup('',VATProductPostingGroup.Code)
      UNTIL VATProductPostingGroup.NEXT = 0;

      CreateVATPostingSetup('','')
    END;

    LOCAL PROCEDURE DrawNextGLAccount@1102601004(VAR GLAccount@1102601000 : Record 15) : Code[20];
    BEGIN
      GLAccount.FINDFIRST;
      GLAccount.MARK(FALSE);

      EXIT(GLAccount."No.")
    END;

    LOCAL PROCEDURE InitGLAccountDrawing@1102601005(VAR GLAccount@1102601000 : Record 15);
    BEGIN
      GLAccount.FINDSET;
      REPEAT
        GLAccount.MARK(TRUE)
      UNTIL GLAccount.NEXT = 0;
      GLAccount.MARKEDONLY(TRUE)
    END;

    PROCEDURE CreateGeneralPostingSetup@1102601007(GenBusPostingGroupCode@1102601000 : Code[10];GenProdPostingGroupCode@1102601001 : Code[10]);
    VAR
      GeneralPostingSetup@1102601002 : Record 252;
      GLAccount@1102601003 : Record 15;
    BEGIN
      IF GeneralPostingSetup.GET(GenBusPostingGroupCode,GenProdPostingGroupCode) THEN
        EXIT;

      GeneralPostingSetup.INIT;
      GeneralPostingSetup.VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroupCode);
      GeneralPostingSetup.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupCode);
      GeneralPostingSetup.INSERT(TRUE);

      WITH GLAccount DO BEGIN
        SETRANGE("Account Type","Account Type"::Posting);
        SETRANGE("Direct Posting",TRUE);
        SETRANGE(Blocked,FALSE);
        Assert.IsTrue(COUNT >= 15,'# G/L Accounts for general posting setup.');
        InitGLAccountDrawing(GLAccount);
        GeneralPostingSetup.VALIDATE("Sales Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Sales Line Disc. Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Sales Inv. Disc. Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Sales Credit Memo Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Purch. Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Purch. Line Disc. Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Purch. Inv. Disc. Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Purch. Credit Memo Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("COGS Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Inventory Adjmt. Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Invt. Accrual Acc. (Interim)",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("COGS Account (Interim)",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Direct Cost Applied Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Overhead Applied Account",DrawNextGLAccount(GLAccount));
        GeneralPostingSetup.VALIDATE("Purchase Variance Account",DrawNextGLAccount(GLAccount));
      END;
      GeneralPostingSetup.MODIFY(TRUE)
    END;

    PROCEDURE InitializeGeneralPostingSetup@1102601006();
    VAR
      GenProductPostingGroup@1102601000 : Record 251;
      GenBusinessPostingGroup@1102601001 : Record 250;
      GeneralPostingSetup@1102601002 : Record 252;
    BEGIN
      GeneralPostingSetup.DELETEALL;

      GenBusinessPostingGroup.FINDSET;
      REPEAT
        GenProductPostingGroup.FINDSET;
        REPEAT
          CreateGeneralPostingSetup(GenBusinessPostingGroup.Code,GenProductPostingGroup.Code)
        UNTIL GenProductPostingGroup.NEXT = 0;
        CreateGeneralPostingSetup(GenBusinessPostingGroup.Code,'')
      UNTIL GenBusinessPostingGroup.NEXT = 0;

      GenProductPostingGroup.FINDSET;
      REPEAT
        CreateGeneralPostingSetup('',GenProductPostingGroup.Code)
      UNTIL GenProductPostingGroup.NEXT = 0;

      CreateGeneralPostingSetup('','')
    END;

    BEGIN
    {
      All utility functions related to ERM.
    }
    END.
  }
}

