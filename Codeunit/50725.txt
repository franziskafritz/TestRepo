OBJECT Codeunit 50725 Unit Test - MS Basic
{
  OBJECT-PROPERTIES
  {
    Date=10.04.15;
    Time=12:00:00;
    Modified=Yes;
    Version List=HME1980;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000000000 : Codeunit 50200;
      TextHME001@1000000004 : TextConst 'ENU=Positive Test Failed!';
      TextHME002@1000000005 : TextConst 'ENU=Negative Test Failed!';
      TextHME003@1000000007 : TextConst 'ENU=Should not be empty!';
      TextHME004@1000000008 : TextConst 'ENU=Should be empty!';
      TextAssertAreEqual@1000000001 : TextConst 'ENU=%1 should be equal to %2!';
      TextAssertAreNotEqual@1000000006 : TextConst 'ENU=%1 should not be equal to %2!';
      UNITTEST@1000000002 : TextConst 'ENU=UNITTEST';
      STK@1000000003 : TextConst 'ENU=STK';
      LibraryUtility@1000000009 : Codeunit 50206;

    [Test]
    PROCEDURE Template@1000000001();
    BEGIN
      //Initalize and Prepare

      //Run Code

      //Check Results

      //Delete
    END;

    [Test]
    PROCEDURE T27_BaseUnitofMeasure_OnV@1000000000();
    VAR
      GLSetupL@1000000005 : Record 98;
      ItemL@1000000000 : Record 27;
      UnitofMeasureL@1000000006 : Record 204;
      ItemUnitOfMeasureL@1000000001 : Record 5404;
      DimensionValueL@1000000004 : Record 349;
      DefaultDimensionL@1000000003 : Record 352;
      LibraryUtilityL@1000000002 : Codeunit 50206;
    BEGIN
      //H1621  07.10.14  ABR  +++++++++++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      ItemL.INIT;
      ItemL.VALIDATE(
        "No.",
        LibraryUtilityL.GenerateRandomCode(
          ItemL.FIELDNO("No."),
          DATABASE::Item));
      ItemL.INSERT(TRUE);

      UnitofMeasureL.INIT;
      UnitofMeasureL.VALIDATE(
        Code,
        LibraryUtilityL.GenerateRandomCode(
          UnitofMeasureL.FIELDNO(Code),
          DATABASE::"Unit of Measure"));
      UnitofMeasureL.INSERT(TRUE);

      ItemUnitOfMeasureL.INIT;
      ItemUnitOfMeasureL.VALIDATE("Item No.",ItemL."No.");
      ItemUnitOfMeasureL.VALIDATE(Code,UnitofMeasureL.Code);
      ItemUnitOfMeasureL.VALIDATE("Qty. per Unit of Measure",1);
      ItemUnitOfMeasureL.INSERT(TRUE);

      //Run Code
      ItemL.VALIDATE("Base Unit of Measure",ItemUnitOfMeasureL.Code);

      //Check Results
      Assert.AreEqual(
        ItemL."Base Unit of Measure",
        ItemL."Sales Unit of Measure",
        STRSUBSTNO(
          TextAssertAreEqual,
          ItemL.FIELDCAPTION("Sales Unit of Measure"),
          ItemL.FIELDCAPTION("Base Unit of Measure")));

      Assert.AreEqual(
        ItemL."Base Unit of Measure",
        ItemL."Sales Unit of Measure",
        STRSUBSTNO(
          TextAssertAreEqual,
          ItemL.FIELDCAPTION("Purch. Unit of Measure"),
          ItemL.FIELDCAPTION("Base Unit of Measure")));

      //Clean
      GLSetupL.GET;
      DimensionValueL.SETRANGE("Dimension Code",GLSetupL."Global Dimension 2 Code");
      DimensionValueL.SETRANGE(Code,ItemL."No.");
      IF DimensionValueL.FINDFIRST THEN
        DimensionValueL.DELETE;

      DefaultDimensionL.SETRANGE("Table ID",DATABASE::Item);
      DefaultDimensionL.SETRANGE("No.",ItemL."No.");
      IF DefaultDimensionL.FINDFIRST THEN
        DefaultDimensionL.DELETE;

      ItemL.DELETE(TRUE);
      UnitofMeasureL.DELETE(TRUE);
      //H1621  07.10.14  ABR  -----------------------------------------------
    END;

    [Test]
    PROCEDURE T27_VendorItemNo_OnV@1000000004();
    VAR
      ItemL@1000000000 : Record 27;
      LibraryUtilityL@1000000001 : Codeunit 50206;
    BEGIN
      //Initalize and Prepare
      ItemL.INIT;
      ItemL.VALIDATE(
        "No.",
        LibraryUtilityL.GenerateRandomCode(
          ItemL.FIELDNO("No."),
          DATABASE::Item));
      ItemL.INSERT(TRUE);

      //Run Code
      //Test before Vendor creation
      ItemL.VALIDATE("Vendor Item No.",'12345-Test');

      //Check Results
      Assert.AreEqual(
        '12345-Test',
        ItemL."Vendor Item No.",
        STRSUBSTNO(
          TextAssertAreEqual,
          '12345-Test',
          ItemL.FIELDCAPTION(ItemL."Vendor Item No.")));

      //Delete
      ItemL.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE T27_InitDimValue@1000000002();
    VAR
      ItemL@1000000002 : Record 27;
      DimensionValueL@1000000001 : Record 349;
      DefaultDimL@1000000000 : Record 352;
      GLSetupL@1000000003 : Record 98;
      LibraryUtilityL@1000000004 : Codeunit 50206;
    BEGIN
      //Initalize and Prepare
      GLSetupL.GET();
      ItemL.INIT;
      ItemL.VALIDATE(
        "No.",
        LibraryUtilityL.GenerateRandomCode(
          ItemL.FIELDNO("No."),
          DATABASE::Item));

      //Run Code
      ItemL.INSERT(TRUE);

      //Check Results
      DimensionValueL.GET(GLSetupL."Global Dimension 2 Code",ItemL."No.");
      DefaultDimL.GET(DATABASE::Item,ItemL."No.",GLSetupL."Global Dimension 2 Code");

      Assert.AreEqual(ItemL."Global Dimension 2 Code",ItemL."No.",STRSUBSTNO(TextAssertAreEqual,
       ItemL.FIELDCAPTION(ItemL."Global Dimension 2 Code"),
        ItemL.FIELDCAPTION(ItemL."No.")));

      //Delete
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE T36_CreateReturnOrderKAD@1000000003();
    VAR
      CountryRegionL@1000000010 : Record 9;
      SalesOrderHeaderL@1000000002 : Record 36;
      SalesReturnHeaderL@1000000007 : Record 36;
      RHDSetupL@1000000009 : Record 50177;
      RHDSalesExportHeaderL@1000000008 : Record 50181;
      LibrarySalesL@1000000001 : Codeunit 50701;
      LibrarySCML@1000000000 : Codeunit 50210;
    BEGIN
      //H1754  03.11.14  ABR  +++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      LibrarySCML.CreateSalesOrder(SalesOrderHeaderL);
      LibrarySCML.CreateReturnOrderRetTypeReturn(SalesOrderHeaderL,SalesReturnHeaderL);
      LibrarySalesL.CreateCountryRegion(CountryRegionL);

      CountryRegionL.VALIDATE("Return KAD Creation Active",TRUE);
      CountryRegionL.MODIFY(TRUE);
      SalesOrderHeaderL.FIND;
      SalesOrderHeaderL.VALIDATE("Sell-to Country/Region Code",CountryRegionL.Code);
      SalesOrderHeaderL.MODIFY;

      //Run Code
      SalesReturnHeaderL.CreateReturnOrderKAD();

      //Check Results
      RHDSetupL.GET;
      RHDSalesExportHeaderL.RESET;
      RHDSalesExportHeaderL.SETRANGE("Document Type", RHDSalesExportHeaderL."Document Type"::"Return Order");
      RHDSalesExportHeaderL.SETRANGE("Document No.", SalesReturnHeaderL."No.");

      Assert.IsTrue(RHDSalesExportHeaderL.FINDFIRST,TextHME001);
      //H1754  03.11.14  ABR  ---------------------------------------
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE T36_CheckReturnKADAllowed@1000000005();
    VAR
      CountryRegionL@1000000006 : Record 9;
      SalesOrderHeaderL@1000000005 : Record 36;
      SalesReturnHeaderL@1000000004 : Record 36;
      RHDSetupL@1000000003 : Record 50177;
      RHDSalesExportHeaderL@1000000002 : Record 50181;
      LibrarySalesL@1000000001 : Codeunit 50701;
      LibrarySCML@1000000000 : Codeunit 50210;
    BEGIN
      //H1754  03.11.14  ABR  +++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      LibrarySCML.CreateSalesOrder(SalesOrderHeaderL);
      LibrarySCML.CreateReturnOrderRetTypeReturn(SalesOrderHeaderL,SalesReturnHeaderL);
      LibrarySalesL.CreateCountryRegion(CountryRegionL);

      CountryRegionL.VALIDATE("Return KAD Creation Active",TRUE);
      CountryRegionL.MODIFY(TRUE);
      SalesOrderHeaderL.FIND;
      SalesOrderHeaderL.VALIDATE("Sell-to Country/Region Code",CountryRegionL.Code);
      SalesOrderHeaderL.MODIFY;

      //Run Code
      SalesReturnHeaderL.CheckReturnKADAllowed();

      //Check Results
      Assert.IsTrue(TRUE,TextHME001);
      //H1754  03.11.14  ABR  ---------------------------------------
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE T36_CheckReturnOrderLocation@1000000007();
    VAR
      SalesOrderHeaderL@1000000002 : Record 36;
      SalesReturnHeaderL@1000000007 : Record 36;
      SalesSetupL@1000000003 : Record 311;
      LibrarySalesL@1000000001 : Codeunit 50701;
      LibrarySCML@1000000000 : Codeunit 50210;
    BEGIN
      //H1200  02.12.14  EHN  +++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      LibrarySCML.CreateSalesOrder(SalesOrderHeaderL);
      LibrarySCML.CreateReturnOrderRetTypeReturn(SalesOrderHeaderL,SalesReturnHeaderL);

      //Run Code
      LibrarySalesL.CheckReleaseSalesOrder(SalesReturnHeaderL);

      //Check Results
      SalesSetupL.GET;
      IF SalesSetupL."Use Only Def. Location For SR" THEN
        Assert.AreEqual(SalesSetupL."Default Sales Return Location",SalesReturnHeaderL."Location Code",TextHME001);
      //H1200  02.12.14  EHN  ---------------------------------------
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE T36_PostReturnOrderReceipt@1000000010();
    VAR
      SalesOrderHeaderL@1000000002 : Record 36;
      SalesReturnHeaderL@1000000007 : Record 36;
      TransferLineL@1000000004 : Record 5741;
      SalesSetupL@1000000003 : Record 311;
      PaymentMethodL@1000000006 : Record 289;
      LibrarySalesL@1000000001 : Codeunit 50701;
      LibrarySCML@1000000000 : Codeunit 50210;
      SalesReturnOrderNo@1000000005 : Code[10];
    BEGIN
      //H1200  02.12.14  EHN  +++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      LibrarySCML.CreateSalesOrder(SalesOrderHeaderL);
      LibrarySCML.CreateReturnOrderRetTypeReturn(SalesOrderHeaderL,SalesReturnHeaderL);
      PaymentMethodL.RESET;
      PaymentMethodL.SETRANGE("Refund Recipient",PaymentMethodL."Refund Recipient"::Customer);
      PaymentMethodL.SETRANGE("Cash in advance",TRUE);
      PaymentMethodL.FINDFIRST;
      SalesReturnHeaderL.VALIDATE("Payment Method Code",PaymentMethodL.Code);
      SalesReturnHeaderL.MODIFY(TRUE);

      //Run Code
      LibrarySalesL.CheckReleaseSalesOrder(SalesReturnHeaderL);
      SalesReturnOrderNo := SalesReturnHeaderL."No.";
      LibrarySalesL.PostSalesReturnDocument(SalesOrderHeaderL."No.");

      //Check Results
      TransferLineL.RESET;
      TransferLineL.SETRANGE("Linked Sales Doc. Type",TransferLineL."Linked Sales Doc. Type"::"Return Order");
      TransferLineL.SETRANGE("Linked Sales Doc. No.",SalesReturnOrderNo);
      TransferLineL.SETFILTER("Linked Sales Line No.",'<>%1',0);
      Assert.IsFalse(TransferLineL.ISEMPTY,TextHME001);
      //H1200  02.12.14  EHN  ---------------------------------------
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1000000006(Msg@1000000000 : Text[1024]);
    BEGIN
    END;

    PROCEDURE T37_GetNextLineNo_LastLine@1000000020();
    VAR
      SalesLineL@1000000000 : Record 37;
      NextLineNoL@1000000004 : Integer;
    BEGIN
      //H1511 12.11.14 ARI +++++++++++++++++++++++++

      //Initalize and Prepare
      CreateSalesLine(SalesLineL,'TEST_0000001',10000);

      //Run Code
      NextLineNoL := SalesLineL.GetLineNo(SalesLineL);

      //Check Results
      Assert.AreEqual(20000,NextLineNoL,TextHME001);

      //Delete
      SalesLineL.DELETE;

      //H1511 12.11.14 ARI -------------------------
    END;

    [Test]
    PROCEDURE T37_GetNextLineNo_Inbetween@1000000021();
    VAR
      SalesLineL@1000000000 : Record 37;
      SalesLine2L@1000000003 : Record 37;
      LineNoL@1000000001 : Integer;
      CurrentLineNoL@1000000002 : Integer;
      NextLineNoL@1000000004 : Integer;
      LineNoGapL@1000000005 : Integer;
      MaxLineNoL@1000000006 : Integer;
    BEGIN
      //H1511 12.11.14 ARI +++++++++++++++++++++++++

      //Initalize and Prepare
      MaxLineNoL := (RANDOM(10) + 1) * 10000;
      CreateSalesLine(SalesLineL,'TEST_0000001',MaxLineNoL);

      CurrentLineNoL := RANDOM(MaxLineNoL / 10000 - 1) * 10000; // should be in between
      SalesLine2L.GET(SalesLineL."Document Type",SalesLineL."Document No.",CurrentLineNoL);

      //Run Code
      NextLineNoL := SalesLineL.GetLineNo(SalesLine2L);

      //Check Results
      SalesLineL.SETRANGE("Document Type",SalesLine2L."Document Type");
      SalesLineL.SETRANGE("Document No.",SalesLine2L."Document No.");
      SalesLineL.SETFILTER("Line No.",'>%1',SalesLine2L."Line No.");
      SalesLineL.FINDFIRST;
      LineNoGapL := SalesLineL."Line No." - SalesLine2L."Line No.";
      Assert.AreEqual(LineNoGapL / 2 + CurrentLineNoL,NextLineNoL,TextHME001);

      //Delete
      SalesLineL.RESET;
      SalesLineL.SETRANGE("Document No.",SalesLineL."Document No.");
      IF SalesLineL.FINDSET(TRUE,TRUE) THEN
        SalesLineL.DELETEALL;

      //H1511 12.11.14 ARI -------------------------
    END;

    LOCAL PROCEDURE CreateSalesLine@1000000022(VAR SalesLine@1000000001 : Record 37;DocNo@1000000002 : Code[20];MaxLineNo@1000000000 : Integer);
    VAR
      LineNoL@1000000003 : Integer;
    BEGIN
      //H1511 12.11.14 ARI +++++++++++++++++++++++++
      REPEAT
        LineNoL += 10000;
        SalesLine.INIT;
        SalesLine."Document No." := DocNo;
        SalesLine."Line No." := LineNoL;
        SalesLine.INSERT;
      UNTIL LineNoL = MaxLineNo;
      //H1511 12.11.14 ARI -------------------------
    END;

    [Test]
    PROCEDURE T37_UpdateStatusCodeOn1SL@1000000009();
    VAR
      WhseLFSalesImportL@1000000013 : Record 50306;
      WhseLFSalesImport2L@1000000014 : Record 50306;
      WhseLFTrackingNoLogL@1000000016 : Record 50316;
      SalesHeaderL@1000000011 : Record 36;
      CustomerL@1000000010 : Record 18;
      Item1L@1000000009 : Record 27;
      Item2L@1000000017 : Record 27;
      SalesLineL@1000000008 : Record 37;
      LogisticStatusHistoryL@1000000007 : Record 80013;
      LogisticStatusHistory2L@1000000006 : Record 80013;
      DHLProactiveLogL@1000000005 : Record 50097;
      DHLProactiveLog2L@1000000004 : Record 50097;
      JobQueueEntryL@1000000003 : Record 472;
      EasyLogImportL@1000000002 : Codeunit 50033;
      FillDatesServiceL@1000000001 : Codeunit 50240;
      LibrarySCML@1000000000 : Codeunit 50210;
      LibrarySalesL@1000000012 : Codeunit 50701;
      WhseLFSalesJobQueueL@1000000015 : Codeunit 50300;
      TrackingNoL@1000000018 : Text[30];
    BEGIN
      //H1980  04.02.15  EHN  +++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(
        SalesHeaderL,
        SalesHeaderL."Document Type"::Order,
        CustomerL."No.");

      //Create two sales lines
      LibrarySCML.CreateItem(Item1L);
      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        Item1L."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      LibrarySCML.CreateItem(Item2L);
      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        Item2L."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      //Create STA
      WhseLFSalesImportL.RESET;
      WhseLFSalesImportL.FINDLAST;
      WhseLFSalesImport2L."Entry No." := WhseLFSalesImportL."Entry No." + 1;
      WhseLFSalesImport2L."Import Timestamp" := CURRENTDATETIME;
      WhseLFSalesImport2L."Record Type" := 'STA';
      WhseLFSalesImport2L."Client Identifier" := 'LF';
      WhseLFSalesImport2L."Customer Order No." := SalesHeaderL."No." + '001';
      WhseLFSalesImport2L."Customer Order No. 2" := SalesHeaderL."No.";
      WhseLFSalesImport2L."Transmission No." := '1';
      WhseLFSalesImport2L."Order Pos. No." := 1;
      WhseLFSalesImport2L."Order Type" := 1;
      WhseLFSalesImport2L."Item No." := Item1L."No.";
      WhseLFSalesImport2L.Quantity := 1;
      WhseLFSalesImport2L."Order Status" := '21';
      WhseLFSalesImport2L."Order Date" := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>');
      WhseLFSalesImport2L.Timestamp := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>') + '-12:00:00';
      WhseLFSalesImport2L.INSERT;

      TrackingNoL := LibraryUtility.GenerateRandomCode(WhseLFTrackingNoLogL.FIELDNO("Tracking No."),
                                                       DATABASE::"Whse. LF Tracking No. Log");
      WhseLFTrackingNoLogL.INIT;
      WhseLFTrackingNoLogL."Sales Import Entry No." := WhseLFSalesImport2L."Entry No.";
      WhseLFTrackingNoLogL."Line No." := 10000;
      WhseLFTrackingNoLogL."Tracking No." := TrackingNoL;
      WhseLFTrackingNoLogL.INSERT;

      // Create DHL Proactive entry
      DHLProactiveLogL.RESET;
      DHLProactiveLogL.FINDLAST;
      DHLProactiveLog2L.INIT;
      DHLProactiveLog2L."Entry No." := DHLProactiveLogL."Entry No." + 1;
      DHLProactiveLog2L.INSERT;
      DHLProactiveLog2L."Account Number" := '62126840595313';
      DHLProactiveLog2L."Time Stamp" := FORMAT(TODAY,0,'<year4>-<month,2>-<day,2>') + ' 12:00:00';
      DHLProactiveLog2L."DHL Shipment" := TrackingNoL;
      DHLProactiveLog2L."Commit Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Delivery Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Event Code" := 'DLVRD';
      DHLProactiveLog2L."RIC Code" := 'ACCPT';
      DHLProactiveLog2L."Sales Order No." := SalesHeaderL."No.";
      DHLProactiveLog2L."Import Timestamp" := CURRENTDATETIME;
      DHLProactiveLog2L."Normal Import" := TRUE;
      DHLProactiveLog2L.MODIFY;

      //Run Code
      //Trigger KAD
      SalesHeaderL."Interruption Checked" := TRUE;
      SalesHeaderL.Kommissionierung := TRUE;
      SalesHeaderL.MODIFY;
      LibrarySalesL.CheckReleaseSalesOrder(SalesHeaderL);

      //Process STA
      COMMIT;
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50300);
      JobQueueEntryL.SETRANGE("Parameter String",'STAPROCESS');
      JobQueueEntryL.FINDFIRST;
      WhseLFSalesJobQueueL.RUN(JobQueueEntryL);

      //Process DHL Log
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50033);
      JobQueueEntryL.SETRANGE("Parameter String",'MANUALIMPORT');
      JobQueueEntryL.FINDFIRST;
      EasyLogImportL.RUN(JobQueueEntryL);

      //Fill Sales Date
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50240);
      JobQueueEntryL.FINDFIRST;
      JobQueueEntryL."Parameter String" := SalesHeaderL."No.";
      FillDatesServiceL.RUN(JobQueueEntryL);

      //Check Results
      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",10000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);

      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",20000);
      Assert.AreNotEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreNotEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" = 0DT,TextHME004);
      //H1980  04.02.15  EHN  ---------------------------------------
    END;

    [Test]
    PROCEDURE T37_UpdateStatusCodeOn2SL1@1000000008();
    VAR
      WhseLFSalesImportL@1000000014 : Record 50306;
      WhseLFSalesImport2L@1000000013 : Record 50306;
      WhseLFTrackingNoLogL@1000000012 : Record 50316;
      SalesHeaderL@1000000011 : Record 36;
      CustomerL@1000000010 : Record 18;
      ItemL@1000000009 : Record 27;
      SalesLineL@1000000008 : Record 37;
      LogisticStatusHistoryL@1000000007 : Record 80013;
      LogisticStatusHistory2L@1000000006 : Record 80013;
      DHLProactiveLogL@1000000005 : Record 50097;
      DHLProactiveLog2L@1000000004 : Record 50097;
      JobQueueEntryL@1000000003 : Record 472;
      EasyLogImportL@1000000002 : Codeunit 50033;
      FillDatesServiceL@1000000001 : Codeunit 50240;
      LibrarySCML@1000000000 : Codeunit 50210;
      LibrarySalesL@1000000016 : Codeunit 50701;
      WhseLFSalesJobQueueL@1000000015 : Codeunit 50300;
      TrackingNo1L@1000000017 : Text[30];
      TrackingNo2L@1000000018 : Text[30];
    BEGIN
      //H1980  04.02.15  EHN  +++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(
        SalesHeaderL,
        SalesHeaderL."Document Type"::Order,
        CustomerL."No.");

      //Create two sales lines
      LibrarySCML.CreateItem(ItemL);
      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      //Create STA
      WhseLFSalesImportL.RESET;
      WhseLFSalesImportL.FINDLAST;
      WhseLFSalesImport2L."Entry No." := WhseLFSalesImportL."Entry No." + 1;
      WhseLFSalesImport2L."Import Timestamp" := CURRENTDATETIME;
      WhseLFSalesImport2L."Record Type" := 'STA';
      WhseLFSalesImport2L."Client Identifier" := 'LF';
      WhseLFSalesImport2L."Customer Order No." := SalesHeaderL."No." + '001';
      WhseLFSalesImport2L."Customer Order No. 2" := SalesHeaderL."No.";
      WhseLFSalesImport2L."Transmission No." := '1';
      WhseLFSalesImport2L."Order Pos. No." := 1;
      WhseLFSalesImport2L."Order Type" := 1;
      WhseLFSalesImport2L."Item No." := ItemL."No.";
      WhseLFSalesImport2L.Quantity := 2;
      WhseLFSalesImport2L."Order Status" := '21';
      WhseLFSalesImport2L."Order Date" := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>');
      WhseLFSalesImport2L.Timestamp := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>') + '-12:00:00';
      WhseLFSalesImport2L.INSERT;

      TrackingNo1L := LibraryUtility.GenerateRandomCode(WhseLFTrackingNoLogL.FIELDNO("Tracking No."),
                                                       DATABASE::"Whse. LF Tracking No. Log");
      WhseLFTrackingNoLogL.INIT;
      WhseLFTrackingNoLogL."Sales Import Entry No." := WhseLFSalesImport2L."Entry No.";
      WhseLFTrackingNoLogL."Line No." := 10000;
      WhseLFTrackingNoLogL."Tracking No." := TrackingNo1L;
      WhseLFTrackingNoLogL.INSERT;

      // Create DHL Proactive entry
      DHLProactiveLogL.RESET;
      DHLProactiveLogL.FINDLAST;
      DHLProactiveLog2L.INIT;
      DHLProactiveLog2L."Entry No." := DHLProactiveLogL."Entry No." + 1;
      DHLProactiveLog2L.INSERT;
      DHLProactiveLog2L."Account Number" := '62126840595313';
      DHLProactiveLog2L."Time Stamp" := FORMAT(TODAY,0,'<year4>-<month,2>-<day,2>') + ' 12:00:00';
      DHLProactiveLog2L."DHL Shipment" := TrackingNo1L;
      DHLProactiveLog2L."Commit Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Delivery Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Event Code" := 'DLVRD';
      DHLProactiveLog2L."RIC Code" := 'ACCPT';
      DHLProactiveLog2L."Sales Order No." := SalesHeaderL."No.";
      DHLProactiveLog2L."Import Timestamp" := CURRENTDATETIME;
      DHLProactiveLog2L."Normal Import" := TRUE;
      DHLProactiveLog2L.MODIFY;

      //Run Code
      //Trigger KAD
      SalesHeaderL."Interruption Checked" := TRUE;
      SalesHeaderL.Kommissionierung := TRUE;
      SalesHeaderL.MODIFY;
      LibrarySalesL.CheckReleaseSalesOrder(SalesHeaderL);

      //Process STA
      COMMIT;
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50300);
      JobQueueEntryL.SETRANGE("Parameter String",'STAPROCESS');
      JobQueueEntryL.FINDFIRST;
      WhseLFSalesJobQueueL.RUN(JobQueueEntryL);

      //Process DHL Log
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50033);
      JobQueueEntryL.SETRANGE("Parameter String",'MANUALIMPORT');
      JobQueueEntryL.FINDFIRST;
      EasyLogImportL.RUN(JobQueueEntryL);

      //Fill Sales Date
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50240);
      JobQueueEntryL.FINDFIRST;
      JobQueueEntryL."Parameter String" := SalesHeaderL."No.";
      FillDatesServiceL.RUN(JobQueueEntryL);

      //Check Results
      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",10000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);

      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",20000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);
      //H1980  04.02.15  EHN  ---------------------------------------
    END;

    [Test]
    PROCEDURE T37_UpdateStatusCodeOn2SL2@1000000012();
    VAR
      WhseLFSalesImportL@1000000014 : Record 50306;
      WhseLFSalesImport2L@1000000013 : Record 50306;
      WhseLFTrackingNoLogL@1000000012 : Record 50316;
      SalesHeaderL@1000000011 : Record 36;
      CustomerL@1000000010 : Record 18;
      ItemL@1000000009 : Record 27;
      SalesLineL@1000000008 : Record 37;
      LogisticStatusHistoryL@1000000007 : Record 80013;
      LogisticStatusHistory2L@1000000006 : Record 80013;
      DHLProactiveLogL@1000000005 : Record 50097;
      DHLProactiveLog2L@1000000004 : Record 50097;
      JobQueueEntryL@1000000003 : Record 472;
      EasyLogImportL@1000000002 : Codeunit 50033;
      FillDatesServiceL@1000000001 : Codeunit 50240;
      LibrarySCML@1000000000 : Codeunit 50210;
      LibrarySalesL@1000000016 : Codeunit 50701;
      WhseLFSalesJobQueueL@1000000015 : Codeunit 50300;
      TrackingNo1L@1000000017 : Text[30];
      TrackingNo2L@1000000018 : Text[30];
    BEGIN
      //H1980  04.02.15  EHN  +++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(
        SalesHeaderL,
        SalesHeaderL."Document Type"::Order,
        CustomerL."No.");

      //Create two sales lines
      LibrarySCML.CreateItem(ItemL);
      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      //Create STA
      WhseLFSalesImportL.RESET;
      WhseLFSalesImportL.FINDLAST;
      WhseLFSalesImport2L."Entry No." := WhseLFSalesImportL."Entry No." + 1;
      WhseLFSalesImport2L."Import Timestamp" := CURRENTDATETIME;
      WhseLFSalesImport2L."Record Type" := 'STA';
      WhseLFSalesImport2L."Client Identifier" := 'LF';
      WhseLFSalesImport2L."Customer Order No." := SalesHeaderL."No." + '001';
      WhseLFSalesImport2L."Customer Order No. 2" := SalesHeaderL."No.";
      WhseLFSalesImport2L."Transmission No." := '1';
      WhseLFSalesImport2L."Order Pos. No." := 1;
      WhseLFSalesImport2L."Order Type" := 1;
      WhseLFSalesImport2L."Item No." := ItemL."No.";
      WhseLFSalesImport2L.Quantity := 2;
      WhseLFSalesImport2L."Order Status" := '21';
      WhseLFSalesImport2L."Order Date" := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>');
      WhseLFSalesImport2L.Timestamp := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>') + '-12:00:00';
      WhseLFSalesImport2L.INSERT;

      TrackingNo1L := LibraryUtility.GenerateRandomCode(WhseLFTrackingNoLogL.FIELDNO("Tracking No."),
                                                       DATABASE::"Whse. LF Tracking No. Log");
      TrackingNo2L := LibraryUtility.GenerateRandomCode(WhseLFTrackingNoLogL.FIELDNO("Tracking No."),
                                                       DATABASE::"Whse. LF Tracking No. Log");
      WhseLFTrackingNoLogL.INIT;
      WhseLFTrackingNoLogL."Sales Import Entry No." := WhseLFSalesImport2L."Entry No.";
      WhseLFTrackingNoLogL."Line No." := 10000;
      WhseLFTrackingNoLogL."Tracking No." := TrackingNo1L;
      WhseLFTrackingNoLogL.INSERT;
      WhseLFTrackingNoLogL.INIT;
      WhseLFTrackingNoLogL."Sales Import Entry No." := WhseLFSalesImport2L."Entry No.";
      WhseLFTrackingNoLogL."Line No." := 20000;
      WhseLFTrackingNoLogL."Tracking No." := TrackingNo2L;
      WhseLFTrackingNoLogL.INSERT;

      // Create DHL Proactive entry
      DHLProactiveLogL.RESET;
      DHLProactiveLogL.FINDLAST;
      DHLProactiveLog2L.INIT;
      DHLProactiveLog2L."Entry No." := DHLProactiveLogL."Entry No." + 1;
      DHLProactiveLog2L.INSERT;
      DHLProactiveLog2L."Account Number" := '62126840595313';
      DHLProactiveLog2L."Time Stamp" := FORMAT(TODAY,0,'<year4>-<month,2>-<day,2>') + ' 12:00:00';
      DHLProactiveLog2L."DHL Shipment" := TrackingNo1L;
      DHLProactiveLog2L."Commit Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Delivery Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Event Code" := 'DLVRD';
      DHLProactiveLog2L."RIC Code" := 'ACCPT';
      DHLProactiveLog2L."Sales Order No." := SalesHeaderL."No.";
      DHLProactiveLog2L."Import Timestamp" := CURRENTDATETIME;
      DHLProactiveLog2L."Normal Import" := TRUE;
      DHLProactiveLog2L.MODIFY;

      DHLProactiveLogL.RESET;
      DHLProactiveLogL.FINDLAST;
      DHLProactiveLog2L.INIT;
      DHLProactiveLog2L."Entry No." := DHLProactiveLogL."Entry No." + 1;
      DHLProactiveLog2L.INSERT;
      DHLProactiveLog2L."Account Number" := '62126840595313';
      DHLProactiveLog2L."Time Stamp" := FORMAT(TODAY,0,'<year4>-<month,2>-<day,2>') + ' 12:00:00';
      DHLProactiveLog2L."DHL Shipment" := TrackingNo2L;
      DHLProactiveLog2L."Commit Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Delivery Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Event Code" := 'DLVRD';
      DHLProactiveLog2L."RIC Code" := 'ACCPT';
      DHLProactiveLog2L."Sales Order No." := SalesHeaderL."No.";
      DHLProactiveLog2L."Import Timestamp" := CURRENTDATETIME;
      DHLProactiveLog2L."Normal Import" := TRUE;
      DHLProactiveLog2L.MODIFY;

      //Run Code
      //Trigger KAD
      SalesHeaderL."Interruption Checked" := TRUE;
      SalesHeaderL.Kommissionierung := TRUE;
      SalesHeaderL.MODIFY;
      LibrarySalesL.CheckReleaseSalesOrder(SalesHeaderL);

      //Process STA
      COMMIT;
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50300);
      JobQueueEntryL.SETRANGE("Parameter String",'STAPROCESS');
      JobQueueEntryL.FINDFIRST;
      WhseLFSalesJobQueueL.RUN(JobQueueEntryL);

      //Process DHL Log
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50033);
      JobQueueEntryL.SETRANGE("Parameter String",'MANUALIMPORT');
      JobQueueEntryL.FINDFIRST;
      EasyLogImportL.RUN(JobQueueEntryL);

      //Fill Sales Date
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50240);
      JobQueueEntryL.FINDFIRST;
      JobQueueEntryL."Parameter String" := SalesHeaderL."No.";
      FillDatesServiceL.RUN(JobQueueEntryL);

      //Check Results
      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",10000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);

      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",20000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);
      //H1980  04.02.15  EHN  ---------------------------------------
    END;

    [Test]
    PROCEDURE T37_UpdateStatusCodeOn2SL3@1000000013();
    VAR
      WhseLFSalesImportL@1000000014 : Record 50306;
      WhseLFSalesImport2L@1000000013 : Record 50306;
      WhseLFTrackingNoLogL@1000000012 : Record 50316;
      SalesHeaderL@1000000011 : Record 36;
      CustomerL@1000000010 : Record 18;
      ItemL@1000000009 : Record 27;
      SalesLineL@1000000008 : Record 37;
      LogisticStatusHistoryL@1000000007 : Record 80013;
      LogisticStatusHistory2L@1000000006 : Record 80013;
      DHLProactiveLogL@1000000005 : Record 50097;
      DHLProactiveLog2L@1000000004 : Record 50097;
      JobQueueEntryL@1000000003 : Record 472;
      EasyLogImportL@1000000002 : Codeunit 50033;
      FillDatesServiceL@1000000001 : Codeunit 50240;
      LibrarySCML@1000000000 : Codeunit 50210;
      LibrarySalesL@1000000016 : Codeunit 50701;
      WhseLFSalesJobQueueL@1000000015 : Codeunit 50300;
      TrackingNo1L@1000000017 : Text[30];
      TrackingNo2L@1000000018 : Text[30];
      TrackingNo3L@1000000020 : Text[30];
    BEGIN
      //H1980  04.02.15  EHN  +++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(
        SalesHeaderL,
        SalesHeaderL."Document Type"::Order,
        CustomerL."No.");

      //Create two sales lines
      LibrarySCML.CreateItem(ItemL);
      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      //Create STA
      WhseLFSalesImportL.RESET;
      WhseLFSalesImportL.FINDLAST;
      WhseLFSalesImport2L."Entry No." := WhseLFSalesImportL."Entry No." + 1;
      WhseLFSalesImport2L."Import Timestamp" := CURRENTDATETIME;
      WhseLFSalesImport2L."Record Type" := 'STA';
      WhseLFSalesImport2L."Client Identifier" := 'LF';
      WhseLFSalesImport2L."Customer Order No." := SalesHeaderL."No." + '001';
      WhseLFSalesImport2L."Customer Order No. 2" := SalesHeaderL."No.";
      WhseLFSalesImport2L."Transmission No." := '1';
      WhseLFSalesImport2L."Order Pos. No." := 1;
      WhseLFSalesImport2L."Order Type" := 1;
      WhseLFSalesImport2L."Item No." := ItemL."No.";
      WhseLFSalesImport2L.Quantity := 2;
      WhseLFSalesImport2L."Order Status" := '21';
      WhseLFSalesImport2L."Order Date" := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>');
      WhseLFSalesImport2L.Timestamp := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>') + '-12:00:00';
      WhseLFSalesImport2L.INSERT;

      TrackingNo1L := LibraryUtility.GenerateRandomCode(WhseLFTrackingNoLogL.FIELDNO("Tracking No."),
                                                       DATABASE::"Whse. LF Tracking No. Log");
      TrackingNo2L := LibraryUtility.GenerateRandomCode(WhseLFTrackingNoLogL.FIELDNO("Tracking No."),
                                                       DATABASE::"Whse. LF Tracking No. Log");
      TrackingNo3L := LibraryUtility.GenerateRandomCode(WhseLFTrackingNoLogL.FIELDNO("Tracking No."),
                                                       DATABASE::"Whse. LF Tracking No. Log");

      WhseLFTrackingNoLogL.INIT;
      WhseLFTrackingNoLogL."Sales Import Entry No." := WhseLFSalesImport2L."Entry No.";
      WhseLFTrackingNoLogL."Line No." := 10000;
      WhseLFTrackingNoLogL."Tracking No." := TrackingNo1L;
      WhseLFTrackingNoLogL.INSERT;
      WhseLFTrackingNoLogL.INIT;
      WhseLFTrackingNoLogL."Sales Import Entry No." := WhseLFSalesImport2L."Entry No.";
      WhseLFTrackingNoLogL."Line No." := 20000;
      WhseLFTrackingNoLogL."Tracking No." := TrackingNo2L;
      WhseLFTrackingNoLogL.INSERT;
      WhseLFTrackingNoLogL.INIT;
      WhseLFTrackingNoLogL."Sales Import Entry No." := WhseLFSalesImport2L."Entry No.";
      WhseLFTrackingNoLogL."Line No." := 30000;
      WhseLFTrackingNoLogL."Tracking No." := TrackingNo3L;
      WhseLFTrackingNoLogL.INSERT;

      // Create DHL Proactive entry
      DHLProactiveLogL.RESET;
      DHLProactiveLogL.FINDLAST;
      DHLProactiveLog2L.INIT;
      DHLProactiveLog2L."Entry No." := DHLProactiveLogL."Entry No." + 1;
      DHLProactiveLog2L.INSERT;
      DHLProactiveLog2L."Account Number" := '62126840595313';
      DHLProactiveLog2L."Time Stamp" := FORMAT(TODAY,0,'<year4>-<month,2>-<day,2>') + ' 12:00:00';
      DHLProactiveLog2L."DHL Shipment" := TrackingNo1L;
      DHLProactiveLog2L."Commit Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Delivery Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Event Code" := 'DLVRD';
      DHLProactiveLog2L."RIC Code" := 'ACCPT';
      DHLProactiveLog2L."Sales Order No." := SalesHeaderL."No.";
      DHLProactiveLog2L."Import Timestamp" := CURRENTDATETIME;
      DHLProactiveLog2L."Normal Import" := TRUE;
      DHLProactiveLog2L.MODIFY;

      //Run Code
      //Trigger KAD
      SalesHeaderL."Interruption Checked" := TRUE;
      SalesHeaderL.Kommissionierung := TRUE;
      SalesHeaderL.MODIFY;
      LibrarySalesL.CheckReleaseSalesOrder(SalesHeaderL);

      //Process STA
      COMMIT;
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50300);
      JobQueueEntryL.SETRANGE("Parameter String",'STAPROCESS');
      JobQueueEntryL.FINDFIRST;
      WhseLFSalesJobQueueL.RUN(JobQueueEntryL);

      //Process DHL Log
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50033);
      JobQueueEntryL.SETRANGE("Parameter String",'MANUALIMPORT');
      JobQueueEntryL.FINDFIRST;
      EasyLogImportL.RUN(JobQueueEntryL);

      //Fill Sales Date
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50240);
      JobQueueEntryL.FINDFIRST;
      JobQueueEntryL."Parameter String" := SalesHeaderL."No.";
      FillDatesServiceL.RUN(JobQueueEntryL);

      //Check Results
      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",10000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);

      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",20000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);
      //H1980  04.02.15  EHN  ---------------------------------------
    END;

    [Test]
    PROCEDURE T37_UpdateStatusCodeOn3SL@1000000011();
    VAR
      WhseLFSalesImportL@1000000014 : Record 50306;
      WhseLFSalesImport2L@1000000013 : Record 50306;
      WhseLFTrackingNoLogL@1000000012 : Record 50316;
      SalesHeaderL@1000000011 : Record 36;
      CustomerL@1000000010 : Record 18;
      ItemL@1000000009 : Record 27;
      SalesLineL@1000000008 : Record 37;
      LogisticStatusHistoryL@1000000007 : Record 80013;
      LogisticStatusHistory2L@1000000006 : Record 80013;
      DHLProactiveLogL@1000000005 : Record 50097;
      DHLProactiveLog2L@1000000004 : Record 50097;
      JobQueueEntryL@1000000003 : Record 472;
      EasyLogImportL@1000000002 : Codeunit 50033;
      FillDatesServiceL@1000000001 : Codeunit 50240;
      LibrarySCML@1000000000 : Codeunit 50210;
      LibrarySalesL@1000000016 : Codeunit 50701;
      WhseLFSalesJobQueueL@1000000015 : Codeunit 50300;
      TrackingNo1L@1000000017 : Text[30];
      TrackingNo2L@1000000018 : Text[30];
    BEGIN
      //H1980  04.02.15  EHN  +++++++++++++++++++++++++++++++++++++++
      //Initalize and Prepare
      LibrarySCML.CreateCustomer(CustomerL);
      LibrarySCML.CreateSalesHeader(
        SalesHeaderL,
        SalesHeaderL."Document Type"::Order,
        CustomerL."No.");

      //Create 3 sales lines
      LibrarySCML.CreateItem(ItemL);
      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      LibrarySCML.CreateSalesLine(
        SalesHeaderL,
        SalesLineL,
        SalesLineL.Type::Item,
        ItemL."No.",
        1);

      SalesLineL.VALIDATE("Purchasing Code",'GER-14');
      SalesLineL.MODIFY;

      //Create STA
      WhseLFSalesImportL.RESET;
      WhseLFSalesImportL.FINDLAST;
      WhseLFSalesImport2L."Entry No." := WhseLFSalesImportL."Entry No." + 1;
      WhseLFSalesImport2L."Import Timestamp" := CURRENTDATETIME;
      WhseLFSalesImport2L."Record Type" := 'STA';
      WhseLFSalesImport2L."Client Identifier" := 'LF';
      WhseLFSalesImport2L."Customer Order No." := SalesHeaderL."No." + '001';
      WhseLFSalesImport2L."Customer Order No. 2" := SalesHeaderL."No.";
      WhseLFSalesImport2L."Transmission No." := '1';
      WhseLFSalesImport2L."Order Pos. No." := 1;
      WhseLFSalesImport2L."Order Type" := 1;
      WhseLFSalesImport2L."Item No." := ItemL."No.";
      WhseLFSalesImport2L.Quantity := 3;
      WhseLFSalesImport2L."Order Status" := '21';
      WhseLFSalesImport2L."Order Date" := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>');
      WhseLFSalesImport2L.Timestamp := FORMAT(TODAY,0,'<day,2>.<month,2>.<year4>') + '-12:00:00';
      WhseLFSalesImport2L.INSERT;

      TrackingNo1L := LibraryUtility.GenerateRandomCode(WhseLFTrackingNoLogL.FIELDNO("Tracking No."),
                                                       DATABASE::"Whse. LF Tracking No. Log");
      WhseLFTrackingNoLogL.INIT;
      WhseLFTrackingNoLogL."Sales Import Entry No." := WhseLFSalesImport2L."Entry No.";
      WhseLFTrackingNoLogL."Line No." := 10000;
      WhseLFTrackingNoLogL."Tracking No." := TrackingNo1L;
      WhseLFTrackingNoLogL.INSERT;

      // Create DHL Proactive entry
      DHLProactiveLogL.RESET;
      DHLProactiveLogL.FINDLAST;
      DHLProactiveLog2L.INIT;
      DHLProactiveLog2L."Entry No." := DHLProactiveLogL."Entry No." + 1;
      DHLProactiveLog2L.INSERT;
      DHLProactiveLog2L."Account Number" := '62126840595313';
      DHLProactiveLog2L."Time Stamp" := FORMAT(TODAY,0,'<year4>-<month,2>-<day,2>') + ' 12:00:00';
      DHLProactiveLog2L."DHL Shipment" := TrackingNo1L;
      DHLProactiveLog2L."Commit Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Delivery Date" := FORMAT(TODAY,0,'<year4><month,2><day,2>');
      DHLProactiveLog2L."Event Code" := 'DLVRD';
      DHLProactiveLog2L."RIC Code" := 'ACCPT';
      DHLProactiveLog2L."Sales Order No." := SalesHeaderL."No.";
      DHLProactiveLog2L."Import Timestamp" := CURRENTDATETIME;
      DHLProactiveLog2L."Normal Import" := TRUE;
      DHLProactiveLog2L.MODIFY;

      //Run Code
      //Trigger KAD
      SalesHeaderL."Interruption Checked" := TRUE;
      SalesHeaderL.Kommissionierung := TRUE;
      SalesHeaderL.MODIFY;
      LibrarySalesL.CheckReleaseSalesOrder(SalesHeaderL);

      //Process STA
      COMMIT;
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50300);
      JobQueueEntryL.SETRANGE("Parameter String",'STAPROCESS');
      JobQueueEntryL.FINDFIRST;
      WhseLFSalesJobQueueL.RUN(JobQueueEntryL);

      //Process DHL Log
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50033);
      JobQueueEntryL.SETRANGE("Parameter String",'MANUALIMPORT');
      JobQueueEntryL.FINDFIRST;
      EasyLogImportL.RUN(JobQueueEntryL);

      //Fill Sales Date
      JobQueueEntryL.RESET;
      JobQueueEntryL.SETRANGE("Object Type to Run",JobQueueEntryL."Object Type to Run"::Codeunit);
      JobQueueEntryL.SETRANGE("Object ID to Run",50240);
      JobQueueEntryL.FINDFIRST;
      JobQueueEntryL."Parameter String" := SalesHeaderL."No.";
      FillDatesServiceL.RUN(JobQueueEntryL);

      //Check Results
      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",10000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);

      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",20000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);

      SalesLineL.GET(SalesHeaderL."Document Type",SalesHeaderL."No.",30000);
      Assert.AreEqual('DLVRD',SalesLineL."Status Event Code",
        STRSUBSTNO(TextAssertAreEqual,SalesLineL."Status Event Code",'DLVRD'));

      Assert.IsTrue(SalesLineL."Actual Delivery Date" <> 0DT,TextHME003);

      //H1980  04.02.15  EHN  ---------------------------------------
    END;

    BEGIN
    {

      _______ Unit Test Object Range _______________
       ID:        1 .. 999         - MS Basic
       ID:     1000 .. 49999       - MS Advanced
       ID:    50000 .. 99999       - Custom
       ID:   100000 .. 9999999     - External
       ID: 10000000 .. 2000009999  - Special
      ______________________________________________

      +--------------------------------------------+
      |                                            |
      |                  Home24                    |
      |       Internal Customizing by NAV-Team     |
      |                                            |
      +--------------------------------------------+

      Project No. Date      Shortcut  Description
      _____________________________________________
      H1621       07.10.14  ABR       Created
      H1754       03.11.14  ABR       Adjust conditions to create Return KAD,NEWFUNCTION
      H1200       02.12.14  EHN       Ship Sales Returns via Return Transit location
      H1511       12.11.14  ARI       MP2: Use MP Item Charges in Customer Complaint Process if based on an MP Item - New Functions added
      H1980       04.02.15  EHN       Set ADD for LF lines without tracking information
    }
    END.
  }
}

